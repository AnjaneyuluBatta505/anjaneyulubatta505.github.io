{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn fullstack web-development \u00b6 Programming \u00b6 Frameworks \u00b6 Code Version Control \u00b6 Tools \u00b6","title":"Home"},{"location":"#learn-fullstack-web-development","text":"","title":"Learn fullstack web-development"},{"location":"#programming","text":"","title":"Programming"},{"location":"#frameworks","text":"","title":"Frameworks"},{"location":"#code-version-control","text":"","title":"Code Version Control"},{"location":"#tools","text":"","title":"Tools"},{"location":"about/","text":"About Anjaneyulu Batta \u00b6 Hello! My name is Anjaneyulu Batta You can call me Anji . I consider myself to be a pretty good Software Engineer. As a professional I still fuck up and that's okay. In my free time, I contribute to open source projects and communities. You can check it on GitHub Stackoverflow Youtube You can follow me on Twitter Buy me a coffee on Patreon if you find learnbatta.com is useful and you want to encourage me to continue sharing my knowledge and experience.","title":"About"},{"location":"about/#about-anjaneyulu-batta","text":"Hello! My name is Anjaneyulu Batta You can call me Anji . I consider myself to be a pretty good Software Engineer. As a professional I still fuck up and that's okay. In my free time, I contribute to open source projects and communities. You can check it on GitHub Stackoverflow Youtube You can follow me on Twitter Buy me a coffee on Patreon if you find learnbatta.com is useful and you want to encourage me to continue sharing my knowledge and experience.","title":"About Anjaneyulu Batta"},{"location":"blog/","text":"The learnBATTA Blog \u00b6 Archive - 2023 \u00b6 Getting started with pytest Debugging javascript app in browser Archive - 2022 \u00b6 MySQL #1553 \u2013 Cannot drop index Using sqlalchemy with FastAPI Alembic DDL operations SOLID Principles in Python Serverless Framework Custom Docker Containers For AWS Lambda Serverless add AWS lambda to an existing VPC access host network in localstack lambda container Localstack with docker compose Archive - 2021 \u00b6 Getting started with Alembic Getting started with FastAPI javascript wait for asynchronous callbacks with ajax RabbitMQ for beginners scheduled jobs with kubernetes cronjobs How to re-order apps and models in django admin? Archive - 2020 \u00b6 django data migrations best practices deep copy vs shallow copy in python Working with arrays in python Working with enum in python Sending images in django emails Best screen recorder for ubuntu django built in template tags Archive - 2019 \u00b6 django forms and it's usage kubernetes django app deployment django forms getting started docker compose for django golang struct convert unix timestamp to date string django model CRUD operations running flask app inside docker django create table from model django database connectivity django template using if...elif...else Django template for loop django pass data from view to template renderers in Django Rest Framework parsers in Django Rest Framework mysql basics in ubuntu routers in Django Rest Framework django send email using mailgun api viewsets in Django Rest Framework permissions in Django Rest Framework authentication in Django Rest Framework advanced class based views in Django Rest Framework class based views in Django Rest Framework python exception handling python reading and writing files tmux working with split terminal python writing modules and packages python staticmethod, classmethod and instancemethod how to add image in select options html django admin custom form usage Archive - 2018 \u00b6 Python working with inheritance - oop's how to add custom views to django admin Python method overloading ' enter ' and ' exit ' context managers in python model serializers in Django Rest Framework Python object oriented programming working with select_related in django using custom widgets in django Allow remote connections to PostgreSQL serializers in Django Rest Framework how to add swap memory in ubuntu working with supervisor on ubuntu django static files usage how to use templates in django usage of group_by and string_agg in django, postgreSQL getting started with Django Rest Framework Introduction to RESTful api's how to upload python package to pypi getting started with django first app Python working with for loop Python working with if ... elif ... else conditions understanding the request-response lifecycle in Django django custom path converters working with xls and xlsx files in python django image and file upload using ajax working with vim editor in ubuntu Python working with lists Python working with frozenset data type Python working with tuple data type Python working with strings python polymorphism Python working with while loop Python working with functions Python working with dict data type Python working with classes and objects Python working with set data type introduction to javascript programming django html to pdf using pdfkit and wkhtmltopdf understanding of HTTP protocol understanding Model View Controller(MVC) in Django understanding django project structure usage of property decorator in python deploy django app with apache server on ubuntu Python working with numbers Python working with operators Python working with boolean data type Python Variables and data types Python Introduction to programming Brief introduction to computers and programming setting up django development environment Archive - 2017 \u00b6 Introduction to django web framework using custom user model in django why tuple is faster than list in python ? How to install sublime text on Ubuntu ( Linux) How to install python virtualenv? How to Install pip in Ubuntu (Linux) install pip on windows how to install postgresql on windows how to install python on windows reading and writing csv files using python python memory management - memory allocation and garbage collection signup or sign-in using facebook to django application signup or sign-in using google to django application generators and its usage in python understanding of python slice notation Basic understanding of class in python how to use *args and **kwargs in python iterators in python","title":"Blog"},{"location":"blog/#the-learnbatta-blog","text":"","title":"The learnBATTA Blog"},{"location":"blog/#archive-2023","text":"Getting started with pytest Debugging javascript app in browser","title":"Archive - 2023"},{"location":"blog/#archive-2022","text":"MySQL #1553 \u2013 Cannot drop index Using sqlalchemy with FastAPI Alembic DDL operations SOLID Principles in Python Serverless Framework Custom Docker Containers For AWS Lambda Serverless add AWS lambda to an existing VPC access host network in localstack lambda container Localstack with docker compose","title":"Archive - 2022"},{"location":"blog/#archive-2021","text":"Getting started with Alembic Getting started with FastAPI javascript wait for asynchronous callbacks with ajax RabbitMQ for beginners scheduled jobs with kubernetes cronjobs How to re-order apps and models in django admin?","title":"Archive - 2021"},{"location":"blog/#archive-2020","text":"django data migrations best practices deep copy vs shallow copy in python Working with arrays in python Working with enum in python Sending images in django emails Best screen recorder for ubuntu django built in template tags","title":"Archive - 2020"},{"location":"blog/#archive-2019","text":"django forms and it's usage kubernetes django app deployment django forms getting started docker compose for django golang struct convert unix timestamp to date string django model CRUD operations running flask app inside docker django create table from model django database connectivity django template using if...elif...else Django template for loop django pass data from view to template renderers in Django Rest Framework parsers in Django Rest Framework mysql basics in ubuntu routers in Django Rest Framework django send email using mailgun api viewsets in Django Rest Framework permissions in Django Rest Framework authentication in Django Rest Framework advanced class based views in Django Rest Framework class based views in Django Rest Framework python exception handling python reading and writing files tmux working with split terminal python writing modules and packages python staticmethod, classmethod and instancemethod how to add image in select options html django admin custom form usage","title":"Archive - 2019"},{"location":"blog/#archive-2018","text":"Python working with inheritance - oop's how to add custom views to django admin Python method overloading ' enter ' and ' exit ' context managers in python model serializers in Django Rest Framework Python object oriented programming working with select_related in django using custom widgets in django Allow remote connections to PostgreSQL serializers in Django Rest Framework how to add swap memory in ubuntu working with supervisor on ubuntu django static files usage how to use templates in django usage of group_by and string_agg in django, postgreSQL getting started with Django Rest Framework Introduction to RESTful api's how to upload python package to pypi getting started with django first app Python working with for loop Python working with if ... elif ... else conditions understanding the request-response lifecycle in Django django custom path converters working with xls and xlsx files in python django image and file upload using ajax working with vim editor in ubuntu Python working with lists Python working with frozenset data type Python working with tuple data type Python working with strings python polymorphism Python working with while loop Python working with functions Python working with dict data type Python working with classes and objects Python working with set data type introduction to javascript programming django html to pdf using pdfkit and wkhtmltopdf understanding of HTTP protocol understanding Model View Controller(MVC) in Django understanding django project structure usage of property decorator in python deploy django app with apache server on ubuntu Python working with numbers Python working with operators Python working with boolean data type Python Variables and data types Python Introduction to programming Brief introduction to computers and programming setting up django development environment","title":"Archive - 2018"},{"location":"blog/#archive-2017","text":"Introduction to django web framework using custom user model in django why tuple is faster than list in python ? How to install sublime text on Ubuntu ( Linux) How to install python virtualenv? How to Install pip in Ubuntu (Linux) install pip on windows how to install postgresql on windows how to install python on windows reading and writing csv files using python python memory management - memory allocation and garbage collection signup or sign-in using facebook to django application signup or sign-in using google to django application generators and its usage in python understanding of python slice notation Basic understanding of class in python how to use *args and **kwargs in python iterators in python","title":"Archive - 2017"},{"location":"frameworks/","text":"","title":"Frameworks"},{"location":"privacy-policy/","text":"Privacy Policy \u00b6 Introduction \u00b6 By using site \"learnbatta.com\" you are agreed to the terms of service, conditions and privacy policy of the site. This page informs you of our policies regarding the collection, use and disclosure of Personal Information I receive from users of the Site. I use your Personal Information only for providing and improving the Site. By using the Site, you agree to the collection and use of information in accordance with this policy. Information Collection And Use \u00b6 While using our Site, I may ask you to provide us with certain personally identifiable information that can be used to contact or identify you. Personally identifiable information may include, but is not limited to your name (\"Personal Information\"). Log Data \u00b6 In addition, I may use third party services such as Google Analytics that collect, monitor and analyze the website activity. The information in the log files include: Internet Protocol addresses (IP) Types of browser Internet Service Provider (ISP) Date and time stamp Referring and exit pages Number of clicks Communications \u00b6 I may use your Personal Information to contact you with newsletters, marketing or promotional materials and other information to enhance your experience of accessability. Cookies \u00b6 Cookies are files with small amount of data, which may include an anonymous unique identifier. Cookies are sent to your browser from a web site and stored on your computer's hard drive. Like many sites, I use \"cookies\" to collect information. You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Site. Security \u00b6 The security of your Personal Information is important to us, but remember that no method of transmission over the Internet, or method of electronic storage, is 100% secure. While I strive to use commercially acceptable means to protect your Personal Information, I cannot guarantee its absolute security. Changes To This Privacy Policy \u00b6 I reserve the right to update or change our Privacy Policy at any time and you should check this Privacy Policy periodically. Your continued use of the Service after I post any modifications to the Privacy Policy on this page will constitute your acknowledgment of the modifications and your consent to abide and be bound by the modified Privacy Policy. If I make any material changes to this Privacy Policy, I will not notify you either through the email address you have provided us, or by placing a prominent notice on our website. Advertisements \u00b6 I allow third-party companies to serve ads and/or collect certain anonymous information when you visit our web site. These companies may use non-personally identifiable information (e.g., click stream information, browser type, time and date, subject of advertisements clicked or scrolled over) during your visits to this and other Web sites in order to provide advertisements about goods and services likely to be of greater interest to you. These companies typically use a cookie or third party web beacon to collect this information. Affiliate Disclosure \u00b6 A third party affiliate marketing network, uses cookies to help make sure I get a commission when you buy a product after clicking on a link or ad banner that takes you to the site of one of their merchants. There will not be any price changes to the products you will buy. Third party websites may include amazon, flipcart, etc(any other). Contact Us \u00b6 If you have any questions about this Privacy Policy, please contact us at anjaneyulu.batta505@gmail.com . I will try to respond as soon as possible.","title":"Privacy Policy"},{"location":"privacy-policy/#privacy-policy","text":"","title":"Privacy Policy"},{"location":"privacy-policy/#introduction","text":"By using site \"learnbatta.com\" you are agreed to the terms of service, conditions and privacy policy of the site. This page informs you of our policies regarding the collection, use and disclosure of Personal Information I receive from users of the Site. I use your Personal Information only for providing and improving the Site. By using the Site, you agree to the collection and use of information in accordance with this policy.","title":"Introduction"},{"location":"privacy-policy/#information-collection-and-use","text":"While using our Site, I may ask you to provide us with certain personally identifiable information that can be used to contact or identify you. Personally identifiable information may include, but is not limited to your name (\"Personal Information\").","title":"Information Collection And Use"},{"location":"privacy-policy/#log-data","text":"In addition, I may use third party services such as Google Analytics that collect, monitor and analyze the website activity. The information in the log files include: Internet Protocol addresses (IP) Types of browser Internet Service Provider (ISP) Date and time stamp Referring and exit pages Number of clicks","title":"Log Data"},{"location":"privacy-policy/#communications","text":"I may use your Personal Information to contact you with newsletters, marketing or promotional materials and other information to enhance your experience of accessability.","title":"Communications"},{"location":"privacy-policy/#cookies","text":"Cookies are files with small amount of data, which may include an anonymous unique identifier. Cookies are sent to your browser from a web site and stored on your computer's hard drive. Like many sites, I use \"cookies\" to collect information. You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Site.","title":"Cookies"},{"location":"privacy-policy/#security","text":"The security of your Personal Information is important to us, but remember that no method of transmission over the Internet, or method of electronic storage, is 100% secure. While I strive to use commercially acceptable means to protect your Personal Information, I cannot guarantee its absolute security.","title":"Security"},{"location":"privacy-policy/#changes-to-this-privacy-policy","text":"I reserve the right to update or change our Privacy Policy at any time and you should check this Privacy Policy periodically. Your continued use of the Service after I post any modifications to the Privacy Policy on this page will constitute your acknowledgment of the modifications and your consent to abide and be bound by the modified Privacy Policy. If I make any material changes to this Privacy Policy, I will not notify you either through the email address you have provided us, or by placing a prominent notice on our website.","title":"Changes To This Privacy Policy"},{"location":"privacy-policy/#advertisements","text":"I allow third-party companies to serve ads and/or collect certain anonymous information when you visit our web site. These companies may use non-personally identifiable information (e.g., click stream information, browser type, time and date, subject of advertisements clicked or scrolled over) during your visits to this and other Web sites in order to provide advertisements about goods and services likely to be of greater interest to you. These companies typically use a cookie or third party web beacon to collect this information.","title":"Advertisements"},{"location":"privacy-policy/#affiliate-disclosure","text":"A third party affiliate marketing network, uses cookies to help make sure I get a commission when you buy a product after clicking on a link or ad banner that takes you to the site of one of their merchants. There will not be any price changes to the products you will buy. Third party websites may include amazon, flipcart, etc(any other).","title":"Affiliate Disclosure"},{"location":"privacy-policy/#contact-us","text":"If you have any questions about this Privacy Policy, please contact us at anjaneyulu.batta505@gmail.com . I will try to respond as soon as possible.","title":"Contact Us"},{"location":"programming/","text":"","title":"Programming"},{"location":"terms-of-service/","text":"Terms of service \u00b6 All content provided on \"learnbatta.com\" is for informational purposes only. \"learnbatta.com\" makes no representations as to the accuracy or completeness of any information on this site or found by following any link on this site. \"learnbatta.com\" will not be liable for any errors or omissions in this information nor for the availability of this information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information. These terms and conditions of use are subject to change at any time and without notice.","title":"Terms of service"},{"location":"terms-of-service/#terms-of-service","text":"All content provided on \"learnbatta.com\" is for informational purposes only. \"learnbatta.com\" makes no representations as to the accuracy or completeness of any information on this site or found by following any link on this site. \"learnbatta.com\" will not be liable for any errors or omissions in this information nor for the availability of this information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information. These terms and conditions of use are subject to change at any time and without notice.","title":"Terms of service"},{"location":"blog/__enter__-and-__exit__-context-managers-in-python-90/","text":"enter and exit context managers in python \u00b6 __enter__ and __exit__ are built in methods in python. __enter__ and __exit__ methods are also called as context manager special methods in python. You may come up with the question \"what is a context manager ?\". A context manager is a manager which has the ability to make avail the data withing the context or within a block of code and destroy it when it is used. We implement context manager functionality using with keyword in python programming. Why do we use \"with\" keyword in python ? \u00b6 \"with\" keyword is super awesome trick to implement resource management patterns. Resources many be one of \"files\", \"locks\", \"network connections\", etc. Let's see how to work with keyword \"with\" in python. # file resource management without using context managers file = open ( 'sample.txt' , 'w' ) try : file . write ( 'Python is super awesome!' ) finally : file . close () # file resource management without using context managers with open ( 'sample.txt' , 'w' ) as file : file . write ( 'Python is super awesome!' ) In the above code, In the first case we have opened a text file named \"sample.txt\" and wrote some text in it after we closed the file. But in the second case we have implemented the same functionality by using keyword \"with\". In the first case we have managed opening and closing of the resource file. In the second case (i.e using \"with\" keyword) the resource management handled automatically. Python simplified the syntax for first use case scenario with context managers using keyword \"with\". It is a reusable code pattern. You may arise a question \"how the closed automatically ?\". Actually nothing is automated in any software/program unless we do. If we see the internal implementation of the \"open\" keyword it looks like below. import io class open ( object ): def __init__ ( self , file_name , mode = 'r' ): print ( '__init__ called' ) self . file_name = file_name self . mode = mode def __enter__ ( self ): print ( '__enter__ called' ) self . file = io . open ( self . file_name , self . mode ) return self . file def __exit__ ( self , exc_type , exc_value , traceback ): print ( '__exit__ called' ) self . file . close () # lets test it with open ( 'sample.txt' , 'w' ) as f : f . write ( 'hello' ) # output # __init__ called # __enter__ called # __exit__ called In above code we have successfully replicated the working of the \"open\" keyword in python when it is used with the keyword \"with\" by using the special methods __enter__ , __exit__ in python context managers. In the method __exit__ we have parameters exc_type , exc_value and traceback if any exception happens inside the with block then we can handle it in this method. Try to implement your own context manager objects and let me know if you get any doubt's or suggestions in the below comments. Reference: https://docs.python.org/3/library/contextlib.html","title":"__enter__ and __exit__ context managers in python"},{"location":"blog/__enter__-and-__exit__-context-managers-in-python-90/#enter-and-exit-context-managers-in-python","text":"__enter__ and __exit__ are built in methods in python. __enter__ and __exit__ methods are also called as context manager special methods in python. You may come up with the question \"what is a context manager ?\". A context manager is a manager which has the ability to make avail the data withing the context or within a block of code and destroy it when it is used. We implement context manager functionality using with keyword in python programming.","title":"enter and exit context managers in python"},{"location":"blog/__enter__-and-__exit__-context-managers-in-python-90/#why-do-we-use-with-keyword-in-python","text":"\"with\" keyword is super awesome trick to implement resource management patterns. Resources many be one of \"files\", \"locks\", \"network connections\", etc. Let's see how to work with keyword \"with\" in python. # file resource management without using context managers file = open ( 'sample.txt' , 'w' ) try : file . write ( 'Python is super awesome!' ) finally : file . close () # file resource management without using context managers with open ( 'sample.txt' , 'w' ) as file : file . write ( 'Python is super awesome!' ) In the above code, In the first case we have opened a text file named \"sample.txt\" and wrote some text in it after we closed the file. But in the second case we have implemented the same functionality by using keyword \"with\". In the first case we have managed opening and closing of the resource file. In the second case (i.e using \"with\" keyword) the resource management handled automatically. Python simplified the syntax for first use case scenario with context managers using keyword \"with\". It is a reusable code pattern. You may arise a question \"how the closed automatically ?\". Actually nothing is automated in any software/program unless we do. If we see the internal implementation of the \"open\" keyword it looks like below. import io class open ( object ): def __init__ ( self , file_name , mode = 'r' ): print ( '__init__ called' ) self . file_name = file_name self . mode = mode def __enter__ ( self ): print ( '__enter__ called' ) self . file = io . open ( self . file_name , self . mode ) return self . file def __exit__ ( self , exc_type , exc_value , traceback ): print ( '__exit__ called' ) self . file . close () # lets test it with open ( 'sample.txt' , 'w' ) as f : f . write ( 'hello' ) # output # __init__ called # __enter__ called # __exit__ called In above code we have successfully replicated the working of the \"open\" keyword in python when it is used with the keyword \"with\" by using the special methods __enter__ , __exit__ in python context managers. In the method __exit__ we have parameters exc_type , exc_value and traceback if any exception happens inside the with block then we can handle it in this method. Try to implement your own context manager objects and let me know if you get any doubt's or suggestions in the below comments. Reference: https://docs.python.org/3/library/contextlib.html","title":"Why do we use \"with\" keyword in python ?"},{"location":"blog/access-host-network-localstack-lambda/","text":"access host network in localstack lambda \u00b6 What is host network? \u00b6 host is the actual computer on which the the docker is installed. By default the docker can't access the network of host. The docker container cannot be able to access the resources like MySQL database or any HTTP server which is running on host computer. There will be some cases where we need to connect to the host network on which the docker is installed. lambda funciton in localstack \u00b6 While we develop serverless applications on AWS cloud we generally test the code by deploying on AWS, every time the code get's changed. It will increase the development cost as we are using the AWS resources it will charge for the consume resources. To save the development cost we use localstack . Let's say we deployed a lambda funciton on localstack. Everytime it invokes localstack creates a new docker container and runs the lambda funciton code. By default docker didn't allow us to access the host network. so, we need to explicitly configure it. localstack docker configuration to access host network \u00b6 To allow localstack lambda docker container to access host network we need to set docker container network to host. Let's do that with environment variable LAMBDA_DOCKER_NETWORK=host . Let's see an example configuration of docker-compose for localstack. version: '3.5' services: localstack: container_name: localstack environment: - DEBUG=1 - LOCALSTACK_HOSTNAME=localhost - TEST_AWS_ACCOUNT_ID=000000000000 - AWS_DEFAULT_REGION=us-west-2 - DOCKER_HOST=unix:///var/run/docker.sock - DATA_DIR=/tmp/localstack/data - KINESIS_STREAM_SHARDS=1 - KINESIS_ERROR_PROBABILITY=0.0 - KINESIS_STREAM_NAME=local-stream - KINESIS_PROVIDER=kinesalite - LAMBDA_DOCKER_NETWORK=host image: localstack/localstack:latest Now, we can connect to host network. but we can't use localhost i.e 127.0.0.1 as it represents the current container IP. To access the host computer use host.docker.internal That's it folks. Stay connected for more articles.","title":"access host network in localstack lambda"},{"location":"blog/access-host-network-localstack-lambda/#access-host-network-in-localstack-lambda","text":"","title":"access host network in localstack lambda"},{"location":"blog/access-host-network-localstack-lambda/#what-is-host-network","text":"host is the actual computer on which the the docker is installed. By default the docker can't access the network of host. The docker container cannot be able to access the resources like MySQL database or any HTTP server which is running on host computer. There will be some cases where we need to connect to the host network on which the docker is installed.","title":"What is host network?"},{"location":"blog/access-host-network-localstack-lambda/#lambda-funciton-in-localstack","text":"While we develop serverless applications on AWS cloud we generally test the code by deploying on AWS, every time the code get's changed. It will increase the development cost as we are using the AWS resources it will charge for the consume resources. To save the development cost we use localstack . Let's say we deployed a lambda funciton on localstack. Everytime it invokes localstack creates a new docker container and runs the lambda funciton code. By default docker didn't allow us to access the host network. so, we need to explicitly configure it.","title":"lambda funciton in localstack"},{"location":"blog/access-host-network-localstack-lambda/#localstack-docker-configuration-to-access-host-network","text":"To allow localstack lambda docker container to access host network we need to set docker container network to host. Let's do that with environment variable LAMBDA_DOCKER_NETWORK=host . Let's see an example configuration of docker-compose for localstack. version: '3.5' services: localstack: container_name: localstack environment: - DEBUG=1 - LOCALSTACK_HOSTNAME=localhost - TEST_AWS_ACCOUNT_ID=000000000000 - AWS_DEFAULT_REGION=us-west-2 - DOCKER_HOST=unix:///var/run/docker.sock - DATA_DIR=/tmp/localstack/data - KINESIS_STREAM_SHARDS=1 - KINESIS_ERROR_PROBABILITY=0.0 - KINESIS_STREAM_NAME=local-stream - KINESIS_PROVIDER=kinesalite - LAMBDA_DOCKER_NETWORK=host image: localstack/localstack:latest Now, we can connect to host network. but we can't use localhost i.e 127.0.0.1 as it represents the current container IP. To access the host computer use host.docker.internal That's it folks. Stay connected for more articles.","title":"localstack docker configuration to access host network"},{"location":"blog/advanced-class-based-views-django-rest-framework-80/","text":"Advanced Class Based Views In Django Rest Framework \u00b6 Django Rest Framework is super awesome to create an web API very quickly. It provides generic views to implement the common functionality. In the previous section we have discussed about class based views in Django REST . Django REST class based views allows us to create an api endpoint with a single request method type i.e one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", etc. But, advanced generic classbased views allows us to implement the more than a single request method. It means we can implement more than a one functionality in a single api endpoint, like create and list, retrieve and update, retrieve destroy and retrieve, update and destroy. Let's see advanced class based views in Django REST ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView Usage of ListCreateAPIView in DRF: It allows \"GET\", \"POST\" request methods only. \"GET\" request method is is to list all available model instances and \"POST\" request method is to create an instance in the model. It is combination of \"ListAPIView\", \"CreateAPIView\". It is recommended to use when you need both list and create functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list-create/' , views . MovieListCreateView . as_view (), name = 'movie_list_create' ), ] views.py from rest_framework.generics import ListCreateAPIView from .serializers import * class MovieListCreateView ( ListCreateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, send a \"GET\" request to the url \"/movie-list-create/\" (i.e it will be changed based on your url path) then you will see output something like below with HTTP Status code of 200. [ { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] Send a \"POST\" request to the same api endpoint or url with below JSON data { \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, we can see the ouput something like below with HTTP status code 201 { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Usage of RetrieveUpdateAPIView in DRF: It allows \"GET\", \"PUT\" and \"PATCH\" request methods only. \"GET\" request method is to retrieve the specific existing model instancec/resource. \"PUT\" and \"PATCH\" request methods are used to update the existing specific resource. If you want to complete update the existing model instance/resource then use \"PUT\" request method otherwise use \"PATCH\" request method. \"PATCH\" request method is used to update some parts of the existing specific resource. For all these request methods we need to send primary key equivalent url keyword argument in the the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need both retrieve and update functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/retrieve-update/' , views . MovieRetrieveUpdateView . as_view (), name = 'movie_retrieve_update' ), ] views.py from rest_framework.generics import RetrieveUpdateAPIView from .serializers import * class MovieRetrieveUpdateView ( RetrieveUpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, we are ready to test our API. Send a \"GET\" request to url \"/movie/3/retrieve-update/\" then you will see output something like below with HTTP status code 200. Note: \"3\" is primary key of object in the url if may be different for you. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's test \"PUT\" request method to completely update the object/resource. To do that send \"PUT\" request to the same url with below JSON data. { \"title\" : \"Bahubali The Conclusion Updates\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's do partial update to the same resource by sending the \"PATCH\" request to it with below JSON data to the same url. { \"title\" : \"Bahubali The Conclusion\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Usage of RetrieveDestroyAPIView in DRF: \u00b6 it allows \"GET\" and \"DELETE\" request methods only all other methods will result in HTTP status code of 405. \"GET\" request method is to retrieve the existing specific model instance/resource and \"DELETE\" request method is to destroy the existing specific model instance/resource. In both these request types we need to send primary key equivalent url keyword argument in the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need retrieve and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveDestroyView . as_view (), name = 'movie_retrieve_destroy' ), ] views.py from rest_framework.generics import RetrieveDestroyAPIView from .serializers import * class MovieRetrieveDestroyView ( RetrieveDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now it's time to test the above code. In \"RetrieveUpdateAPIView\" we have already seen how to send a GET request so you can simply use the same procedure to test it. To delete the object/resource then send \"DELETE\" request to url \"/movie/3/retrieve-destroy/\" then it will response with status code 204 - No content. Now check the Movie with pk=\"3\" (note: it may be different for you) in the database you will not find it. Because it was deleted in last request. Usage of RetrieveUpdateDestroyAPIView in DRF: \u00b6 It allows 4 requests, \"GET\", \"PUT\", \"PATCH\" and \"DELETE\". It is recommended to use when you need retrieve, update and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveUpdateDestroyView . as_view (), name = 'movie_retrieve_update_destroy' ), ] views.py from rest_framework.generics import RetrieveUpdateDestroyAPIView from .serializers import * class MovieRetrieveUpdateDestroyView ( RetrieveUpdateDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer For testing you can use same procedures that I have mentioned for other api classes above. Please let me know if you have any questions in the below comments. You can find all this code in my github repository ( https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews ).","title":"Advanced Class Based Views In Django Rest Framework"},{"location":"blog/advanced-class-based-views-django-rest-framework-80/#advanced-class-based-views-in-django-rest-framework","text":"Django Rest Framework is super awesome to create an web API very quickly. It provides generic views to implement the common functionality. In the previous section we have discussed about class based views in Django REST . Django REST class based views allows us to create an api endpoint with a single request method type i.e one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", etc. But, advanced generic classbased views allows us to implement the more than a single request method. It means we can implement more than a one functionality in a single api endpoint, like create and list, retrieve and update, retrieve destroy and retrieve, update and destroy. Let's see advanced class based views in Django REST ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView Usage of ListCreateAPIView in DRF: It allows \"GET\", \"POST\" request methods only. \"GET\" request method is is to list all available model instances and \"POST\" request method is to create an instance in the model. It is combination of \"ListAPIView\", \"CreateAPIView\". It is recommended to use when you need both list and create functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list-create/' , views . MovieListCreateView . as_view (), name = 'movie_list_create' ), ] views.py from rest_framework.generics import ListCreateAPIView from .serializers import * class MovieListCreateView ( ListCreateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, send a \"GET\" request to the url \"/movie-list-create/\" (i.e it will be changed based on your url path) then you will see output something like below with HTTP Status code of 200. [ { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] Send a \"POST\" request to the same api endpoint or url with below JSON data { \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, we can see the ouput something like below with HTTP status code 201 { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Usage of RetrieveUpdateAPIView in DRF: It allows \"GET\", \"PUT\" and \"PATCH\" request methods only. \"GET\" request method is to retrieve the specific existing model instancec/resource. \"PUT\" and \"PATCH\" request methods are used to update the existing specific resource. If you want to complete update the existing model instance/resource then use \"PUT\" request method otherwise use \"PATCH\" request method. \"PATCH\" request method is used to update some parts of the existing specific resource. For all these request methods we need to send primary key equivalent url keyword argument in the the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need both retrieve and update functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/retrieve-update/' , views . MovieRetrieveUpdateView . as_view (), name = 'movie_retrieve_update' ), ] views.py from rest_framework.generics import RetrieveUpdateAPIView from .serializers import * class MovieRetrieveUpdateView ( RetrieveUpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, we are ready to test our API. Send a \"GET\" request to url \"/movie/3/retrieve-update/\" then you will see output something like below with HTTP status code 200. Note: \"3\" is primary key of object in the url if may be different for you. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's test \"PUT\" request method to completely update the object/resource. To do that send \"PUT\" request to the same url with below JSON data. { \"title\" : \"Bahubali The Conclusion Updates\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's do partial update to the same resource by sending the \"PATCH\" request to it with below JSON data to the same url. { \"title\" : \"Bahubali The Conclusion\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" }","title":"Advanced Class Based Views In Django Rest Framework"},{"location":"blog/advanced-class-based-views-django-rest-framework-80/#usage-of-retrievedestroyapiview-in-drf","text":"it allows \"GET\" and \"DELETE\" request methods only all other methods will result in HTTP status code of 405. \"GET\" request method is to retrieve the existing specific model instance/resource and \"DELETE\" request method is to destroy the existing specific model instance/resource. In both these request types we need to send primary key equivalent url keyword argument in the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need retrieve and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveDestroyView . as_view (), name = 'movie_retrieve_destroy' ), ] views.py from rest_framework.generics import RetrieveDestroyAPIView from .serializers import * class MovieRetrieveDestroyView ( RetrieveDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now it's time to test the above code. In \"RetrieveUpdateAPIView\" we have already seen how to send a GET request so you can simply use the same procedure to test it. To delete the object/resource then send \"DELETE\" request to url \"/movie/3/retrieve-destroy/\" then it will response with status code 204 - No content. Now check the Movie with pk=\"3\" (note: it may be different for you) in the database you will not find it. Because it was deleted in last request.","title":"Usage of RetrieveDestroyAPIView in DRF:"},{"location":"blog/advanced-class-based-views-django-rest-framework-80/#usage-of-retrieveupdatedestroyapiview-in-drf","text":"It allows 4 requests, \"GET\", \"PUT\", \"PATCH\" and \"DELETE\". It is recommended to use when you need retrieve, update and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveUpdateDestroyView . as_view (), name = 'movie_retrieve_update_destroy' ), ] views.py from rest_framework.generics import RetrieveUpdateDestroyAPIView from .serializers import * class MovieRetrieveUpdateDestroyView ( RetrieveUpdateDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer For testing you can use same procedures that I have mentioned for other api classes above. Please let me know if you have any questions in the below comments. You can find all this code in my github repository ( https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews ).","title":"Usage of RetrieveUpdateDestroyAPIView in DRF:"},{"location":"blog/alembic-ddl-operations/","text":"Alembic DDL operations \u00b6 pre-requisites \u00b6 Basic knowledge of alembic and how to create and apply migrations. If you didn't have any prior knowledge then I suggest you to follow below articles To sql from migration we need to run the command alembic upgrade head --sql https://learnbatta.com/blog/getting-started-with-alembic/ https://alembic.sqlalchemy.org/en/latest/tutorial.html required import statements \u00b6 from alembic import op import sqlalchemy as sa creating table with alembic \u00b6 op . create_table ( 'product' , sa . Column ( 'id' , sa . Integer , primary_key = True ), sa . Column ( 'name' , sa . String ( 50 ), nullable = False ), sa . Column ( 'description' , sa . Unicode ( 200 )), ) The above operation produce the below sql CREATE TABLE product ( id SERIAL NOT NULL , name VARCHAR ( 50 ) NOT NULL , description VARCHAR ( 200 ), PRIMARY KEY ( id ) ); To create table we need to use packages both alembic and sqlalchemy sqlalchemy to define the table definitions alembic to convert it into SQL equivalent query and execute it on the database. add new column to the table with alembic \u00b6 add_column ( table_name : str , column : Column , schema : Optional [ Union [ quoted_name , str ]] = None ) \u2192 None op . add_column ( 'product' , sa . Column ( 'category' , sa . String ( 20 ))) The above operation produce the below sql ALTER TABLE product ADD COLUMN category VARCHAR ( 20 ); It requires two arguments table name and column definition For more info check official docs rename table column with alembic \u00b6 op . alter_column ( 'product' , 'description' , nullable = True , new_column_name = 'desc' ) The above operation produce the below sql ALTER TABLE product ALTER COLUMN description DROP NOT NULL ; ALTER TABLE product RENAME description TO \"desc\" ; It basically requires table name, column name and other keyword arguments For more info check official docs add unique constraint on a column with alembic \u00b6 op . create_unique_constraint ( 'uq_product_name' , 'product' , [ 'name' ]) The above operation produce the below sql ALTER TABLE product ADD CONSTRAINT uq_product_name UNIQUE ( name ); It basically requires constrant name, table name and list of columns as arguments For more info check official docs drop a constraint on a column with alembic \u00b6 op . drop_constraint ( 'uq_product_name' , 'product' ) The above operation produce the below sql ALTER TABLE product DROP CONSTRAINT uq_product_name ; It requires arguments constraint name and table name For more info check official docs add index on a column with alembic \u00b6 op . create_index ( 'idx_product_id_name' , 'product' , [ 'id' , 'name' ], unique = True ) The above operation produce the below sql CREATE UNIQUE INDEX idx_product_id_name ON product ( id , name ); It requires arguments index name, table name and list of column names and other optional params. For more info check official docs drop index on a column with alembic \u00b6 op . drop_index ( 'idx_product_id_name' , table_name = 'product' ) The above operation produce the below sql DROP INDEX idx_product_id_name ; It requires arguments index name and optional table name. For more info check official docs execute custom SQL with alembic \u00b6 op . execute ( 'create view product_view as select * from product' ) The above operation produce the below sql create view product_view as select * from product ; In some cases, we can't complex sql operations with alembic . In such cases, we need to execute custom sql. alembic provides op.execute to achieve it. For more info check official docs add foreign key with alembic \u00b6 drop table column with alembic \u00b6 op . drop_table ( 'product' ) The above operation produce the below sql DROP TABLE product ; It basically requires table name as param. For more info check official docs References \u00b6 https://alembic.sqlalchemy.org/en/latest/api/ddl.html https://alembic.sqlalchemy.org/en/latest/ops.html","title":"Alembic DDL operations"},{"location":"blog/alembic-ddl-operations/#alembic-ddl-operations","text":"","title":"Alembic DDL operations"},{"location":"blog/alembic-ddl-operations/#pre-requisites","text":"Basic knowledge of alembic and how to create and apply migrations. If you didn't have any prior knowledge then I suggest you to follow below articles To sql from migration we need to run the command alembic upgrade head --sql https://learnbatta.com/blog/getting-started-with-alembic/ https://alembic.sqlalchemy.org/en/latest/tutorial.html","title":"pre-requisites"},{"location":"blog/alembic-ddl-operations/#required-import-statements","text":"from alembic import op import sqlalchemy as sa","title":"required import statements"},{"location":"blog/alembic-ddl-operations/#creating-table-with-alembic","text":"op . create_table ( 'product' , sa . Column ( 'id' , sa . Integer , primary_key = True ), sa . Column ( 'name' , sa . String ( 50 ), nullable = False ), sa . Column ( 'description' , sa . Unicode ( 200 )), ) The above operation produce the below sql CREATE TABLE product ( id SERIAL NOT NULL , name VARCHAR ( 50 ) NOT NULL , description VARCHAR ( 200 ), PRIMARY KEY ( id ) ); To create table we need to use packages both alembic and sqlalchemy sqlalchemy to define the table definitions alembic to convert it into SQL equivalent query and execute it on the database.","title":"creating table with alembic"},{"location":"blog/alembic-ddl-operations/#add-new-column-to-the-table-with-alembic","text":"add_column ( table_name : str , column : Column , schema : Optional [ Union [ quoted_name , str ]] = None ) \u2192 None op . add_column ( 'product' , sa . Column ( 'category' , sa . String ( 20 ))) The above operation produce the below sql ALTER TABLE product ADD COLUMN category VARCHAR ( 20 ); It requires two arguments table name and column definition For more info check official docs","title":"add new column to the table with alembic"},{"location":"blog/alembic-ddl-operations/#rename-table-column-with-alembic","text":"op . alter_column ( 'product' , 'description' , nullable = True , new_column_name = 'desc' ) The above operation produce the below sql ALTER TABLE product ALTER COLUMN description DROP NOT NULL ; ALTER TABLE product RENAME description TO \"desc\" ; It basically requires table name, column name and other keyword arguments For more info check official docs","title":"rename table column with alembic"},{"location":"blog/alembic-ddl-operations/#add-unique-constraint-on-a-column-with-alembic","text":"op . create_unique_constraint ( 'uq_product_name' , 'product' , [ 'name' ]) The above operation produce the below sql ALTER TABLE product ADD CONSTRAINT uq_product_name UNIQUE ( name ); It basically requires constrant name, table name and list of columns as arguments For more info check official docs","title":"add unique constraint on a column with alembic"},{"location":"blog/alembic-ddl-operations/#drop-a-constraint-on-a-column-with-alembic","text":"op . drop_constraint ( 'uq_product_name' , 'product' ) The above operation produce the below sql ALTER TABLE product DROP CONSTRAINT uq_product_name ; It requires arguments constraint name and table name For more info check official docs","title":"drop a constraint on a column with alembic"},{"location":"blog/alembic-ddl-operations/#add-index-on-a-column-with-alembic","text":"op . create_index ( 'idx_product_id_name' , 'product' , [ 'id' , 'name' ], unique = True ) The above operation produce the below sql CREATE UNIQUE INDEX idx_product_id_name ON product ( id , name ); It requires arguments index name, table name and list of column names and other optional params. For more info check official docs","title":"add index on a column with alembic"},{"location":"blog/alembic-ddl-operations/#drop-index-on-a-column-with-alembic","text":"op . drop_index ( 'idx_product_id_name' , table_name = 'product' ) The above operation produce the below sql DROP INDEX idx_product_id_name ; It requires arguments index name and optional table name. For more info check official docs","title":"drop index on a column with alembic"},{"location":"blog/alembic-ddl-operations/#execute-custom-sql-with-alembic","text":"op . execute ( 'create view product_view as select * from product' ) The above operation produce the below sql create view product_view as select * from product ; In some cases, we can't complex sql operations with alembic . In such cases, we need to execute custom sql. alembic provides op.execute to achieve it. For more info check official docs","title":"execute custom SQL with alembic"},{"location":"blog/alembic-ddl-operations/#add-foreign-key-with-alembic","text":"","title":"add foreign key with alembic"},{"location":"blog/alembic-ddl-operations/#drop-table-column-with-alembic","text":"op . drop_table ( 'product' ) The above operation produce the below sql DROP TABLE product ; It basically requires table name as param. For more info check official docs","title":"drop table column with alembic"},{"location":"blog/alembic-ddl-operations/#references","text":"https://alembic.sqlalchemy.org/en/latest/api/ddl.html https://alembic.sqlalchemy.org/en/latest/ops.html","title":"References"},{"location":"blog/allow-remote-connections-to-postgresql-87/","text":"Allow Remote Connections To Postgresql \u00b6 Working with the PostgreSQL in server is fine. But, sometimes we need to access the server or cloud database from our local machine. But, when we try to connect to the PostgresSQL server database from local it will not connect. Because, by the default configuration PostgreSQL only allows host \"localhost\" or \"12.0.0.1\". To allow remote connections to the PostgreSQL database we need to modify the database configuration files. Configuring postgresql.conf \u00b6 It is the configuration file of the postgres database. It contains the configuration settings like application port number, maximum connections, ssl, etc. To allow connections from any IP address then we need open the \"postgresql.conf\" file and find for configuration variable listen_addresses and replace it with listen_addresses=\"*\" . In ubuntu operating system the file can be found in the location /etc/postgresql/10/main . The file location is different for other operating systems. Now, we need to allow the authentication of clients. Configuring pg_hba.conf \u00b6 The pg_hba.conf file allows authentication between the PostgreSQL server and the client application. By default it only allows the connections from the host localhost. But, we need to connect from anywhere in the world. So, we need to add the below lines at the end of the file pg_hba.conf . In ubuntu operating system the file can be found in the location /etc/postgresql/10/main . The file location is different for other operating systems. host all all 0 .0.0.0/0 md5 host all all ::/0 md5 In above lines first line is for IPV4 and second is for IPV6. Now, restart the postgresql database service and connect to the remote database from your local machine.","title":"Allow Remote Connections To Postgresql"},{"location":"blog/allow-remote-connections-to-postgresql-87/#allow-remote-connections-to-postgresql","text":"Working with the PostgreSQL in server is fine. But, sometimes we need to access the server or cloud database from our local machine. But, when we try to connect to the PostgresSQL server database from local it will not connect. Because, by the default configuration PostgreSQL only allows host \"localhost\" or \"12.0.0.1\". To allow remote connections to the PostgreSQL database we need to modify the database configuration files.","title":"Allow Remote Connections To Postgresql"},{"location":"blog/allow-remote-connections-to-postgresql-87/#configuring-postgresqlconf","text":"It is the configuration file of the postgres database. It contains the configuration settings like application port number, maximum connections, ssl, etc. To allow connections from any IP address then we need open the \"postgresql.conf\" file and find for configuration variable listen_addresses and replace it with listen_addresses=\"*\" . In ubuntu operating system the file can be found in the location /etc/postgresql/10/main . The file location is different for other operating systems. Now, we need to allow the authentication of clients.","title":"Configuring postgresql.conf"},{"location":"blog/allow-remote-connections-to-postgresql-87/#configuring-pg_hbaconf","text":"The pg_hba.conf file allows authentication between the PostgreSQL server and the client application. By default it only allows the connections from the host localhost. But, we need to connect from anywhere in the world. So, we need to add the below lines at the end of the file pg_hba.conf . In ubuntu operating system the file can be found in the location /etc/postgresql/10/main . The file location is different for other operating systems. host all all 0 .0.0.0/0 md5 host all all ::/0 md5 In above lines first line is for IPV4 and second is for IPV6. Now, restart the postgresql database service and connect to the remote database from your local machine.","title":"Configuring pg_hba.conf"},{"location":"blog/authentication-in-django-rest-framework-81/","text":"Authentication In Django Rest Framework \u00b6 In previous articles we have developed an open API i.e any user (Authenticated and Un-authenticated) can access the API resource. If we want to want to know the information who is accessing the API then we have to authenticate the user. Authentication means the process or action of verifying the identity of a user. REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes. In Django REST framework do not restrict the user access to the API resource. If we want to restrict the user access to the API then we have use permissions and throttling classes. We can discuss about it in coming articles. Authentication Flow in DRF \u00b6 Whenever any request comes to Django Rest API view first it passed to method def dispatch(self, request, *args, **kwargs), it will take the list of all available authentication classes from the view attribute \"authentication_classes\" and it takes one class at a time from the \"authentication_classes\" and tries to authenticate the user with the authentication class if the class is able to authenticate the user then it will assign the property \"user\" to the \"request\" object. So, we can access the user like \"request.user\" to get the user in the view. If all of the authentication classes failed to authenticate the user then an \"AnonymousUser\" object is assigned to \"request.user\" . If one of authentication classes is able to authenticate the user then all other authentication classes will be skipped or will not processed further. Default Authentication Classes provided by DRF \u00b6 By default Django REST Framework provides two authentication classes. Below two classes are used to authenticate the user unless we override \"authentication_classes\" in the API view. rest_framework.authentication.BasicAuthentication rest_framework.authentication.SessionAuthentication Gobally configuring the authentication scheme in settings.py \u00b6 We can override the default authentication classes provided by DRF in settings.py with the below configuration. We can also use our custom authentication classes and configure like below. REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.BasicAuthentication' , 'rest_framework.authentication.SessionAuthentication' , # 'myapp.authentication.CustomAuthentication', ) } In above code we have configured authentication globally(i.e throughout the app). We can also set authentication scheme per view or per viewset basis. How to override the global authentication classes in Views or Viewsets ? \u00b6 We can override the default authentication classes in views, But View must be subclass of \"APIView\". I personally do not recommend using function based views because, it internally uses classbased views code and we have to write more code. so, I recommend avoid using the function based views. To override the authentication classes in views we have to set the attribute \"authentication_classes\". It takes the iterable datatype. Please checkout the example code below. from rest_framework.authentication import BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class AuthExampleAPIView ( APIView ): authentication_classes = ( BasicAuthentication , ) def get ( self , request , format = None ): content = { 'user' : str ( request . user ) } return Response ( content ) Setting Up Token Authentication in Django REST Framework \u00b6 In addition to \"BasicAuthentication\", \"SessionAuthentication\" DRF also provides another authentication scheme called TokenAuthenticaction. You may get question, why we need token authentication ? The general concept behind a token-based authentication system is simple. Allow users to enter their username and password in order to obtain a token which allows them to fetch a specific resource - without using their username and password. To use token based authentication in Dango REST Framework we need to do the following configurations. settings.py INSTALLED_APPS = ( 'rest_framework' , 'rest_framework.authtoken' , 'myapp' , ) REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.TokenAuthentication' , ) } urls.py from rest_framework.authtoken.views import ObtainAuthToken from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), path ( 'api/token-auth/' , ObtainAuthToken , name = 'auth_token' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated class ProtectedAPIView ( APIView ): permission_classes = ( IsAuthenticated ,) def get ( self , request ): data = { 'message' : 'I am proteted' } return Response ( data ) How to get auth token ? \u00b6 To get auth token we have to send a \"POST\" request to the api endpoint \"/api/token-auth/\" with user credentials. Let's see an exmaple request below. I prefer using postman to test the apis but, let's use python requests to test the above api endpoints. import requests params = { \"username\" : \"admin\" , \"password\" : \"secret\" } headers = { \"content-type\" : \"application/json\" } r = requests . post ( \"https://localhost:8000/api/token-auth/\" , params , headers ) print ( r . json ()) # Output: {\"token\": \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\"} How to use obtained auth token ? \u00b6 Let's use the above obtained token to access protected resource. Let's see an example request below. import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"I am protected\"} To learn better is to practice what you have learnt. So, try all the above code and let me know if you get any doubts in the below comments. References: https://www.django-rest-framework.org/api-guide/authentication/","title":"Authentication In Django Rest Framework"},{"location":"blog/authentication-in-django-rest-framework-81/#authentication-in-django-rest-framework","text":"In previous articles we have developed an open API i.e any user (Authenticated and Un-authenticated) can access the API resource. If we want to want to know the information who is accessing the API then we have to authenticate the user. Authentication means the process or action of verifying the identity of a user. REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes. In Django REST framework do not restrict the user access to the API resource. If we want to restrict the user access to the API then we have use permissions and throttling classes. We can discuss about it in coming articles.","title":"Authentication In Django Rest Framework"},{"location":"blog/authentication-in-django-rest-framework-81/#authentication-flow-in-drf","text":"Whenever any request comes to Django Rest API view first it passed to method def dispatch(self, request, *args, **kwargs), it will take the list of all available authentication classes from the view attribute \"authentication_classes\" and it takes one class at a time from the \"authentication_classes\" and tries to authenticate the user with the authentication class if the class is able to authenticate the user then it will assign the property \"user\" to the \"request\" object. So, we can access the user like \"request.user\" to get the user in the view. If all of the authentication classes failed to authenticate the user then an \"AnonymousUser\" object is assigned to \"request.user\" . If one of authentication classes is able to authenticate the user then all other authentication classes will be skipped or will not processed further.","title":"Authentication Flow in DRF"},{"location":"blog/authentication-in-django-rest-framework-81/#default-authentication-classes-provided-by-drf","text":"By default Django REST Framework provides two authentication classes. Below two classes are used to authenticate the user unless we override \"authentication_classes\" in the API view. rest_framework.authentication.BasicAuthentication rest_framework.authentication.SessionAuthentication","title":"Default Authentication Classes provided by DRF"},{"location":"blog/authentication-in-django-rest-framework-81/#gobally-configuring-the-authentication-scheme-in-settingspy","text":"We can override the default authentication classes provided by DRF in settings.py with the below configuration. We can also use our custom authentication classes and configure like below. REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.BasicAuthentication' , 'rest_framework.authentication.SessionAuthentication' , # 'myapp.authentication.CustomAuthentication', ) } In above code we have configured authentication globally(i.e throughout the app). We can also set authentication scheme per view or per viewset basis.","title":"Gobally configuring the authentication scheme in settings.py"},{"location":"blog/authentication-in-django-rest-framework-81/#how-to-override-the-global-authentication-classes-in-views-or-viewsets","text":"We can override the default authentication classes in views, But View must be subclass of \"APIView\". I personally do not recommend using function based views because, it internally uses classbased views code and we have to write more code. so, I recommend avoid using the function based views. To override the authentication classes in views we have to set the attribute \"authentication_classes\". It takes the iterable datatype. Please checkout the example code below. from rest_framework.authentication import BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class AuthExampleAPIView ( APIView ): authentication_classes = ( BasicAuthentication , ) def get ( self , request , format = None ): content = { 'user' : str ( request . user ) } return Response ( content )","title":"How to override the global authentication classes in Views or Viewsets ?"},{"location":"blog/authentication-in-django-rest-framework-81/#setting-up-token-authentication-in-django-rest-framework","text":"In addition to \"BasicAuthentication\", \"SessionAuthentication\" DRF also provides another authentication scheme called TokenAuthenticaction. You may get question, why we need token authentication ? The general concept behind a token-based authentication system is simple. Allow users to enter their username and password in order to obtain a token which allows them to fetch a specific resource - without using their username and password. To use token based authentication in Dango REST Framework we need to do the following configurations. settings.py INSTALLED_APPS = ( 'rest_framework' , 'rest_framework.authtoken' , 'myapp' , ) REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.TokenAuthentication' , ) } urls.py from rest_framework.authtoken.views import ObtainAuthToken from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), path ( 'api/token-auth/' , ObtainAuthToken , name = 'auth_token' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated class ProtectedAPIView ( APIView ): permission_classes = ( IsAuthenticated ,) def get ( self , request ): data = { 'message' : 'I am proteted' } return Response ( data )","title":"Setting Up Token Authentication in Django REST Framework"},{"location":"blog/authentication-in-django-rest-framework-81/#how-to-get-auth-token","text":"To get auth token we have to send a \"POST\" request to the api endpoint \"/api/token-auth/\" with user credentials. Let's see an exmaple request below. I prefer using postman to test the apis but, let's use python requests to test the above api endpoints. import requests params = { \"username\" : \"admin\" , \"password\" : \"secret\" } headers = { \"content-type\" : \"application/json\" } r = requests . post ( \"https://localhost:8000/api/token-auth/\" , params , headers ) print ( r . json ()) # Output: {\"token\": \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\"}","title":"How to get auth token ?"},{"location":"blog/authentication-in-django-rest-framework-81/#how-to-use-obtained-auth-token","text":"Let's use the above obtained token to access protected resource. Let's see an example request below. import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"I am protected\"} To learn better is to practice what you have learnt. So, try all the above code and let me know if you get any doubts in the below comments. References: https://www.django-rest-framework.org/api-guide/authentication/","title":"How to use obtained auth token ?"},{"location":"blog/aws-localstack-with-docker-compose/","text":"Localstack with docker compose \u00b6 Why LocalStack ? \u00b6 Local stack allows developers to test their applications in their local environment No need to deploy the application to the AWS services It will save development cost of the application Easy to debug the applications which depends on the various AWS resources. summary: A fully functional local cloud stack. Develop and test your cloud and serverless apps offline! Note: LocalStack supporting only AWS cloud stack. Resources that comes with Localstack \u00b6 ACM , API Gateway, CloudFormation, CloudWatch CloudWatch Logs, DynamoDB, DynamoDB Streams EC2, Elasticsearch Service, EventBridge (CloudWatch Events) Firehose, IAM, Kinesis, KMS, Lambda, Redshift Route53, S3, SecretsManager, SES, SNS SQS, SSM, StepFunctions, STS Pre-requisites \u00b6 Install docker ( https://docs.docker.com/get-docker/ ) Requires basic knowledge of docker-compose and how it works. Install aws cli ( https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html ) localstack with Docker cli \u00b6 docker run --rm -it -p 4566 :4566 -p 4510 -4559:4510-4559 localstack/localstack Docker Compose file for localstack - docker-compose.yml \u00b6 create file with name docker-compose.yml and add below code to it. version: '3.6' services: localstack: container_name: localstack environment: - DEBUG=1 - LOCALSTACK_HOSTNAME=localhost - TEST_AWS_ACCOUNT_ID=000000000000 - AWS_DEFAULT_REGION=us-west-2 - DOCKER_HOST=unix:///var/run/docker.sock - DATA_DIR=/tmp/localstack/data - KINESIS_STREAM_SHARDS=1 - KINESIS_ERROR_PROBABILITY=0.0 - KINESIS_STREAM_NAME=kinesis-stream - KINESIS_PROVIDER=kinesalite image: localstack/localstack:latest ports: - \"4566:4566\" volumes: - /var/run/docker.sock:/var/run/docker.sock - now, run the command docker-compose up to create the localstack container in docker. - open the browser and access the host localhost:4566/health and can expected to see below output. { \"features\" : { \"initScripts\" : \"initialized\" }, \"services\" : { \"acm\" : \"available\" , \"apigateway\" : \"available\" , \"cloudformation\" : \"available\" , \"cloudwatch\" : \"available\" , \"config\" : \"available\" , \"dynamodb\" : \"available\" , \"dynamodbstreams\" : \"available\" , \"ec2\" : \"available\" , \"es\" : \"available\" , \"events\" : \"available\" , \"firehose\" : \"available\" , \"iam\" : \"available\" , \"kinesis\" : \"available\" , \"kms\" : \"available\" , \"lambda\" : \"available\" , \"logs\" : \"available\" , \"redshift\" : \"available\" , \"resource-groups\" : \"available\" , \"resourcegroupstaggingapi\" : \"available\" , \"route53\" : \"available\" , \"route53resolver\" : \"available\" , \"s3\" : \"available\" , \"secretsmanager\" : \"available\" , \"ses\" : \"available\" , \"sns\" : \"available\" , \"sqs\" : \"available\" , \"ssm\" : \"available\" , \"stepfunctions\" : \"available\" , \"sts\" : \"available\" , \"support\" : \"available\" , \"swf\" : \"available\" }, \"version\" : \"0.13.2\" } If we are able to above output then the the locastack is working as expected. Now, open the terminal and run the below command and create a bucket named user-uploads in locastack S3 service. aws --endpoint-url http://localhost:4566 s3 mb s3://user-uploads # Output: make_bucket: user-uploads To confirm if S3 bucket is created then execute the below command aws --endpoint-url http://localhost:4566 s3 ls It will give output something like below. 2022-01-08 17:45:21 user-uploads","title":"AWS localstack with docker compose"},{"location":"blog/aws-localstack-with-docker-compose/#localstack-with-docker-compose","text":"","title":"Localstack with docker compose"},{"location":"blog/aws-localstack-with-docker-compose/#why-localstack","text":"Local stack allows developers to test their applications in their local environment No need to deploy the application to the AWS services It will save development cost of the application Easy to debug the applications which depends on the various AWS resources. summary: A fully functional local cloud stack. Develop and test your cloud and serverless apps offline! Note: LocalStack supporting only AWS cloud stack.","title":"Why LocalStack ?"},{"location":"blog/aws-localstack-with-docker-compose/#resources-that-comes-with-localstack","text":"ACM , API Gateway, CloudFormation, CloudWatch CloudWatch Logs, DynamoDB, DynamoDB Streams EC2, Elasticsearch Service, EventBridge (CloudWatch Events) Firehose, IAM, Kinesis, KMS, Lambda, Redshift Route53, S3, SecretsManager, SES, SNS SQS, SSM, StepFunctions, STS","title":"Resources that comes with Localstack"},{"location":"blog/aws-localstack-with-docker-compose/#pre-requisites","text":"Install docker ( https://docs.docker.com/get-docker/ ) Requires basic knowledge of docker-compose and how it works. Install aws cli ( https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html )","title":"Pre-requisites"},{"location":"blog/aws-localstack-with-docker-compose/#localstack-with-docker-cli","text":"docker run --rm -it -p 4566 :4566 -p 4510 -4559:4510-4559 localstack/localstack","title":"localstack with Docker cli"},{"location":"blog/aws-localstack-with-docker-compose/#docker-compose-file-for-localstack-docker-composeyml","text":"create file with name docker-compose.yml and add below code to it. version: '3.6' services: localstack: container_name: localstack environment: - DEBUG=1 - LOCALSTACK_HOSTNAME=localhost - TEST_AWS_ACCOUNT_ID=000000000000 - AWS_DEFAULT_REGION=us-west-2 - DOCKER_HOST=unix:///var/run/docker.sock - DATA_DIR=/tmp/localstack/data - KINESIS_STREAM_SHARDS=1 - KINESIS_ERROR_PROBABILITY=0.0 - KINESIS_STREAM_NAME=kinesis-stream - KINESIS_PROVIDER=kinesalite image: localstack/localstack:latest ports: - \"4566:4566\" volumes: - /var/run/docker.sock:/var/run/docker.sock - now, run the command docker-compose up to create the localstack container in docker. - open the browser and access the host localhost:4566/health and can expected to see below output. { \"features\" : { \"initScripts\" : \"initialized\" }, \"services\" : { \"acm\" : \"available\" , \"apigateway\" : \"available\" , \"cloudformation\" : \"available\" , \"cloudwatch\" : \"available\" , \"config\" : \"available\" , \"dynamodb\" : \"available\" , \"dynamodbstreams\" : \"available\" , \"ec2\" : \"available\" , \"es\" : \"available\" , \"events\" : \"available\" , \"firehose\" : \"available\" , \"iam\" : \"available\" , \"kinesis\" : \"available\" , \"kms\" : \"available\" , \"lambda\" : \"available\" , \"logs\" : \"available\" , \"redshift\" : \"available\" , \"resource-groups\" : \"available\" , \"resourcegroupstaggingapi\" : \"available\" , \"route53\" : \"available\" , \"route53resolver\" : \"available\" , \"s3\" : \"available\" , \"secretsmanager\" : \"available\" , \"ses\" : \"available\" , \"sns\" : \"available\" , \"sqs\" : \"available\" , \"ssm\" : \"available\" , \"stepfunctions\" : \"available\" , \"sts\" : \"available\" , \"support\" : \"available\" , \"swf\" : \"available\" }, \"version\" : \"0.13.2\" } If we are able to above output then the the locastack is working as expected. Now, open the terminal and run the below command and create a bucket named user-uploads in locastack S3 service. aws --endpoint-url http://localhost:4566 s3 mb s3://user-uploads # Output: make_bucket: user-uploads To confirm if S3 bucket is created then execute the below command aws --endpoint-url http://localhost:4566 s3 ls It will give output something like below. 2022-01-08 17:45:21 user-uploads","title":"Docker Compose file for localstack - docker-compose.yml"},{"location":"blog/basic-understanding-of-class-in-python-4/","text":"Basic understanding of class in python \u00b6 Basic terminology of object oriented programming \u00b6 Class \u00b6 A class is a basic design or a plan to an object. Class explains about the properties and behaviour of an object. In other words a class can be defined as it is a blueprint that defines the variables and methods common to all objects of a kind. An object in realworld can be anything that has some properties and behaviour. We generally classify the objects in realworld based on the similarities between them. The same can be appied in the programming world also. Because, every programming language that we use today is developed based on the realworld. For example, we can add all the birds(hen, paret, crow, etc) into a class named \"Bird\". As we discussed above it's just a blueprint and it's not an object. In realworld \"Paret\" is an object which comes under the class \"Bird\". Object \u00b6 An object is defined as its an realworld entity that has state and behavior. Technically we can say, an object is a bundle of variables and related methods. An object is an outcome of a class or An object is derived from a class. For example, Paret is an object and its an outcome of a class Bird. Class Vs Object \u00b6 An object is a realworld entity where as class is not An object cannot be inherited but we can inherit the class. For example, Bird is a base class for all the birds. we can classify the birds in to subclasses like Flying Birds and Walking Birds. we can add Paret, Crow under the class Flying Birds and Hen, Penguin under the class Walking Birds. We can inherit the class but we can't inherit an object. Example: Python class Bank Account \u00b6 class BankAccount ( object ): def __init__ ( self , name , account_number , initial_amount ): self . name = name self . account_number = account_number self . balance = initial_amount def deposit ( self , amount ): self . balance += amount def withdraw ( self , amount ): self . balance -= amount def get_balance ( self ): return self . balance ramesh_account = BankAccount ( 'Ramesh' , 'TS12345' , 500 ) suresh_account = BankAccount ( 'Suresh' , 'TS12345' , 1500 ) # another object of same class print ( ramesh_account . account_number ) # TS12345 print ( ramesh_account . get_balance ()) # 500 ramesh_account . withdraw ( 100 ) print ( ramesh_account . get_balance ()) # 400 ramesh_account . deposit ( 150 ) print ( ramesh_account . get_balance ()) # 550 In above code we have created a class \"BankAccount\". If we consider the general scenario every bank account has properties like its bank holders name, bank account number, bank account initial amount and it has operations withdraw an amount, deposit an amount and check the available balance. If we convert this scenario into programming then all the properties will become attributes and operations will become methods. In python to create a class we have to use the keyword \"class\" then followed by a space and then class name after colon(:). Follow the link https://docs.python.org/3/tutorial/classes.html#class-definition-syntax to learn about python class syntax. We can have multiple instances for a single class. To create an instance of a class we can simply call the class with initial parameters. When we call the class with initial parameters then it will initialize the object with initial parameters and binds the respect methods associated to the class. In above code we have used code \"ramesh_account = BankAccount('Ramesh', 'TS12345', 500)\" to create the class instance. To call a method we can simply use the instance. In above code we have used the method \"get_balance\" to get the balance of an account. To access the attribute of class we can simply use dot(.) notaion on object. In above code, we accessed attribute \"account_number\" like \"ramesh_account.account_number\".","title":"Basic understanding of class in python"},{"location":"blog/basic-understanding-of-class-in-python-4/#basic-understanding-of-class-in-python","text":"","title":"Basic understanding of class in python"},{"location":"blog/basic-understanding-of-class-in-python-4/#basic-terminology-of-object-oriented-programming","text":"","title":"Basic terminology of object oriented programming"},{"location":"blog/basic-understanding-of-class-in-python-4/#class","text":"A class is a basic design or a plan to an object. Class explains about the properties and behaviour of an object. In other words a class can be defined as it is a blueprint that defines the variables and methods common to all objects of a kind. An object in realworld can be anything that has some properties and behaviour. We generally classify the objects in realworld based on the similarities between them. The same can be appied in the programming world also. Because, every programming language that we use today is developed based on the realworld. For example, we can add all the birds(hen, paret, crow, etc) into a class named \"Bird\". As we discussed above it's just a blueprint and it's not an object. In realworld \"Paret\" is an object which comes under the class \"Bird\".","title":"Class"},{"location":"blog/basic-understanding-of-class-in-python-4/#object","text":"An object is defined as its an realworld entity that has state and behavior. Technically we can say, an object is a bundle of variables and related methods. An object is an outcome of a class or An object is derived from a class. For example, Paret is an object and its an outcome of a class Bird.","title":"Object"},{"location":"blog/basic-understanding-of-class-in-python-4/#class-vs-object","text":"An object is a realworld entity where as class is not An object cannot be inherited but we can inherit the class. For example, Bird is a base class for all the birds. we can classify the birds in to subclasses like Flying Birds and Walking Birds. we can add Paret, Crow under the class Flying Birds and Hen, Penguin under the class Walking Birds. We can inherit the class but we can't inherit an object.","title":"Class Vs Object"},{"location":"blog/basic-understanding-of-class-in-python-4/#example-python-class-bank-account","text":"class BankAccount ( object ): def __init__ ( self , name , account_number , initial_amount ): self . name = name self . account_number = account_number self . balance = initial_amount def deposit ( self , amount ): self . balance += amount def withdraw ( self , amount ): self . balance -= amount def get_balance ( self ): return self . balance ramesh_account = BankAccount ( 'Ramesh' , 'TS12345' , 500 ) suresh_account = BankAccount ( 'Suresh' , 'TS12345' , 1500 ) # another object of same class print ( ramesh_account . account_number ) # TS12345 print ( ramesh_account . get_balance ()) # 500 ramesh_account . withdraw ( 100 ) print ( ramesh_account . get_balance ()) # 400 ramesh_account . deposit ( 150 ) print ( ramesh_account . get_balance ()) # 550 In above code we have created a class \"BankAccount\". If we consider the general scenario every bank account has properties like its bank holders name, bank account number, bank account initial amount and it has operations withdraw an amount, deposit an amount and check the available balance. If we convert this scenario into programming then all the properties will become attributes and operations will become methods. In python to create a class we have to use the keyword \"class\" then followed by a space and then class name after colon(:). Follow the link https://docs.python.org/3/tutorial/classes.html#class-definition-syntax to learn about python class syntax. We can have multiple instances for a single class. To create an instance of a class we can simply call the class with initial parameters. When we call the class with initial parameters then it will initialize the object with initial parameters and binds the respect methods associated to the class. In above code we have used code \"ramesh_account = BankAccount('Ramesh', 'TS12345', 500)\" to create the class instance. To call a method we can simply use the instance. In above code we have used the method \"get_balance\" to get the balance of an account. To access the attribute of class we can simply use dot(.) notaion on object. In above code, we accessed attribute \"account_number\" like \"ramesh_account.account_number\".","title":"Example: Python class Bank Account"},{"location":"blog/best-screen-recorder-for-ubuntu/","text":"Best screen recorder for ubuntu \u00b6 In most often we would like to record our screen. But, how? It's pretty simple, we nee a screen recording software. Out of all available screen recorders for ubuntu/linux I found the best three screen recorders. Open Broadcaster Software Studio Kazam Simple Screen Recorder Open Broadcaster Software Studio for linux \u00b6 Open Broadcaster Software Studio is shortly called as \" OBS \". OBS is full of features and advanced scree capturing software available for ubuntu/linux. Main features \u00b6 Multiple scenes to switch between seamlessly via custom transitions Filters for video sources Audio mixer with filters Powerful and easy to use configuration options Streamlined settings panel for tweaking configurations Live streaming support Website: https://obsproject.com/ Kazam recorder for ubuntu \u00b6 Kazam is the best screen recording software for beginners. It's has minimal features compared to OBS . Main Features \u00b6 Simple and compact user interface Supports multiple video output formats Audio recording from a suitable source (microphone or speaker) Support for recording a single window or selected screen area Delay timer support Website: https://launchpad.net/kazam Simple Screen Recorder for ubuntu \u00b6 It's the most minimal screen recording software for the ubuntu or linux. Main Features \u00b6 Supports multiple video output formats Audio recording from a suitable source Support for recording selected screen area Provides statistics while recording Live preview while recording Optimized to work smoothly on slow machines Hotkey support Website: https://www.maartenbaert.be/simplescreenrecorder/ That's it folks. We other screen recording softwares as well.","title":"Best screen recorder for ubuntu"},{"location":"blog/best-screen-recorder-for-ubuntu/#best-screen-recorder-for-ubuntu","text":"In most often we would like to record our screen. But, how? It's pretty simple, we nee a screen recording software. Out of all available screen recorders for ubuntu/linux I found the best three screen recorders. Open Broadcaster Software Studio Kazam Simple Screen Recorder","title":"Best screen recorder for ubuntu"},{"location":"blog/best-screen-recorder-for-ubuntu/#open-broadcaster-software-studio-for-linux","text":"Open Broadcaster Software Studio is shortly called as \" OBS \". OBS is full of features and advanced scree capturing software available for ubuntu/linux.","title":"Open Broadcaster Software Studio for linux"},{"location":"blog/best-screen-recorder-for-ubuntu/#main-features","text":"Multiple scenes to switch between seamlessly via custom transitions Filters for video sources Audio mixer with filters Powerful and easy to use configuration options Streamlined settings panel for tweaking configurations Live streaming support Website: https://obsproject.com/","title":"Main features"},{"location":"blog/best-screen-recorder-for-ubuntu/#kazam-recorder-for-ubuntu","text":"Kazam is the best screen recording software for beginners. It's has minimal features compared to OBS .","title":"Kazam recorder for ubuntu"},{"location":"blog/best-screen-recorder-for-ubuntu/#main-features_1","text":"Simple and compact user interface Supports multiple video output formats Audio recording from a suitable source (microphone or speaker) Support for recording a single window or selected screen area Delay timer support Website: https://launchpad.net/kazam","title":"Main Features"},{"location":"blog/best-screen-recorder-for-ubuntu/#simple-screen-recorder-for-ubuntu","text":"It's the most minimal screen recording software for the ubuntu or linux.","title":"Simple Screen Recorder for ubuntu"},{"location":"blog/best-screen-recorder-for-ubuntu/#main-features_2","text":"Supports multiple video output formats Audio recording from a suitable source Support for recording selected screen area Provides statistics while recording Live preview while recording Optimized to work smoothly on slow machines Hotkey support Website: https://www.maartenbaert.be/simplescreenrecorder/ That's it folks. We other screen recording softwares as well.","title":"Main Features"},{"location":"blog/brief-introduction-to-computers-and-programming-32/","text":"Brief Introduction To Computers And Programming \u00b6 Lets talk a little bit about computer. If we do not have computers most of the works will take much time to complete it. Computers reduces the human efforts and speedup the working process. It doesn't make errors while doing a task, but humans do. There are other factors that affect humans to make errors. Lets start with introduction to computers and its working. What is computer? \u00b6 A computer is an electronic device. It takes inputs such as numbers, text, images, videos, sound, etc. and processes it and converts it into meaningful information that can be understand by humans. A computer solves/computes complex problems quickly but, humans take years to compute it. Hardware Vs Software \u00b6 In a computer, hardware is everything that makes a computer to work. A CPU processes information and the information can be stored in memory(RAM/ROM) A sound card can provide sound to speakers and a video card can provide an image to a monitor. All of this is hardware. Software is a collection of instructions that enable the user to interact with a computer, its hardware, or perform tasks. Without software, most computers would be useless. For example, without our browser(chrome/firefox, etc) software, we could not surf the Internet and without an OS, the browser could not run on our computer. Types of computer memories \u00b6 Memory is the best essential element of a computer because computer can\u2019t perform simple tasks. The performance of computer mainly based on memory and CPU. Primary Memory(RAM - Random Access Memory): It's a volatile memory. If we power off the computer data on RAM will be lost. Types of RAM's: DRAM - Dynamic RAM SRAM - Static RAM DRDRAM - Rambus DRAM Secondary Memory(ROM - Read Only Memory): It's a non volatile memory. We can have the information after power off the computer. Types of ROM's: PROM - Programmable Read Only Memory EPROM - Erasable Programmable Read Only Memory EEPROM - Electrically Erasable Programmable Read Only Memory Speed in RAM vs ROM \u00b6 RAM is faster than ROM. Because, RAM is made of transistors where as ROM is made of magnetic disks/coils. RAM is very costly compared to ROM. What is programming? \u00b6 Programming is the process of creating a set of instructions that tell a computer how to perform a task. Example: find a given number is even or not ? To solve above problem we write instructions to the computer that tells computer how to solve it. The process of writing instructions to the computer is called programming. What is programming language? The computer language which is used to write programs is a programming language. Example: Python, Java, C, C++, .Net, etc. Natural languages vs Formal languages \u00b6 Natural languages are the languages that people speak, such as English,Telugu, Hindi, etc. Natural languages were not designed by people, they evolved naturally. Formal languages are languages that are designed by people for specific applications. Some of the formal languages are chemical representation of formulas, computer programming languages(python, java, etc). Compilers vs Interpreters \u00b6 A compiler is a software program that converts high-level source code that is written by a developer in a high-level source code into machine understandable code. A compiler reads all lines in a program at a time and checks for syntax errors if found it reports all errors at once. If no error found then it produces bytecode/machine understandable code. On execution of bytecode we will get output. An interpreter is a software program that converts high-level source code into byte code or machine understandable code. An interpreter reads one line at a time in a program and executes it on machine. If it finds any error then it will stop executing. Compiled code is faster than interpreted code. Because compilers uses static typing where as interpreters uses dynamic typing. Types of programming languages? \u00b6 High-level languages: Human understandable computer languages but these need a compiler or an interpreter to convert it into a machine understandabe code. Examples: C, Java, Python, C++, .Net, R, Ruby, etc. Low level language: These are machine understandable languages. For humans these are very difficult to understand. Examples: Assembly","title":"Brief Introduction To Computers And Programming"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#brief-introduction-to-computers-and-programming","text":"Lets talk a little bit about computer. If we do not have computers most of the works will take much time to complete it. Computers reduces the human efforts and speedup the working process. It doesn't make errors while doing a task, but humans do. There are other factors that affect humans to make errors. Lets start with introduction to computers and its working.","title":"Brief Introduction To Computers And Programming"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#what-is-computer","text":"A computer is an electronic device. It takes inputs such as numbers, text, images, videos, sound, etc. and processes it and converts it into meaningful information that can be understand by humans. A computer solves/computes complex problems quickly but, humans take years to compute it.","title":"What is computer?"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#hardware-vs-software","text":"In a computer, hardware is everything that makes a computer to work. A CPU processes information and the information can be stored in memory(RAM/ROM) A sound card can provide sound to speakers and a video card can provide an image to a monitor. All of this is hardware. Software is a collection of instructions that enable the user to interact with a computer, its hardware, or perform tasks. Without software, most computers would be useless. For example, without our browser(chrome/firefox, etc) software, we could not surf the Internet and without an OS, the browser could not run on our computer.","title":"Hardware Vs Software"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#types-of-computer-memories","text":"Memory is the best essential element of a computer because computer can\u2019t perform simple tasks. The performance of computer mainly based on memory and CPU. Primary Memory(RAM - Random Access Memory): It's a volatile memory. If we power off the computer data on RAM will be lost. Types of RAM's: DRAM - Dynamic RAM SRAM - Static RAM DRDRAM - Rambus DRAM Secondary Memory(ROM - Read Only Memory): It's a non volatile memory. We can have the information after power off the computer. Types of ROM's: PROM - Programmable Read Only Memory EPROM - Erasable Programmable Read Only Memory EEPROM - Electrically Erasable Programmable Read Only Memory","title":"Types of computer memories"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#speed-in-ram-vs-rom","text":"RAM is faster than ROM. Because, RAM is made of transistors where as ROM is made of magnetic disks/coils. RAM is very costly compared to ROM.","title":"Speed in RAM vs ROM"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#what-is-programming","text":"Programming is the process of creating a set of instructions that tell a computer how to perform a task. Example: find a given number is even or not ? To solve above problem we write instructions to the computer that tells computer how to solve it. The process of writing instructions to the computer is called programming. What is programming language? The computer language which is used to write programs is a programming language. Example: Python, Java, C, C++, .Net, etc.","title":"What is programming?"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#natural-languages-vs-formal-languages","text":"Natural languages are the languages that people speak, such as English,Telugu, Hindi, etc. Natural languages were not designed by people, they evolved naturally. Formal languages are languages that are designed by people for specific applications. Some of the formal languages are chemical representation of formulas, computer programming languages(python, java, etc).","title":"Natural languages vs Formal languages"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#compilers-vs-interpreters","text":"A compiler is a software program that converts high-level source code that is written by a developer in a high-level source code into machine understandable code. A compiler reads all lines in a program at a time and checks for syntax errors if found it reports all errors at once. If no error found then it produces bytecode/machine understandable code. On execution of bytecode we will get output. An interpreter is a software program that converts high-level source code into byte code or machine understandable code. An interpreter reads one line at a time in a program and executes it on machine. If it finds any error then it will stop executing. Compiled code is faster than interpreted code. Because compilers uses static typing where as interpreters uses dynamic typing.","title":"Compilers vs Interpreters"},{"location":"blog/brief-introduction-to-computers-and-programming-32/#types-of-programming-languages","text":"High-level languages: Human understandable computer languages but these need a compiler or an interpreter to convert it into a machine understandabe code. Examples: C, Java, Python, C++, .Net, R, Ruby, etc. Low level language: These are machine understandable languages. For humans these are very difficult to understand. Examples: Assembly","title":"Types of programming languages?"},{"location":"blog/class-based-views-in-django-rest-framework-79/","text":"Class Based Views In Django Rest Framework \u00b6 Django Rest Framework supports both function and class based views. I personally prefer class based views upon function-based views. Because most of the common functionality was already implemented in the the class based views. so, why to write it again we can simply use it. It's always a better approach to keep our code DRY . In DRF we have a class titled \"APIView\". It is the base class for all other generic API classes in django rest framework. It can be imported from \"from rest_framework.views import APIView\". Let's start with a simple API view. Simple Hello world API View \u00b6 urls.py from django.urls import path from . import views url_patterns = [ path ( 'api/hello-world/' , views . HelloWorldAPIView . as_view (), name = 'hello_world' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloWorldAPIView ( APIView ): def get ( self , request , format = None ): return Response ( data = { \"message\" : \"Hello World\" }, status = 200 ) You can find source code of above hello world api app at github repo . Now, how to test the API endpoint \"/api/hello-world/\"?. Before testing it let's install POSTMAN API APP (i.e used to test api endpoints). Please visit the url https://www.getpostman.com/downloads/ to download it. In above example we have seen a simple API returns {\"message\": \"hello world\"} (i.e JSON). Generic views in Django REST Framework \u00b6 Writing rest api's can be monotonous, because we repeat certain patterns again and again. No developer wants to copy-paste/re-write the same code again and they may get boredom at the view level. Django REST Framework\u2019s generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code. So, it's better to use generic API views when requirement matches with existing functionality of generic views. Django REST Framework provides the below generic views Class Based API Views CreateAPIView ListAPIView RetrieveAPIView DestroyAPIView UpdateAPIView Extended Class Based API Views ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView Let's play with Generic or Class Based API Views \u00b6 CreateAPIView \u00b6 A generic api view provided by the DRF to create data(i.e model instance) in a given model. It is useful when there is a requirement to insert data into model through API endpoint. Let's do some code now. Let's write a simple api that can create a movie record in the database. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-create/' , views . MovieCreateView . as_view (), name = 'movie_create' ), ] models.py from django.db import models class Movie ( models . Model ): title = models . CharField ( max_length = 250 ) released_on = models . DateField () genre = models . CharField ( max_length = 250 ) director = models . CharField ( max_length = 250 ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from .models import * class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = '__all__' views.py from rest_framework.generics import CreateAPIView from .serializers import * class MovieCreateView ( CreateAPIView ): serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"POST\" request to our api url \"/api/movie-create/\". Initially send an empty post request to it. It will ask for required fields.This is just for checking. Now, send a request with valid data like below { \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } And now, we can see the response like below with a http status code 201. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ListAPIView \u00b6 A generic api view provided by the DRF to list all data(i.e all model instances) in a given model. It is useful when there is a requirement to retrieve all data from model through API endpoint. To add pagination to the results then add the following configuration to \"settings.py\" REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS' : 'rest_framework.pagination.LimitOffsetPagination' , 'PAGE_SIZE' : 100 } Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list/' , views . MovieListView . as_view (), name = 'movie_list' ), ] views.py from rest_framework.generics import ListAPIView from .serializers import * class MovieListView ( ListAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer from rest_framework.generics import ListAPIView from .serializers import * class MovieListView(ListAPIView): queryset = Movie.objects.all() serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie-list/\". Now, we get response like below with status code 200. [ { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] This is a quick example to start with django rest \"ListAPIView\". It only allows us to send \"GET\" reuest if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405. RetrieveAPIView \u00b6 A generic api view provided by the DRF to retrieve a specific data from a given model (example: retrieve a unique user from users table). It is useful when there is a requirement to retrieve a specific data instance through API endpoint. In above generic list api view, we have retrieved all the available objects/rows in the model/table. What if we need a specific object from the model? Let's do some code now to know it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/detail/' , views . MovieRetrieveView . as_view (), name = 'movie_retrieve' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieRetrieveView ( RetrieveAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest client (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie/1/detail/\". Now, we get response like below with status code 200. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } It only allows us to send \"GET\" request if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405. DestroyAPIView \u00b6 A generic api view provided by the DRF to delete a specific data (example: delete a specific user from users table) from a given model. It is useful when there is a requirement to delete a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/delete/' , views . MovieDestroyView . as_view (), name = 'movie_delete' ), ] views.py from rest_framework.generics import DestroyAPIView from .serializers import * class MovieDestroyView ( DestroyAPIView ): queryset = Movie . objects . all () \"DestroyAPIView\" only accepts request method \"DELETE\". To delete any specific object we have to provide \"pk_urlkwarg\" in url. Let's send a \"DELETE\" request to url \"/api/movie/2/delete/\" in this url \"2\" is a primary key of resource. When you send a request it will return response of status code \"204\". If object is not found then we will recieve 404 status code. UpdateAPIView \u00b6 A generic api view provided by the DRF to update a specific data (example: update a specific user from users table) from a given model. It is useful when there is a requirement to update a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/update/' , views . MovieUpdateView . as_view (), name = 'movie_update' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieUpdateView ( UpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"PATCH\" request to our api url \"/api/movie/1/update/\" with below data to update. { \"title\" : \"Bahubali the beginning\" , } Now, we will get response like below. { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } \"UpdateAPIView\" only accepts request type \"PATCH\" to update the resource if other request type is submitted then it will return status code of 405. Like \"RetrieveAPIView\" and \"DestroyAPIView\" it also requires \" pk_urlkwarg \" in url. All above written code is tested and you can find the code in my github repository https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews Please let me know your thoughts in below comments.","title":"Class Based Views In Django Rest Framework"},{"location":"blog/class-based-views-in-django-rest-framework-79/#class-based-views-in-django-rest-framework","text":"Django Rest Framework supports both function and class based views. I personally prefer class based views upon function-based views. Because most of the common functionality was already implemented in the the class based views. so, why to write it again we can simply use it. It's always a better approach to keep our code DRY . In DRF we have a class titled \"APIView\". It is the base class for all other generic API classes in django rest framework. It can be imported from \"from rest_framework.views import APIView\". Let's start with a simple API view.","title":"Class Based Views In Django Rest Framework"},{"location":"blog/class-based-views-in-django-rest-framework-79/#simple-hello-world-api-view","text":"urls.py from django.urls import path from . import views url_patterns = [ path ( 'api/hello-world/' , views . HelloWorldAPIView . as_view (), name = 'hello_world' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloWorldAPIView ( APIView ): def get ( self , request , format = None ): return Response ( data = { \"message\" : \"Hello World\" }, status = 200 ) You can find source code of above hello world api app at github repo . Now, how to test the API endpoint \"/api/hello-world/\"?. Before testing it let's install POSTMAN API APP (i.e used to test api endpoints). Please visit the url https://www.getpostman.com/downloads/ to download it. In above example we have seen a simple API returns {\"message\": \"hello world\"} (i.e JSON).","title":"Simple Hello world API View"},{"location":"blog/class-based-views-in-django-rest-framework-79/#generic-views-in-django-rest-framework","text":"Writing rest api's can be monotonous, because we repeat certain patterns again and again. No developer wants to copy-paste/re-write the same code again and they may get boredom at the view level. Django REST Framework\u2019s generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code. So, it's better to use generic API views when requirement matches with existing functionality of generic views. Django REST Framework provides the below generic views Class Based API Views CreateAPIView ListAPIView RetrieveAPIView DestroyAPIView UpdateAPIView Extended Class Based API Views ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView","title":"Generic views in Django REST Framework"},{"location":"blog/class-based-views-in-django-rest-framework-79/#lets-play-with-generic-or-class-based-api-views","text":"","title":"Let's play with Generic or Class Based API Views"},{"location":"blog/class-based-views-in-django-rest-framework-79/#createapiview","text":"A generic api view provided by the DRF to create data(i.e model instance) in a given model. It is useful when there is a requirement to insert data into model through API endpoint. Let's do some code now. Let's write a simple api that can create a movie record in the database. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-create/' , views . MovieCreateView . as_view (), name = 'movie_create' ), ] models.py from django.db import models class Movie ( models . Model ): title = models . CharField ( max_length = 250 ) released_on = models . DateField () genre = models . CharField ( max_length = 250 ) director = models . CharField ( max_length = 250 ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from .models import * class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = '__all__' views.py from rest_framework.generics import CreateAPIView from .serializers import * class MovieCreateView ( CreateAPIView ): serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"POST\" request to our api url \"/api/movie-create/\". Initially send an empty post request to it. It will ask for required fields.This is just for checking. Now, send a request with valid data like below { \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } And now, we can see the response like below with a http status code 201. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" }","title":"CreateAPIView"},{"location":"blog/class-based-views-in-django-rest-framework-79/#listapiview","text":"A generic api view provided by the DRF to list all data(i.e all model instances) in a given model. It is useful when there is a requirement to retrieve all data from model through API endpoint. To add pagination to the results then add the following configuration to \"settings.py\" REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS' : 'rest_framework.pagination.LimitOffsetPagination' , 'PAGE_SIZE' : 100 } Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list/' , views . MovieListView . as_view (), name = 'movie_list' ), ] views.py from rest_framework.generics import ListAPIView from .serializers import * class MovieListView ( ListAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer from rest_framework.generics import ListAPIView from .serializers import * class MovieListView(ListAPIView): queryset = Movie.objects.all() serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie-list/\". Now, we get response like below with status code 200. [ { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] This is a quick example to start with django rest \"ListAPIView\". It only allows us to send \"GET\" reuest if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405.","title":"ListAPIView"},{"location":"blog/class-based-views-in-django-rest-framework-79/#retrieveapiview","text":"A generic api view provided by the DRF to retrieve a specific data from a given model (example: retrieve a unique user from users table). It is useful when there is a requirement to retrieve a specific data instance through API endpoint. In above generic list api view, we have retrieved all the available objects/rows in the model/table. What if we need a specific object from the model? Let's do some code now to know it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/detail/' , views . MovieRetrieveView . as_view (), name = 'movie_retrieve' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieRetrieveView ( RetrieveAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest client (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie/1/detail/\". Now, we get response like below with status code 200. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } It only allows us to send \"GET\" request if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405.","title":"RetrieveAPIView"},{"location":"blog/class-based-views-in-django-rest-framework-79/#destroyapiview","text":"A generic api view provided by the DRF to delete a specific data (example: delete a specific user from users table) from a given model. It is useful when there is a requirement to delete a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/delete/' , views . MovieDestroyView . as_view (), name = 'movie_delete' ), ] views.py from rest_framework.generics import DestroyAPIView from .serializers import * class MovieDestroyView ( DestroyAPIView ): queryset = Movie . objects . all () \"DestroyAPIView\" only accepts request method \"DELETE\". To delete any specific object we have to provide \"pk_urlkwarg\" in url. Let's send a \"DELETE\" request to url \"/api/movie/2/delete/\" in this url \"2\" is a primary key of resource. When you send a request it will return response of status code \"204\". If object is not found then we will recieve 404 status code.","title":"DestroyAPIView"},{"location":"blog/class-based-views-in-django-rest-framework-79/#updateapiview","text":"A generic api view provided by the DRF to update a specific data (example: update a specific user from users table) from a given model. It is useful when there is a requirement to update a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/update/' , views . MovieUpdateView . as_view (), name = 'movie_update' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieUpdateView ( UpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"PATCH\" request to our api url \"/api/movie/1/update/\" with below data to update. { \"title\" : \"Bahubali the beginning\" , } Now, we will get response like below. { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } \"UpdateAPIView\" only accepts request type \"PATCH\" to update the resource if other request type is submitted then it will return status code of 405. Like \"RetrieveAPIView\" and \"DestroyAPIView\" it also requires \" pk_urlkwarg \" in url. All above written code is tested and you can find the code in my github repository https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews Please let me know your thoughts in below comments.","title":"UpdateAPIView"},{"location":"blog/debugging-javascript-app-in-browser/","text":"Debugging javascript app in browser \u00b6 Identifying the bug is the first step in the process of debugging. Almost all browsers provides developer tools which help the developers to find the bugs. All browsers has similar terminology in developer tools. This article is uses google chrome to debug the app. Using console.log() \u00b6 Basic type of debugging is to add the console.log() statements in the code to see whether the code is reacing the added log statement or not. It also helps to check the data available in the variables. Drawback : This method consumes more amount of time but it works. Browser Dev tools \u00b6 Right-click on any element of a webpage and select \"Inspect\" or simply press Ctrl + Shift + I (or Cmd + Option + I on macOS). This opens the Developer Tools panel. Elements: The \"Elements\" tab shows the HTML and CSS of your page. You can modify the content and styles in real-time to see how changes affect your page. Console: The \"Console\" tab is where you can view and interact with the JavaScript console. This is useful for logging messages, evaluating code snippets, and identifying errors. Sources: The \"Sources\" tab allows you to view and edit the source code of your web application. You can set breakpoints, step through code, and examine variables to understand how your code is behaving. Network: The \"Network\" tab lets you monitor network activity, including requests and responses. This is useful for diagnosing performance issues and inspecting API calls. Performance: The \"Performance\" tab helps you analyze your webpage's performance by recording and analyzing various events, such as loading, scripting, rendering, and painting. Memory: The \"Memory\" tab assists in identifying memory leaks and optimizing memory usage of your web application. Application: The \"Application\" tab is used for inspecting and manipulating web storage, cookies, and service workers. It's helpful for debugging issues related to caching and data storage. Security: The \"Security\" tab identifies potential security issues on your website, such as mixed content warnings and insecure origins. Out of these dev tools we mostly use \" sources \", \" console \" and \" network \" tools very frequently. sources panel \u00b6 File navigator \u00b6 The \"Sources\" panel provides a file explorer on the left side It allows us to navigate through the various files that make up the web page, including HTML, CSS, and JavaScript files. Code Editor \u00b6 We can open and edit JavaScript, HTML, and CSS files directly within the DevTools. Debugging \u00b6 Breakpoints \u00b6 A breakpoint is a point of code where the debugger will automatically pause the JavaScript execution. Add breakpoints \u00b6 We can add the breakpoint from source panel by opening a file and right click on the specific line or the code. Then it will show the breakpoint options i.e breakpoint, conditional breakpoint, logpoint, etc. we can also add the keyword debugger; at the line of the code where we want to pause the exection to debug. we access the variable values in console and sources panels. it helps to find the issue quickly. we can use debug controls to go to next line of execution, skip till a function and go to previous execution of line, etc. Debugging Steps \u00b6 Resume script execution - F8 Step over to the nex function call - F10 Step into the next function call - F11 Step out of the current function scope - shift + F11 Deactivate all breakpoints. Pause on exceptions - very useful for inspecting the context of application errors. Watch Expressions - expressions that will be continuously evaluated as you step through the application. Call stack - View and navigate to frames in the call stack. Can evaluate expressions and inspect the context of other frames. Scope Variables - inspect variables within the current context. Breakpoints - a list of all current breakpoints in the application. Enable/disable them through the checkbox. Click a line to add or remove a breakpoint. The currently executing line. References: \u00b6 https://developer.chrome.com/docs/devtools/javascript/ https://blittle.github.io/chrome-dev-tools/","title":"Debugging javascript app in browser"},{"location":"blog/debugging-javascript-app-in-browser/#debugging-javascript-app-in-browser","text":"Identifying the bug is the first step in the process of debugging. Almost all browsers provides developer tools which help the developers to find the bugs. All browsers has similar terminology in developer tools. This article is uses google chrome to debug the app.","title":"Debugging javascript app in browser"},{"location":"blog/debugging-javascript-app-in-browser/#using-consolelog","text":"Basic type of debugging is to add the console.log() statements in the code to see whether the code is reacing the added log statement or not. It also helps to check the data available in the variables. Drawback : This method consumes more amount of time but it works.","title":"Using console.log()"},{"location":"blog/debugging-javascript-app-in-browser/#browser-dev-tools","text":"Right-click on any element of a webpage and select \"Inspect\" or simply press Ctrl + Shift + I (or Cmd + Option + I on macOS). This opens the Developer Tools panel. Elements: The \"Elements\" tab shows the HTML and CSS of your page. You can modify the content and styles in real-time to see how changes affect your page. Console: The \"Console\" tab is where you can view and interact with the JavaScript console. This is useful for logging messages, evaluating code snippets, and identifying errors. Sources: The \"Sources\" tab allows you to view and edit the source code of your web application. You can set breakpoints, step through code, and examine variables to understand how your code is behaving. Network: The \"Network\" tab lets you monitor network activity, including requests and responses. This is useful for diagnosing performance issues and inspecting API calls. Performance: The \"Performance\" tab helps you analyze your webpage's performance by recording and analyzing various events, such as loading, scripting, rendering, and painting. Memory: The \"Memory\" tab assists in identifying memory leaks and optimizing memory usage of your web application. Application: The \"Application\" tab is used for inspecting and manipulating web storage, cookies, and service workers. It's helpful for debugging issues related to caching and data storage. Security: The \"Security\" tab identifies potential security issues on your website, such as mixed content warnings and insecure origins. Out of these dev tools we mostly use \" sources \", \" console \" and \" network \" tools very frequently.","title":"Browser Dev tools"},{"location":"blog/debugging-javascript-app-in-browser/#sources-panel","text":"","title":"sources panel"},{"location":"blog/debugging-javascript-app-in-browser/#file-navigator","text":"The \"Sources\" panel provides a file explorer on the left side It allows us to navigate through the various files that make up the web page, including HTML, CSS, and JavaScript files.","title":"File navigator"},{"location":"blog/debugging-javascript-app-in-browser/#code-editor","text":"We can open and edit JavaScript, HTML, and CSS files directly within the DevTools.","title":"Code Editor"},{"location":"blog/debugging-javascript-app-in-browser/#debugging","text":"","title":"Debugging"},{"location":"blog/debugging-javascript-app-in-browser/#breakpoints","text":"A breakpoint is a point of code where the debugger will automatically pause the JavaScript execution.","title":"Breakpoints"},{"location":"blog/debugging-javascript-app-in-browser/#add-breakpoints","text":"We can add the breakpoint from source panel by opening a file and right click on the specific line or the code. Then it will show the breakpoint options i.e breakpoint, conditional breakpoint, logpoint, etc. we can also add the keyword debugger; at the line of the code where we want to pause the exection to debug. we access the variable values in console and sources panels. it helps to find the issue quickly. we can use debug controls to go to next line of execution, skip till a function and go to previous execution of line, etc.","title":"Add breakpoints"},{"location":"blog/debugging-javascript-app-in-browser/#debugging-steps","text":"Resume script execution - F8 Step over to the nex function call - F10 Step into the next function call - F11 Step out of the current function scope - shift + F11 Deactivate all breakpoints. Pause on exceptions - very useful for inspecting the context of application errors. Watch Expressions - expressions that will be continuously evaluated as you step through the application. Call stack - View and navigate to frames in the call stack. Can evaluate expressions and inspect the context of other frames. Scope Variables - inspect variables within the current context. Breakpoints - a list of all current breakpoints in the application. Enable/disable them through the checkbox. Click a line to add or remove a breakpoint. The currently executing line.","title":"Debugging Steps"},{"location":"blog/debugging-javascript-app-in-browser/#references","text":"https://developer.chrome.com/docs/devtools/javascript/ https://blittle.github.io/chrome-dev-tools/","title":"References:"},{"location":"blog/deep-copy-vs-shallow-copy-in-python/","text":"deep copy vs shallow copy in python \u00b6 copy in python is used to copy objects as new names. We can copy python objects in two ways. Shallow Copy Deep Copy Before discussing the copy module lets talk a little bit about the assignment operator in python. a = [ 1 , 2 , 3 , 4 ] b = a print ( \"Memory ID of A `a` \" , id ( a )) print ( \"Memory ID of A `b` \" , id ( b )) b [ 0 ] = 1000 print ( a ) # [1000, 2, 3, 4] print ( b ) # [1000, 2, 3, 4] Above code give the output like below Memory ID of A `a` 140393069299080 Memory ID of A `b` 140393069299080 From the above example, we can see that python is not copying the contents when performing the assignment, instead it's referencing the actual object to the name. So, changing data of will reflect in both names. Shallow copy in python \u00b6 Unlike the assignment operator shallow copy copies the contents and creates the new object. Let's see a simple example import copy a = [ 1 , 2 , 3 , 4 , 5 ] b = copy . copy ( a ) print ( \"Memory ID of A `a` \" , id ( a )) print ( \"Memory ID of A `b` \" , id ( b )) b [ 0 ] = 1000 print ( a ) # [1, 2, 3, 4] print ( b ) # [1000, 2, 3, 4] In above when we print the ids it will give us the output like below Memory ID of A `a` 140393062406280 Memory ID of A `b` 140393062406344 We can clearly see that both the ids of the names were different. Unlike the assignment operation, shallow copy creates a copy of the referenced object. Shallow copy fails to deal with the complex data like nested objects (list of lists, list of dicts, etc). Deep copy in python \u00b6 The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances): A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original. A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original. Let's see an example for shallow copy import copy d = { 1 : \"one\" , 2 : \"two\" } a = [ 1 , 2 , 3 , 4 , d ] b = copy . copy ( a ) # Now change the contents of d a [ 0 ] = 1000 d [ 3 ] = \"three\" print ( \"Contents of `a`\" , a ) # Contents of `a` [1000, 2, 3, 4, {1: 'one', 2: 'two', 3: 'three'}] print ( \"Contents of `b`\" , b ) # Contents of `b` [1, 2, 3, 4, {1: 'one', 2: 'two', 3: 'three'}] In the above example we have complex data i.e a dict inside the list. When we copy the list with shallow copy it copied the object but kept the reference of the dict instead copying its contents. Let's see an example for deep copy import copy d = { 1 : \"one\" , 2 : \"two\" } a = [ 1 , 2 , 3 , 4 , d ] b = copy . deepcopy ( a ) # Now change the contents of d a [ 0 ] = 1000 d [ 3 ] = \"three\" print ( \"Contents of `a`\" , a ) # Contents of `a` [1000, 2, 3, 4, {1: 'one', 2: 'two', 3: 'three'}] print ( \"Contents of `b`\" , b ) # Contents of `b` [1, 2, 3, 4, {1: 'one', 2: 'two'}] From the above example we can see that deepcopy completely copied the object and all it's members. Reference: https://docs.python.org/3/library/copy.html","title":"deep copy vs shallow copy in python"},{"location":"blog/deep-copy-vs-shallow-copy-in-python/#deep-copy-vs-shallow-copy-in-python","text":"copy in python is used to copy objects as new names. We can copy python objects in two ways. Shallow Copy Deep Copy Before discussing the copy module lets talk a little bit about the assignment operator in python. a = [ 1 , 2 , 3 , 4 ] b = a print ( \"Memory ID of A `a` \" , id ( a )) print ( \"Memory ID of A `b` \" , id ( b )) b [ 0 ] = 1000 print ( a ) # [1000, 2, 3, 4] print ( b ) # [1000, 2, 3, 4] Above code give the output like below Memory ID of A `a` 140393069299080 Memory ID of A `b` 140393069299080 From the above example, we can see that python is not copying the contents when performing the assignment, instead it's referencing the actual object to the name. So, changing data of will reflect in both names.","title":"deep copy vs shallow copy in python"},{"location":"blog/deep-copy-vs-shallow-copy-in-python/#shallow-copy-in-python","text":"Unlike the assignment operator shallow copy copies the contents and creates the new object. Let's see a simple example import copy a = [ 1 , 2 , 3 , 4 , 5 ] b = copy . copy ( a ) print ( \"Memory ID of A `a` \" , id ( a )) print ( \"Memory ID of A `b` \" , id ( b )) b [ 0 ] = 1000 print ( a ) # [1, 2, 3, 4] print ( b ) # [1000, 2, 3, 4] In above when we print the ids it will give us the output like below Memory ID of A `a` 140393062406280 Memory ID of A `b` 140393062406344 We can clearly see that both the ids of the names were different. Unlike the assignment operation, shallow copy creates a copy of the referenced object. Shallow copy fails to deal with the complex data like nested objects (list of lists, list of dicts, etc).","title":"Shallow copy in python"},{"location":"blog/deep-copy-vs-shallow-copy-in-python/#deep-copy-in-python","text":"The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances): A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original. A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original. Let's see an example for shallow copy import copy d = { 1 : \"one\" , 2 : \"two\" } a = [ 1 , 2 , 3 , 4 , d ] b = copy . copy ( a ) # Now change the contents of d a [ 0 ] = 1000 d [ 3 ] = \"three\" print ( \"Contents of `a`\" , a ) # Contents of `a` [1000, 2, 3, 4, {1: 'one', 2: 'two', 3: 'three'}] print ( \"Contents of `b`\" , b ) # Contents of `b` [1, 2, 3, 4, {1: 'one', 2: 'two', 3: 'three'}] In the above example we have complex data i.e a dict inside the list. When we copy the list with shallow copy it copied the object but kept the reference of the dict instead copying its contents. Let's see an example for deep copy import copy d = { 1 : \"one\" , 2 : \"two\" } a = [ 1 , 2 , 3 , 4 , d ] b = copy . deepcopy ( a ) # Now change the contents of d a [ 0 ] = 1000 d [ 3 ] = \"three\" print ( \"Contents of `a`\" , a ) # Contents of `a` [1000, 2, 3, 4, {1: 'one', 2: 'two', 3: 'three'}] print ( \"Contents of `b`\" , b ) # Contents of `b` [1, 2, 3, 4, {1: 'one', 2: 'two'}] From the above example we can see that deepcopy completely copied the object and all it's members. Reference: https://docs.python.org/3/library/copy.html","title":"Deep copy in python"},{"location":"blog/deploy-django-app-with-apache-server-on-ubuntu-1/","text":"Deploy Django App With Apache Server On Ubuntu \u00b6 In this article we will learn about how to deploy django app on apache server. Apache server is a free and open-source HTTP server that is free to use. It is a cross platform web-server, It support's most of the operating systems like windows, linux, Mac, etc. Apache server is not intended to use to create any website. The main purpose of apache is to redirect HTTP requests to other applications like WSGI then these will process the request. If it is a static content then we can serve the resources directly with apache server. Advantages of Apache Server It is free and opensource Easy process to install and configure apache Changes will be reflected immediately Wide range of community support from forums like stackoverflow.com Support for hosting multiple websites on single server How to install apache server on ubuntu ? \u00b6 Run the below command to install the apache2 server and mod_wsgi. mod_wsgi supports the apache to run python application. sudo apt-get install apache2 libapache2-mod-wsgi Basic Apache configuration file to*deploy django application*- <VirtualHost *:80 > ServerName example.com ServerAdmin webmaster@example.com DocumentRoot /path/to/project Alias /static/ /path/to/static/ Alias /media/ /path/to/media/ WSGIScriptAlias / /path/to/project/project/wsgi.py WSGIDaemonProcess example.com python-path=/path/to/project \\ python-home=/path/to/env3 processes=5 threads=2 WSGIProcessGroup example.com <Directory /path/to/project /> Options -Indexes Order deny,allow Allow from all Require all granted </Directory> <Directory /path/to/media > Options -Indexes Order deny,allow # Allow from all Require all granted </Directory> LogLevel info # PROJECT_NAME is used to seperate the log files of this application ErrorLog /path/to/logs/error.log CustomLog /path/to/logs/access.log combined </VirtualHost> After installing it, follow the below procedure Go to the directory \"/etc/apache2/sites-available/\" and create a configuration file named \"my_apache_website.conf\" and copy the above configuration. Update the above configuration file by replacing the paths \"static\", \"media\", \"project\", \"virtualenv\", \"document root\", \"error_log\" and \"access log\" with actual paths and also update \"server name\", \"server admin\" Test the configuration file with the command \"apachectl configtest\" Now, restart the apache server with the command \"sudo service apache2 restart\" Check the status of the apache server with the command \"sudo service apache2 status\" We have successfully configured the django application with apache. Now, we can access the django web application(example.com) in the browser. Explanation of apache config: \u00b6 ServerName: It is the domain name which is used by apache to route the incoming requests. ServerAdmin: It is used by apache to send error reports to the admin. Alias: It takes a url path and substitutes it with a file or a directory path on the system. WSGIScriptAlias: It takes url path and passes the request to the WSGI application if the request matches with the path. WSGIDaemonProcess: It specifies the distinct daemon processes should be created when starting the WSGI application. python-path: It specifies the project path, where the project is located in the file system. python-home: It specifies the path to virtual python environment. processes: It's a number which specifies the number of daemon processes will be started in the process group. threads: It's a number which specifies the number of threads that will be created with each process to handle the requests in each daemon process in the process group. WSGIProcessGroup: It is used to specify the group name of the WSGI application in which the application daemon processes will run under the group. Directory: It takes the directory path and it specifies the access permissions to the directory. LogLevel: It is used to format the log information based on its value. ErrorLog: It takes the log file path in which the error log will be stored. CustomLog: It takes the log file path in which the access log will be stored. References: http://modwsgi.readthedocs.io/en/develop/index.html https://httpd.apache.org/docs/2.4/sections.html https://httpd.apache.org/docs/2.4/mod/directives.html","title":"Deploy Django App With Apache Server On Ubuntu"},{"location":"blog/deploy-django-app-with-apache-server-on-ubuntu-1/#deploy-django-app-with-apache-server-on-ubuntu","text":"In this article we will learn about how to deploy django app on apache server. Apache server is a free and open-source HTTP server that is free to use. It is a cross platform web-server, It support's most of the operating systems like windows, linux, Mac, etc. Apache server is not intended to use to create any website. The main purpose of apache is to redirect HTTP requests to other applications like WSGI then these will process the request. If it is a static content then we can serve the resources directly with apache server. Advantages of Apache Server It is free and opensource Easy process to install and configure apache Changes will be reflected immediately Wide range of community support from forums like stackoverflow.com Support for hosting multiple websites on single server","title":"Deploy Django App With Apache Server On Ubuntu"},{"location":"blog/deploy-django-app-with-apache-server-on-ubuntu-1/#how-to-install-apache-server-on-ubuntu","text":"Run the below command to install the apache2 server and mod_wsgi. mod_wsgi supports the apache to run python application. sudo apt-get install apache2 libapache2-mod-wsgi Basic Apache configuration file to*deploy django application*- <VirtualHost *:80 > ServerName example.com ServerAdmin webmaster@example.com DocumentRoot /path/to/project Alias /static/ /path/to/static/ Alias /media/ /path/to/media/ WSGIScriptAlias / /path/to/project/project/wsgi.py WSGIDaemonProcess example.com python-path=/path/to/project \\ python-home=/path/to/env3 processes=5 threads=2 WSGIProcessGroup example.com <Directory /path/to/project /> Options -Indexes Order deny,allow Allow from all Require all granted </Directory> <Directory /path/to/media > Options -Indexes Order deny,allow # Allow from all Require all granted </Directory> LogLevel info # PROJECT_NAME is used to seperate the log files of this application ErrorLog /path/to/logs/error.log CustomLog /path/to/logs/access.log combined </VirtualHost> After installing it, follow the below procedure Go to the directory \"/etc/apache2/sites-available/\" and create a configuration file named \"my_apache_website.conf\" and copy the above configuration. Update the above configuration file by replacing the paths \"static\", \"media\", \"project\", \"virtualenv\", \"document root\", \"error_log\" and \"access log\" with actual paths and also update \"server name\", \"server admin\" Test the configuration file with the command \"apachectl configtest\" Now, restart the apache server with the command \"sudo service apache2 restart\" Check the status of the apache server with the command \"sudo service apache2 status\" We have successfully configured the django application with apache. Now, we can access the django web application(example.com) in the browser.","title":"How to install apache server on ubuntu ?"},{"location":"blog/deploy-django-app-with-apache-server-on-ubuntu-1/#explanation-of-apache-config","text":"ServerName: It is the domain name which is used by apache to route the incoming requests. ServerAdmin: It is used by apache to send error reports to the admin. Alias: It takes a url path and substitutes it with a file or a directory path on the system. WSGIScriptAlias: It takes url path and passes the request to the WSGI application if the request matches with the path. WSGIDaemonProcess: It specifies the distinct daemon processes should be created when starting the WSGI application. python-path: It specifies the project path, where the project is located in the file system. python-home: It specifies the path to virtual python environment. processes: It's a number which specifies the number of daemon processes will be started in the process group. threads: It's a number which specifies the number of threads that will be created with each process to handle the requests in each daemon process in the process group. WSGIProcessGroup: It is used to specify the group name of the WSGI application in which the application daemon processes will run under the group. Directory: It takes the directory path and it specifies the access permissions to the directory. LogLevel: It is used to format the log information based on its value. ErrorLog: It takes the log file path in which the error log will be stored. CustomLog: It takes the log file path in which the access log will be stored. References: http://modwsgi.readthedocs.io/en/develop/index.html https://httpd.apache.org/docs/2.4/sections.html https://httpd.apache.org/docs/2.4/mod/directives.html","title":"Explanation of apache config:"},{"location":"blog/django-admin-custom-form-usage-92/","text":"django admin custom form usage \u00b6 Django admin allows us to use custom form. In most of the cases we use default admin provided by django. But, in some cases we may need to use some validations on the model fields or we may want to skip some fields and update these fields while saving it. In this kinds of situations we can solve it by using the custom form in django admin. implementation of django admin custom form \u00b6 models.py from django.db import models class Author ( models . Model ): name = models . CharField ( max_length = 100 ) title = models . CharField ( max_length = 3 ) birth_date = models . DateField ( blank = True , null = True ) def __str__ ( self ): return ' {} ' . format ( self . name ) forms.py from django import forms from .models import Author class AuthorForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): print ( \"My custom admin Form\" ) super () . __init__ ( * args , ** kwargs ) class Meta : fields = ( 'name' , 'title' , 'birth_date' ) admin.py from django.contrib import admin from .models import Author from .forms import AuthorForm class AuthorAdmin ( admin . ModelAdmin ): form = AuthorForm admin . site . register ( Author , AuthorAdmin ) In above code we have registered the model \"Author\" in the admin with another class \"AuthorAdmin\". when we register it with another class \"AuthorAdmin\" then the default behaviour of the model will be overridden by the configurations that we make in the class \"AuthorAdmin\". In above code we have used a custom form. So, when we register the model with the model admin class then it will use the the properties/settings that we defined init. How can we confirm that our custom form is working ? If you observe the terminal when you run the server and access the add/edit page in the admin then you will see the text \"My custom admin Form\". So, it indicates that the custom form is being used by the django admin. You can see the sample project in the github \" https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django/django_admin_custom_form \"","title":"django admin custom form usage"},{"location":"blog/django-admin-custom-form-usage-92/#django-admin-custom-form-usage","text":"Django admin allows us to use custom form. In most of the cases we use default admin provided by django. But, in some cases we may need to use some validations on the model fields or we may want to skip some fields and update these fields while saving it. In this kinds of situations we can solve it by using the custom form in django admin.","title":"django admin custom form usage"},{"location":"blog/django-admin-custom-form-usage-92/#implementation-of-django-admin-custom-form","text":"models.py from django.db import models class Author ( models . Model ): name = models . CharField ( max_length = 100 ) title = models . CharField ( max_length = 3 ) birth_date = models . DateField ( blank = True , null = True ) def __str__ ( self ): return ' {} ' . format ( self . name ) forms.py from django import forms from .models import Author class AuthorForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): print ( \"My custom admin Form\" ) super () . __init__ ( * args , ** kwargs ) class Meta : fields = ( 'name' , 'title' , 'birth_date' ) admin.py from django.contrib import admin from .models import Author from .forms import AuthorForm class AuthorAdmin ( admin . ModelAdmin ): form = AuthorForm admin . site . register ( Author , AuthorAdmin ) In above code we have registered the model \"Author\" in the admin with another class \"AuthorAdmin\". when we register it with another class \"AuthorAdmin\" then the default behaviour of the model will be overridden by the configurations that we make in the class \"AuthorAdmin\". In above code we have used a custom form. So, when we register the model with the model admin class then it will use the the properties/settings that we defined init. How can we confirm that our custom form is working ? If you observe the terminal when you run the server and access the add/edit page in the admin then you will see the text \"My custom admin Form\". So, it indicates that the custom form is being used by the django admin. You can see the sample project in the github \" https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django/django_admin_custom_form \"","title":"implementation of django admin custom form"},{"location":"blog/django-built-in-template-tags-109/","text":"django built-in template tags \u00b6 Django built in template tags are very useful in data manipulation, conditional data rendering and templates re-usability with template inheritance. We should follow smart ways to make our development life ease and consistent. While working with django templates we can make use of django built-in template tags render the templates in smart way and reuse the templates wherever required. Django Built-in Template Tags \u00b6 We have many built-in template tags in django but let's discuss most used django built-in template tags. if...else...endif for...endfor block and extends include url django template tag \"if...else...endif\" \u00b6 It's the most frequently used template tag in django templates. Let's see how we can use it. {% if marks > 80 %} Grade A {% elif var2 > 70 %} Grade B {% else %} Grade C {% endif %} use case: Show student grade based on the django template tag for...endfor \u00b6 It's useful when we want to iterate the same content. Let's see how we can use it {% for product in products_list %} < div class = \"product\" > < p > Product: {{product.name}} </ p > < p > Cost: {{product.cost}} </ p > </ div > {% endfor %} use case: To show list of products in a e-commerse website django template tags \"block\" and \"extends\" \u00b6 It's most used built-in template tag in django templates. If we see websites like Amazon and Flipcart then we can find that header and footer is constant and the only content changes from page to page. I this kinds of scenarios we use blocks and template inheritance like below. We create a \"base.html\" template which as the code for the header and footer of the website and content which can be changed. File: base.html < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > {% block content %} {% endblock %} </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > In the above django template we have created a \"content\" block and it can be used in two templates \"contact_us.html\" and \"about_us.html\". Let's see how to implement it. File: contact_us.html {% extends \"base.html\" %} {% block content %} < p > Contact me for more details :D </ p > {% endblock %} Now, the actual rendered page looks like below. < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > < p > Contact me for more details :D </ p > </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > we follow the same logic for \"about_us.html\" just like \"contact_us.html\". So, The conclusion is we write less code and make use if effectively to reach our goal. Points to remember: \"extends\" should be in the beginning of the document otherwise it will throw us an error. django \"include\" template tag \u00b6 include is super cool template tag can be used in django template tags. It's useful when we need a part of the html code in different pages then we ue it. use case: Let's take a blog application, we show latest blog posts in the home page and list all other blog posts in another page. but, we use the disign sample same for both of the places. In that scenario django include template tag is useful. Let's implement it. File: blog_article.html < div class = \"blog-article\" > < h1 > {{ article.title }} </ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > File: home.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in latest_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %} File: blog_list.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in all_blog_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %} django url template tag \u00b6 It's useful when we generate a dynamic url based on some parameters use case: Generate blog post deail url based on blog post id like below File: blog_article.html < div class = \"blog-article\" > < h1 >< a href = \"{% url 'blog_post_detail' article.id %}\" > {{ article.title }} </ a ></ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > That's it folks. We can check out more django template tags in the official documentation. Reference: docs.djangoproject.com/en/3.0/ref/templates/builtins/#built-in-template-tags-and-filters","title":"django built in template tags"},{"location":"blog/django-built-in-template-tags-109/#django-built-in-template-tags","text":"Django built in template tags are very useful in data manipulation, conditional data rendering and templates re-usability with template inheritance. We should follow smart ways to make our development life ease and consistent. While working with django templates we can make use of django built-in template tags render the templates in smart way and reuse the templates wherever required.","title":"django built-in template tags"},{"location":"blog/django-built-in-template-tags-109/#django-built-in-template-tags_1","text":"We have many built-in template tags in django but let's discuss most used django built-in template tags. if...else...endif for...endfor block and extends include url","title":"Django Built-in Template Tags"},{"location":"blog/django-built-in-template-tags-109/#django-template-tag-ifelseendif","text":"It's the most frequently used template tag in django templates. Let's see how we can use it. {% if marks > 80 %} Grade A {% elif var2 > 70 %} Grade B {% else %} Grade C {% endif %} use case: Show student grade based on the","title":"django template tag \"if...else...endif\""},{"location":"blog/django-built-in-template-tags-109/#django-template-tag-forendfor","text":"It's useful when we want to iterate the same content. Let's see how we can use it {% for product in products_list %} < div class = \"product\" > < p > Product: {{product.name}} </ p > < p > Cost: {{product.cost}} </ p > </ div > {% endfor %} use case: To show list of products in a e-commerse website","title":"django template tag for...endfor"},{"location":"blog/django-built-in-template-tags-109/#django-template-tags-block-and-extends","text":"It's most used built-in template tag in django templates. If we see websites like Amazon and Flipcart then we can find that header and footer is constant and the only content changes from page to page. I this kinds of scenarios we use blocks and template inheritance like below. We create a \"base.html\" template which as the code for the header and footer of the website and content which can be changed. File: base.html < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > {% block content %} {% endblock %} </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > In the above django template we have created a \"content\" block and it can be used in two templates \"contact_us.html\" and \"about_us.html\". Let's see how to implement it. File: contact_us.html {% extends \"base.html\" %} {% block content %} < p > Contact me for more details :D </ p > {% endblock %} Now, the actual rendered page looks like below. < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > < p > Contact me for more details :D </ p > </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > we follow the same logic for \"about_us.html\" just like \"contact_us.html\". So, The conclusion is we write less code and make use if effectively to reach our goal. Points to remember: \"extends\" should be in the beginning of the document otherwise it will throw us an error.","title":"django template tags \"block\" and \"extends\""},{"location":"blog/django-built-in-template-tags-109/#django-include-template-tag","text":"include is super cool template tag can be used in django template tags. It's useful when we need a part of the html code in different pages then we ue it. use case: Let's take a blog application, we show latest blog posts in the home page and list all other blog posts in another page. but, we use the disign sample same for both of the places. In that scenario django include template tag is useful. Let's implement it. File: blog_article.html < div class = \"blog-article\" > < h1 > {{ article.title }} </ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > File: home.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in latest_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %} File: blog_list.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in all_blog_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %}","title":"django \"include\" template tag"},{"location":"blog/django-built-in-template-tags-109/#django-url-template-tag","text":"It's useful when we generate a dynamic url based on some parameters use case: Generate blog post deail url based on blog post id like below File: blog_article.html < div class = \"blog-article\" > < h1 >< a href = \"{% url 'blog_post_detail' article.id %}\" > {{ article.title }} </ a ></ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > That's it folks. We can check out more django template tags in the official documentation. Reference: docs.djangoproject.com/en/3.0/ref/templates/builtins/#built-in-template-tags-and-filters","title":"django url template tag"},{"location":"blog/django-create-table-from-model-104/","text":"django create table from model \u00b6 Django made creating the tables in the database very simple with its built-in ORM. To create table in the database with django is to create a django model with all required fields and then create migrations and apply them. Let's jump-in learn how to create database table with django model. Creating database table with django model \u00b6 from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () With the above code we are creating the table named \" person \" with fields \" first_name \", \" last_name \" and \" address \". The equivallent \" SQL \" for above django model is CREATE TABLE < app name > _person ( id int , first_name varchar ( 100 ), last_name varchar ( 100 ), address text , ); As we know django comes with ORM( Object Relational Mapper ) so, we do not need to write SQL queries to deal with the database. We write database queries in django and django ORM converts all these queries into equivalent SQL and performs the query on the database and returns the results. In the above code we have imported the \" models \" module which contains the functionality related to database(i.e ORM). \" models.Model \" is a base class for all model classes in django application. Each model class represents a database table. Create migrations for above django model \u00b6 To create migrations for the django application we have to run the below command. python manage.py makemigrations <app name> above command will create migrations for the model in the directory \" migrations \" under the application directory. Apply migrations to create table in the database \u00b6 To create table in the database for our django application we have to apply above created models using below command python manage.py migrate <app name> After running above command it creates the table in the database. To write django models we need to know the different fields provided by django to use correct field for the table. That's it folks it's pretty easy to create django model.","title":"django create table from model"},{"location":"blog/django-create-table-from-model-104/#django-create-table-from-model","text":"Django made creating the tables in the database very simple with its built-in ORM. To create table in the database with django is to create a django model with all required fields and then create migrations and apply them. Let's jump-in learn how to create database table with django model.","title":"django create table from model"},{"location":"blog/django-create-table-from-model-104/#creating-database-table-with-django-model","text":"from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () With the above code we are creating the table named \" person \" with fields \" first_name \", \" last_name \" and \" address \". The equivallent \" SQL \" for above django model is CREATE TABLE < app name > _person ( id int , first_name varchar ( 100 ), last_name varchar ( 100 ), address text , ); As we know django comes with ORM( Object Relational Mapper ) so, we do not need to write SQL queries to deal with the database. We write database queries in django and django ORM converts all these queries into equivalent SQL and performs the query on the database and returns the results. In the above code we have imported the \" models \" module which contains the functionality related to database(i.e ORM). \" models.Model \" is a base class for all model classes in django application. Each model class represents a database table.","title":"Creating database table with django model"},{"location":"blog/django-create-table-from-model-104/#create-migrations-for-above-django-model","text":"To create migrations for the django application we have to run the below command. python manage.py makemigrations <app name> above command will create migrations for the model in the directory \" migrations \" under the application directory.","title":"Create migrations for above django model"},{"location":"blog/django-create-table-from-model-104/#apply-migrations-to-create-table-in-the-database","text":"To create table in the database for our django application we have to apply above created models using below command python manage.py migrate <app name> After running above command it creates the table in the database. To write django models we need to know the different fields provided by django to use correct field for the table. That's it folks it's pretty easy to create django model.","title":"Apply migrations to create table in the database"},{"location":"blog/django-custom-path-converters-17/","text":"Django Custom Path Converters \u00b6 In django version 2.0 introduced new way to write url patterns using \"path\". In django 2.0 regular expression type \"url\" is removed and added 2 things to work with urls. 1. using \"path\" and 2. using \"re_path\". For writing the clean urls django provided the path converters. It helps us to write clean and neat code and improves code readability. default path converters provided by dango \u00b6 The syntax of path converter is \" \" . path converter type is one of the defaults str, int, slug, uuid or a custom path converter if we have one. Let's see how we can use default path converters in django. str path ( 'user/<str:username>/detail/' , views . user_detail , name = 'user_detail' ) In avobe code we have used \"str\" as a path converter and kwarg name is \"username\". consider the example url \"user/anjaneyulu/detail/\". when we access it the url dispatcher will check the string regex whether the url is pattern is matched or not after matching it will return the control to the view (views.user_detail). If url path not matched with the string pattern then it will lookfor other url paths and tries to match with other path patterns if not found it will raise 404 error. int path ( 'author/<int:pk>/detail/' , views . author_detail , name = 'author_detail' ) In the above code we have used \"int\" as a path converter and \"pk\" as a kwarg name. The path converter already have the \"int\" regex. So, when we access url path that matches the pattern then the control will we passed to the view. If not it will tries to match for other paths and if not found it will raise a 404 error. slug path ( 'blog/<slug:post_slug>/' , views . blogpost_detail , name = 'blogpost_detail' ) In the above code we have used \"slug\" as a path converter and \"post_slug\" as a kwarg name that will be passed view. The path converter is defined with the slug regex already. So, it will check the url with the slug regex and returns control to the view. Otherwise it will look for other url paths for matching if none matches it will raise 404 error, saying that url not found. uuid path ( 'email/<uuid:user_uuid>/confirm/' , name = 'user_email_conform' ) In above code we have used \"uuid\" as a path converter and \"user_uuid\" as a kwarg name. The path converter already defined with uuid regex pattern. So, it will matches regex with given url path and if matches it will pass control to the view to return the response. Writing custom path converters in django \u00b6 A clean url is very important for any web application. Django is providing the best solution to this problem. We can write nice and clean urls using the path converters. Django already provides the default path converters but, in some cases we may need more. For example, If we want to show user details with username and we have some conditions for username like username must start with a letter, then either a-z (lowercase letters), A-Z (uppercase letters), 0-9 (numbers), underscores, periods and hyphens are allowed, and it must be between 8 and 20. converters.py class UsernamePathConverter : regex = '^[a-zA-Z0-9_.-]+$' def to_python ( self , value ): # convert value to its corresponding python datatype return value def to_url ( self , value ): # convert the value to str data return value urls.py from django.urls import register_converter , path from .views import views register_converter ( UsernamePathConverter , 'username' ) urlpatterns = [ # .... path ( 'articles/<username:uname>/' , views . user_detail , name = \"user_detail\" ) # .... ] In above code we have created path converter for username and registered it using \"register_converter\" function with name \"username\" and we used the path converter in the url path. Points to be Noted: to_python method should raise ValueError if it can\u2019t convert the given value. Reference: https://docs.djangoproject.com/en/2.0/topics/http/urls/#registering-custom-path-converters","title":"Django Custom Path Converters"},{"location":"blog/django-custom-path-converters-17/#django-custom-path-converters","text":"In django version 2.0 introduced new way to write url patterns using \"path\". In django 2.0 regular expression type \"url\" is removed and added 2 things to work with urls. 1. using \"path\" and 2. using \"re_path\". For writing the clean urls django provided the path converters. It helps us to write clean and neat code and improves code readability.","title":"Django Custom Path Converters"},{"location":"blog/django-custom-path-converters-17/#default-path-converters-provided-by-dango","text":"The syntax of path converter is \" \" . path converter type is one of the defaults str, int, slug, uuid or a custom path converter if we have one. Let's see how we can use default path converters in django. str path ( 'user/<str:username>/detail/' , views . user_detail , name = 'user_detail' ) In avobe code we have used \"str\" as a path converter and kwarg name is \"username\". consider the example url \"user/anjaneyulu/detail/\". when we access it the url dispatcher will check the string regex whether the url is pattern is matched or not after matching it will return the control to the view (views.user_detail). If url path not matched with the string pattern then it will lookfor other url paths and tries to match with other path patterns if not found it will raise 404 error. int path ( 'author/<int:pk>/detail/' , views . author_detail , name = 'author_detail' ) In the above code we have used \"int\" as a path converter and \"pk\" as a kwarg name. The path converter already have the \"int\" regex. So, when we access url path that matches the pattern then the control will we passed to the view. If not it will tries to match for other paths and if not found it will raise a 404 error. slug path ( 'blog/<slug:post_slug>/' , views . blogpost_detail , name = 'blogpost_detail' ) In the above code we have used \"slug\" as a path converter and \"post_slug\" as a kwarg name that will be passed view. The path converter is defined with the slug regex already. So, it will check the url with the slug regex and returns control to the view. Otherwise it will look for other url paths for matching if none matches it will raise 404 error, saying that url not found. uuid path ( 'email/<uuid:user_uuid>/confirm/' , name = 'user_email_conform' ) In above code we have used \"uuid\" as a path converter and \"user_uuid\" as a kwarg name. The path converter already defined with uuid regex pattern. So, it will matches regex with given url path and if matches it will pass control to the view to return the response.","title":"default path converters provided by dango"},{"location":"blog/django-custom-path-converters-17/#writing-custom-path-converters-in-django","text":"A clean url is very important for any web application. Django is providing the best solution to this problem. We can write nice and clean urls using the path converters. Django already provides the default path converters but, in some cases we may need more. For example, If we want to show user details with username and we have some conditions for username like username must start with a letter, then either a-z (lowercase letters), A-Z (uppercase letters), 0-9 (numbers), underscores, periods and hyphens are allowed, and it must be between 8 and 20. converters.py class UsernamePathConverter : regex = '^[a-zA-Z0-9_.-]+$' def to_python ( self , value ): # convert value to its corresponding python datatype return value def to_url ( self , value ): # convert the value to str data return value urls.py from django.urls import register_converter , path from .views import views register_converter ( UsernamePathConverter , 'username' ) urlpatterns = [ # .... path ( 'articles/<username:uname>/' , views . user_detail , name = \"user_detail\" ) # .... ] In above code we have created path converter for username and registered it using \"register_converter\" function with name \"username\" and we used the path converter in the url path. Points to be Noted: to_python method should raise ValueError if it can\u2019t convert the given value. Reference: https://docs.djangoproject.com/en/2.0/topics/http/urls/#registering-custom-path-converters","title":"Writing custom path converters in django"},{"location":"blog/django-data-migrations-best-practices/","text":"django data migrations best practices \u00b6 What is a django migration? \u00b6 Django migration is a python module which alters the database when we apply it with command python manage.py migrate What is a django data migration? \u00b6 In most of the cases django migrations are used to alter the schema. In some cases when we alter the database schema and add a new column in the database and update the data into the column by processing other tables or the same table with different columns. For above case we deal with the data so we call this migration as data migration. Django does not auto provide the data migration . We need to write the data migration using RunPython operation. How to write a django data migration? \u00b6 Let's create a empty migration with below command python manage . py makemigrations -- empty < app name > Djanog will create the empty migration with some randome name. Rename the migration file name as per the operations we want to perform. The created empty migration looks like below # Generated by Django A.B on YYYY-MM-DD HH:MM from django.db import migrations class Migration ( migrations . Migration ): dependencies = [ ( 'yourappname' , '0001_initial' ), ] operations = [ ] A data migration is a simple python function which takes the two parameters app and schema_editor and performs the operations as we defined. Let's see a simple example from django.db import migrations def combine_names ( apps , schema_editor ): Person = apps . get_model ( 'yourappname' , 'Person' ) for person in Person . objects . all (): person . full_name = ' %s %s ' % ( person . first_name , person . last_name ) person . save () class Migration ( migrations . Migration ): dependencies = [ ( 'yourappname' , '0001_initial' ), ] operations = [ migrations . RunPython ( combine_names ), ] Now, run the command python manage.py migrate to apply the migration. Note: Django executes the migration operations in a single database transaction. So, do not perform database alter operations and data migration operations in the same migration. If you perform both operations in the same migration file then django will throw an error.","title":"django data migrations best practices"},{"location":"blog/django-data-migrations-best-practices/#django-data-migrations-best-practices","text":"","title":"django data migrations best practices"},{"location":"blog/django-data-migrations-best-practices/#what-is-a-django-migration","text":"Django migration is a python module which alters the database when we apply it with command python manage.py migrate","title":"What is a django migration?"},{"location":"blog/django-data-migrations-best-practices/#what-is-a-django-data-migration","text":"In most of the cases django migrations are used to alter the schema. In some cases when we alter the database schema and add a new column in the database and update the data into the column by processing other tables or the same table with different columns. For above case we deal with the data so we call this migration as data migration. Django does not auto provide the data migration . We need to write the data migration using RunPython operation.","title":"What is a django data migration?"},{"location":"blog/django-data-migrations-best-practices/#how-to-write-a-django-data-migration","text":"Let's create a empty migration with below command python manage . py makemigrations -- empty < app name > Djanog will create the empty migration with some randome name. Rename the migration file name as per the operations we want to perform. The created empty migration looks like below # Generated by Django A.B on YYYY-MM-DD HH:MM from django.db import migrations class Migration ( migrations . Migration ): dependencies = [ ( 'yourappname' , '0001_initial' ), ] operations = [ ] A data migration is a simple python function which takes the two parameters app and schema_editor and performs the operations as we defined. Let's see a simple example from django.db import migrations def combine_names ( apps , schema_editor ): Person = apps . get_model ( 'yourappname' , 'Person' ) for person in Person . objects . all (): person . full_name = ' %s %s ' % ( person . first_name , person . last_name ) person . save () class Migration ( migrations . Migration ): dependencies = [ ( 'yourappname' , '0001_initial' ), ] operations = [ migrations . RunPython ( combine_names ), ] Now, run the command python manage.py migrate to apply the migration. Note: Django executes the migration operations in a single database transaction. So, do not perform database alter operations and data migration operations in the same migration. If you perform both operations in the same migration file then django will throw an error.","title":"How to write a django data migration?"},{"location":"blog/django-database-connectivity-102/","text":"django database connectivity \u00b6 Django supports various relational databases like SQLite, mySQL, PostgreSQL, Oracle. Django is completely designed for Relational Databases so it does not support non-relational databases like mongoDB directly. But we can use non-relational databases using third party packages. Let's get started with connecting databases to django application. All django project configurations can be found in the \"settings.py\" file. We configure the database settings in a variable \" DATABASES \" it's a simple dictionary which holds the configurations of the database. When we create a new django project it comes with SQLite database configurations. In order to other databases we have to configure the settings based on the database type like MySQL, PostgreSQL, etc. The \" DATABASES \" setting must configure a \"default\" database. We can use multiple databases with django. Connecting \"SQLite\" with django \u00b6 SQLite is a simple file based database and not recommended in the production environment. Let's see it's database configurations DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : 'database_name' } } Connecting \"MySQL\" with django \u00b6 DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } } Connecting \"PostgreSQL\" with django \u00b6 DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.postgresql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } } Let's see the details of above configuration. ENGINE : The database backed to use. NAME :It's the name of the database. USER : It's the name of the database user. PASSWORD : It's the password for the database user. HOST : It's the IP address of the database server. PORT : It's the port number for the database server.","title":"django database connectivity"},{"location":"blog/django-database-connectivity-102/#django-database-connectivity","text":"Django supports various relational databases like SQLite, mySQL, PostgreSQL, Oracle. Django is completely designed for Relational Databases so it does not support non-relational databases like mongoDB directly. But we can use non-relational databases using third party packages. Let's get started with connecting databases to django application. All django project configurations can be found in the \"settings.py\" file. We configure the database settings in a variable \" DATABASES \" it's a simple dictionary which holds the configurations of the database. When we create a new django project it comes with SQLite database configurations. In order to other databases we have to configure the settings based on the database type like MySQL, PostgreSQL, etc. The \" DATABASES \" setting must configure a \"default\" database. We can use multiple databases with django.","title":"django database connectivity"},{"location":"blog/django-database-connectivity-102/#connecting-sqlite-with-django","text":"SQLite is a simple file based database and not recommended in the production environment. Let's see it's database configurations DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : 'database_name' } }","title":"Connecting \"SQLite\" with django"},{"location":"blog/django-database-connectivity-102/#connecting-mysql-with-django","text":"DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } }","title":"Connecting \"MySQL\" with django"},{"location":"blog/django-database-connectivity-102/#connecting-postgresql-with-django","text":"DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.postgresql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } } Let's see the details of above configuration. ENGINE : The database backed to use. NAME :It's the name of the database. USER : It's the name of the database user. PASSWORD : It's the password for the database user. HOST : It's the IP address of the database server. PORT : It's the port number for the database server.","title":"Connecting \"PostgreSQL\" with django"},{"location":"blog/django-forms-and-its-usage-108/","text":"django forms and it's usage \u00b6 Django forms are used to validate the information submitted by the user and send the error responses back to the user if any and allow valid information inserted into the database. In django we have two types of forms 1. Django Normal Forms 2. Django Model Forms Django Normal Forms \u00b6 Django forms used to generate the HTML form fields using the django form fields. we can find more information about the django form fields in the django forms official documentation . In the previous article \" django forms getting started \" we have seen how to use the django form in the django views. In this article we will learn how to use form fields to create the django forms and write custom validations for form fields. Most used django form fields \u00b6 CharField It generates a HTML input field of type text IntegerField It generates a HTML input field of type number It comes with integer validator(i.e it validates the users input whether it's integer or not) DateField It generates a HTML input field of type date It comes with date validator on user's input URLField It generates HTML input field of type text It comes with url validator on user's input EmailField It generates HTML input field of type email It validates users input whether it's a valid email or not FileField It generates HTML input field of type file ImageField It generates HTML input field of type file It validates users input whether it's a valid image or not ChoiceField It generates HTML select field with options It allows user to select a single option. MultipleChoiceField It generates HTML select field of type multiple select It allows user to select multiple options BooleanField It generates a HTML checkbox field CharField(widget=forms.Textarea) To generate the HTML textarea we have to pass widget type \"forms.Textarea\" Let's create a simple form to store user contacts in the database Django Normal Form Example \u00b6 Let's create a simple form to store user contacts in the database forms.py from django import forms class UserContactForm ( forms . Form ) first_name = forms . CharField () last_name = forms . CharField () phone = forms . IntegerField () def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data In above form we have added a phone number validation method that will check the value of field phone has length of ten or not and raises validation error if the input does not met the validation. We have added field level validation using clean_<field name> method. We can also make use of \"clean\" method\u200b\u200b for dependent fields. We can do awesome things with django forms . Django Model Forms \u00b6 We have seen how we can use the normal django forms . We can get the same functionality with a few lines of code with model forms just like below for UserContact model. It's just an example. models.py from django.db import models from django.contrib.auth.models import User class UserContact ( models . Model ): user = models . ForeignKey ( on_delete = models . CASCADE , User ) first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) phone = models . IntegerField () forms.py from django import forms from .models import UserContact class UserContactForm ( forms . ModelForm ) class Meta : model = UserContact fields = ( 'first_name' , 'last_name' , 'phone' ) def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data Like above we can reduce the code and still gets the same functionality and can get extra functionality like save method to save the objects directly into the database.","title":"django forms and it's usage"},{"location":"blog/django-forms-and-its-usage-108/#django-forms-and-its-usage","text":"Django forms are used to validate the information submitted by the user and send the error responses back to the user if any and allow valid information inserted into the database. In django we have two types of forms 1. Django Normal Forms 2. Django Model Forms","title":"django forms and it's usage"},{"location":"blog/django-forms-and-its-usage-108/#django-normal-forms","text":"Django forms used to generate the HTML form fields using the django form fields. we can find more information about the django form fields in the django forms official documentation . In the previous article \" django forms getting started \" we have seen how to use the django form in the django views. In this article we will learn how to use form fields to create the django forms and write custom validations for form fields.","title":"Django Normal Forms"},{"location":"blog/django-forms-and-its-usage-108/#most-used-django-form-fields","text":"CharField It generates a HTML input field of type text IntegerField It generates a HTML input field of type number It comes with integer validator(i.e it validates the users input whether it's integer or not) DateField It generates a HTML input field of type date It comes with date validator on user's input URLField It generates HTML input field of type text It comes with url validator on user's input EmailField It generates HTML input field of type email It validates users input whether it's a valid email or not FileField It generates HTML input field of type file ImageField It generates HTML input field of type file It validates users input whether it's a valid image or not ChoiceField It generates HTML select field with options It allows user to select a single option. MultipleChoiceField It generates HTML select field of type multiple select It allows user to select multiple options BooleanField It generates a HTML checkbox field CharField(widget=forms.Textarea) To generate the HTML textarea we have to pass widget type \"forms.Textarea\" Let's create a simple form to store user contacts in the database","title":"Most used django form fields"},{"location":"blog/django-forms-and-its-usage-108/#django-normal-form-example","text":"Let's create a simple form to store user contacts in the database forms.py from django import forms class UserContactForm ( forms . Form ) first_name = forms . CharField () last_name = forms . CharField () phone = forms . IntegerField () def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data In above form we have added a phone number validation method that will check the value of field phone has length of ten or not and raises validation error if the input does not met the validation. We have added field level validation using clean_<field name> method. We can also make use of \"clean\" method\u200b\u200b for dependent fields. We can do awesome things with django forms .","title":"Django Normal Form Example"},{"location":"blog/django-forms-and-its-usage-108/#django-model-forms","text":"We have seen how we can use the normal django forms . We can get the same functionality with a few lines of code with model forms just like below for UserContact model. It's just an example. models.py from django.db import models from django.contrib.auth.models import User class UserContact ( models . Model ): user = models . ForeignKey ( on_delete = models . CASCADE , User ) first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) phone = models . IntegerField () forms.py from django import forms from .models import UserContact class UserContactForm ( forms . ModelForm ) class Meta : model = UserContact fields = ( 'first_name' , 'last_name' , 'phone' ) def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data Like above we can reduce the code and still gets the same functionality and can get extra functionality like save method to save the objects directly into the database.","title":"Django Model Forms"},{"location":"blog/django-forms-getting-started-106/","text":"django forms getting started \u00b6 django forms are allow user to enter the data and send it to the server to use it further. django forms are powerful and generates the html form elements which simplifies developers life easy. Basics of HTML form \u00b6 Let's understand the basics of HTML form from below example. < form action = \"/contact-us/\" method = \"POST\" enctype = \"multipart/form-data\" > < label > First Name </ label > < input name = \"first_name\" value = \"\" /> < label > Last Name </ label > < input type = \"text\" name = \"last_name\" value = \"\" /> < label > Message </ label > < textarea name = \"message\" ></ textarea > < input type = \"submit\" value = \"Submit\" /> </ form > action : It specifies where to send the form-data when a form is submitted method : Type of request when the form is submitted enctype : encrypion type for the form data. \"multipart/form-data\" allows us to send the text and files data aswell. For more details on HTML forms visit https://www.w3schools.com/html/html_forms.asp Django Forms and it's usage \u00b6 In the above example we have written html code for the form. By using django forms we can simplify it with django form template tags like below. Let's write code to save the contact info the database. We will not be creating the django app from the scratch but we will write model and view and template and urls for the functionality. models.py from django.db import models class ContacIfo ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) message = models . TextField () def __str__ ( self ): return self . first_name forms.py from django import forms from .models import ContacIfo class ContactInfoForm ( forms . ModelForm ): class Meta : model = ContacIfo fields = ( 'first_name' , 'last_name' , 'message' ) views.py from .forms import ContactInfoForm from django.http import HttpResponse from django.shortcuts import render def create_contact_info ( request ): if request . method == 'POST' : form = ContactInfoForm ( request . POST ) if form . is_valid (): form . save () return HttpResponse ( \"Saved Contact info.\" ) else : form = ContactInfoForm () context = { 'form' : form } return render ( request , 'template.html' , context ) urls.py from django.urls import path from . import views urlpatterns = [ # .... path ( 'contact-info/' , views . create_contact_info , name = 'contact_info' ), # .... ] template.html < html > < title > Create Contact Info </ title > < body > < form action = \"{% url 'contact_info' %}\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{form}} < input type = \"submit\" value = \"Submit\" /> </ form > </ body > </ html > Above code is used to save the contact info on the database. Django forms are two types 1. Model forms (i.e \" forms.ModelForm \") and 2. Forms (i.e \" forms.Form \") \" forms.ModelForm \" more advantages over the \" forms.Form \" like we can save the object in the database directly using save method of \" forms.ModelForm \" but, it's not available for \" forms.Form \". \" {% csrf_token %} \" in template will create a csrfmiddleware token that used for security protection. It's must for POST requests but it's not needed for GET requests. Django forms comes with inbuilt validations on the form fields, \" is_valid() \" method is used to validate the correctness of the form data. It's just basic start for the django forms usage. Let's learn more about django forms in the next article. You can find the above project code at my github account \" django forms getting started \". Reference: https://docs.djangoproject.com/en/3.0/topics/forms/","title":"django forms getting started"},{"location":"blog/django-forms-getting-started-106/#django-forms-getting-started","text":"django forms are allow user to enter the data and send it to the server to use it further. django forms are powerful and generates the html form elements which simplifies developers life easy.","title":"django forms getting started"},{"location":"blog/django-forms-getting-started-106/#basics-of-html-form","text":"Let's understand the basics of HTML form from below example. < form action = \"/contact-us/\" method = \"POST\" enctype = \"multipart/form-data\" > < label > First Name </ label > < input name = \"first_name\" value = \"\" /> < label > Last Name </ label > < input type = \"text\" name = \"last_name\" value = \"\" /> < label > Message </ label > < textarea name = \"message\" ></ textarea > < input type = \"submit\" value = \"Submit\" /> </ form > action : It specifies where to send the form-data when a form is submitted method : Type of request when the form is submitted enctype : encrypion type for the form data. \"multipart/form-data\" allows us to send the text and files data aswell. For more details on HTML forms visit https://www.w3schools.com/html/html_forms.asp","title":"Basics of HTML form"},{"location":"blog/django-forms-getting-started-106/#django-forms-and-its-usage","text":"In the above example we have written html code for the form. By using django forms we can simplify it with django form template tags like below. Let's write code to save the contact info the database. We will not be creating the django app from the scratch but we will write model and view and template and urls for the functionality. models.py from django.db import models class ContacIfo ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) message = models . TextField () def __str__ ( self ): return self . first_name forms.py from django import forms from .models import ContacIfo class ContactInfoForm ( forms . ModelForm ): class Meta : model = ContacIfo fields = ( 'first_name' , 'last_name' , 'message' ) views.py from .forms import ContactInfoForm from django.http import HttpResponse from django.shortcuts import render def create_contact_info ( request ): if request . method == 'POST' : form = ContactInfoForm ( request . POST ) if form . is_valid (): form . save () return HttpResponse ( \"Saved Contact info.\" ) else : form = ContactInfoForm () context = { 'form' : form } return render ( request , 'template.html' , context ) urls.py from django.urls import path from . import views urlpatterns = [ # .... path ( 'contact-info/' , views . create_contact_info , name = 'contact_info' ), # .... ] template.html < html > < title > Create Contact Info </ title > < body > < form action = \"{% url 'contact_info' %}\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{form}} < input type = \"submit\" value = \"Submit\" /> </ form > </ body > </ html > Above code is used to save the contact info on the database. Django forms are two types 1. Model forms (i.e \" forms.ModelForm \") and 2. Forms (i.e \" forms.Form \") \" forms.ModelForm \" more advantages over the \" forms.Form \" like we can save the object in the database directly using save method of \" forms.ModelForm \" but, it's not available for \" forms.Form \". \" {% csrf_token %} \" in template will create a csrfmiddleware token that used for security protection. It's must for POST requests but it's not needed for GET requests. Django forms comes with inbuilt validations on the form fields, \" is_valid() \" method is used to validate the correctness of the form data. It's just basic start for the django forms usage. Let's learn more about django forms in the next article. You can find the above project code at my github account \" django forms getting started \". Reference: https://docs.djangoproject.com/en/3.0/topics/forms/","title":"Django Forms and it's usage"},{"location":"blog/django-html-to-pdf-using-pdfkit-and-wkhtmltopdf-5/","text":"Django Html To Pdf Using Pdfkit And Wkhtmltopdf \u00b6 In many e-commerce django/python projects we sent invoices to the users in an email. We generally attach pdf documents to the email while sending the invoices to the user. Most of these invoices are pdf documents. Django is the most used python web framework of python programming language. In django, to generate invoice we generally uses html templates and renders them using the context to get the html. To generate the invoice from the html we use a python package\"pdfkit\"and the system package \"wkhtmltopdf\". install required packages for django html to pdf \u00b6 install python package pdfkit in virtualenv pip install pdfkit install system package \"wkhtmltopdf\" in ubuntu/debian sudo apt-get install wkhtmltopdf django view and template forhtml to pdf \u00b6 views.py import pdfkit from django.http import HttpResponse from django.template import loader def create_pdf ( request ): html = loader . render_to_string ( 'invoice.html' , {}) output = pdfkit . from_string ( html , output_path = False ) response = HttpResponse ( content_type = \"application/pdf\" ) response . write ( output ) return response invoice.html < html > < head > < style type = \"text/css\" > /* invoice styles here*/ body { background : #efefef } </ style > </ head > < body > < h1 style = \"color:red;\" > Hello World </ h1 > </ body > </ html > Note: In the email template it's highly recommended to use inline styles. Usage of wkhtmltopdf in ubuntu server \u00b6 wkhtmltopdf is works with the help of X graphic server. If we want to use it in the server then it will become a problem that means it will not works. To make it work in the server we need to install a X server (xvfb). sudo apt-get install xvfb After installing the \"xvfb\" we need to use it along with the \"wkhtmltopdf\". To do that execute the below commands in the terminal. echo which wkhtmltopdf # /usr/bin/wkhtmltopdf sudo mv /usr/bin/wkhtmltopdf /usr/bin/wkhtmltopdf_bin Now, create a fine in /opt/wkhtmltopdf_conf/wkhtmltopdf.sh and add the below code #!/bin/bash xvfb-run -a --server-args = \"-screen 0, 1024x768x24\" /usr/bin/wkhtmltopdf_bin -q $* After execute the below commands `sh sudo chmod +x /opt/wkhtmltopdf_conf/wkhtmltopdf.sh sudo ln -s /opt/wkhtmltopdf_conf/wkhtmltopdf.sh /usr/bin/wkhtmltopdf Now, test it on the server. It will work. If you get any errors please let me know I\\'m happy to help you :) References https://pypi.python.org/pypi/pdfkit https://wkhtmltopdf.org/","title":"Django Html To Pdf Using Pdfkit And Wkhtmltopdf"},{"location":"blog/django-html-to-pdf-using-pdfkit-and-wkhtmltopdf-5/#django-html-to-pdf-using-pdfkit-and-wkhtmltopdf","text":"In many e-commerce django/python projects we sent invoices to the users in an email. We generally attach pdf documents to the email while sending the invoices to the user. Most of these invoices are pdf documents. Django is the most used python web framework of python programming language. In django, to generate invoice we generally uses html templates and renders them using the context to get the html. To generate the invoice from the html we use a python package\"pdfkit\"and the system package \"wkhtmltopdf\".","title":"Django Html To Pdf Using Pdfkit And Wkhtmltopdf"},{"location":"blog/django-html-to-pdf-using-pdfkit-and-wkhtmltopdf-5/#install-required-packages-for-django-html-to-pdf","text":"install python package pdfkit in virtualenv pip install pdfkit install system package \"wkhtmltopdf\" in ubuntu/debian sudo apt-get install wkhtmltopdf","title":"install required packages for django html to pdf"},{"location":"blog/django-html-to-pdf-using-pdfkit-and-wkhtmltopdf-5/#django-view-and-template-forhtml-to-pdf","text":"views.py import pdfkit from django.http import HttpResponse from django.template import loader def create_pdf ( request ): html = loader . render_to_string ( 'invoice.html' , {}) output = pdfkit . from_string ( html , output_path = False ) response = HttpResponse ( content_type = \"application/pdf\" ) response . write ( output ) return response invoice.html < html > < head > < style type = \"text/css\" > /* invoice styles here*/ body { background : #efefef } </ style > </ head > < body > < h1 style = \"color:red;\" > Hello World </ h1 > </ body > </ html > Note: In the email template it's highly recommended to use inline styles.","title":"django view and template forhtml to pdf"},{"location":"blog/django-html-to-pdf-using-pdfkit-and-wkhtmltopdf-5/#usage-of-wkhtmltopdf-in-ubuntu-server","text":"wkhtmltopdf is works with the help of X graphic server. If we want to use it in the server then it will become a problem that means it will not works. To make it work in the server we need to install a X server (xvfb). sudo apt-get install xvfb After installing the \"xvfb\" we need to use it along with the \"wkhtmltopdf\". To do that execute the below commands in the terminal. echo which wkhtmltopdf # /usr/bin/wkhtmltopdf sudo mv /usr/bin/wkhtmltopdf /usr/bin/wkhtmltopdf_bin Now, create a fine in /opt/wkhtmltopdf_conf/wkhtmltopdf.sh and add the below code #!/bin/bash xvfb-run -a --server-args = \"-screen 0, 1024x768x24\" /usr/bin/wkhtmltopdf_bin -q $* After execute the below commands `sh sudo chmod +x /opt/wkhtmltopdf_conf/wkhtmltopdf.sh sudo ln -s /opt/wkhtmltopdf_conf/wkhtmltopdf.sh /usr/bin/wkhtmltopdf Now, test it on the server. It will work. If you get any errors please let me know I\\'m happy to help you :) References https://pypi.python.org/pypi/pdfkit https://wkhtmltopdf.org/","title":"Usage of wkhtmltopdf in ubuntu server"},{"location":"blog/django-image-and-file-upload-using-ajax-21/","text":"Django Image And File Upload Using Ajax \u00b6 Let's learn about how to work with Django image and file upload using Ajax. In most of the cases I personally use django file or image uploads using ajax . If we use normal upload then browser will reload the page in order to load the requested response and we will not have the files in the file fields due to page refreshed by the browser, again user has to browse the files if any error occurs while validating the form. If we use the ajax upload then the control is taken by the javascript. So, the page will not be refreshed and we will have the files in the fields selected by the user. If we use normal upload then browser will also send request to get the static resources so, It will have an effect on the page speed. Django image and file upload using Ajax will only requests for form validation so, other resources like static(css/js/images) will not be requested. Lets see the code of Django image and file upload using Ajax \u00b6 models.py from django.db import models from django.contrib.auth.models import User class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , null = True ) photo = models . ImageField ( upload_to = \"images\" ) attachment = models . FileField ( upload_to = \"attachments\" ) phone = models . CharField ( max_length = 10 ) forms.py from django import forms from .models import Profile class ImageFileUploadForm ( forms . ModelForm ): class Meta : model = Profile fields = ( 'phone' , 'photo' , 'attachment' ,) views.py from django.shortcuts import render from django.http import JsonResponse from .forms import ImageFileUploadForm def django_image_and_file_upload_ajax ( request ): if request . method == 'POST' : form = ImageFileUploadForm ( request . POST , request . FILES ) if form . is_valid (): form . save () return JsonResponse ({ 'error' : False , 'message' : 'Uploaded Successfully' }) else : return JsonResponse ({ 'error' : True , 'errors' : form . errors }) else : form = ImageFileUploadForm () return render ( request , 'django_image_upload_ajax.html' , { 'form' : form }) django_image_upload_ajax.html < html > < head > < title > Django image and file upload using ajax </ title > </ head > < body > < form enctype = \"multipart/form-data\" id = \"id_ajax_upload_form\" method = \"POST\" novalidate = \"\" > { % csrf_token %} { { form.as_p }} < input type = \"submit\" /> </ form > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script type = \"text/javascript\" > // form upload $ ( '#id_ajax_upload_form' ). submit ( function ( e ){ e . preventDefault (); $form = $ ( this ) var formData = new FormData ( this ); $ . ajax ({ url : window . location . pathname , type : 'POST' , data : formData , success : function ( response ) { $ ( '.error' ). remove (); console . log ( response ) if ( response . error ){ $ . each ( response . errors , function ( name , error ){ error = '<small class=\"text-muted error\">' + error + '</small>' $form . find ( '[name=' + name + ']' ). after ( error ); }) } else { alert ( response . message ) window . location = \"\" } }, cache : false , contentType : false , processData : false }); }); // end </ script > </ body > </ html > Points to be noted when using Django image and file upload using Ajax \u00b6 In template we must define enctype=\"multipart/form-data\"otherwise user browsed files (in our case image and attachment) will not sent in the request. So, Django will return errors like \"This filed is required\". In views.py return only JsonResponse. Do not return HttpResponse. By default in HttpResponse content_type is set to \"html/text\" where as in JsonResponse the content_type is set to \"json/application\". When content type is set to \"json\" then the ajax will convert the response body into JSON data. Otherwise we have to manually parse response body to json using \"JSON.parse\" We must define STATIC settings and MEDIA settings in settings.py file if these are not configured properly then we may get errors.","title":"Django Image And File Upload Using Ajax"},{"location":"blog/django-image-and-file-upload-using-ajax-21/#django-image-and-file-upload-using-ajax","text":"Let's learn about how to work with Django image and file upload using Ajax. In most of the cases I personally use django file or image uploads using ajax . If we use normal upload then browser will reload the page in order to load the requested response and we will not have the files in the file fields due to page refreshed by the browser, again user has to browse the files if any error occurs while validating the form. If we use the ajax upload then the control is taken by the javascript. So, the page will not be refreshed and we will have the files in the fields selected by the user. If we use normal upload then browser will also send request to get the static resources so, It will have an effect on the page speed. Django image and file upload using Ajax will only requests for form validation so, other resources like static(css/js/images) will not be requested.","title":"Django Image And File Upload Using Ajax"},{"location":"blog/django-image-and-file-upload-using-ajax-21/#lets-see-the-code-of-django-image-and-file-upload-using-ajax","text":"models.py from django.db import models from django.contrib.auth.models import User class Profile ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , null = True ) photo = models . ImageField ( upload_to = \"images\" ) attachment = models . FileField ( upload_to = \"attachments\" ) phone = models . CharField ( max_length = 10 ) forms.py from django import forms from .models import Profile class ImageFileUploadForm ( forms . ModelForm ): class Meta : model = Profile fields = ( 'phone' , 'photo' , 'attachment' ,) views.py from django.shortcuts import render from django.http import JsonResponse from .forms import ImageFileUploadForm def django_image_and_file_upload_ajax ( request ): if request . method == 'POST' : form = ImageFileUploadForm ( request . POST , request . FILES ) if form . is_valid (): form . save () return JsonResponse ({ 'error' : False , 'message' : 'Uploaded Successfully' }) else : return JsonResponse ({ 'error' : True , 'errors' : form . errors }) else : form = ImageFileUploadForm () return render ( request , 'django_image_upload_ajax.html' , { 'form' : form }) django_image_upload_ajax.html < html > < head > < title > Django image and file upload using ajax </ title > </ head > < body > < form enctype = \"multipart/form-data\" id = \"id_ajax_upload_form\" method = \"POST\" novalidate = \"\" > { % csrf_token %} { { form.as_p }} < input type = \"submit\" /> </ form > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script type = \"text/javascript\" > // form upload $ ( '#id_ajax_upload_form' ). submit ( function ( e ){ e . preventDefault (); $form = $ ( this ) var formData = new FormData ( this ); $ . ajax ({ url : window . location . pathname , type : 'POST' , data : formData , success : function ( response ) { $ ( '.error' ). remove (); console . log ( response ) if ( response . error ){ $ . each ( response . errors , function ( name , error ){ error = '<small class=\"text-muted error\">' + error + '</small>' $form . find ( '[name=' + name + ']' ). after ( error ); }) } else { alert ( response . message ) window . location = \"\" } }, cache : false , contentType : false , processData : false }); }); // end </ script > </ body > </ html >","title":"Lets see the code of Django image and file upload using Ajax"},{"location":"blog/django-image-and-file-upload-using-ajax-21/#points-to-be-noted-when-using-django-image-and-file-upload-using-ajax","text":"In template we must define enctype=\"multipart/form-data\"otherwise user browsed files (in our case image and attachment) will not sent in the request. So, Django will return errors like \"This filed is required\". In views.py return only JsonResponse. Do not return HttpResponse. By default in HttpResponse content_type is set to \"html/text\" where as in JsonResponse the content_type is set to \"json/application\". When content type is set to \"json\" then the ajax will convert the response body into JSON data. Otherwise we have to manually parse response body to json using \"JSON.parse\" We must define STATIC settings and MEDIA settings in settings.py file if these are not configured properly then we may get errors.","title":"Points to be noted when using Django image and file upload using Ajax"},{"location":"blog/django-model-crud-operations-105/","text":"django model CRUD operations \u00b6 Let's do CRUD operations on django model . Let's write basic queries like insert, update and delete queries using django ORM. Let's look at the Django Model \u00b6 from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () Now, let's quickly perform basic CRUD operations using the django shell. To open django shell execute the below command. python manage . py shell Create or insert query in Django \u00b6 Django model has a default query manager which has the API to perform the queries. Let's create a \"Person\" object using below code. from .models import Person # query1 obj1 = Person ( first_name = \"Pradeep\" , last_name = \"K\" , address = \"Hyderabad\" ) obj1 . save () # query2 obj2 = Person . objects . create ( first_name = \"Anji\" , last_name = \"B\" , address = \"Warangal\" ) In the above code we have written queries to insert the data into the table using django ORM. If you observe the above code we have done it in two ways. In the first query we have create the person object then called the save method to save the object into the database table. In the second query we have used django ORM manager method \"create\" to insert the data into the database table. Whenver a object is created django will automatically assigns a primary key \"id\" to the record which is used to identify the record uniquely. Get or Retrieve query in Django \u00b6 Django query manager has the method \"get\" to retrieve the data from the database table. Let's see some code from .models import Person obj1 = Person . objects . create ( first_name = \"John\" , last_name = \"B\" , address = \"Hyd\" ) print ( obj . id ) # 1 obj2 = Person . objects . get ( id = 1 ) print ( obj2 . first_name ) # John In the above code we first created the record and printed it's \"id\" number. After that we have retrieved the record from the database using django model manger method \"get\" by passing id. We can also use the other parameters (i.e \" first_name\", \" last_name \", \" address \"). Update query in Django \u00b6 We can update a record the database table using the django model managers method \"save\" like below. Let's do some code from .models import Person obj1 = Person . objects . get ( id = 1 ) obj1 . first_name = \"Adam\" obj1 . save () To update the record the database table we need to retrieve the record first and make some changes to it and then call the \" save \" method on object. Delete query in Django \u00b6 To delete the object from the database django model manager provide a \" delete \" method to perform the delete operation. from .models import Person # query1 obj1 = Person . objects . get ( id = 1 ) obj1 . delete () # query2 Person . objects . filter ( id = 1 ) . delete () We can perform the delete operation in two ways like above code. Filter query in Django \u00b6 Django makes filtering of objects or records very easy using the model manager method \" filter \". Let's do some code from .models import Person # create queries Person . objects . create ( first_name = \"John Snow\" , last_name = \"D\" , address = \"Hyderabad\" ) Person . objects . create ( first_name = \"John Wind\" , last_name = \"D\" , address = \"Banglore\" ) Person . objects . create ( first_name = \"Carl Miller\" , last_name = \"R\" , address = \"Banglore\" ) # filter query obj_list = Person . objects . filter ( first_name__icontains = \"John\" ) print ( obj_list ) Above query filters the objects whose first name contains the word \"john\". Note: While doing the operations you can check the database table to confirm whether it's working or not. If you use postgreSQL database then you can use \" pgAdmin \" or if you use MySQL database then you can use \" MySQL Workbench \" for administration.","title":"django model CRUD operations"},{"location":"blog/django-model-crud-operations-105/#django-model-crud-operations","text":"Let's do CRUD operations on django model . Let's write basic queries like insert, update and delete queries using django ORM.","title":"django model CRUD operations"},{"location":"blog/django-model-crud-operations-105/#lets-look-at-the-django-model","text":"from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () Now, let's quickly perform basic CRUD operations using the django shell. To open django shell execute the below command. python manage . py shell","title":"Let's look at the Django Model"},{"location":"blog/django-model-crud-operations-105/#create-or-insert-query-in-django","text":"Django model has a default query manager which has the API to perform the queries. Let's create a \"Person\" object using below code. from .models import Person # query1 obj1 = Person ( first_name = \"Pradeep\" , last_name = \"K\" , address = \"Hyderabad\" ) obj1 . save () # query2 obj2 = Person . objects . create ( first_name = \"Anji\" , last_name = \"B\" , address = \"Warangal\" ) In the above code we have written queries to insert the data into the table using django ORM. If you observe the above code we have done it in two ways. In the first query we have create the person object then called the save method to save the object into the database table. In the second query we have used django ORM manager method \"create\" to insert the data into the database table. Whenver a object is created django will automatically assigns a primary key \"id\" to the record which is used to identify the record uniquely.","title":"Create or insert query in Django"},{"location":"blog/django-model-crud-operations-105/#get-or-retrieve-query-in-django","text":"Django query manager has the method \"get\" to retrieve the data from the database table. Let's see some code from .models import Person obj1 = Person . objects . create ( first_name = \"John\" , last_name = \"B\" , address = \"Hyd\" ) print ( obj . id ) # 1 obj2 = Person . objects . get ( id = 1 ) print ( obj2 . first_name ) # John In the above code we first created the record and printed it's \"id\" number. After that we have retrieved the record from the database using django model manger method \"get\" by passing id. We can also use the other parameters (i.e \" first_name\", \" last_name \", \" address \").","title":"Get or Retrieve query in Django"},{"location":"blog/django-model-crud-operations-105/#update-query-in-django","text":"We can update a record the database table using the django model managers method \"save\" like below. Let's do some code from .models import Person obj1 = Person . objects . get ( id = 1 ) obj1 . first_name = \"Adam\" obj1 . save () To update the record the database table we need to retrieve the record first and make some changes to it and then call the \" save \" method on object.","title":"Update query in Django"},{"location":"blog/django-model-crud-operations-105/#delete-query-in-django","text":"To delete the object from the database django model manager provide a \" delete \" method to perform the delete operation. from .models import Person # query1 obj1 = Person . objects . get ( id = 1 ) obj1 . delete () # query2 Person . objects . filter ( id = 1 ) . delete () We can perform the delete operation in two ways like above code.","title":"Delete query in Django"},{"location":"blog/django-model-crud-operations-105/#filter-query-in-django","text":"Django makes filtering of objects or records very easy using the model manager method \" filter \". Let's do some code from .models import Person # create queries Person . objects . create ( first_name = \"John Snow\" , last_name = \"D\" , address = \"Hyderabad\" ) Person . objects . create ( first_name = \"John Wind\" , last_name = \"D\" , address = \"Banglore\" ) Person . objects . create ( first_name = \"Carl Miller\" , last_name = \"R\" , address = \"Banglore\" ) # filter query obj_list = Person . objects . filter ( first_name__icontains = \"John\" ) print ( obj_list ) Above query filters the objects whose first name contains the word \"john\". Note: While doing the operations you can check the database table to confirm whether it's working or not. If you use postgreSQL database then you can use \" pgAdmin \" or if you use MySQL database then you can use \" MySQL Workbench \" for administration.","title":"Filter query in Django"},{"location":"blog/django-pass-data-from-view-to-template-99/","text":"django pass data from view to template \u00b6 In the last article we have seen how to configure the template settings in django. In this article we will talk about passing dynamic data to templates for rendering it. As we know django is a MVC framework. So, we separate business logic from presentational logic. We write business logic in views and we pass data to templates to present the data. The data that we pass from views to template is generally called as \"context\" data. Let's get started with an example. Django views, context data and template \u00b6 Let's write a simple view that takes user information such as first name, last name and address and renders it in the template. views.py from django.shortcuts import render def user_data ( request ): context = { \"first_name\" : \"Anjaneyulu\" , \"last_name\" : \"Batta\" , \"address\" : \"Hyderabad, India\" } template_name = \"user_template.html\" return render ( request , template_name , context ) user_template.html <html> <head> <title>User Information</title> </head> <body> <p>First Name: {{ first_name }} </p> <p>Last Name: {{ last_name }} </p> <p>Address: {{ address }} </p> </body> </html> \" render \" is the most used function in django. It combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text. It takes three arguments \" request \", \" template_name \" and \" context \" dictionary. In template we can access the context dict keys as names**or variables** and display them like \" {{ <variable/name>}} \". That's it folks just try out the above code and let me know if any comments.","title":"django pass data from view to template"},{"location":"blog/django-pass-data-from-view-to-template-99/#django-pass-data-from-view-to-template","text":"In the last article we have seen how to configure the template settings in django. In this article we will talk about passing dynamic data to templates for rendering it. As we know django is a MVC framework. So, we separate business logic from presentational logic. We write business logic in views and we pass data to templates to present the data. The data that we pass from views to template is generally called as \"context\" data. Let's get started with an example.","title":"django pass data from view to template"},{"location":"blog/django-pass-data-from-view-to-template-99/#django-views-context-data-and-template","text":"Let's write a simple view that takes user information such as first name, last name and address and renders it in the template. views.py from django.shortcuts import render def user_data ( request ): context = { \"first_name\" : \"Anjaneyulu\" , \"last_name\" : \"Batta\" , \"address\" : \"Hyderabad, India\" } template_name = \"user_template.html\" return render ( request , template_name , context ) user_template.html <html> <head> <title>User Information</title> </head> <body> <p>First Name: {{ first_name }} </p> <p>Last Name: {{ last_name }} </p> <p>Address: {{ address }} </p> </body> </html> \" render \" is the most used function in django. It combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text. It takes three arguments \" request \", \" template_name \" and \" context \" dictionary. In template we can access the context dict keys as names**or variables** and display them like \" {{ <variable/name>}} \". That's it folks just try out the above code and let me know if any comments.","title":"Django views, context data and template"},{"location":"blog/django-send-email-using-mailgun-api-94/","text":"Django Send Email Using Mailgun Api \u00b6 We can send email in django using mailgun api. Mailgun is one of the trusted email service providers. When we send email using the mailgun it can directly deiver it to the recipient. As it is a trusted email service provider our email cannot be spammed. So, our information can be reached to the end user. By using mailgun we can send upto 10,000 emails for free per a month. We can get a free account from mailgun. So, what are you waiting for folks ? Let's check it out. How to integrate it mailgun in Django? \u00b6 One of the coolest thing about Django is that it has a global community support. So, what we can expect ? We can find pip packages for anything. To integrate mailgun with django we use pip package \" django-mailgun \". Let's see how to integrate it with django app. install package \" django-mailgun \" pip install django-mailgun Configure mailgun email backend in settings.py file EMAIL_BACKEND = 'django_mailgun.MailgunBackend' MAILGUN_ACCESS_KEY = 'ACCESS-KEY' MAILGUN_SERVER_NAME = 'YOUR-DOMAIN-NAME' EMAIL_PORT = 587 Let's test our mailgun configuration by sending an email & open django shell by typing \"python manage.py shell\" from django.core.mail import EmailMultiAlternatives subject = \"Hello, its me\" text_content = \"I was wondering if after all these years\" sender = \"from@localhost.com\" recipient = \"to@localhost.com\" msg = EmailMultiAlternatives ( subject , text_content , sender , [ recipient ]) msg . send () Replace above sender and recipient emails with your emails to make it work. Let me know how it worked for you in the below comments.","title":"Django Send Email Using Mailgun Api"},{"location":"blog/django-send-email-using-mailgun-api-94/#django-send-email-using-mailgun-api","text":"We can send email in django using mailgun api. Mailgun is one of the trusted email service providers. When we send email using the mailgun it can directly deiver it to the recipient. As it is a trusted email service provider our email cannot be spammed. So, our information can be reached to the end user. By using mailgun we can send upto 10,000 emails for free per a month. We can get a free account from mailgun. So, what are you waiting for folks ? Let's check it out.","title":"Django Send Email Using Mailgun Api"},{"location":"blog/django-send-email-using-mailgun-api-94/#how-to-integrate-it-mailgun-in-django","text":"One of the coolest thing about Django is that it has a global community support. So, what we can expect ? We can find pip packages for anything. To integrate mailgun with django we use pip package \" django-mailgun \". Let's see how to integrate it with django app. install package \" django-mailgun \" pip install django-mailgun Configure mailgun email backend in settings.py file EMAIL_BACKEND = 'django_mailgun.MailgunBackend' MAILGUN_ACCESS_KEY = 'ACCESS-KEY' MAILGUN_SERVER_NAME = 'YOUR-DOMAIN-NAME' EMAIL_PORT = 587 Let's test our mailgun configuration by sending an email & open django shell by typing \"python manage.py shell\" from django.core.mail import EmailMultiAlternatives subject = \"Hello, its me\" text_content = \"I was wondering if after all these years\" sender = \"from@localhost.com\" recipient = \"to@localhost.com\" msg = EmailMultiAlternatives ( subject , text_content , sender , [ recipient ]) msg . send () Replace above sender and recipient emails with your emails to make it work. Let me know how it worked for you in the below comments.","title":"How to integrate it mailgun in Django?"},{"location":"blog/django-static-files-usage-75/","text":"Django Static Files Usage \u00b6 Every website needs to serve the extra files such as images, CSS, JavaScript. The name \"static\" itself indicates that contents of files do not change. So, in django to work with static files we need to make some configurations in setttings.py file. Django provides app \" django.contrib.staticfiles \" to help us manage it. Configuring static files in settings.py \u00b6 Add \" django.contrib.staticfiles \" to \"INSTALLED_APPS\". INSTALLED_APPS = [ # ... 'django.contrib.staticfiles' , # ... ] Add \" STATIC_URL \" STATIC_URL = '/static/' Add \" STATICFILES_FINDERS \" to make sure template tag \"static\" can work in HTML templates. # ... STATICFILES_FINDERS = [ 'django.contrib.staticfiles.finders.FileSystemFinder' , 'django.contrib.staticfiles.finders.AppDirectoriesFinder' , ] # ... Add extra static directories using \" STATICFILES_DIRS \". In below example we added a directory \" static \" to static files finder which is located at the root level of our project. # ... STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ), ] # ... Add static root to root project urls.py to make available static files during development like below from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) Serving files uploaded by a user during development from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) That's it folks, let's meet in the next article. Check the below reference for more detail. Reference: https://docs.djangoproject.com/en/2.2/howto/static-files/#configuring-static-files","title":"Django Static Files Usage"},{"location":"blog/django-static-files-usage-75/#django-static-files-usage","text":"Every website needs to serve the extra files such as images, CSS, JavaScript. The name \"static\" itself indicates that contents of files do not change. So, in django to work with static files we need to make some configurations in setttings.py file. Django provides app \" django.contrib.staticfiles \" to help us manage it.","title":"Django Static Files Usage"},{"location":"blog/django-static-files-usage-75/#configuring-static-files-in-settingspy","text":"Add \" django.contrib.staticfiles \" to \"INSTALLED_APPS\". INSTALLED_APPS = [ # ... 'django.contrib.staticfiles' , # ... ] Add \" STATIC_URL \" STATIC_URL = '/static/' Add \" STATICFILES_FINDERS \" to make sure template tag \"static\" can work in HTML templates. # ... STATICFILES_FINDERS = [ 'django.contrib.staticfiles.finders.FileSystemFinder' , 'django.contrib.staticfiles.finders.AppDirectoriesFinder' , ] # ... Add extra static directories using \" STATICFILES_DIRS \". In below example we added a directory \" static \" to static files finder which is located at the root level of our project. # ... STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ), ] # ... Add static root to root project urls.py to make available static files during development like below from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) Serving files uploaded by a user during development from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) That's it folks, let's meet in the next article. Check the below reference for more detail. Reference: https://docs.djangoproject.com/en/2.2/howto/static-files/#configuring-static-files","title":"Configuring static files in settings.py"},{"location":"blog/django-template-for-loop-100/","text":"Django Template For Loop \u00b6 Django provides a template tag \"for\" to provide the for loop functionality in django templates. You can find the \u201c for loop \u201d syntax below. {% for local_name in iterable_name %} {{ local_name }} {% endfor %} Let's talk about a real time use case, For example if you want to show all athletes data in a ordered list in HTML then using django for loop we can do as follows. views.py from django.shortcuts import render def athletes_list ( request ): context = { \"athletes\" : [ \"John Snow\" , \"Dean Winchester\" , \"Sam Winchester\" ]} return render ( request , \"template.html\" , context ) template.html < ol > {% for name in athletes %} < li > {{name}} </ li > {% endfor %} </ ol > output < ol > < li > John Snow </ li > < li > Dean Winchester </ li > < li > Sam Winchester </ li > </ ol > In the above example used list data structure with the for loop. In the same way we can also use other data types like tuple, set, dict, etc. Some times we may need to iterate the items in reverse order in this kinds of cases we \" reversed \" template.html < ol > {% for name in athletes reversed %} < li > {{name}} </ li > {% endfor %} </ ol > output: < ol > < li > Sam Winchester </ li > < li > John Snow </ li > < li > Dean Winchester </ li > </ ol > In some cases we may need to access index number of for loop then we can use \" forloop.counter \" like below template.html {% for name in athletes %} < p > {{forloop.counter}}. {{name}} </ p > {% endfor %} output: < p > 1. Sam Winchester </ p > < p > 2. John Snow </ p > < p > 3. Dean Winchester </ p > We can use nested for loops in django templates. The for loop sets a number of variables available within the loop: Variable Description forloop.counter The current iteration of the loop (1-indexed) forloop.counter0 The current iteration of the loop (0-indexed) forloop.revcounter The number of iterations from the end of the loop (1-indexed) forloop.revcounter0 The number of iterations from the end of the loop (0-indexed) forloop.first True if this is the first time through the loop forloop.last True if this is the last time through the loop forloop.parentloop For nested loops, this is the loop surrounding the current one Reference: https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#for","title":"Django Template For Loop"},{"location":"blog/django-template-for-loop-100/#django-template-for-loop","text":"Django provides a template tag \"for\" to provide the for loop functionality in django templates. You can find the \u201c for loop \u201d syntax below. {% for local_name in iterable_name %} {{ local_name }} {% endfor %} Let's talk about a real time use case, For example if you want to show all athletes data in a ordered list in HTML then using django for loop we can do as follows. views.py from django.shortcuts import render def athletes_list ( request ): context = { \"athletes\" : [ \"John Snow\" , \"Dean Winchester\" , \"Sam Winchester\" ]} return render ( request , \"template.html\" , context ) template.html < ol > {% for name in athletes %} < li > {{name}} </ li > {% endfor %} </ ol > output < ol > < li > John Snow </ li > < li > Dean Winchester </ li > < li > Sam Winchester </ li > </ ol > In the above example used list data structure with the for loop. In the same way we can also use other data types like tuple, set, dict, etc. Some times we may need to iterate the items in reverse order in this kinds of cases we \" reversed \" template.html < ol > {% for name in athletes reversed %} < li > {{name}} </ li > {% endfor %} </ ol > output: < ol > < li > Sam Winchester </ li > < li > John Snow </ li > < li > Dean Winchester </ li > </ ol > In some cases we may need to access index number of for loop then we can use \" forloop.counter \" like below template.html {% for name in athletes %} < p > {{forloop.counter}}. {{name}} </ p > {% endfor %} output: < p > 1. Sam Winchester </ p > < p > 2. John Snow </ p > < p > 3. Dean Winchester </ p > We can use nested for loops in django templates. The for loop sets a number of variables available within the loop: Variable Description forloop.counter The current iteration of the loop (1-indexed) forloop.counter0 The current iteration of the loop (0-indexed) forloop.revcounter The number of iterations from the end of the loop (1-indexed) forloop.revcounter0 The number of iterations from the end of the loop (0-indexed) forloop.first True if this is the first time through the loop forloop.last True if this is the last time through the loop forloop.parentloop For nested loops, this is the loop surrounding the current one Reference: https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#for","title":"Django Template For Loop"},{"location":"blog/django-template-using-if-elif-else-101/","text":"django template using if...elif...else \u00b6 We can use if...elif..else conditionals in django template. The only difference between python code and django template code is it's syntax. It's similar to python code. Django template \"if\" syntax: \u00b6 {% if < condition > %} {{ < variable > }} {% endif %} Django template \"if..else\" syntax: \u00b6 {% if < condition > %} {{ < variable1 > }} {% else %} {{ < variable2 > }} {% endif %} Django template \"if..elif..else\" syntax: \u00b6 {% if < condition1 > %} {{ < variable1 > }} {% elif < condition2 > %} {{ < variable2 > }} {% else %} {{ < variable3 > }} {% endif %} Notes on django template conditionals (if...elif...else) \u00b6 If you do not write syntax correctly then django will throw errors. Do not use object method calls using parenthesis (i.e \"()\") just use method name instead. We can write multiple if..elif..else conditionals. We can write any number of \"if...elif...else\" nested conditionals in django templates. We can use operators like \"and\", \"or\", \"in\", \"==\", \"<\", \">\", etc. Evaluation takes from left to right. Examples for django template if...elif...else conditionals \u00b6 {% if athlete_list %} Number of athletes: {{ athlete_list | length }} {% elif athlete_in_locker_room_list %} Athletes should be out of the locker room soon! {% else %} No athletes. {% endif %} {% if athlete_list and coach_list %} Both athletes and coaches are available. {% endif %} {% if not athlete_list %} There are no athletes. {% endif %} {% if athlete_list or coach_list %} There are some athletes or some coaches. {% endif %} {% if not athlete_list or coach_list %} There are no athletes or there are some coaches. {% endif %} {% if athlete_list and not coach_list %} There are some athletes and absolutely no coaches. {% endif %} That's it folks, you can try it on your own. Feel free to contact me if you have any queries.","title":"django template using if...elif...else"},{"location":"blog/django-template-using-if-elif-else-101/#django-template-using-ifelifelse","text":"We can use if...elif..else conditionals in django template. The only difference between python code and django template code is it's syntax. It's similar to python code.","title":"django template using if...elif...else"},{"location":"blog/django-template-using-if-elif-else-101/#django-template-if-syntax","text":"{% if < condition > %} {{ < variable > }} {% endif %}","title":"Django template \"if\" syntax:"},{"location":"blog/django-template-using-if-elif-else-101/#django-template-ifelse-syntax","text":"{% if < condition > %} {{ < variable1 > }} {% else %} {{ < variable2 > }} {% endif %}","title":"Django template \"if..else\" syntax:"},{"location":"blog/django-template-using-if-elif-else-101/#django-template-ifelifelse-syntax","text":"{% if < condition1 > %} {{ < variable1 > }} {% elif < condition2 > %} {{ < variable2 > }} {% else %} {{ < variable3 > }} {% endif %}","title":"Django template \"if..elif..else\" syntax:"},{"location":"blog/django-template-using-if-elif-else-101/#notes-on-django-template-conditionals-ifelifelse","text":"If you do not write syntax correctly then django will throw errors. Do not use object method calls using parenthesis (i.e \"()\") just use method name instead. We can write multiple if..elif..else conditionals. We can write any number of \"if...elif...else\" nested conditionals in django templates. We can use operators like \"and\", \"or\", \"in\", \"==\", \"<\", \">\", etc. Evaluation takes from left to right.","title":"Notes on django template conditionals (if...elif...else)"},{"location":"blog/django-template-using-if-elif-else-101/#examples-for-django-template-ifelifelse-conditionals","text":"{% if athlete_list %} Number of athletes: {{ athlete_list | length }} {% elif athlete_in_locker_room_list %} Athletes should be out of the locker room soon! {% else %} No athletes. {% endif %} {% if athlete_list and coach_list %} Both athletes and coaches are available. {% endif %} {% if not athlete_list %} There are no athletes. {% endif %} {% if athlete_list or coach_list %} There are some athletes or some coaches. {% endif %} {% if not athlete_list or coach_list %} There are no athletes or there are some coaches. {% endif %} {% if athlete_list and not coach_list %} There are some athletes and absolutely no coaches. {% endif %} That's it folks, you can try it on your own. Feel free to contact me if you have any queries.","title":"Examples for django template if...elif...else conditionals"},{"location":"blog/django-unit-tests-factory-boy/","text":"Django unit testing using factoryboy \u00b6 what is a factory boy? \u00b6 factory boy is a fixtures replacement tool, it aims to replace static, hard to maintain fixtures with easy-to-use factories for complex objects. how to use factory boy with django? \u00b6 factoryboy provides a class DjangoModelFactory as a base class for django unit test factories. install the factory boy with pip pip install factory_boy follow the below directory structure for django apps \u251c\u2500\u2500 app1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 factories \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 question.py \u251c\u2500\u2500 views \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_question_list.py \u2514\u2500\u2500 __init__.py The factories folder contains the factory modules that will require to create related model objects in the testing phase. Let's see a model code for model Question (i.e app1/models.py ) from django.db import models class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) Let's see the code for factory code for question (i.e tests/factories/question.py ) import factory class QuestionFactory ( factory . django . DjangoModelFactory ): class Meta : model = 'app1.Question' question_text = factory . Faker ( 'name' ) pub_date = factory . Faker ( 'date' , end_datetime = datetime . date . today ()) Let's see code for list questions view (i.e app1/views.py ) from .models import Question from rest_framework.response import Response def list_questions ( request ): questions = Question . objects . all () . values ( \"id\" , \"question_text\" ) data = { \"questions\" : questions } return Response ( data , content_type = \"application/json\" ) Now, let's use factoryboy and write the test case for questions list api. The url path for the API is api/list-questions/ from django.test import TestCase , Client from .tests.factories.question import QuestionFactory class TestQuestionsListAPI ( TestCase ): def setUp ( self ): self . q1 = QuestionFactory ( question_text = \"who created python?\" ) self . q2 = QuestionFactory ( question_text = \"who created golang?\" ) client = Client () def test_questions_list ( self ): url = 'api/list-questions/' resp = self . client . get ( url ) questions = resp . json () . get ( \"questions\" ) question_titles = [ for q . get ( \"question_text\" ) for q in questions ] self . assertEqual ( resp . status_code , 200 ) self . assertTrue ( self . q1 . question_text in question_titles ) self . assertTrue ( self . q2 . question_text in question_titles ) In the above example, we have created two objects with factory and passed the question_text value. We can have any number of objects as we want based on our requirement. We can do more things with factory boy Sequences : When a field has a unique key, each object generated by the factory should have a different value for that field. LazyFunction : In simple cases, calling a function is enough to compute the value. If that function doesn\u2019t depend on the object being built, use LazyFunction to call that function; LazyAttribute : Some fields may be deduced from others, for instance the email based on the username. The LazyAttribute handles such cases. For more information read the official documentation at https://factoryboy.readthedocs.io/en/stable/index.html","title":"Django unit testing using factoryboy"},{"location":"blog/django-unit-tests-factory-boy/#django-unit-testing-using-factoryboy","text":"","title":"Django unit testing using factoryboy"},{"location":"blog/django-unit-tests-factory-boy/#what-is-a-factory-boy","text":"factory boy is a fixtures replacement tool, it aims to replace static, hard to maintain fixtures with easy-to-use factories for complex objects.","title":"what is a factory boy?"},{"location":"blog/django-unit-tests-factory-boy/#how-to-use-factory-boy-with-django","text":"factoryboy provides a class DjangoModelFactory as a base class for django unit test factories. install the factory boy with pip pip install factory_boy follow the below directory structure for django apps \u251c\u2500\u2500 app1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 factories \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 question.py \u251c\u2500\u2500 views \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_question_list.py \u2514\u2500\u2500 __init__.py The factories folder contains the factory modules that will require to create related model objects in the testing phase. Let's see a model code for model Question (i.e app1/models.py ) from django.db import models class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) Let's see the code for factory code for question (i.e tests/factories/question.py ) import factory class QuestionFactory ( factory . django . DjangoModelFactory ): class Meta : model = 'app1.Question' question_text = factory . Faker ( 'name' ) pub_date = factory . Faker ( 'date' , end_datetime = datetime . date . today ()) Let's see code for list questions view (i.e app1/views.py ) from .models import Question from rest_framework.response import Response def list_questions ( request ): questions = Question . objects . all () . values ( \"id\" , \"question_text\" ) data = { \"questions\" : questions } return Response ( data , content_type = \"application/json\" ) Now, let's use factoryboy and write the test case for questions list api. The url path for the API is api/list-questions/ from django.test import TestCase , Client from .tests.factories.question import QuestionFactory class TestQuestionsListAPI ( TestCase ): def setUp ( self ): self . q1 = QuestionFactory ( question_text = \"who created python?\" ) self . q2 = QuestionFactory ( question_text = \"who created golang?\" ) client = Client () def test_questions_list ( self ): url = 'api/list-questions/' resp = self . client . get ( url ) questions = resp . json () . get ( \"questions\" ) question_titles = [ for q . get ( \"question_text\" ) for q in questions ] self . assertEqual ( resp . status_code , 200 ) self . assertTrue ( self . q1 . question_text in question_titles ) self . assertTrue ( self . q2 . question_text in question_titles ) In the above example, we have created two objects with factory and passed the question_text value. We can have any number of objects as we want based on our requirement. We can do more things with factory boy Sequences : When a field has a unique key, each object generated by the factory should have a different value for that field. LazyFunction : In simple cases, calling a function is enough to compute the value. If that function doesn\u2019t depend on the object being built, use LazyFunction to call that function; LazyAttribute : Some fields may be deduced from others, for instance the email based on the username. The LazyAttribute handles such cases. For more information read the official documentation at https://factoryboy.readthedocs.io/en/stable/index.html","title":"how to use factory boy with django?"},{"location":"blog/docker-compose-for-django-96/","text":"docker compose for django \u00b6 Docker compose is used to deploy multiple services in the containers like Django application, PostgreSQL database and Running Django Migrations to create table in the database. Dockerfile for Django application \u00b6 FROM python:3 ENV PYTHONUNBUFFERED 1 RUN mkdir /app WORKDIR /app COPY . /app RUN pip install -r requirements.txt EXPOSE 8000 CMD [ \"python\" , \"manage.py\" , \"runserver\" , \"0.0.0.0:5000\" ] Above Dockerfile starts with a Python 3image. It will create a directory and copies the django application and installs the required python packages and exposes the port 8000. Docker compose file - \"docker-compose.yml\" \u00b6 version: '3' services: web: build: . container_name: djangoapp ports: - \"8000:5000\" volumes: - .:/app - logvolume01:/var/log links: - db depends_on: - db db: image: postgres container_name: djangoapp-db environment: POSTGRES_USER: test_user POSTGRES_PASSWORD: secret POSTGRES_DB: test_db restart: unless-stopped ports: - \"5435:5432\" volumes: - data:/var/lib/postgresql/data In above docker compose file under services we have three services. web - Django application db - Postgres database for django app Let's build the images and start the services and create intial migrations using below commands docker-compose build docker-compose up -d docker-compose run web python manage.py migrate References: https://github.com/AnjaneyuluBatta505/docker-django-sample https://docs.docker.com/compose/django/","title":"docker compose for django"},{"location":"blog/docker-compose-for-django-96/#docker-compose-for-django","text":"Docker compose is used to deploy multiple services in the containers like Django application, PostgreSQL database and Running Django Migrations to create table in the database.","title":"docker compose for django"},{"location":"blog/docker-compose-for-django-96/#dockerfile-for-django-application","text":"FROM python:3 ENV PYTHONUNBUFFERED 1 RUN mkdir /app WORKDIR /app COPY . /app RUN pip install -r requirements.txt EXPOSE 8000 CMD [ \"python\" , \"manage.py\" , \"runserver\" , \"0.0.0.0:5000\" ] Above Dockerfile starts with a Python 3image. It will create a directory and copies the django application and installs the required python packages and exposes the port 8000.","title":"Dockerfile for Django application"},{"location":"blog/docker-compose-for-django-96/#docker-compose-file-docker-composeyml","text":"version: '3' services: web: build: . container_name: djangoapp ports: - \"8000:5000\" volumes: - .:/app - logvolume01:/var/log links: - db depends_on: - db db: image: postgres container_name: djangoapp-db environment: POSTGRES_USER: test_user POSTGRES_PASSWORD: secret POSTGRES_DB: test_db restart: unless-stopped ports: - \"5435:5432\" volumes: - data:/var/lib/postgresql/data In above docker compose file under services we have three services. web - Django application db - Postgres database for django app Let's build the images and start the services and create intial migrations using below commands docker-compose build docker-compose up -d docker-compose run web python manage.py migrate References: https://github.com/AnjaneyuluBatta505/docker-django-sample https://docs.docker.com/compose/django/","title":"Docker compose file - \"docker-compose.yml\""},{"location":"blog/fastapi-crud-operations/","text":"Getting started with FastAPI \u00b6 Why FastAPI? \u00b6 FastAPI is properly fast when we compare it to other major Python frameworks like Flask and Django. Support for asynchronous code. Very short development time. Easy testing. Best suitable for microservices. Auto docs generation from roues docs. Note: It only supports python3.X.X install FastAPI with pipenv \u00b6 Install pipenv & install fastapi pipenv install fastapi To activate this project's virtualenv, run pipenv shell . simple rest api example \u00b6 create a file main.py file and add below code to it. from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } Run the development server with uvicorn \u00b6 Install the package uvicorn pipenv install uvicorn Now, run the server with below command uvicorn main:app --reload route types in FastAPI \u00b6 The @app decorator lets us to set the method used for the route, e.g., @app.get or @app.post . GET , POST , PUT , DELETE and the less-used OPTIONS , HEAD , PATCH , TRACE are all supported this way. You can also support multiple methods on a given route simply by wrapping multple route functions, e.g. @app.get(\"/\") on one function and @app.post(\"/\") on another. accessing path and query parameters in FastAPI \u00b6 we can pass parameters to the route as a variable. let's see an example from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } we can specify the type of the parameter and we can also use multiple path parameters. We can also access the request parameters. Let's see an example below. Let's see the simple curl call to see the result. curl --location --request GET 'localhost:8000/' we can access the query parameters as a route arguments. Let's see an example. from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/\" ) async def read_item ( code : str = \"\" ): users = [ { \"id\" : 1 , \"name\" : \"Anji\" , \"code\" : \"C001\" }, { \"id\" : 2 , \"name\" : \"John\" , \"code\" : \"C001\" }, { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" }, ] result = list ( filter ( lambda x : x . get ( \"code\" ) == code if code else True , users )) data = { \"users\" : result } return data In the above code the parameter code accepts string as a input and the default value is empty string. Let's see an example to filter the users with code C002 curl --location --request GET 'localhost:8000/users?code=C002' The response we get { \"users\" : [ { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" } ] } parsing the POST method request body with FastAPI \u00b6 By using pydantic we can parse and validate the request body. Let's write a simple pydantic model for item . schema.py from typing import Optional from pydantic import BaseModel class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None main.py from fastapi import FastAPI from schema import app = FastAPI () @app . post ( '/items/' ) async def create_item ( item : Item ): # logic to create the item data = { \"item\" : item } return data Now, send below request curl --location --request POST 'localhost:8000/items/' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\": \"Dell\", \"description\": \"11th Generation\", \"price\": 345.44 }' We will see below response { \"item\" : { \"name\" : \"Dell\" , \"description\" : \"11th Generation\" , \"price\" : 345.44 , \"tax\" : null } } It's that simple to start with the FastAPI. Stay tuned to get more articles on FastAPI . auto generated docs \u00b6 visit below urls in your local environment after running the development server to see the api docs and try the api's http://localhost:8000/docs http://localhost:8000/redoc References: https://fastapi.tiangolo.com/ https://pydantic-docs.helpmanual.io/ https://www.postman.com/downloads/","title":"FastAPI CRUD operations"},{"location":"blog/fastapi-crud-operations/#getting-started-with-fastapi","text":"","title":"Getting started with FastAPI"},{"location":"blog/fastapi-crud-operations/#why-fastapi","text":"FastAPI is properly fast when we compare it to other major Python frameworks like Flask and Django. Support for asynchronous code. Very short development time. Easy testing. Best suitable for microservices. Auto docs generation from roues docs. Note: It only supports python3.X.X","title":"Why FastAPI?"},{"location":"blog/fastapi-crud-operations/#install-fastapi-with-pipenv","text":"Install pipenv & install fastapi pipenv install fastapi To activate this project's virtualenv, run pipenv shell .","title":"install FastAPI with pipenv"},{"location":"blog/fastapi-crud-operations/#simple-rest-api-example","text":"create a file main.py file and add below code to it. from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" }","title":"simple rest api example"},{"location":"blog/fastapi-crud-operations/#run-the-development-server-with-uvicorn","text":"Install the package uvicorn pipenv install uvicorn Now, run the server with below command uvicorn main:app --reload","title":"Run the development server with uvicorn"},{"location":"blog/fastapi-crud-operations/#route-types-in-fastapi","text":"The @app decorator lets us to set the method used for the route, e.g., @app.get or @app.post . GET , POST , PUT , DELETE and the less-used OPTIONS , HEAD , PATCH , TRACE are all supported this way. You can also support multiple methods on a given route simply by wrapping multple route functions, e.g. @app.get(\"/\") on one function and @app.post(\"/\") on another.","title":"route types in FastAPI"},{"location":"blog/fastapi-crud-operations/#accessing-path-and-query-parameters-in-fastapi","text":"we can pass parameters to the route as a variable. let's see an example from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } we can specify the type of the parameter and we can also use multiple path parameters. We can also access the request parameters. Let's see an example below. Let's see the simple curl call to see the result. curl --location --request GET 'localhost:8000/' we can access the query parameters as a route arguments. Let's see an example. from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/\" ) async def read_item ( code : str = \"\" ): users = [ { \"id\" : 1 , \"name\" : \"Anji\" , \"code\" : \"C001\" }, { \"id\" : 2 , \"name\" : \"John\" , \"code\" : \"C001\" }, { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" }, ] result = list ( filter ( lambda x : x . get ( \"code\" ) == code if code else True , users )) data = { \"users\" : result } return data In the above code the parameter code accepts string as a input and the default value is empty string. Let's see an example to filter the users with code C002 curl --location --request GET 'localhost:8000/users?code=C002' The response we get { \"users\" : [ { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" } ] }","title":"accessing path and query parameters in FastAPI"},{"location":"blog/fastapi-crud-operations/#parsing-the-post-method-request-body-with-fastapi","text":"By using pydantic we can parse and validate the request body. Let's write a simple pydantic model for item . schema.py from typing import Optional from pydantic import BaseModel class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None main.py from fastapi import FastAPI from schema import app = FastAPI () @app . post ( '/items/' ) async def create_item ( item : Item ): # logic to create the item data = { \"item\" : item } return data Now, send below request curl --location --request POST 'localhost:8000/items/' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\": \"Dell\", \"description\": \"11th Generation\", \"price\": 345.44 }' We will see below response { \"item\" : { \"name\" : \"Dell\" , \"description\" : \"11th Generation\" , \"price\" : 345.44 , \"tax\" : null } } It's that simple to start with the FastAPI. Stay tuned to get more articles on FastAPI .","title":"parsing the POST method request body with FastAPI"},{"location":"blog/fastapi-crud-operations/#auto-generated-docs","text":"visit below urls in your local environment after running the development server to see the api docs and try the api's http://localhost:8000/docs http://localhost:8000/redoc References: https://fastapi.tiangolo.com/ https://pydantic-docs.helpmanual.io/ https://www.postman.com/downloads/","title":"auto generated docs"},{"location":"blog/fastapi-using-sqlalchemy/","text":"Using sqlalchemy with FastAPI \u00b6 Prerequisites \u00b6 Install the following packages using pip fastapi sqlalchemy psycopg2-binary pip install fastapi sqlalchemy psycopg2-binary uvicorn Create fastapi app \u00b6 create a file main.py under src directory. Let's add the below code to create the app. main.py from fastapi import FastAPI app = FastAPI () Now, change directory with command cd src and run the fastapi with command uvicorn main:app --reaload . We can able to see the API docs at http://localhost:8000/docs Database connection with sqlalchemy \u00b6 create file src/db.py Create database engine \u00b6 add below code to create database engine from sqlalchemy import create_engine db_url = 'postgresql://awesome_user:secret@localhost:5432/awesome_store' engine = create_engine ( db_url ) we need to pass database url to function create_engine . It should be in the format driver://username:password@hostname:port/database_name Create session using database engine \u00b6 Create session class using sessionmaker using sqlalchemy Add a utility function get_session to get the db session object. By using session, we can execute the SQL and sqlalchemy ORM queries in the database. src/db.py from contextlib import contextmanager from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker db_url = 'postgresql://postgres:root@localhost:5432/awesome_store' engine = create_engine ( db_url ) LocalSession = sessionmaker ( bind = engine ) @contextmanager def get_session (): session = LocalSession () try : yield session finally : session . close () Create sqlalchemy ORM table \u00b6 Let's say we have below table with name category in the database. id name description 1 Bread staple food 2 Fruits Fruits Now, create a sqlalchemy table/model object. To do that let's create src/models.py and below code. src/models.py from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import INTEGER , VARCHAR , Column Base = declarative_base () class Category ( Base ): __tablename__ = 'category' id = Column ( 'id' , INTEGER , primary_key = True ) name = Column ( 'name' , VARCHAR ( 30 ), nullable = False ) description = Column ( 'description' , VARCHAR ( 255 )) Add sqlalchemy queries \u00b6 By using the ORM table/model we can write the queries. Let's write the below query to fetch all categories Create file src/queries.py and below code. from sqlalchemy import select from models import Category from db import get_session def get_categories (): stmt = select ( Category ) . filter () with get_session () as session : result = session . execute ( stmt ) return result . scalars () . all () Add GET api endpoint \"/api/categories\" \u00b6 Let's add an api endpoint /api/categories to the fastapi app To do that, open src/main.py and update the code as follows. src/main.py from fastapi import FastAPI from queries import get_categories app = FastAPI () @app . get ( '/api/categories' ) def get_categories_list (): return get_categories () Now access the above endpoint to see the data in the table. Find the sample response below. [ { \"id\" : 1 , \"name\" : \"Bread\" , \"description\" : \"staple food\" }, { \"id\" : 2 , \"name\" : \"Fruits\" , \"description\" : \"Fruits\" } ] Detailed video \u00b6 References \u00b6 https://github.com/AnjaneyuluBatta505/fastapi-tutorial/tree/fastapi_with_sqlalchemy https://docs.sqlalchemy.org/en/14/orm/session_api.html","title":"Using sqlalchemy with FastAPI"},{"location":"blog/fastapi-using-sqlalchemy/#using-sqlalchemy-with-fastapi","text":"","title":"Using sqlalchemy with FastAPI"},{"location":"blog/fastapi-using-sqlalchemy/#prerequisites","text":"Install the following packages using pip fastapi sqlalchemy psycopg2-binary pip install fastapi sqlalchemy psycopg2-binary uvicorn","title":"Prerequisites"},{"location":"blog/fastapi-using-sqlalchemy/#create-fastapi-app","text":"create a file main.py under src directory. Let's add the below code to create the app. main.py from fastapi import FastAPI app = FastAPI () Now, change directory with command cd src and run the fastapi with command uvicorn main:app --reaload . We can able to see the API docs at http://localhost:8000/docs","title":"Create fastapi app"},{"location":"blog/fastapi-using-sqlalchemy/#database-connection-with-sqlalchemy","text":"create file src/db.py","title":"Database connection with sqlalchemy"},{"location":"blog/fastapi-using-sqlalchemy/#create-database-engine","text":"add below code to create database engine from sqlalchemy import create_engine db_url = 'postgresql://awesome_user:secret@localhost:5432/awesome_store' engine = create_engine ( db_url ) we need to pass database url to function create_engine . It should be in the format driver://username:password@hostname:port/database_name","title":"Create database engine"},{"location":"blog/fastapi-using-sqlalchemy/#create-session-using-database-engine","text":"Create session class using sessionmaker using sqlalchemy Add a utility function get_session to get the db session object. By using session, we can execute the SQL and sqlalchemy ORM queries in the database. src/db.py from contextlib import contextmanager from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker db_url = 'postgresql://postgres:root@localhost:5432/awesome_store' engine = create_engine ( db_url ) LocalSession = sessionmaker ( bind = engine ) @contextmanager def get_session (): session = LocalSession () try : yield session finally : session . close ()","title":"Create session using database engine"},{"location":"blog/fastapi-using-sqlalchemy/#create-sqlalchemy-orm-table","text":"Let's say we have below table with name category in the database. id name description 1 Bread staple food 2 Fruits Fruits Now, create a sqlalchemy table/model object. To do that let's create src/models.py and below code. src/models.py from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import INTEGER , VARCHAR , Column Base = declarative_base () class Category ( Base ): __tablename__ = 'category' id = Column ( 'id' , INTEGER , primary_key = True ) name = Column ( 'name' , VARCHAR ( 30 ), nullable = False ) description = Column ( 'description' , VARCHAR ( 255 ))","title":"Create sqlalchemy ORM table"},{"location":"blog/fastapi-using-sqlalchemy/#add-sqlalchemy-queries","text":"By using the ORM table/model we can write the queries. Let's write the below query to fetch all categories Create file src/queries.py and below code. from sqlalchemy import select from models import Category from db import get_session def get_categories (): stmt = select ( Category ) . filter () with get_session () as session : result = session . execute ( stmt ) return result . scalars () . all ()","title":"Add sqlalchemy queries"},{"location":"blog/fastapi-using-sqlalchemy/#add-get-api-endpoint-apicategories","text":"Let's add an api endpoint /api/categories to the fastapi app To do that, open src/main.py and update the code as follows. src/main.py from fastapi import FastAPI from queries import get_categories app = FastAPI () @app . get ( '/api/categories' ) def get_categories_list (): return get_categories () Now access the above endpoint to see the data in the table. Find the sample response below. [ { \"id\" : 1 , \"name\" : \"Bread\" , \"description\" : \"staple food\" }, { \"id\" : 2 , \"name\" : \"Fruits\" , \"description\" : \"Fruits\" } ]","title":"Add GET api endpoint \"/api/categories\""},{"location":"blog/fastapi-using-sqlalchemy/#detailed-video","text":"","title":"Detailed video"},{"location":"blog/fastapi-using-sqlalchemy/#references","text":"https://github.com/AnjaneyuluBatta505/fastapi-tutorial/tree/fastapi_with_sqlalchemy https://docs.sqlalchemy.org/en/14/orm/session_api.html","title":"References"},{"location":"blog/generators-and-its-usage-in-python-7/","text":"Generators And Its Usage In Python \u00b6 Lets start with generators and its usage in python. A generator is a function in python which returns a python object. The returned object is an iterable object it like an array. Every object in the array is just a lazy function with parameters are ready for call. Generators are memory efficient because of its lazy evaluation. When we call method \"__next__\" on generator object it will evaluates object in the generator sequence and returns the value. Generators will not create an array containing all the values and returning them all at once. Instead generator yields the values one at a time, which requires less memory. simple generator function with yield statement \u00b6 def f (): yield 1 yield 2 generator = f () # access an element in generators sequence print ( generator . __next__ ()) # Output: 1 print ( generator . __next__ ()) # Output: 2 print ( generator . __next__ ()) # Output: StopIteration: Error In the above, the generator has two values. we can accessed the value from a generator with method \"__next__\". It has only two values when we try to access the third value, it raises an error called \"StopIteration\". It means generator has no object left that can generate the value. Normal python function to get first \"n\" even numbers \u00b6 def even_numbers ( n ): even_list = [] for i in range ( 1 , n ): even_list . append ( i * 2 ) return even_list # Excecution num_list = even_numbers ( 3 ) for num in num_list : print ( num ) # Output: 2 4 print ( num_list ) # Output: [2,4] Generator python function to get first \"n\" even numbers \u00b6 def even_numbers ( n ): for i in range ( 1 , n ): yield i * 2 # Excecution num_gen = even_numbers ( 3 ) for num in num_gen : print ( num ) # Output: 2 4 print ( list ( num_gen )) # Output: [] When we call above function it will return a generator object. As we discussed generator will produce the values on fly and it will not be available once its retrieved. If we the last \"print\" statement in above code. We got empty list after type conversion to list, Because we have used all the available values in the generator. This is the reason generators are faster than lists. References: https://docs.python.org/3/glossary.html#term-generator","title":"Generators And Its Usage In Python"},{"location":"blog/generators-and-its-usage-in-python-7/#generators-and-its-usage-in-python","text":"Lets start with generators and its usage in python. A generator is a function in python which returns a python object. The returned object is an iterable object it like an array. Every object in the array is just a lazy function with parameters are ready for call. Generators are memory efficient because of its lazy evaluation. When we call method \"__next__\" on generator object it will evaluates object in the generator sequence and returns the value. Generators will not create an array containing all the values and returning them all at once. Instead generator yields the values one at a time, which requires less memory.","title":"Generators And Its Usage In Python"},{"location":"blog/generators-and-its-usage-in-python-7/#simple-generator-function-with-yield-statement","text":"def f (): yield 1 yield 2 generator = f () # access an element in generators sequence print ( generator . __next__ ()) # Output: 1 print ( generator . __next__ ()) # Output: 2 print ( generator . __next__ ()) # Output: StopIteration: Error In the above, the generator has two values. we can accessed the value from a generator with method \"__next__\". It has only two values when we try to access the third value, it raises an error called \"StopIteration\". It means generator has no object left that can generate the value.","title":"simple generator function with yield statement"},{"location":"blog/generators-and-its-usage-in-python-7/#normal-python-function-to-get-first-n-even-numbers","text":"def even_numbers ( n ): even_list = [] for i in range ( 1 , n ): even_list . append ( i * 2 ) return even_list # Excecution num_list = even_numbers ( 3 ) for num in num_list : print ( num ) # Output: 2 4 print ( num_list ) # Output: [2,4]","title":"Normal python function to get first \"n\" even numbers"},{"location":"blog/generators-and-its-usage-in-python-7/#generator-python-function-to-get-first-n-even-numbers","text":"def even_numbers ( n ): for i in range ( 1 , n ): yield i * 2 # Excecution num_gen = even_numbers ( 3 ) for num in num_gen : print ( num ) # Output: 2 4 print ( list ( num_gen )) # Output: [] When we call above function it will return a generator object. As we discussed generator will produce the values on fly and it will not be available once its retrieved. If we the last \"print\" statement in above code. We got empty list after type conversion to list, Because we have used all the available values in the generator. This is the reason generators are faster than lists. References: https://docs.python.org/3/glossary.html#term-generator","title":"Generator python function to get first \"n\" even numbers"},{"location":"blog/getting-started-fast-api/","text":"Getting started with FastAPI \u00b6 Why FastAPI? \u00b6 FastAPI is properly fast when we compare it to other major Python frameworks like Flask and Django. Support for asynchronous code. Very short development time. Easy testing. Best suitable for microservices. Auto docs generation from roues docs. Note: It only supports python3.X.X install FastAPI with pipenv \u00b6 Install pipenv & install fastapi pipenv install fastapi To activate this project's virtualenv, run pipenv shell . simple rest api example \u00b6 create a file main.py file and add below code to it. from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } Run the development server with uvicorn \u00b6 Install the package uvicorn pipenv install uvicorn Now, run the server with below command uvicorn main:app --reload route types in FastAPI \u00b6 The @app decorator lets us to set the method used for the route, e.g., @app.get or @app.post . GET , POST , PUT , DELETE and the less-used OPTIONS , HEAD , PATCH , TRACE are all supported this way. You can also support multiple methods on a given route simply by wrapping multple route functions, e.g. @app.get(\"/\") on one function and @app.post(\"/\") on another. accessing path and query parameters in FastAPI \u00b6 we can pass parameters to the route as a variable. let's see an example from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } we can specify the type of the parameter and we can also use multiple path parameters. We can also access the request parameters. Let's see an example below. Let's see the simple curl call to see the result. curl --location --request GET 'localhost:8000/' we can access the query parameters as a route arguments. Let's see an example. from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/\" ) async def read_item ( code : str = \"\" ): users = [ { \"id\" : 1 , \"name\" : \"Anji\" , \"code\" : \"C001\" }, { \"id\" : 2 , \"name\" : \"John\" , \"code\" : \"C001\" }, { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" }, ] result = list ( filter ( lambda x : x . get ( \"code\" ) == code if code else True , users )) data = { \"users\" : result } return data In the above code the parameter code accepts string as a input and the default value is empty string. Let's see an example to filter the users with code C002 curl --location --request GET 'localhost:8000/users?code=C002' The response we get { \"users\" : [ { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" } ] } parsing the POST method request body with FastAPI \u00b6 By using pydantic we can parse and validate the request body. Let's write a simple pydantic model for item . schema.py from typing import Optional from pydantic import BaseModel class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None main.py from fastapi import FastAPI from schema import app = FastAPI () @app . post ( '/items/' ) async def create_item ( item : Item ): # logic to create the item data = { \"item\" : item } return data Now, send below request curl --location --request POST 'localhost:8000/items/' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\": \"Dell\", \"description\": \"11th Generation\", \"price\": 345.44 }' We will see below response { \"item\" : { \"name\" : \"Dell\" , \"description\" : \"11th Generation\" , \"price\" : 345.44 , \"tax\" : null } } It's that simple to start with the FastAPI. Stay tuned to get more articles on FastAPI . auto generated docs \u00b6 visit below urls in your local environment after running the development server to see the api docs and try the api's http://localhost:8000/docs http://localhost:8000/redoc References: https://fastapi.tiangolo.com/ https://pydantic-docs.helpmanual.io/ https://www.postman.com/downloads/","title":"Getting started with FastAPI"},{"location":"blog/getting-started-fast-api/#getting-started-with-fastapi","text":"","title":"Getting started with FastAPI"},{"location":"blog/getting-started-fast-api/#why-fastapi","text":"FastAPI is properly fast when we compare it to other major Python frameworks like Flask and Django. Support for asynchronous code. Very short development time. Easy testing. Best suitable for microservices. Auto docs generation from roues docs. Note: It only supports python3.X.X","title":"Why FastAPI?"},{"location":"blog/getting-started-fast-api/#install-fastapi-with-pipenv","text":"Install pipenv & install fastapi pipenv install fastapi To activate this project's virtualenv, run pipenv shell .","title":"install FastAPI with pipenv"},{"location":"blog/getting-started-fast-api/#simple-rest-api-example","text":"create a file main.py file and add below code to it. from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" }","title":"simple rest api example"},{"location":"blog/getting-started-fast-api/#run-the-development-server-with-uvicorn","text":"Install the package uvicorn pipenv install uvicorn Now, run the server with below command uvicorn main:app --reload","title":"Run the development server with uvicorn"},{"location":"blog/getting-started-fast-api/#route-types-in-fastapi","text":"The @app decorator lets us to set the method used for the route, e.g., @app.get or @app.post . GET , POST , PUT , DELETE and the less-used OPTIONS , HEAD , PATCH , TRACE are all supported this way. You can also support multiple methods on a given route simply by wrapping multple route functions, e.g. @app.get(\"/\") on one function and @app.post(\"/\") on another.","title":"route types in FastAPI"},{"location":"blog/getting-started-fast-api/#accessing-path-and-query-parameters-in-fastapi","text":"we can pass parameters to the route as a variable. let's see an example from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } we can specify the type of the parameter and we can also use multiple path parameters. We can also access the request parameters. Let's see an example below. Let's see the simple curl call to see the result. curl --location --request GET 'localhost:8000/' we can access the query parameters as a route arguments. Let's see an example. from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/\" ) async def read_item ( code : str = \"\" ): users = [ { \"id\" : 1 , \"name\" : \"Anji\" , \"code\" : \"C001\" }, { \"id\" : 2 , \"name\" : \"John\" , \"code\" : \"C001\" }, { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" }, ] result = list ( filter ( lambda x : x . get ( \"code\" ) == code if code else True , users )) data = { \"users\" : result } return data In the above code the parameter code accepts string as a input and the default value is empty string. Let's see an example to filter the users with code C002 curl --location --request GET 'localhost:8000/users?code=C002' The response we get { \"users\" : [ { \"id\" : 3 , \"name\" : \"Jennifer\" , \"code\" : \"C002\" } ] }","title":"accessing path and query parameters in FastAPI"},{"location":"blog/getting-started-fast-api/#parsing-the-post-method-request-body-with-fastapi","text":"By using pydantic we can parse and validate the request body. Let's write a simple pydantic model for item . schema.py from typing import Optional from pydantic import BaseModel class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None main.py from fastapi import FastAPI from schema import app = FastAPI () @app . post ( '/items/' ) async def create_item ( item : Item ): # logic to create the item data = { \"item\" : item } return data Now, send below request curl --location --request POST 'localhost:8000/items/' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"name\": \"Dell\", \"description\": \"11th Generation\", \"price\": 345.44 }' We will see below response { \"item\" : { \"name\" : \"Dell\" , \"description\" : \"11th Generation\" , \"price\" : 345.44 , \"tax\" : null } } It's that simple to start with the FastAPI. Stay tuned to get more articles on FastAPI .","title":"parsing the POST method request body with FastAPI"},{"location":"blog/getting-started-fast-api/#auto-generated-docs","text":"visit below urls in your local environment after running the development server to see the api docs and try the api's http://localhost:8000/docs http://localhost:8000/redoc References: https://fastapi.tiangolo.com/ https://pydantic-docs.helpmanual.io/ https://www.postman.com/downloads/","title":"auto generated docs"},{"location":"blog/getting-started-pytest/","text":"Getting started with Pytest \u00b6 What is pytest? \u00b6 pytest is a popular testing framework for Python. It allows us to write simple and scalable test cases for your Python code. It's often used for unit testing, although it can be extended to cover various testing needs, including functional and integration testing. pytest is known for its simplicity, powerful features, and extensive ecosystem of plugins and extensions. install pytest \u00b6 install pytest using pip and the command is pip install pytest creating test file \u00b6 Test filename should starts with test_ or ends with _test.py Example file name: test_math_functions.py run a sample test \u00b6 Create file with name test_math_functions.py Add the code below def test_addition (): assert 1 + 1 == 2 def test_subtraction (): assert 3 - 2 == 1 Run the command pytest to execute the above tests. Each test function should use the assert statement to check whether the code being tested behaves as expected. pytest.ini file \u00b6 [ pytest ] # Add custom markers for categorizing tests markers = slow: marks tests as slow regression: marks tests as regression tests integration: marks tests as integration tests # Specify test discovery patterns python_files = test_*.py python_classes = Test* python_functions = test_* # Add default command-line options for pytest addopts = -vv # Increase verbosity to show detailed test information --cov = my_module # Enable code coverage for the 'my_module' package --cov-report = html # Generate an HTML code coverage report # Configure pytest-cov options # In this example, we exclude certain directories from code coverage # and specify where to store the coverage data [ coverage:run ] omit = my_module/tests/* */__init__.py source = my_module # Specify environment variables for tests env = TESTING_ENV = pytest [pytest] : This section is used to specify various options related to pytest markers : Custom markers that can be used to categorize and select tests based on specific criteria. python_files , python_classes , python_functions : Patterns to discover test files, classes, and functions. In this example, it looks for test files starting with \" test_ \", test classes starting with \" Test \", and test functions starting with \" test_ \". addopts : Default command-line options that pytest should use when running tests. For example, increasing verbosity and enabling code coverage. [coverage:run] : Configuration section for the pytest-cov plugin, which provides code coverage reporting. omit : Specify which files or directories should be omitted from code coverage analysis. source : Specify the source code directory to be measured for coverage. env : We can define environment variables that will be set when running tests. In the above example, it sets a variable TESTING_ENV to \"pytest\". References: \u00b6 https://docs.pytest.org/en/7.1.x/contents.html","title":"Getting started with pytest"},{"location":"blog/getting-started-pytest/#getting-started-with-pytest","text":"","title":"Getting started with Pytest"},{"location":"blog/getting-started-pytest/#what-is-pytest","text":"pytest is a popular testing framework for Python. It allows us to write simple and scalable test cases for your Python code. It's often used for unit testing, although it can be extended to cover various testing needs, including functional and integration testing. pytest is known for its simplicity, powerful features, and extensive ecosystem of plugins and extensions.","title":"What is pytest?"},{"location":"blog/getting-started-pytest/#install-pytest","text":"install pytest using pip and the command is pip install pytest","title":"install pytest"},{"location":"blog/getting-started-pytest/#creating-test-file","text":"Test filename should starts with test_ or ends with _test.py Example file name: test_math_functions.py","title":"creating test file"},{"location":"blog/getting-started-pytest/#run-a-sample-test","text":"Create file with name test_math_functions.py Add the code below def test_addition (): assert 1 + 1 == 2 def test_subtraction (): assert 3 - 2 == 1 Run the command pytest to execute the above tests. Each test function should use the assert statement to check whether the code being tested behaves as expected.","title":"run a sample test"},{"location":"blog/getting-started-pytest/#pytestini-file","text":"[ pytest ] # Add custom markers for categorizing tests markers = slow: marks tests as slow regression: marks tests as regression tests integration: marks tests as integration tests # Specify test discovery patterns python_files = test_*.py python_classes = Test* python_functions = test_* # Add default command-line options for pytest addopts = -vv # Increase verbosity to show detailed test information --cov = my_module # Enable code coverage for the 'my_module' package --cov-report = html # Generate an HTML code coverage report # Configure pytest-cov options # In this example, we exclude certain directories from code coverage # and specify where to store the coverage data [ coverage:run ] omit = my_module/tests/* */__init__.py source = my_module # Specify environment variables for tests env = TESTING_ENV = pytest [pytest] : This section is used to specify various options related to pytest markers : Custom markers that can be used to categorize and select tests based on specific criteria. python_files , python_classes , python_functions : Patterns to discover test files, classes, and functions. In this example, it looks for test files starting with \" test_ \", test classes starting with \" Test \", and test functions starting with \" test_ \". addopts : Default command-line options that pytest should use when running tests. For example, increasing verbosity and enabling code coverage. [coverage:run] : Configuration section for the pytest-cov plugin, which provides code coverage reporting. omit : Specify which files or directories should be omitted from code coverage analysis. source : Specify the source code directory to be measured for coverage. env : We can define environment variables that will be set when running tests. In the above example, it sets a variable TESTING_ENV to \"pytest\".","title":"pytest.ini file"},{"location":"blog/getting-started-pytest/#references","text":"https://docs.pytest.org/en/7.1.x/contents.html","title":"References:"},{"location":"blog/getting-started-with-alembic/","text":"Getting started with Alembic \u00b6 Why Alembic? \u00b6 It's allows developers to manage the database migrations with ease. We can the changes and revert the changes to/from the database. Alembic is similar to Active Record Migrations for Ruby on Rails install \"alembic\" with pipenv \u00b6 run the command pipenv install alembic activate the virtual environment with command pipenv shell now, run the commnad alembic init alembic . It will create the configuration files for alembic. the project structure looks something like below. . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 alembic \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u2514\u2500\u2500 alembic.ini install postgresql python dependencies \u00b6 We will be using the postgres as a database. To install run the command pipenv install psycopg2 understanding the files created by alembic \u00b6 alembic.ini is the file for configurations. Now, let's open that file and update as below. change below line sqlalchemy.url = driver://user:pass@localhost/dbname to sqlalchemy.url = postgresql://%(DB_USER)s:%(DB_PASS)s@%(DB_HOST)s/%(DB_NAME)s sqlalchemy.url is the database url that alembic will use to make migrations. alembic/env.py is actual file which uses the config file alembic.ini and loads the configuration. For sqlalchemy.url we are setting the string interpolation so, we need to set the config options in alembic/env.py Let's add the below code # here we allow ourselves to pass interpolation vars to alembic.ini # fron the host env section = config . config_ini_section config . set_section_option ( section , \"DB_USER\" , os . environ . get ( \"DB_USER\" )) config . set_section_option ( section , \"DB_PASS\" , os . environ . get ( \"DB_PASS\" )) config . set_section_option ( section , \"DB_HOST\" , os . environ . get ( \"DB_HOST\" )) config . set_section_option ( section , \"DB_NAME\" , os . environ . get ( \"DB_NAME\" )) - Now the envfile looks like below. import os from logging.config import fileConfig from sqlalchemy import engine_from_config from sqlalchemy import pool from alembic import context # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context . config # here we allow ourselves to pass interpolation vars to alembic.ini # fron the host env section = config . config_ini_section config . set_section_option ( section , \"DB_USER\" , os . environ . get ( \"DB_USER\" )) config . set_section_option ( section , \"DB_PASS\" , os . environ . get ( \"DB_PASS\" )) config . set_section_option ( section , \"DB_HOST\" , os . environ . get ( \"DB_HOST\" )) config . set_section_option ( section , \"DB_NAME\" , os . environ . get ( \"DB_NAME\" )) # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig ( config . config_file_name ) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata target_metadata = None # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline (): \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config . get_main_option ( \"sqlalchemy.url\" ) context . configure ( url = url , target_metadata = target_metadata , literal_binds = True , dialect_opts = { \"paramstyle\" : \"named\" }, ) with context . begin_transaction (): context . run_migrations () def run_migrations_online (): \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = engine_from_config ( config . get_section ( config . config_ini_section ), prefix = \"sqlalchemy.\" , poolclass = pool . NullPool , ) with connectable . connect () as connection : context . configure ( connection = connection , target_metadata = target_metadata ) with context . begin_transaction (): context . run_migrations () if context . is_offline_mode (): run_migrations_offline () else : run_migrations_online () If we want we can make modifications to the alembic confgurations loaded from alembic.ini file. Now, we should make sure that we need to have the below environment variable. Create a database named awesome_store in postgres database. export DB_USER = \"postgres\" export DB_PASS = \"root\" export DB_HOST = \"localhost\" export DB_NAME = \"awesome_store\" creating first database migration with alembic \u00b6 let's use the command alembic revision -m \"create user table\" to create the skeliton of the migration. Now, the direcoty looks like below. . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 alembic \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u2502 \u2514\u2500\u2500 433af9f41996_create_user_table.py \u2514\u2500\u2500 alembic.ini - 433af9f41996_create_user_table.py is the migration file created with above command. 433af9f41996_create_user_table.py \"\"\"create user table Revision ID: 433af9f41996 Revises: Create Date: 2021-11-20 19:17:01.434529 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic. revision = '433af9f41996' down_revision = None branch_labels = None depends_on = None def upgrade (): pass def downgrade (): pass Let's talk about the above file. revision : It's the code to identify the migration file. down_revision : By using it alembic will apply the migrations in an order. branch_labels : It's just help info as lables to identify it. depends_on : It's reference code on which the current migration depends on. upgrade() : It's the function get's called when a migration changes are applied. downgrade() : It's the function get's called when a migration changes are removed. Let's update the 433af9f41996_create_user_table.py as below. \"\"\"create user table Revision ID: 433af9f41996 Revises: Create Date: 2021-11-20 19:17:01.434529 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic. revision = '433af9f41996' down_revision = None branch_labels = None depends_on = None def upgrade (): op . create_table ( 'account' , sa . Column ( 'id' , sa . Integer , primary_key = True ), sa . Column ( 'name' , sa . String ( 50 ), nullable = False ), sa . Column ( 'description' , sa . Unicode ( 200 )), ) def downgrade (): op . drop_table ( 'account' ) - The above code will create a table named account with coulmns id , name , description when upgraded and deletes the table when downgraded. To see the generated sql just run the command alembic upgrade head --sql . It will generate the below query BEGIN ; CREATE TABLE alembic_version ( version_num VARCHAR ( 32 ) NOT NULL , CONSTRAINT alembic_version_pkc PRIMARY KEY ( version_num ) ); INFO [ alembic . runtime . migration ] Running upgrade -> 433 af9f41996 , create user table -- Running upgrade -> 433af9f41996 CREATE TABLE account ( id SERIAL NOT NULL , name VARCHAR ( 50 ) NOT NULL , description VARCHAR ( 200 ), PRIMARY KEY ( id ) ); INSERT INTO alembic_version ( version_num ) VALUES ( '433af9f41996' ) RETURNING alembic_version . version_num ; COMMIT ; To apply the upgrade migration run the below command. alembic upgrade head Now, check the database you will find the two tables alembic_version and account . alembic_version is to maintain the database migrations information to avoid reapplying the already applied migrations. To remove the last applied migration run command alembic downgrade -1 References: \u00b6 https://alembic.sqlalchemy.org/en/latest/tutorial.html https://alembic.sqlalchemy.org/en/latest/api/commands.html","title":"Getting started with alembic"},{"location":"blog/getting-started-with-alembic/#getting-started-with-alembic","text":"","title":"Getting started with Alembic"},{"location":"blog/getting-started-with-alembic/#why-alembic","text":"It's allows developers to manage the database migrations with ease. We can the changes and revert the changes to/from the database. Alembic is similar to Active Record Migrations for Ruby on Rails","title":"Why Alembic?"},{"location":"blog/getting-started-with-alembic/#install-alembic-with-pipenv","text":"run the command pipenv install alembic activate the virtual environment with command pipenv shell now, run the commnad alembic init alembic . It will create the configuration files for alembic. the project structure looks something like below. . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 alembic \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u2514\u2500\u2500 alembic.ini","title":"install \"alembic\" with pipenv"},{"location":"blog/getting-started-with-alembic/#install-postgresql-python-dependencies","text":"We will be using the postgres as a database. To install run the command pipenv install psycopg2","title":"install postgresql python dependencies"},{"location":"blog/getting-started-with-alembic/#understanding-the-files-created-by-alembic","text":"alembic.ini is the file for configurations. Now, let's open that file and update as below. change below line sqlalchemy.url = driver://user:pass@localhost/dbname to sqlalchemy.url = postgresql://%(DB_USER)s:%(DB_PASS)s@%(DB_HOST)s/%(DB_NAME)s sqlalchemy.url is the database url that alembic will use to make migrations. alembic/env.py is actual file which uses the config file alembic.ini and loads the configuration. For sqlalchemy.url we are setting the string interpolation so, we need to set the config options in alembic/env.py Let's add the below code # here we allow ourselves to pass interpolation vars to alembic.ini # fron the host env section = config . config_ini_section config . set_section_option ( section , \"DB_USER\" , os . environ . get ( \"DB_USER\" )) config . set_section_option ( section , \"DB_PASS\" , os . environ . get ( \"DB_PASS\" )) config . set_section_option ( section , \"DB_HOST\" , os . environ . get ( \"DB_HOST\" )) config . set_section_option ( section , \"DB_NAME\" , os . environ . get ( \"DB_NAME\" )) - Now the envfile looks like below. import os from logging.config import fileConfig from sqlalchemy import engine_from_config from sqlalchemy import pool from alembic import context # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context . config # here we allow ourselves to pass interpolation vars to alembic.ini # fron the host env section = config . config_ini_section config . set_section_option ( section , \"DB_USER\" , os . environ . get ( \"DB_USER\" )) config . set_section_option ( section , \"DB_PASS\" , os . environ . get ( \"DB_PASS\" )) config . set_section_option ( section , \"DB_HOST\" , os . environ . get ( \"DB_HOST\" )) config . set_section_option ( section , \"DB_NAME\" , os . environ . get ( \"DB_NAME\" )) # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig ( config . config_file_name ) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata target_metadata = None # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline (): \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config . get_main_option ( \"sqlalchemy.url\" ) context . configure ( url = url , target_metadata = target_metadata , literal_binds = True , dialect_opts = { \"paramstyle\" : \"named\" }, ) with context . begin_transaction (): context . run_migrations () def run_migrations_online (): \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = engine_from_config ( config . get_section ( config . config_ini_section ), prefix = \"sqlalchemy.\" , poolclass = pool . NullPool , ) with connectable . connect () as connection : context . configure ( connection = connection , target_metadata = target_metadata ) with context . begin_transaction (): context . run_migrations () if context . is_offline_mode (): run_migrations_offline () else : run_migrations_online () If we want we can make modifications to the alembic confgurations loaded from alembic.ini file. Now, we should make sure that we need to have the below environment variable. Create a database named awesome_store in postgres database. export DB_USER = \"postgres\" export DB_PASS = \"root\" export DB_HOST = \"localhost\" export DB_NAME = \"awesome_store\"","title":"understanding the files created by alembic"},{"location":"blog/getting-started-with-alembic/#creating-first-database-migration-with-alembic","text":"let's use the command alembic revision -m \"create user table\" to create the skeliton of the migration. Now, the direcoty looks like below. . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 alembic \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u2502 \u2514\u2500\u2500 433af9f41996_create_user_table.py \u2514\u2500\u2500 alembic.ini - 433af9f41996_create_user_table.py is the migration file created with above command. 433af9f41996_create_user_table.py \"\"\"create user table Revision ID: 433af9f41996 Revises: Create Date: 2021-11-20 19:17:01.434529 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic. revision = '433af9f41996' down_revision = None branch_labels = None depends_on = None def upgrade (): pass def downgrade (): pass Let's talk about the above file. revision : It's the code to identify the migration file. down_revision : By using it alembic will apply the migrations in an order. branch_labels : It's just help info as lables to identify it. depends_on : It's reference code on which the current migration depends on. upgrade() : It's the function get's called when a migration changes are applied. downgrade() : It's the function get's called when a migration changes are removed. Let's update the 433af9f41996_create_user_table.py as below. \"\"\"create user table Revision ID: 433af9f41996 Revises: Create Date: 2021-11-20 19:17:01.434529 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic. revision = '433af9f41996' down_revision = None branch_labels = None depends_on = None def upgrade (): op . create_table ( 'account' , sa . Column ( 'id' , sa . Integer , primary_key = True ), sa . Column ( 'name' , sa . String ( 50 ), nullable = False ), sa . Column ( 'description' , sa . Unicode ( 200 )), ) def downgrade (): op . drop_table ( 'account' ) - The above code will create a table named account with coulmns id , name , description when upgraded and deletes the table when downgraded. To see the generated sql just run the command alembic upgrade head --sql . It will generate the below query BEGIN ; CREATE TABLE alembic_version ( version_num VARCHAR ( 32 ) NOT NULL , CONSTRAINT alembic_version_pkc PRIMARY KEY ( version_num ) ); INFO [ alembic . runtime . migration ] Running upgrade -> 433 af9f41996 , create user table -- Running upgrade -> 433af9f41996 CREATE TABLE account ( id SERIAL NOT NULL , name VARCHAR ( 50 ) NOT NULL , description VARCHAR ( 200 ), PRIMARY KEY ( id ) ); INSERT INTO alembic_version ( version_num ) VALUES ( '433af9f41996' ) RETURNING alembic_version . version_num ; COMMIT ; To apply the upgrade migration run the below command. alembic upgrade head Now, check the database you will find the two tables alembic_version and account . alembic_version is to maintain the database migrations information to avoid reapplying the already applied migrations. To remove the last applied migration run command alembic downgrade -1","title":"creating first database migration with alembic"},{"location":"blog/getting-started-with-alembic/#references","text":"https://alembic.sqlalchemy.org/en/latest/tutorial.html https://alembic.sqlalchemy.org/en/latest/api/commands.html","title":"References:"},{"location":"blog/getting-started-with-django-first-app-30/","text":"Getting Started With Django First App \u00b6 Let's get started with our very first django application. I always recommend newbies to use the latest versions of django and python. Python2.X.X has no active support. We generally develop many projects on a single machine with different requirements(python packages). If we install python packages globally some projects may not work properly. To avoid it we should use virtual environments. Before we dive into our first django application I recommend you to read [\"setting up django development environment\"]/course/django/setting-up-django-development-environment/). Let's create the our first django application \u00b6 Steps to create a django application Create a directory named \"my_first_app\" and change directory into it. Now, install django package with pip . Create a virtual environement for python3 with command \"virtualenv -p python3 env3\" Create a django project named \"myproject\" and change the directory path to \"myproject\". Now, run the command \"python manage.py runserver 8000\". After, open the browser (I prefer mozilla or google chrome) and access \" https://localhost:8000 \" to see the success output. I've added reference code below(OS: Ubuntu) $ mkdir my_first_app $ cd my_first_app $ virtualenv -p python3 env3 $ source ./env3/bin/activate (env3)$ pip install django (env3)$ django-admin startproject myproject (env3)$ cd myproject (env3)$ python manage.py runserver 8000 Let's understand the django project structure \u00b6 After above steps our project structure looks like below myfirst_app \u2514\u2500\u2500 myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Our project execution starts from \"management.py\" for development server which is a python dev server. In production we replace the python dev server with servers like \"Nginx\", \"Apache2\", etc. Whenever a request comes to the server that is sent to WSGI application which we can see it in file \"myptoject/wsgi.py\" Django WSGI application uses settings in \"myproject/settings.py\" . \"settings.py\" files contains settings like URL Routing point, Database, Template directories, Static directories and more which we will learn about all these settings in coming articles. As Django is a MVC (MTV) framework it is divided into 3 parts 1.Model(Databases & ORM), 2.View(Business Logic) and 3.Template(User Presentation). Whenever a request comes in first it is passed to url router and then to view. View renders the template(HTML) and returns the response. For more details see \"Django Request Response Lifecycle\" . Let's write our First Django View \u00b6 If we see our project settings, we can find that our url setting is configured to \"myproject/urls.py\" (ROOT_URLCONF = 'myproject.urls'). In \"urls.py\" file we create url configurations in which are used by django to route the url paths to respected views. In django, we devide complex web applicaiton into simple apps which provides us quick navigation to the project. Let's write a simple view that returns plain text \"Hello World\". Before that let's create an app named \"myapp\". To create app run the command \"python manage.py startapp myapp\". After the command executed our project structure looks like below. myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Let's take a small introduction of django applicaiton structure. \u00b6 admin.py: Django comes with built in admin panel. This file contains the configurations for built-in admin panel. apps.py: We already know django can have multiple apps and each app can have it's specific configurations. This file contains the app configurations. __init__.py : This file used to represent the directory \"myapp\" as a python package. migrations/: Whenever we make database related changes all those changes are recorded in the form of migrations and stored in this directory. models.py: A model is a equivalent representation of relational database table. It contains the database tables in the form of django models. tests.py: Django comes with unit tests. we write django unit tests in this file. views.py: Views are mapped to urls which will return HttpResponse. This file contains the app related views. Let's write our very first django app view \u00b6 we will write a view that will return \"Hello World\" as a response. open file **\"myapp/views.py\"**and add below code to it. from django.http import HttpResponse def hello ( request ): data = \"Hello World\" return HttpResponse ( data ) Every django view takes request as a first parameter and returns the HttpResponse. Above view will return response \"hello world\" * Now, we have to map the view to urls. To do it, open file \"myproject/urls.py\" edit it as below. from django.contrib import admin from django.urls import path from myapp.views import hello urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'hello/' , hello , name = \"hello\" ) ] We have imported our view \"hello\" from myapp/views.py and mapped it to url \"hello/\" using django \"path\" utility. Now, access https://localhost:8000 you will get 404 page. Because we have updated our myproject/urls.py The page also says that it only contains 2 patters 1. admin/ 2. hello/ . Access http://localhost:8000/hello/ to see our very first view response Hello World . It's only returned plain text. Now, it's time to return some HTML response. Let's change our view hello ( myapp/views.py ) to below code from django.http import HttpResponse def hello ( request ): data = \"\"\" <html> <title>Hello World</title> <body> <h1>Hello World</h1> </body> </html> \"\"\" return HttpResponse ( data ) If we access the page http://localhost:8000/hello/ we can see the HTML response which contains text \"Hello World\" inside a \"h1\" tag. We can add more views to our our very first django application. In the above view we have written all the HTML code inside the view. It's not a good practice. I've shown it just to make you understand how the view works. For live projects we maintain the project structure. The project structure divided into django code (views, urls, tests, forms, models and other utilities), templates(HTML files) and static files(CSS, JavaScript, Images, Videos, etc). In the next article, We will see how to use templates and static files.","title":"Getting Started With Django First App"},{"location":"blog/getting-started-with-django-first-app-30/#getting-started-with-django-first-app","text":"Let's get started with our very first django application. I always recommend newbies to use the latest versions of django and python. Python2.X.X has no active support. We generally develop many projects on a single machine with different requirements(python packages). If we install python packages globally some projects may not work properly. To avoid it we should use virtual environments. Before we dive into our first django application I recommend you to read [\"setting up django development environment\"]/course/django/setting-up-django-development-environment/).","title":"Getting Started With Django First App"},{"location":"blog/getting-started-with-django-first-app-30/#lets-create-the-our-first-django-application","text":"Steps to create a django application Create a directory named \"my_first_app\" and change directory into it. Now, install django package with pip . Create a virtual environement for python3 with command \"virtualenv -p python3 env3\" Create a django project named \"myproject\" and change the directory path to \"myproject\". Now, run the command \"python manage.py runserver 8000\". After, open the browser (I prefer mozilla or google chrome) and access \" https://localhost:8000 \" to see the success output. I've added reference code below(OS: Ubuntu) $ mkdir my_first_app $ cd my_first_app $ virtualenv -p python3 env3 $ source ./env3/bin/activate (env3)$ pip install django (env3)$ django-admin startproject myproject (env3)$ cd myproject (env3)$ python manage.py runserver 8000","title":"Let's create the our first django application"},{"location":"blog/getting-started-with-django-first-app-30/#lets-understand-the-django-project-structure","text":"After above steps our project structure looks like below myfirst_app \u2514\u2500\u2500 myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Our project execution starts from \"management.py\" for development server which is a python dev server. In production we replace the python dev server with servers like \"Nginx\", \"Apache2\", etc. Whenever a request comes to the server that is sent to WSGI application which we can see it in file \"myptoject/wsgi.py\" Django WSGI application uses settings in \"myproject/settings.py\" . \"settings.py\" files contains settings like URL Routing point, Database, Template directories, Static directories and more which we will learn about all these settings in coming articles. As Django is a MVC (MTV) framework it is divided into 3 parts 1.Model(Databases & ORM), 2.View(Business Logic) and 3.Template(User Presentation). Whenever a request comes in first it is passed to url router and then to view. View renders the template(HTML) and returns the response. For more details see \"Django Request Response Lifecycle\" .","title":"Let's understand the django project structure"},{"location":"blog/getting-started-with-django-first-app-30/#lets-write-our-first-django-view","text":"If we see our project settings, we can find that our url setting is configured to \"myproject/urls.py\" (ROOT_URLCONF = 'myproject.urls'). In \"urls.py\" file we create url configurations in which are used by django to route the url paths to respected views. In django, we devide complex web applicaiton into simple apps which provides us quick navigation to the project. Let's write a simple view that returns plain text \"Hello World\". Before that let's create an app named \"myapp\". To create app run the command \"python manage.py startapp myapp\". After the command executed our project structure looks like below. myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py","title":"Let's write our First Django View"},{"location":"blog/getting-started-with-django-first-app-30/#lets-take-a-small-introduction-of-django-applicaiton-structure","text":"admin.py: Django comes with built in admin panel. This file contains the configurations for built-in admin panel. apps.py: We already know django can have multiple apps and each app can have it's specific configurations. This file contains the app configurations. __init__.py : This file used to represent the directory \"myapp\" as a python package. migrations/: Whenever we make database related changes all those changes are recorded in the form of migrations and stored in this directory. models.py: A model is a equivalent representation of relational database table. It contains the database tables in the form of django models. tests.py: Django comes with unit tests. we write django unit tests in this file. views.py: Views are mapped to urls which will return HttpResponse. This file contains the app related views.","title":"Let's take a small introduction of django applicaiton structure."},{"location":"blog/getting-started-with-django-first-app-30/#lets-write-our-very-first-django-app-view","text":"we will write a view that will return \"Hello World\" as a response. open file **\"myapp/views.py\"**and add below code to it. from django.http import HttpResponse def hello ( request ): data = \"Hello World\" return HttpResponse ( data ) Every django view takes request as a first parameter and returns the HttpResponse. Above view will return response \"hello world\" * Now, we have to map the view to urls. To do it, open file \"myproject/urls.py\" edit it as below. from django.contrib import admin from django.urls import path from myapp.views import hello urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'hello/' , hello , name = \"hello\" ) ] We have imported our view \"hello\" from myapp/views.py and mapped it to url \"hello/\" using django \"path\" utility. Now, access https://localhost:8000 you will get 404 page. Because we have updated our myproject/urls.py The page also says that it only contains 2 patters 1. admin/ 2. hello/ . Access http://localhost:8000/hello/ to see our very first view response Hello World . It's only returned plain text. Now, it's time to return some HTML response. Let's change our view hello ( myapp/views.py ) to below code from django.http import HttpResponse def hello ( request ): data = \"\"\" <html> <title>Hello World</title> <body> <h1>Hello World</h1> </body> </html> \"\"\" return HttpResponse ( data ) If we access the page http://localhost:8000/hello/ we can see the HTML response which contains text \"Hello World\" inside a \"h1\" tag. We can add more views to our our very first django application. In the above view we have written all the HTML code inside the view. It's not a good practice. I've shown it just to make you understand how the view works. For live projects we maintain the project structure. The project structure divided into django code (views, urls, tests, forms, models and other utilities), templates(HTML files) and static files(CSS, JavaScript, Images, Videos, etc). In the next article, We will see how to use templates and static files.","title":"Let's write our very first django app view"},{"location":"blog/getting-started-with-django-rest-framework-73/","text":"Getting Started With Django Rest Framework \u00b6 Before we get started with django rest framework we need to have the basic knowledge of python, django and how to work with RESTful API's. Django Rest Framework was developed by Tom Christe. It is one of the worlds leading API development frameworks. Django REST Framework is a open-source software and it is used by worlds best companies including Mozilla , Red Hat , Eventbrite , Heroku , and more . Why to use Django REST framework ? \u00b6 It comes with Web browsable API and it makes developers life simple. It has support for authentication policies including packages for OAuth1a and OAuth2. It supports serialization on both ORM and non-ORM data sources. We can just use regular function-based views if we don't need the more powerful features like generic views and viewsets. It has a great community support in sites like stackoverflow, quora, etc. It is trusted by world's recognised companies like Mozilla, Red Hat, Heroku, and Eventbrite. It is supported by both python2 and python3 Note: I suggest you to use the latest versions of softwares, because it comes with new features and less bugs. Installation of Django REST Framework \u00b6 It is dependent on django framework though it is automatically installed with django rest framework pip install django pip install djangorestframework Now, let's create and django application named \"myproject\". If you need help then read article \"getting started with django first app\" . Steps to configure the django rest framework \u00b6 Add 'rest_framework' to INSTALLED_APPS in our project settings. INSTALLED_APPS = [ # ... 'rest_framework' , # ... ] * If you want to use the browsable api and login and logout functionality of Django Rest Framework then add the blo code in project urls.py . urlpatterns = [ # ... path ( 'api-auth/' , include ( 'rest_framework.urls' )), # ... ] We have completed the configuration of django rest framework in our django project. To confirm it run the django development server and the in your local browser access url \"localhost:8000/api-auth/login/\" to see the Django REST Framework login page. Let's write our first API endoint using Django REST Framework \u00b6 Let's write the simple hello message api endpoint. Create the view named \"HelloAPIView\" and add below code to it. views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloAPIView ( APIView ): def get ( self , request ): data = { 'message' : 'Hello World' , } return Response ( data ) Now, we are ready with our first api view let's configure the view in the urls.py. # urls.py from django.urls import path from . import views urlpatterns = [ # ... path ( 'api/hello/' , views . HelloAPIView . as_view (), name = \"api_hello\" ), # ... ] Now, access the url in your browser \"localhost:800/api/hello/\" to see the output of our first rest API endpoint. Do not forget to run the app/project development server. We have setup our first Django REST API application. We will learn more in the upcoming articles. References: http://www.django-rest-framework.org/","title":"Getting Started With Django Rest Framework"},{"location":"blog/getting-started-with-django-rest-framework-73/#getting-started-with-django-rest-framework","text":"Before we get started with django rest framework we need to have the basic knowledge of python, django and how to work with RESTful API's. Django Rest Framework was developed by Tom Christe. It is one of the worlds leading API development frameworks. Django REST Framework is a open-source software and it is used by worlds best companies including Mozilla , Red Hat , Eventbrite , Heroku , and more .","title":"Getting Started With Django Rest Framework"},{"location":"blog/getting-started-with-django-rest-framework-73/#why-to-use-django-rest-framework","text":"It comes with Web browsable API and it makes developers life simple. It has support for authentication policies including packages for OAuth1a and OAuth2. It supports serialization on both ORM and non-ORM data sources. We can just use regular function-based views if we don't need the more powerful features like generic views and viewsets. It has a great community support in sites like stackoverflow, quora, etc. It is trusted by world's recognised companies like Mozilla, Red Hat, Heroku, and Eventbrite. It is supported by both python2 and python3 Note: I suggest you to use the latest versions of softwares, because it comes with new features and less bugs.","title":"Why to use Django REST framework ?"},{"location":"blog/getting-started-with-django-rest-framework-73/#installation-of-django-rest-framework","text":"It is dependent on django framework though it is automatically installed with django rest framework pip install django pip install djangorestframework Now, let's create and django application named \"myproject\". If you need help then read article \"getting started with django first app\" .","title":"Installation of Django REST Framework"},{"location":"blog/getting-started-with-django-rest-framework-73/#steps-to-configure-the-django-rest-framework","text":"Add 'rest_framework' to INSTALLED_APPS in our project settings. INSTALLED_APPS = [ # ... 'rest_framework' , # ... ] * If you want to use the browsable api and login and logout functionality of Django Rest Framework then add the blo code in project urls.py . urlpatterns = [ # ... path ( 'api-auth/' , include ( 'rest_framework.urls' )), # ... ] We have completed the configuration of django rest framework in our django project. To confirm it run the django development server and the in your local browser access url \"localhost:8000/api-auth/login/\" to see the Django REST Framework login page.","title":"Steps to configure the django rest framework"},{"location":"blog/getting-started-with-django-rest-framework-73/#lets-write-our-first-api-endoint-using-django-rest-framework","text":"Let's write the simple hello message api endpoint. Create the view named \"HelloAPIView\" and add below code to it. views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloAPIView ( APIView ): def get ( self , request ): data = { 'message' : 'Hello World' , } return Response ( data ) Now, we are ready with our first api view let's configure the view in the urls.py. # urls.py from django.urls import path from . import views urlpatterns = [ # ... path ( 'api/hello/' , views . HelloAPIView . as_view (), name = \"api_hello\" ), # ... ] Now, access the url in your browser \"localhost:800/api/hello/\" to see the output of our first rest API endpoint. Do not forget to run the app/project development server. We have setup our first Django REST API application. We will learn more in the upcoming articles. References: http://www.django-rest-framework.org/","title":"Let's write our first API endoint using Django REST Framework"},{"location":"blog/golang-struct-convert-unix-time-to-date-string-97/","text":"golang struct convert unix timestamp to date string \u00b6 Let's quickly check how we can convert unix timestamp to date string in a Go language. You may already used the unix timestamp, but let's quickly go through what is a unix timestamp ? the Unix timestamp is a way to track time as a running total of seconds. This count starts at the Unix Epoch on January 1 st , 1970 at UTC. Convert unix timestamp or Epoch to date string \u00b6 Lets do a simple code that can convert the unix epoch to date string. package main import \"fmt\" import \"time\" func main () { var unixTime int64 = 1573142098 t := time . Unix ( unixTime , 0 ) strDate := t . Format ( time . UnixDate ) fmt . Println ( strDate ) } // output: Thu Nov 7 15:54:58 UTC 2019 Create Epoch type to use in a Struct \u00b6 Let's create a type \"Epoch\" and bind the methods \" MarshalJSON \" that converts the epoch time to a date string. Let's bind another method \"UnmarshalJSON\" that converts a date string(i.e bytes array) to epoch time. These two methods will be used when we use json decoding and encoding. package main import ( \"encoding/json\" \"fmt\" \"strings\" \"time\" ) type Epoch int64 func ( t Epoch ) MarshalJSON () ([] byte , error ) { strDate := time . Time ( time . Unix ( int64 ( t ), 0 )). Format ( time . RFC3339 ) out := [] byte ( `\"` + strDate + `\"` ) return out , nil } func ( t * Epoch ) UnmarshalJSON ( b [] byte ) ( err error ) { s := strings . Trim ( string ( b ), \"\\\"\" ) q , err := time . Parse ( time . RFC3339 , s ) if err != nil { return err } * t = Epoch ( q . Unix ()) return nil } type MyStruct struct { Date Epoch } func main () { s := MyStruct { Date : Epoch ( 1980342000 )} fmt . Println ( s . Date ) js , err := json . Marshal ( s ) fmt . Println ( string ( js ), err ) b := [] byte ( `{\"date\": \"2032-10-02T15:00:00Z\"}` ) var m MyStruct err = json . Unmarshal ( b , & m ) fmt . Println ( m . Date , err ) } // OUTPUT: // 1980342000 // {\"Date\":\"2032-10-02T15:00:00Z\"} // 1980342000 That's it folks. Let's do more on go language in upcoming articles. References: https://golang.org/pkg/encoding/json/ https://golang.org/pkg/fmt/ https://golang.org/pkg/strings/ https://golang.org/pkg/time/","title":"golang struct convert unix timestamp to date string"},{"location":"blog/golang-struct-convert-unix-time-to-date-string-97/#golang-struct-convert-unix-timestamp-to-date-string","text":"Let's quickly check how we can convert unix timestamp to date string in a Go language. You may already used the unix timestamp, but let's quickly go through what is a unix timestamp ? the Unix timestamp is a way to track time as a running total of seconds. This count starts at the Unix Epoch on January 1 st , 1970 at UTC.","title":"golang struct convert unix timestamp to date string"},{"location":"blog/golang-struct-convert-unix-time-to-date-string-97/#convert-unix-timestamp-or-epoch-to-date-string","text":"Lets do a simple code that can convert the unix epoch to date string. package main import \"fmt\" import \"time\" func main () { var unixTime int64 = 1573142098 t := time . Unix ( unixTime , 0 ) strDate := t . Format ( time . UnixDate ) fmt . Println ( strDate ) } // output: Thu Nov 7 15:54:58 UTC 2019","title":"Convert unix timestamp or Epoch to date string"},{"location":"blog/golang-struct-convert-unix-time-to-date-string-97/#create-epoch-type-to-use-in-a-struct","text":"Let's create a type \"Epoch\" and bind the methods \" MarshalJSON \" that converts the epoch time to a date string. Let's bind another method \"UnmarshalJSON\" that converts a date string(i.e bytes array) to epoch time. These two methods will be used when we use json decoding and encoding. package main import ( \"encoding/json\" \"fmt\" \"strings\" \"time\" ) type Epoch int64 func ( t Epoch ) MarshalJSON () ([] byte , error ) { strDate := time . Time ( time . Unix ( int64 ( t ), 0 )). Format ( time . RFC3339 ) out := [] byte ( `\"` + strDate + `\"` ) return out , nil } func ( t * Epoch ) UnmarshalJSON ( b [] byte ) ( err error ) { s := strings . Trim ( string ( b ), \"\\\"\" ) q , err := time . Parse ( time . RFC3339 , s ) if err != nil { return err } * t = Epoch ( q . Unix ()) return nil } type MyStruct struct { Date Epoch } func main () { s := MyStruct { Date : Epoch ( 1980342000 )} fmt . Println ( s . Date ) js , err := json . Marshal ( s ) fmt . Println ( string ( js ), err ) b := [] byte ( `{\"date\": \"2032-10-02T15:00:00Z\"}` ) var m MyStruct err = json . Unmarshal ( b , & m ) fmt . Println ( m . Date , err ) } // OUTPUT: // 1980342000 // {\"Date\":\"2032-10-02T15:00:00Z\"} // 1980342000 That's it folks. Let's do more on go language in upcoming articles. References: https://golang.org/pkg/encoding/json/ https://golang.org/pkg/fmt/ https://golang.org/pkg/strings/ https://golang.org/pkg/time/","title":"Create Epoch type to use in a Struct"},{"location":"blog/how-to-add-custom-views-to-django-admin-91/","text":"How To Add Custom Views To Django Admin \u00b6 how to add custom views to django admin without actually creating the database table? Let's talk about it. In *django admin * to get the url link in the admin we have to register the model but in some cases we just need the a url with some functionality under an application. We can implement it with a simple trick. To implement it we have to create a dummy model. It's just inherits the models.Model from django. It will not create any migrations/table. Now, create a ModelAdmin class to the dummy model that we have created, override the method get_urls and return the url paths like below and url name should match with the format \"{app_label}_{model_name}__changelist\". Now register the Dummy Model with Dummy Model Admin Class. Now, open thedjango admin there you can find the link with the name of your model. Check out the below code to know how to implement it. admin.py \u00b6 from django.contrib import admin from django.http import HttpResponse from django.urls import path # my dummy model class DummyModel ( models . Model ): class Meta : verbose_name_plural = 'Dummy Model' app_label = 'sample' def my_custom_view ( request ): return HttpResponse ( 'Admin Custom View' ) class DummyModelAdmin ( admin . ModelAdmin ): model = DummyModel def get_urls ( self ): view_name = ' {} _ {} _changelist' . format ( self . model . _meta . app_label , self . model . _meta . model_name ) return [ path ( 'my_admin_path/' , my_custom_view , name = view_name ), ] admin . site . register ( DummyModel , DummyModelAdmin ) Above code is reference code that shows you how to implement *custom views to django admin*without actually creating the database table. You can find the reference project in my github account ( https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django/django_admin_custom_view ).","title":"How To Add Custom Views To Django Admin"},{"location":"blog/how-to-add-custom-views-to-django-admin-91/#how-to-add-custom-views-to-django-admin","text":"how to add custom views to django admin without actually creating the database table? Let's talk about it. In *django admin * to get the url link in the admin we have to register the model but in some cases we just need the a url with some functionality under an application. We can implement it with a simple trick. To implement it we have to create a dummy model. It's just inherits the models.Model from django. It will not create any migrations/table. Now, create a ModelAdmin class to the dummy model that we have created, override the method get_urls and return the url paths like below and url name should match with the format \"{app_label}_{model_name}__changelist\". Now register the Dummy Model with Dummy Model Admin Class. Now, open thedjango admin there you can find the link with the name of your model. Check out the below code to know how to implement it.","title":"How To Add Custom Views To Django Admin"},{"location":"blog/how-to-add-custom-views-to-django-admin-91/#adminpy","text":"from django.contrib import admin from django.http import HttpResponse from django.urls import path # my dummy model class DummyModel ( models . Model ): class Meta : verbose_name_plural = 'Dummy Model' app_label = 'sample' def my_custom_view ( request ): return HttpResponse ( 'Admin Custom View' ) class DummyModelAdmin ( admin . ModelAdmin ): model = DummyModel def get_urls ( self ): view_name = ' {} _ {} _changelist' . format ( self . model . _meta . app_label , self . model . _meta . model_name ) return [ path ( 'my_admin_path/' , my_custom_view , name = view_name ), ] admin . site . register ( DummyModel , DummyModelAdmin ) Above code is reference code that shows you how to implement *custom views to django admin*without actually creating the database table. You can find the reference project in my github account ( https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django/django_admin_custom_view ).","title":"admin.py"},{"location":"blog/how-to-add-image-in-select-options-html-93/","text":"how to add image in select options html ? \u00b6 we can add animage in select options in html. but, we cannot directly achieve it with the HTML alone. To display the images in the select drop-down we have to use javascript libraries. We can add an image in select options using \"select2\" jQuery library. what select2 can provide us ? \u00b6 select2 provides the same functionality as normal html select. select2 has searching and tagging capability which is one of the best features. The most interesting thing is its API. By using the select2 API we can customize its representation or behavior. We use the select2 API to add achieve our functionality. Select2 API provides us two functions \"templateResult\" and \"templateSelection\". We utilize these two functions to create our custom html (i.e images in selection) drop down selection with images. Example Code: \u00b6 Let's write code to add an image in select options drop down. <!DOCTYPE html> < html > < head > < title > Image drop down selection </ title > < link rel = \"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/css/select2.css\" /> </ head > < body > <!-- content --> < select id = \"id_select2_example\" style = \"width: 200px;\" > < option data-img_src = \"https://data.world/api/datadotworld-apps/dataset/python/file/raw/logo.png\" > Python programming </ option > < option data-img_src = \"https://sdtimes.com/wp-content/uploads/2018/09/Java-logo-490x301.jpg\" > Java programming </ option > < option data-img_src = \"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/783373/1160/772/m1/fpnw/wm0/letter-c-cm-.png?1447712834&s=c2ab07fcddfa8acf10c5a0c40f0578c2\" > C programming </ option > </ select > <!-- /content --> <!-- scripts --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/js/select2.js\" ></ script > < script type = \"text/javascript\" > function custom_template ( obj ){ var data = $ ( obj . element ). data (); var text = $ ( obj . element ). text (); if ( data && data [ 'img_src' ]){ img_src = data [ 'img_src' ]; template = $ ( \"<div><img src=\\\"\" + img_src + \"\\\" style=\\\"width:100%;height:150px;\\\"/><p style=\\\"font-weight: 700;font-size:14pt;text-align:center;\\\">\" + text + \"</p></div>\" ); return template ; } } var options = { 'templateSelection' : custom_template , 'templateResult' : custom_template , } $ ( '#id_select2_example' ). select2 ( options ); $ ( '.select2-container--default .select2-selection--single' ). css ({ 'height' : '220px' }); </ script > </ body > </ html > In above code we have create a custom template function that returns the customized html dom element. you can see the same code in code pen also by visiting the url https://codepen.io/anjaneyulubatta505/pen/bOvoPL .","title":"how to add image in select options html"},{"location":"blog/how-to-add-image-in-select-options-html-93/#how-to-add-image-in-select-options-html","text":"we can add animage in select options in html. but, we cannot directly achieve it with the HTML alone. To display the images in the select drop-down we have to use javascript libraries. We can add an image in select options using \"select2\" jQuery library.","title":"how to add image in select options html ?"},{"location":"blog/how-to-add-image-in-select-options-html-93/#what-select2-can-provide-us","text":"select2 provides the same functionality as normal html select. select2 has searching and tagging capability which is one of the best features. The most interesting thing is its API. By using the select2 API we can customize its representation or behavior. We use the select2 API to add achieve our functionality. Select2 API provides us two functions \"templateResult\" and \"templateSelection\". We utilize these two functions to create our custom html (i.e images in selection) drop down selection with images.","title":"what select2 can provide us ?"},{"location":"blog/how-to-add-image-in-select-options-html-93/#example-code","text":"Let's write code to add an image in select options drop down. <!DOCTYPE html> < html > < head > < title > Image drop down selection </ title > < link rel = \"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/css/select2.css\" /> </ head > < body > <!-- content --> < select id = \"id_select2_example\" style = \"width: 200px;\" > < option data-img_src = \"https://data.world/api/datadotworld-apps/dataset/python/file/raw/logo.png\" > Python programming </ option > < option data-img_src = \"https://sdtimes.com/wp-content/uploads/2018/09/Java-logo-490x301.jpg\" > Java programming </ option > < option data-img_src = \"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/783373/1160/772/m1/fpnw/wm0/letter-c-cm-.png?1447712834&s=c2ab07fcddfa8acf10c5a0c40f0578c2\" > C programming </ option > </ select > <!-- /content --> <!-- scripts --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/js/select2.js\" ></ script > < script type = \"text/javascript\" > function custom_template ( obj ){ var data = $ ( obj . element ). data (); var text = $ ( obj . element ). text (); if ( data && data [ 'img_src' ]){ img_src = data [ 'img_src' ]; template = $ ( \"<div><img src=\\\"\" + img_src + \"\\\" style=\\\"width:100%;height:150px;\\\"/><p style=\\\"font-weight: 700;font-size:14pt;text-align:center;\\\">\" + text + \"</p></div>\" ); return template ; } } var options = { 'templateSelection' : custom_template , 'templateResult' : custom_template , } $ ( '#id_select2_example' ). select2 ( options ); $ ( '.select2-container--default .select2-selection--single' ). css ({ 'height' : '220px' }); </ script > </ body > </ html > In above code we have create a custom template function that returns the customized html dom element. you can see the same code in code pen also by visiting the url https://codepen.io/anjaneyulubatta505/pen/bOvoPL .","title":"Example Code:"},{"location":"blog/how-to-add-swap-memory-in-ubuntu-88/","text":"How To Add Swap Memory In Ubuntu \u00b6 In every computer we have a physical memory(i.e: RAM). When a user starts a program it is loaded from the disk (where the program resides) to the RAM, because RAM is faster than the disk memory. Some processes intially need more memory to startup but after it will not use the complete memory that is allocated to it. When RAM is completely used then there will be no memory for the new processes. In that case linux kernals will kills the process that is consuming the more memory. In ordered to avoid it we add a swap memory to the system. Swap Memory: If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. While swap space can help machines with a small amount of RAM, it should not be considered a replacement for more RAM. Swap space is located on hard drives, which have a slower access time than physical memory. It is always recommended that system should have twice the amount of the RAM. Steps to add swap memory to Ubuntu server: Check the system for swap memory information sudo swapon --show It will not show output if swap memory is not enabled. Check for available disk space in the ubuntu system using the below command df -h above command will give the output something like below Filesystem Size Used Avail Use% Mounted on tmpfs 386M 2 .1M 383M 1 % /run /dev/sda1 84G 34G 46G 43 % / We have total of 46 GB available in the above example output. So, we can add the swap memory based on the RAM size. Check RAM size in MB with below command free -h - above command will give the output something like below total used free shared buff/cache available Mem: 3 .8G 2 .2G 208M 363M 1 .3G 992M It is alway recommended that we should have the swap memory as twice of the RAM. So, For above output we can use 8 GB of Swap memory. Now, lets create a swap memory using \"fallocate\" , \"swapon\" commands In the above example we have 4GB of RAM. So, We are creating the swap memory of 8GBabove command will give the output something like below sudo fallocate -l 8G /swap_mem_file sudo chmod 600 /swap_mem_file # check the correctness with below command ls -lh /swap_mem_file # Output: -rw------- 1 root root 8.0G Aug 25 11:14 /swap_mem_file # mark the file as swap space sudo mkswap /swap_mem_file sudo swapon /swap_mem_file Now, verify the availability if swap memory using below command sudo swapon --show It will show output something like NAME TYPE SIZE USED PRIO /dev/sda1 partition 8G 0B -2 We have configure the swap memory only for the current session. To make the swap memory configuration permanent execute the below commands sudo cp /etc/fstab /etc/fstab.bak echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab Now, swap memory is ready to use. By using the swap memory we can avoid the memory problems like \"Out of memory: Kill process or sacrifice child\" Reference: https://help.ubuntu.com/community/SwapFaq","title":"How To Add Swap Memory In Ubuntu"},{"location":"blog/how-to-add-swap-memory-in-ubuntu-88/#how-to-add-swap-memory-in-ubuntu","text":"In every computer we have a physical memory(i.e: RAM). When a user starts a program it is loaded from the disk (where the program resides) to the RAM, because RAM is faster than the disk memory. Some processes intially need more memory to startup but after it will not use the complete memory that is allocated to it. When RAM is completely used then there will be no memory for the new processes. In that case linux kernals will kills the process that is consuming the more memory. In ordered to avoid it we add a swap memory to the system. Swap Memory: If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. While swap space can help machines with a small amount of RAM, it should not be considered a replacement for more RAM. Swap space is located on hard drives, which have a slower access time than physical memory. It is always recommended that system should have twice the amount of the RAM. Steps to add swap memory to Ubuntu server: Check the system for swap memory information sudo swapon --show It will not show output if swap memory is not enabled. Check for available disk space in the ubuntu system using the below command df -h above command will give the output something like below Filesystem Size Used Avail Use% Mounted on tmpfs 386M 2 .1M 383M 1 % /run /dev/sda1 84G 34G 46G 43 % / We have total of 46 GB available in the above example output. So, we can add the swap memory based on the RAM size. Check RAM size in MB with below command free -h - above command will give the output something like below total used free shared buff/cache available Mem: 3 .8G 2 .2G 208M 363M 1 .3G 992M It is alway recommended that we should have the swap memory as twice of the RAM. So, For above output we can use 8 GB of Swap memory. Now, lets create a swap memory using \"fallocate\" , \"swapon\" commands In the above example we have 4GB of RAM. So, We are creating the swap memory of 8GBabove command will give the output something like below sudo fallocate -l 8G /swap_mem_file sudo chmod 600 /swap_mem_file # check the correctness with below command ls -lh /swap_mem_file # Output: -rw------- 1 root root 8.0G Aug 25 11:14 /swap_mem_file # mark the file as swap space sudo mkswap /swap_mem_file sudo swapon /swap_mem_file Now, verify the availability if swap memory using below command sudo swapon --show It will show output something like NAME TYPE SIZE USED PRIO /dev/sda1 partition 8G 0B -2 We have configure the swap memory only for the current session. To make the swap memory configuration permanent execute the below commands sudo cp /etc/fstab /etc/fstab.bak echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab Now, swap memory is ready to use. By using the swap memory we can avoid the memory problems like \"Out of memory: Kill process or sacrifice child\" Reference: https://help.ubuntu.com/community/SwapFaq","title":"How To Add Swap Memory In Ubuntu"},{"location":"blog/how-to-install-pip-in-ubuntu-linux-18/","text":"How to Install pip in Ubuntu (Linux) \u00b6 pip introduction \u00b6 pip stands for \"preferred installer program\". pip - python package manager is used to manage and install python packages software packages. It is a package management system.we can find all python packages irrespective of the python version python2 or python3 which were uploaded to Python Package Index(PyPI). pip is the python package manger used to install Python packages, It will automatically finds, downloads and installs the python packages. install pip on ubuntu \u00b6 To install the pip run the following commands on terminal sudo apt-get update sudo apt-get install python-pip Usage of PIP \u00b6 Installing a python package with pip pip install <python-package-name>s Uninstall a python package with pip pip uninstall <python-package-name> To list all the installed packages with pip pip freeze To search for a package with pip pip search <python-package-name>","title":"How to Install pip in Ubuntu (Linux)"},{"location":"blog/how-to-install-pip-in-ubuntu-linux-18/#how-to-install-pip-in-ubuntu-linux","text":"","title":"How to Install pip in Ubuntu (Linux)"},{"location":"blog/how-to-install-pip-in-ubuntu-linux-18/#pip-introduction","text":"pip stands for \"preferred installer program\". pip - python package manager is used to manage and install python packages software packages. It is a package management system.we can find all python packages irrespective of the python version python2 or python3 which were uploaded to Python Package Index(PyPI). pip is the python package manger used to install Python packages, It will automatically finds, downloads and installs the python packages.","title":"pip introduction"},{"location":"blog/how-to-install-pip-in-ubuntu-linux-18/#install-pip-on-ubuntu","text":"To install the pip run the following commands on terminal sudo apt-get update sudo apt-get install python-pip","title":"install pip on ubuntu"},{"location":"blog/how-to-install-pip-in-ubuntu-linux-18/#usage-of-pip","text":"Installing a python package with pip pip install <python-package-name>s Uninstall a python package with pip pip uninstall <python-package-name> To list all the installed packages with pip pip freeze To search for a package with pip pip search <python-package-name>","title":"Usage of PIP"},{"location":"blog/how-to-install-postgresql-on-windows-15/","text":"how to install postgresql on windows \u00b6 Steps to install postgresql on windows \u00b6 To install PostgreSQL on your windows OS follow the given steps and make sure you have turned Third Party Antivirus off while installing. It's always recommended to install the latest version of PostgreSQL because, if any bugs are in the older version that fixed in the new versions. Go to the url \" https://www.enterprisedb.com/downloads/postgres-postgresql-downloads \" Choose the PostgreSQL version and download it. Run it as an administrator, It will ask you for username and password. Choose a strong password. After the installation of postgresql its recommended to use PGAdmin","title":"how to install postgresql on windows"},{"location":"blog/how-to-install-postgresql-on-windows-15/#how-to-install-postgresql-on-windows","text":"","title":"how to install postgresql on windows"},{"location":"blog/how-to-install-postgresql-on-windows-15/#steps-to-install-postgresql-on-windows","text":"To install PostgreSQL on your windows OS follow the given steps and make sure you have turned Third Party Antivirus off while installing. It's always recommended to install the latest version of PostgreSQL because, if any bugs are in the older version that fixed in the new versions. Go to the url \" https://www.enterprisedb.com/downloads/postgres-postgresql-downloads \" Choose the PostgreSQL version and download it. Run it as an administrator, It will ask you for username and password. Choose a strong password. After the installation of postgresql its recommended to use PGAdmin","title":"Steps to install postgresql on windows"},{"location":"blog/how-to-install-python-on-windows-14/","text":"How to install python on windows \u00b6 Steps to install python on windows \u00b6 Go to the directory where the python software is downloaded Select the python software and double click on it and install. It will install under the directory \"C:\\PythonXX\" (36) Now add python path to system path. To do that open cmd(command line) and enter the below code set PYTHONPATH=%PYTHONPATH%;C:\\PythonXX; Note: Replace XX with specific python version number like 3.8 Now, open command line and enter \"python\", you will see the python shell interpreter. Refefrence: \u00b6 https://docs.python.org/3/using/windows.html","title":"How to install python on windows"},{"location":"blog/how-to-install-python-on-windows-14/#how-to-install-python-on-windows","text":"","title":"How to install python on windows"},{"location":"blog/how-to-install-python-on-windows-14/#steps-to-install-python-on-windows","text":"Go to the directory where the python software is downloaded Select the python software and double click on it and install. It will install under the directory \"C:\\PythonXX\" (36) Now add python path to system path. To do that open cmd(command line) and enter the below code set PYTHONPATH=%PYTHONPATH%;C:\\PythonXX; Note: Replace XX with specific python version number like 3.8 Now, open command line and enter \"python\", you will see the python shell interpreter.","title":"Steps to install python on windows"},{"location":"blog/how-to-install-python-on-windows-14/#refefrence","text":"https://docs.python.org/3/using/windows.html","title":"Refefrence:"},{"location":"blog/how-to-install-python-virtualenv-19/","text":"How to install python virtualenv? \u00b6 install virtualenv on Ubuntu \u00b6 virtualenv is a python package. It is used to create an isolated python environments. virtualenv allows us to work with different versions of packages for different projects. when we work with projects, the requirements will change from project to project. If we use python package lets say celery==1.0 in some projects we may need to use celery==2.0. So, working with an isolated environment is a good approach to follow. When we install a python package in isolated environment it will only install in the virtual environment and It will not install as a global/system package. I allows us to maintain good development environment. We can use pip to install the python packages in the virtual python environment. Note: If we install package without virtualenv then it will be install as a global package. Steps to install virtualenv on ubuntu \u00b6 If you didn't install pip then first install pip To install virtualenv on ubuntu run the below commands on terminal sudo pip install virtualenv # or sudo pip install https://github.com/pypa/virtualenv/tarball/master Steps to install virtualenv on Windows \u00b6 If you didn't install pip on windows then first install pip To install virtualenv on windows run the below commands on cmd pip install virtualenv # or pip install https://github.com/pypa/virtualenv/tarball/master usage of virtualenv \u00b6 How to create virtual environment? # create python3 virtual environment virtualenv -p python3 env How to activate virtual environment ? source env/bin/activate # or . env/bin/activate How to install a python package in virtualenv ? pip install django How to deactivate virtual environment ? deactivate","title":"How to install python virtualenv?"},{"location":"blog/how-to-install-python-virtualenv-19/#how-to-install-python-virtualenv","text":"","title":"How to install python virtualenv?"},{"location":"blog/how-to-install-python-virtualenv-19/#install-virtualenv-on-ubuntu","text":"virtualenv is a python package. It is used to create an isolated python environments. virtualenv allows us to work with different versions of packages for different projects. when we work with projects, the requirements will change from project to project. If we use python package lets say celery==1.0 in some projects we may need to use celery==2.0. So, working with an isolated environment is a good approach to follow. When we install a python package in isolated environment it will only install in the virtual environment and It will not install as a global/system package. I allows us to maintain good development environment. We can use pip to install the python packages in the virtual python environment. Note: If we install package without virtualenv then it will be install as a global package.","title":"install virtualenv on Ubuntu"},{"location":"blog/how-to-install-python-virtualenv-19/#steps-to-install-virtualenv-on-ubuntu","text":"If you didn't install pip then first install pip To install virtualenv on ubuntu run the below commands on terminal sudo pip install virtualenv # or sudo pip install https://github.com/pypa/virtualenv/tarball/master","title":"Steps to install virtualenv on ubuntu"},{"location":"blog/how-to-install-python-virtualenv-19/#steps-to-install-virtualenv-on-windows","text":"If you didn't install pip on windows then first install pip To install virtualenv on windows run the below commands on cmd pip install virtualenv # or pip install https://github.com/pypa/virtualenv/tarball/master","title":"Steps to install virtualenv on Windows"},{"location":"blog/how-to-install-python-virtualenv-19/#usage-of-virtualenv","text":"How to create virtual environment? # create python3 virtual environment virtualenv -p python3 env How to activate virtual environment ? source env/bin/activate # or . env/bin/activate How to install a python package in virtualenv ? pip install django How to deactivate virtual environment ? deactivate","title":"usage of virtualenv"},{"location":"blog/how-to-install-sublime-text-on-ubuntu-linux-20/","text":"How To Install Sublime Text On Ubuntu ( Linux) \u00b6 Sublime text editor is a light weighted and best featured text editor available on web. It offers both trail version and licenced version of sublime. It is the best text editor for development and especially for python development. Sublime is a popular cross-platform text editor. Sublime Text editor offers official Linux apt repository to make it easy to install and receive update on Ubuntu . Sublime Text supports almost all programming languages and markup languages. It has thousands of plugins to extend the functionality of sublime text editor. It is available for free, but we are supposed to buy a license to use it for full-time. install sublime on ubuntu via the official apt repository: \u00b6 Open the terminal and run the below commands to install the key & to ensure apt is set up to work with https sources: wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - sudo apt-get install apt-transport-https Add the apt repository with below command: echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list Now, update apt sources and install Sublime Text with below commands sudo apt-get update sudo apt-get install sublime-text Following the above steps will install sublime on ubuntu. To check whether it's installed or not, open the terminal(Ctrl+Alt+T) and run command \"subllime\". If it is installed successfull then it will open the sublime text editor. References: https://www.sublimetext.com/ https://www.sublimetext.com/docs/3/linux_repositories.html#apt","title":"How To Install Sublime Text On Ubuntu ( Linux)"},{"location":"blog/how-to-install-sublime-text-on-ubuntu-linux-20/#how-to-install-sublime-text-on-ubuntu-linux","text":"Sublime text editor is a light weighted and best featured text editor available on web. It offers both trail version and licenced version of sublime. It is the best text editor for development and especially for python development. Sublime is a popular cross-platform text editor. Sublime Text editor offers official Linux apt repository to make it easy to install and receive update on Ubuntu . Sublime Text supports almost all programming languages and markup languages. It has thousands of plugins to extend the functionality of sublime text editor. It is available for free, but we are supposed to buy a license to use it for full-time.","title":"How To Install Sublime Text On Ubuntu ( Linux)"},{"location":"blog/how-to-install-sublime-text-on-ubuntu-linux-20/#install-sublime-on-ubuntu-via-the-official-apt-repository","text":"Open the terminal and run the below commands to install the key & to ensure apt is set up to work with https sources: wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - sudo apt-get install apt-transport-https Add the apt repository with below command: echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list Now, update apt sources and install Sublime Text with below commands sudo apt-get update sudo apt-get install sublime-text Following the above steps will install sublime on ubuntu. To check whether it's installed or not, open the terminal(Ctrl+Alt+T) and run command \"subllime\". If it is installed successfull then it will open the sublime text editor. References: https://www.sublimetext.com/ https://www.sublimetext.com/docs/3/linux_repositories.html#apt","title":"install sublime on ubuntu via the official apt repository:"},{"location":"blog/how-to-re-order-apps-models-django/","text":"How to re-order apps and models in django admin? \u00b6 When we register the models django automatically sorts apps by lexicographic order. But, we can do some hacks to order models and apps as we want. Append below code in settings \u00b6 from collections import OrderedDict APP_ORDER = [ ( \"app1\" , [ \"Model2\" , \"Model1\" , \"Model3\" ]), ( \"app2\" , [ \"Model2\" , \"Model5\" , \"Model3\" ]), ( \"app3\" , [ \"Model1\" , \"Model6\" , \"Model3\" ]), ] - APP_ORDER elements should be in the format (<app_name>, [<model1>, <model2>]) Now add a template tag which will create the order \u00b6 Let's add the below code to the template tag from django import template from django.conf import settings register = template . Library () def pop_and_get_app ( apps , key , app_label ): for index , app in enumerate ( apps ): if app [ key ] == app_label : obj = apps . pop ( index ) return obj return None @register . filter def sort_apps ( apps ): new_apps = [] order = settings . APP_ORDER for app_label in order . keys (): obj = pop_and_get_app ( apps , \"app_label\" , app_label ) new_apps . append ( obj ) if obj else None apps = new_apps + apps for app in apps : models = app . get ( \"models\" ) app_label = app . get ( \"app_label\" ) new_models = [] order_models = settings . APP_ORDER . get ( app_label , []) for model in order_models : obj = pop_and_get_app ( models , \"object_name\" , model ) new_models . append ( obj ) if obj else None models = new_models + models app [ \"models\" ] = models return apps override the django template admin/index.html \u00b6 We need to override the django admin template like below. {% extends \"admin/index.html\" %} {% block content %} {% load i18n static admin_tags %} < div id = \"content-main\" > {% if app_list %} {% for app in app_list|sort_apps %} < div class = \"app-{{ app.app_label }} module\" > < table > < caption > < a href = \"{{ app.app_url }}\" class = \"section\" title = \"{% blocktrans with name=app.name %}Models in the {{ name }} application{% endblocktrans %}\" > {{ app.name }} </ a > </ caption > {% if app.app_label == 'manage_templates' %} < tr class = \"model-{{ model.object_name|lower }}\" > < th scope = \"row\" >< a href = \"{% url 'admin_www_list' %}\" > WWW </ a ></ th > </ tr > {% endif %} {% for model in app.models %} < tr class = \"model-{{ model.object_name|lower }}\" > {% if model.admin_url %} < th scope = \"row\" >< a href = \"{{ model.admin_url }}\" > {{ model.name }} </ a ></ th > {% else %} < th scope = \"row\" > {{ model.name }} </ th > {% endif %} {% if model.add_url %} < td >< a href = \"{{ model.add_url }}\" class = \"addlink\" > {% trans 'Add' %} </ a ></ td > {% else %} < td > &nbsp; </ td > {% endif %} {% if model.admin_url %} < td >< a href = \"{{ model.admin_url }}\" class = \"changelink\" > {% trans 'Change' %} </ a ></ td > {% else %} < td > &nbsp; </ td > {% endif %} </ tr > {% endfor %} </ tr > </ table > </ div > {% endfor %} {% else %} < p > {% trans \"You don't have permission to edit anything.\" %} </ p > {% endif %} </ div > {% endblock %}","title":"How to re-order apps and models in django admin?"},{"location":"blog/how-to-re-order-apps-models-django/#how-to-re-order-apps-and-models-in-django-admin","text":"When we register the models django automatically sorts apps by lexicographic order. But, we can do some hacks to order models and apps as we want.","title":"How to re-order apps and models in django admin?"},{"location":"blog/how-to-re-order-apps-models-django/#append-below-code-in-settings","text":"from collections import OrderedDict APP_ORDER = [ ( \"app1\" , [ \"Model2\" , \"Model1\" , \"Model3\" ]), ( \"app2\" , [ \"Model2\" , \"Model5\" , \"Model3\" ]), ( \"app3\" , [ \"Model1\" , \"Model6\" , \"Model3\" ]), ] - APP_ORDER elements should be in the format (<app_name>, [<model1>, <model2>])","title":"Append below code in settings"},{"location":"blog/how-to-re-order-apps-models-django/#now-add-a-template-tag-which-will-create-the-order","text":"Let's add the below code to the template tag from django import template from django.conf import settings register = template . Library () def pop_and_get_app ( apps , key , app_label ): for index , app in enumerate ( apps ): if app [ key ] == app_label : obj = apps . pop ( index ) return obj return None @register . filter def sort_apps ( apps ): new_apps = [] order = settings . APP_ORDER for app_label in order . keys (): obj = pop_and_get_app ( apps , \"app_label\" , app_label ) new_apps . append ( obj ) if obj else None apps = new_apps + apps for app in apps : models = app . get ( \"models\" ) app_label = app . get ( \"app_label\" ) new_models = [] order_models = settings . APP_ORDER . get ( app_label , []) for model in order_models : obj = pop_and_get_app ( models , \"object_name\" , model ) new_models . append ( obj ) if obj else None models = new_models + models app [ \"models\" ] = models return apps","title":"Now add a template tag which will create the order"},{"location":"blog/how-to-re-order-apps-models-django/#override-the-django-template-adminindexhtml","text":"We need to override the django admin template like below. {% extends \"admin/index.html\" %} {% block content %} {% load i18n static admin_tags %} < div id = \"content-main\" > {% if app_list %} {% for app in app_list|sort_apps %} < div class = \"app-{{ app.app_label }} module\" > < table > < caption > < a href = \"{{ app.app_url }}\" class = \"section\" title = \"{% blocktrans with name=app.name %}Models in the {{ name }} application{% endblocktrans %}\" > {{ app.name }} </ a > </ caption > {% if app.app_label == 'manage_templates' %} < tr class = \"model-{{ model.object_name|lower }}\" > < th scope = \"row\" >< a href = \"{% url 'admin_www_list' %}\" > WWW </ a ></ th > </ tr > {% endif %} {% for model in app.models %} < tr class = \"model-{{ model.object_name|lower }}\" > {% if model.admin_url %} < th scope = \"row\" >< a href = \"{{ model.admin_url }}\" > {{ model.name }} </ a ></ th > {% else %} < th scope = \"row\" > {{ model.name }} </ th > {% endif %} {% if model.add_url %} < td >< a href = \"{{ model.add_url }}\" class = \"addlink\" > {% trans 'Add' %} </ a ></ td > {% else %} < td > &nbsp; </ td > {% endif %} {% if model.admin_url %} < td >< a href = \"{{ model.admin_url }}\" class = \"changelink\" > {% trans 'Change' %} </ a ></ td > {% else %} < td > &nbsp; </ td > {% endif %} </ tr > {% endfor %} </ tr > </ table > </ div > {% endfor %} {% else %} < p > {% trans \"You don't have permission to edit anything.\" %} </ p > {% endif %} </ div > {% endblock %}","title":"override the django template admin/index.html"},{"location":"blog/how-to-upload-python-package-to-pypi-39/","text":"how to upload python package to pypi \u00b6 Python is a open-source programming language. It's very easy to learn and use. It is used in many areas like web development, game development, network programming, scientific and numeric computing and more. Python's license is administered by the Python Software Foundation. As it is a open-source so many developers are writing their own packages for reusability. Instead of writing the same functionality again we can use the package that is developed by other developers. It saves time and development cost. As it is an open-source, it won't cost any charge. PyPI is the software foundation which manages the all python packages which were developed by open-source contributors. In this article we will see how to upload your python package to PyPI . Steps to upload a python package to PyPI. \u00b6 Create a project directory. The project directory can of any name of your choice. After creating the project directory create files LICENSE.txt, MANIFEST.in, README.rst, setup.py and create a directory with package name that will be used in imports. Create another directory named \"docs\" which will contain documentation of our python package. After finishing the above steps, our poject structure looks like below PROJECT - DIRECTORY \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 MANIFEST . in \u251c\u2500\u2500 README . rst \u251c\u2500\u2500 docs ( FOLDER ) \u251c\u2500\u2500 setup . py \u2514\u2500\u2500 PACKAGENAME ( FOLDER ) \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 file1 . py \u2514\u2500\u2500 file2 . py Let's see descriptions for above files. LICENSE.txt: The license that we use to release our python package. It looks something like The main hap . py code ( in the src subfolder ) is distributed under the simplified BSD license . ------------------------------------------------------------------------------- Copyright ( c ) 2018 Learnbatta . com . All rights reserved . Redistribution and use in source and binary forms , with or without modification , are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice , this list of conditions and the following disclaimer . 2. Redistributions in binary form must reproduce the above copyright notice , this list of conditions and the following disclaimer in the documentation and / or other materials provided with the distribution . THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . MANIFEST.in: When \"setup.py\" builds our python package, it includes \"*.py\" files in our package. If we want other files to be included in the .tar.gz file that will be uploaded to PyPI then we add these files in \"MANIFEST.in\" file. It is something looks like include README . rst recursive - include docs /* README.rst: It contains the documentation of the project/package. Please see example. setup.py: It is the magic file that create and installs our python package. It also keeps that track of version and formatting for PyPI. The python packages that used in writing the \"setup.py\" is \"distutils\" and \"setuptools\". The sample setup.py looks something like # -*- coding: utf-8 -*- import os import sys from distutils.core import setup CURRENT_PYTHON = sys . version_info [: 2 ] REQUIRED_PYTHON = ( 3 , 5 ) def read ( fname ): return open ( os . path . join ( os . path . dirname ( __file__ ), fname )) . read () if CURRENT_PYTHON < REQUIRED_PYTHON : sys . stderr . write ( \"This version of Pydicttoxml requires Python {} . {} , \\ but you're trying to install it on Python {} . {} .\" . format ( * ( REQUIRED_PYTHON + CURRENT_PYTHON ))) sys . exit ( 1 ) setup ( name = 'pydicttoxml' , version = '1.0.1' , description = 'Convert python dictionary into a xml equivalent format' , author = u 'Anjaneyulu Batta' , author_email = 'anjaneyulu.batta505@gmail.com' , url = 'https://github.com/AnjaneyuluBatta505/pydicttoxml' , packages = [ 'pydicttoxml' ], keywords = \"convert dictionary into a xml\" , long_description = read ( 'README.rst' ), classifiers = [ 'Intended Audience :: Developers' , 'License :: OSI Approved :: MIT License' , 'Operating System :: OS Independent' , 'Programming Language :: Python' , 'Programming Language :: Python :: 3.5' , 'Programming Language :: Python :: 3.6' , 'Topic :: Software Development :: Libraries :: Python Modules' , 'Topic :: Text Processing :: Markup :: XML' ], license = 'MIT' ) Let's try to understand a bit about parameters passed to setup function in above file. name: The name will be used while installing the python package via pip version: Version of currently releasing python package description: Short description of python package author: Author name of the python package author_email: Author contact email of the python package url: Url to the repository where the code resides. packages: Python packages that will we added to tar.gz file while archiving the python package. keywords: Keywords that will be used to search for that package in the search engines like google, bing and yahoo, etc. long_description: It contains the information of package how it can be used. It contains the complete description. classifiers: classifiers can then be used by community members to find projects based on their desired criteria. For more info visit https://pypi.org/classifiers/ licence: under which license our package is releasing. When we are ready with everything mentioned above then we are ready to go. Before that we need to have an account in the pypi.org. Go to our project directory in Terminal(Ubuntu).Install required packages \"setuptools\", \"distutils\" and \"twine\" with pip pip install setuptools pip install distutils pip install twine - Now, create our python package distribution with below command. python setup.py sdist - After executing the above command it will create a \"tar.gz\" file inside the directoy \" project/sdist/<package-version>.tar.gz \" Before uploading our very first python package lets create a configuration file \"~/.pypirc\" and add configuration details. The file looks something like [ distutils ] index - servers = pypi [ pypi ] username : { username } password :{ password } Upload our python package to pypi with below command twine upload dist/PACKAGENAME-VERSION.tar.gz Now, test our package by installing it via pip pip install {package name} It will work as we expected if not let me help you. If you get any errors then we will discuss in comment section below. References: https://pypi.org/help/ http://setuptools.readthedocs.io/en/latest/setuptools.html#new-and-changed-setup-keywords","title":"how to upload python package to pypi"},{"location":"blog/how-to-upload-python-package-to-pypi-39/#how-to-upload-python-package-to-pypi","text":"Python is a open-source programming language. It's very easy to learn and use. It is used in many areas like web development, game development, network programming, scientific and numeric computing and more. Python's license is administered by the Python Software Foundation. As it is a open-source so many developers are writing their own packages for reusability. Instead of writing the same functionality again we can use the package that is developed by other developers. It saves time and development cost. As it is an open-source, it won't cost any charge. PyPI is the software foundation which manages the all python packages which were developed by open-source contributors. In this article we will see how to upload your python package to PyPI .","title":"how to upload python package to pypi"},{"location":"blog/how-to-upload-python-package-to-pypi-39/#steps-to-upload-a-python-package-to-pypi","text":"Create a project directory. The project directory can of any name of your choice. After creating the project directory create files LICENSE.txt, MANIFEST.in, README.rst, setup.py and create a directory with package name that will be used in imports. Create another directory named \"docs\" which will contain documentation of our python package. After finishing the above steps, our poject structure looks like below PROJECT - DIRECTORY \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 MANIFEST . in \u251c\u2500\u2500 README . rst \u251c\u2500\u2500 docs ( FOLDER ) \u251c\u2500\u2500 setup . py \u2514\u2500\u2500 PACKAGENAME ( FOLDER ) \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 file1 . py \u2514\u2500\u2500 file2 . py Let's see descriptions for above files. LICENSE.txt: The license that we use to release our python package. It looks something like The main hap . py code ( in the src subfolder ) is distributed under the simplified BSD license . ------------------------------------------------------------------------------- Copyright ( c ) 2018 Learnbatta . com . All rights reserved . Redistribution and use in source and binary forms , with or without modification , are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice , this list of conditions and the following disclaimer . 2. Redistributions in binary form must reproduce the above copyright notice , this list of conditions and the following disclaimer in the documentation and / or other materials provided with the distribution . THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . MANIFEST.in: When \"setup.py\" builds our python package, it includes \"*.py\" files in our package. If we want other files to be included in the .tar.gz file that will be uploaded to PyPI then we add these files in \"MANIFEST.in\" file. It is something looks like include README . rst recursive - include docs /* README.rst: It contains the documentation of the project/package. Please see example. setup.py: It is the magic file that create and installs our python package. It also keeps that track of version and formatting for PyPI. The python packages that used in writing the \"setup.py\" is \"distutils\" and \"setuptools\". The sample setup.py looks something like # -*- coding: utf-8 -*- import os import sys from distutils.core import setup CURRENT_PYTHON = sys . version_info [: 2 ] REQUIRED_PYTHON = ( 3 , 5 ) def read ( fname ): return open ( os . path . join ( os . path . dirname ( __file__ ), fname )) . read () if CURRENT_PYTHON < REQUIRED_PYTHON : sys . stderr . write ( \"This version of Pydicttoxml requires Python {} . {} , \\ but you're trying to install it on Python {} . {} .\" . format ( * ( REQUIRED_PYTHON + CURRENT_PYTHON ))) sys . exit ( 1 ) setup ( name = 'pydicttoxml' , version = '1.0.1' , description = 'Convert python dictionary into a xml equivalent format' , author = u 'Anjaneyulu Batta' , author_email = 'anjaneyulu.batta505@gmail.com' , url = 'https://github.com/AnjaneyuluBatta505/pydicttoxml' , packages = [ 'pydicttoxml' ], keywords = \"convert dictionary into a xml\" , long_description = read ( 'README.rst' ), classifiers = [ 'Intended Audience :: Developers' , 'License :: OSI Approved :: MIT License' , 'Operating System :: OS Independent' , 'Programming Language :: Python' , 'Programming Language :: Python :: 3.5' , 'Programming Language :: Python :: 3.6' , 'Topic :: Software Development :: Libraries :: Python Modules' , 'Topic :: Text Processing :: Markup :: XML' ], license = 'MIT' ) Let's try to understand a bit about parameters passed to setup function in above file. name: The name will be used while installing the python package via pip version: Version of currently releasing python package description: Short description of python package author: Author name of the python package author_email: Author contact email of the python package url: Url to the repository where the code resides. packages: Python packages that will we added to tar.gz file while archiving the python package. keywords: Keywords that will be used to search for that package in the search engines like google, bing and yahoo, etc. long_description: It contains the information of package how it can be used. It contains the complete description. classifiers: classifiers can then be used by community members to find projects based on their desired criteria. For more info visit https://pypi.org/classifiers/ licence: under which license our package is releasing. When we are ready with everything mentioned above then we are ready to go. Before that we need to have an account in the pypi.org. Go to our project directory in Terminal(Ubuntu).Install required packages \"setuptools\", \"distutils\" and \"twine\" with pip pip install setuptools pip install distutils pip install twine - Now, create our python package distribution with below command. python setup.py sdist - After executing the above command it will create a \"tar.gz\" file inside the directoy \" project/sdist/<package-version>.tar.gz \" Before uploading our very first python package lets create a configuration file \"~/.pypirc\" and add configuration details. The file looks something like [ distutils ] index - servers = pypi [ pypi ] username : { username } password :{ password } Upload our python package to pypi with below command twine upload dist/PACKAGENAME-VERSION.tar.gz Now, test our package by installing it via pip pip install {package name} It will work as we expected if not let me help you. If you get any errors then we will discuss in comment section below. References: https://pypi.org/help/ http://setuptools.readthedocs.io/en/latest/setuptools.html#new-and-changed-setup-keywords","title":"Steps to upload a python package to PyPI."},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/","text":"How to use *args And **kwargs In Python \u00b6 usage of * args and **kwargs in functions \u00b6 Python programming language is a simple and powerful language. It provides simple syntax with powerfull features. In this article we will discuss how to use *args and **kwargs in python. *args and **kwargs are magic powers of python. we use *args for unpacking of arguments and **kwargs for unpacking of keyword arguments. Note: We can use *arguments instead *args and **keywordargs instead **kwargs, we can use any name in place of \"args\", \"kwargs\". Most developers use it as *args and **kwargs. Example of python *args and **kwargs \u00b6 def print_recieved_data ( num1 , num2 , * args , ** kwargs ): print ( \"num1 = \" , num1 ) print ( \"num2 = \" , num2 ) print ( \"*args = \" , args ) print ( \"**kwargs = \" , kwargs ) # case 1 print_recieved_data ( 10 , 20 ) # Output: num1 = 10 num2 = 20 * args = () ** kwargs = {} # case 2 print_recieved_data ( 10 , 20 , 30 , 40 , name = \"Anji\" , age = 23 ) # Output: num1 = 10 num2 = 20 * args = ( 30 , 40 ) ** kwargs = { \"name\" : \"Anji\" , \"age\" : 23 } def f1 ( a , b , c , d ): return a + b + c + d def f2 ( * args , ** kwargs ): return f1 ( * args , ** kwargs ) # case3 sum = f2 ( 1 , 3 , 4 , d = 100 ) print sum # Output: 108 From the In above code we can observe the follwing. In above code case1 \u00b6 default values for *args are empty tuple and for **kwargs are empty dictionary. *args and **kwargs are not mandatory we can use tuple functionalities on \"args\" and dict functinalities on \"kwargs\". In above code case2 \u00b6 All extra arguments are stored in \"args\" in a tuple format. All key, value arguments are stored in \"kwargs\" in a dict format. In above code case3 \u00b6 when we use *args, **kwargs in function \"f1(*args, **kwargs)\" arguments are unpacked from the tuple and dictionary f1(*args, **kwargs) = \"f1(1,3,4, d=100)\" When to use python *args and **kwargs ? It is useful when number of parameters in a function are unknown Example usage of python *args and **kwargs in classes \u00b6 class Parent ( object ): def __init__ ( self , a , b ): # do something print ( a , b ) class Child ( Parent ): def __init__ ( self , * args , ** kwargs ): # do something super ( Parent , self ) . __init__ ( * args , ** kwargs ) # do something we use *args and **kwargs in python classes as well just like above. Note: Data type of *args is tuple and Data type of **kwargs in dictionary. References: 1. https://docs.python.org/2/faq/programming.html#id15","title":"How To Use *args And **kwargs In Python"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#how-to-use-args-and-kwargs-in-python","text":"","title":"How to use *args And **kwargs In Python"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#usage-of-args-and-kwargs-in-functions","text":"Python programming language is a simple and powerful language. It provides simple syntax with powerfull features. In this article we will discuss how to use *args and **kwargs in python. *args and **kwargs are magic powers of python. we use *args for unpacking of arguments and **kwargs for unpacking of keyword arguments. Note: We can use *arguments instead *args and **keywordargs instead **kwargs, we can use any name in place of \"args\", \"kwargs\". Most developers use it as *args and **kwargs.","title":"usage of * args and **kwargs in functions"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#example-of-python-args-and-kwargs","text":"def print_recieved_data ( num1 , num2 , * args , ** kwargs ): print ( \"num1 = \" , num1 ) print ( \"num2 = \" , num2 ) print ( \"*args = \" , args ) print ( \"**kwargs = \" , kwargs ) # case 1 print_recieved_data ( 10 , 20 ) # Output: num1 = 10 num2 = 20 * args = () ** kwargs = {} # case 2 print_recieved_data ( 10 , 20 , 30 , 40 , name = \"Anji\" , age = 23 ) # Output: num1 = 10 num2 = 20 * args = ( 30 , 40 ) ** kwargs = { \"name\" : \"Anji\" , \"age\" : 23 } def f1 ( a , b , c , d ): return a + b + c + d def f2 ( * args , ** kwargs ): return f1 ( * args , ** kwargs ) # case3 sum = f2 ( 1 , 3 , 4 , d = 100 ) print sum # Output: 108 From the In above code we can observe the follwing.","title":"Example of python *args and **kwargs"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#in-above-code-case1","text":"default values for *args are empty tuple and for **kwargs are empty dictionary. *args and **kwargs are not mandatory we can use tuple functionalities on \"args\" and dict functinalities on \"kwargs\".","title":"In above code case1"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#in-above-code-case2","text":"All extra arguments are stored in \"args\" in a tuple format. All key, value arguments are stored in \"kwargs\" in a dict format.","title":"In above code case2"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#in-above-code-case3","text":"when we use *args, **kwargs in function \"f1(*args, **kwargs)\" arguments are unpacked from the tuple and dictionary f1(*args, **kwargs) = \"f1(1,3,4, d=100)\" When to use python *args and **kwargs ? It is useful when number of parameters in a function are unknown","title":"In above code case3"},{"location":"blog/how-to-use-args-and-kwargs-in-python-3/#example-usage-of-python-args-and-kwargs-in-classes","text":"class Parent ( object ): def __init__ ( self , a , b ): # do something print ( a , b ) class Child ( Parent ): def __init__ ( self , * args , ** kwargs ): # do something super ( Parent , self ) . __init__ ( * args , ** kwargs ) # do something we use *args and **kwargs in python classes as well just like above. Note: Data type of *args is tuple and Data type of **kwargs in dictionary. References: 1. https://docs.python.org/2/faq/programming.html#id15","title":"Example usage of python *args and **kwargs in classes"},{"location":"blog/how-to-use-templates-in-django-31/","text":"How To Use Templates In Django \u00b6 Django is a web framework so, It needs to maintain the code in such a way that it should be easy to navigate and easy to read and maintain. As we already know the Django framework is a MVC, we do not write the HTML code in the views.py instead we write it in a template. In django web framework we generate dynamic HTTP response. While generating the dynamic HTML content we use a special syntax called \"django template syntax\" . It will make the process easy for us. Before using the templates in our django project we need to configure some settings. Let's use templates in django by configuring template settings. Django Template Settings Configuration: \u00b6 myproject/settings.py # ..... TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ 'templates' ,], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] # ..... project structure myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 myproject \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates \u2514\u2500\u2500 home.html myapp/views.py from django.shortcuts import render def home ( request ): return render ( request , 'home.html' ) myproject/urls.py from django.urls import path from myapp import views urlpatterns = [ path ( '' , views . home , name = 'home' ), ] templates/home.html < html > < title > Hello World </ title > < body > < h1 > Hello World </ h1 > </ body > </ html > Open settings.py file, you can find \"TEMPLATE\" setting. It contains list of settings for templates. Every template setting is dictionary object. It contains settings like BACKEND , DIRS, APP_DIRS, OPTIONS. In Django we render the template using the the function*\"render\" to generate the dynamic HTML content. The *\"render\" function takes 3 parameters request, template_name and a context(a dictionary of keys and values which will be used inside the template). Before rendering the template Django looks for the template using its name. It searches for the template using its in \"DIRS\" setting for external templates. So, in the above code we have added \"templates\" directory. After adding the directory our project structure looks like above. When Django looks for the template It will find it in \"templates\" direcory that we have added. Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello World\". We have simply rendered a static html. But, what we discussed is we generate a dynamic response using django web framework. Let's see how we can generate a dynamic response in Django. Let's change the views.py and home.html as follows myapp/views.py from django.shortcuts import render def home ( request ): context = { 'name' : 'Anjaneyulu Batta' } return render ( request , 'home.html' , context ) templates/home.html < html > < title > Hello {{ name }} </ title > < body > < h1 > Hello {{ name }} </ h1 > </ body > </ html > Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello Anjaneyulu Batta\". In the view we have passed the context dictionary and accessed the value with key name in the template using the django template syntax \"{{ name }}\". In this way we can make use of django templates. Reference: https://docs.djangoproject.com/en/dev/topics/templates/","title":"How To Use Templates In Django"},{"location":"blog/how-to-use-templates-in-django-31/#how-to-use-templates-in-django","text":"Django is a web framework so, It needs to maintain the code in such a way that it should be easy to navigate and easy to read and maintain. As we already know the Django framework is a MVC, we do not write the HTML code in the views.py instead we write it in a template. In django web framework we generate dynamic HTTP response. While generating the dynamic HTML content we use a special syntax called \"django template syntax\" . It will make the process easy for us. Before using the templates in our django project we need to configure some settings. Let's use templates in django by configuring template settings.","title":"How To Use Templates In Django"},{"location":"blog/how-to-use-templates-in-django-31/#django-template-settings-configuration","text":"myproject/settings.py # ..... TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ 'templates' ,], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] # ..... project structure myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 myproject \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates \u2514\u2500\u2500 home.html myapp/views.py from django.shortcuts import render def home ( request ): return render ( request , 'home.html' ) myproject/urls.py from django.urls import path from myapp import views urlpatterns = [ path ( '' , views . home , name = 'home' ), ] templates/home.html < html > < title > Hello World </ title > < body > < h1 > Hello World </ h1 > </ body > </ html > Open settings.py file, you can find \"TEMPLATE\" setting. It contains list of settings for templates. Every template setting is dictionary object. It contains settings like BACKEND , DIRS, APP_DIRS, OPTIONS. In Django we render the template using the the function*\"render\" to generate the dynamic HTML content. The *\"render\" function takes 3 parameters request, template_name and a context(a dictionary of keys and values which will be used inside the template). Before rendering the template Django looks for the template using its name. It searches for the template using its in \"DIRS\" setting for external templates. So, in the above code we have added \"templates\" directory. After adding the directory our project structure looks like above. When Django looks for the template It will find it in \"templates\" direcory that we have added. Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello World\". We have simply rendered a static html. But, what we discussed is we generate a dynamic response using django web framework. Let's see how we can generate a dynamic response in Django. Let's change the views.py and home.html as follows myapp/views.py from django.shortcuts import render def home ( request ): context = { 'name' : 'Anjaneyulu Batta' } return render ( request , 'home.html' , context ) templates/home.html < html > < title > Hello {{ name }} </ title > < body > < h1 > Hello {{ name }} </ h1 > </ body > </ html > Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello Anjaneyulu Batta\". In the view we have passed the context dictionary and accessed the value with key name in the template using the django template syntax \"{{ name }}\". In this way we can make use of django templates. Reference: https://docs.djangoproject.com/en/dev/topics/templates/","title":"Django Template Settings Configuration:"},{"location":"blog/install-pip-on-windows-16/","text":"install pip on windows \u00b6 pip introduction \u00b6 pip - python package manager. It manages the python packages. It's an opensource software. pip stands for \"preferred installer program\".pip is used to install and manage software packages written in Python. It is a package management system.we can find all python packages irrespective of the python version python2 or python3 which were uploaded to Python Package Index(PyPI) . install pip on windows \u00b6 To install pip on windows download the installation file from https://bootstrap.pypa.io/get-pip.py Now, open your cmd(command line interface) and run the below command python get-pip.py By default \"get-pip.py\" installs the python packages \" setuptools \" and \" wheel \" if not installed. \"setuptools\" and \"wheel\" are used to build Wheel cache. It is used to speedup the installation process. If you do not want to install these packages then run the following command python get-pip.py --no-setuptools --no-wheel If you are using a proxy then run the below command to install pip on windows python get-pip.py --proxy=\"http://[user:passwd@]proxy.server:port\" To confirm/check the installation just run command \"pip\" in cmd in windows you will see the output like below ``` Usage: pip [options] Commands: install Install packages. download Download packages. ``` We have successfully installed pip on windows. usage of pip on windows \u00b6 How to install a python package using pip ? pip install <package-name> How to uninstall a python package using pip ? pip uninstall <package-name> How to install a python packages using pip and \"requirements.txt\" ? pip install -r requirements.txt # provide full path of requirements.txt file How to uninstall a python packages using pip and \"requirements.txt\" ? pip uninstall -r requirements.txt # provide full path of requirements.txt file","title":"install pip on windows"},{"location":"blog/install-pip-on-windows-16/#install-pip-on-windows","text":"","title":"install pip on windows"},{"location":"blog/install-pip-on-windows-16/#pip-introduction","text":"pip - python package manager. It manages the python packages. It's an opensource software. pip stands for \"preferred installer program\".pip is used to install and manage software packages written in Python. It is a package management system.we can find all python packages irrespective of the python version python2 or python3 which were uploaded to Python Package Index(PyPI) .","title":"pip introduction"},{"location":"blog/install-pip-on-windows-16/#install-pip-on-windows_1","text":"To install pip on windows download the installation file from https://bootstrap.pypa.io/get-pip.py Now, open your cmd(command line interface) and run the below command python get-pip.py By default \"get-pip.py\" installs the python packages \" setuptools \" and \" wheel \" if not installed. \"setuptools\" and \"wheel\" are used to build Wheel cache. It is used to speedup the installation process. If you do not want to install these packages then run the following command python get-pip.py --no-setuptools --no-wheel If you are using a proxy then run the below command to install pip on windows python get-pip.py --proxy=\"http://[user:passwd@]proxy.server:port\" To confirm/check the installation just run command \"pip\" in cmd in windows you will see the output like below ``` Usage: pip [options] Commands: install Install packages. download Download packages. ``` We have successfully installed pip on windows.","title":"install pip on windows"},{"location":"blog/install-pip-on-windows-16/#usage-of-pip-on-windows","text":"How to install a python package using pip ? pip install <package-name> How to uninstall a python package using pip ? pip uninstall <package-name> How to install a python packages using pip and \"requirements.txt\" ? pip install -r requirements.txt # provide full path of requirements.txt file How to uninstall a python packages using pip and \"requirements.txt\" ? pip uninstall -r requirements.txt # provide full path of requirements.txt file","title":"usage of pip on windows"},{"location":"blog/introduction-to-django-web-framework-24/","text":"Introduction To Django Web Framework \u00b6 Django is a high level python web framework . It is a open source web framework released under the licence of BSD. Django allows developers to build web applications in a short span of time. Django applications are powerful, fast, most secure and exceedingly scalable. Django was designed to help developers to complete the web applications as quickly as possible. Django provides best security mechanisms it helps developers to avoid many common security mistakes. Django follows rapid web development so that developers can make changes to any complex application easily with timely deadlines. Django follows the MVC(Model, View, Controller) architecture. It allows clean design and development. Model deals with databases and Controller deals with business logic and View deals with presentation logic. In Django MVC has just changed to MTV(Model, Template, View) Model = Model, View = Template, Controller = View Django has built in ORM(Object Relational Mapper). It simplifies everything. Developers need not to worry about writing of SQL queries. Developers just have to write a django query that deals with objects. ORM will convert the django query into SQL query and performs it on database and again converts database results into objects. Developers just have to play with objects. It saves a lot of time. Djang provides multiple language support for web applications. Django is one of the best python web frameworks . Django comes with inbuilt security checks such as SQL injection, cross-site scripting, cross-site request forgery and clickjacking. Django\u2019s user authentication system provides a secure way to manage user accounts and passwords. Some of the high traffic websites on the web use Django\u2019s ability to quickly and flexibly scale to meet the heaviest traffic demands. History of Django Web Framework \u00b6 Django was created in the year of 2003, when the web programmers at the Lawrence Journal-World newspaper, Adrian Holovaty and Simon Willison, began using Python to build applications. It was released publicly under a BSD license in July 2005. Django web framework was named after guitarist Django Reinhardt. In June 2008, it was announced that a newly formed Django Software Foundation (DSF) would maintain Django in the future. Reasons to choose Django Web Framework \u00b6 Write less code do more Open source web framework Tons of packages available to use Great Community Support Suits for projects of any size Used and trusted by world best companies Perfect for time based projects Highly Scalable Advantages of using Django Web Framework \u00b6 Built-in ORM(Object Relational Mapper) Support Multiple Language Support Built-in Frameworks for Sitemaps, RSS, Caching, etc. Awesome Websites developed by Django Web Framework \u00b6 Disqus Bitbucket Instagram Mozilla Pinterest NASA The Onion Eventbrite Webisoft References: \u00b6 https://www.djangoproject.com https://en.wikipedia.org/wiki/Django_(web_framework )","title":"Introduction To Django Web Framework"},{"location":"blog/introduction-to-django-web-framework-24/#introduction-to-django-web-framework","text":"Django is a high level python web framework . It is a open source web framework released under the licence of BSD. Django allows developers to build web applications in a short span of time. Django applications are powerful, fast, most secure and exceedingly scalable. Django was designed to help developers to complete the web applications as quickly as possible. Django provides best security mechanisms it helps developers to avoid many common security mistakes. Django follows rapid web development so that developers can make changes to any complex application easily with timely deadlines. Django follows the MVC(Model, View, Controller) architecture. It allows clean design and development. Model deals with databases and Controller deals with business logic and View deals with presentation logic. In Django MVC has just changed to MTV(Model, Template, View) Model = Model, View = Template, Controller = View Django has built in ORM(Object Relational Mapper). It simplifies everything. Developers need not to worry about writing of SQL queries. Developers just have to write a django query that deals with objects. ORM will convert the django query into SQL query and performs it on database and again converts database results into objects. Developers just have to play with objects. It saves a lot of time. Djang provides multiple language support for web applications. Django is one of the best python web frameworks . Django comes with inbuilt security checks such as SQL injection, cross-site scripting, cross-site request forgery and clickjacking. Django\u2019s user authentication system provides a secure way to manage user accounts and passwords. Some of the high traffic websites on the web use Django\u2019s ability to quickly and flexibly scale to meet the heaviest traffic demands.","title":"Introduction To Django Web Framework"},{"location":"blog/introduction-to-django-web-framework-24/#history-of-django-web-framework","text":"Django was created in the year of 2003, when the web programmers at the Lawrence Journal-World newspaper, Adrian Holovaty and Simon Willison, began using Python to build applications. It was released publicly under a BSD license in July 2005. Django web framework was named after guitarist Django Reinhardt. In June 2008, it was announced that a newly formed Django Software Foundation (DSF) would maintain Django in the future.","title":"History of Django Web Framework"},{"location":"blog/introduction-to-django-web-framework-24/#reasons-to-choose-django-web-framework","text":"Write less code do more Open source web framework Tons of packages available to use Great Community Support Suits for projects of any size Used and trusted by world best companies Perfect for time based projects Highly Scalable","title":"Reasons to choose Django Web Framework"},{"location":"blog/introduction-to-django-web-framework-24/#advantages-of-using-django-web-framework","text":"Built-in ORM(Object Relational Mapper) Support Multiple Language Support Built-in Frameworks for Sitemaps, RSS, Caching, etc.","title":"Advantages of using Django Web Framework"},{"location":"blog/introduction-to-django-web-framework-24/#awesome-websites-developed-by-django-web-framework","text":"Disqus Bitbucket Instagram Mozilla Pinterest NASA The Onion Eventbrite Webisoft","title":"Awesome Websites developed by Django Web Framework"},{"location":"blog/introduction-to-django-web-framework-24/#references","text":"https://www.djangoproject.com https://en.wikipedia.org/wiki/Django_(web_framework )","title":"References:"},{"location":"blog/introduction-to-restful-apis-72/","text":"Introduction To Restful Apis \u00b6 REST(Representational state transfer) is a one of the architectural(designed with some specific rules and regulations) ways to transfer the data by using the HTTP protocol. In this article we will learn what are the restful api's and why we use it.we'll understand api request format and request methods in REST api's and it's usage. Why we use REST API's ? \u00b6 It is mostly used with client server based applications. It's mostly used for Mobile application development(Android, iOS, etc), Client side web application development(ReactJS, AngularJS, BackBoneJS, etc). It transfers the data in the form of objects. The object is in the form of JSON. JSON usually is a better fit for data and parses much faster. REST follows a client server architecture . We use REST API's when there is a need of communication between multiple applications which were developed with different technologies(multiple programming languages like C, python, java, VB.NET, etc.) We can speed up the process by using cache mechanism in REST API's. Understanding Request Format: \u00b6 Before talking about the request methods first we need to understand the components of request. Every HTTP request is composed of two parts 1. Request Header and 2. Request Body. Request Header: \u00b6 Request Method: It contains the request methods like GET, POST, PUT, PATCH, DELETE, etc. Request URI: It contains the information of domain and path. Example: https://learnbatta.com/blog/ In the above example domain = \"learnbatta.com\" and path = \"/blog/\" HTTP Headers: These are in the form of key and value. Find some of headers below Accept: text/plain Accept-Charset: utf-8 Accept-Encoding: gzip, deflate Accept-Language: en-US Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== Authorization: Token GfsgzxJUbjpvcGVuIHNlc2FtZQ== Referer: https://learnbatta.com/ In Django REST Framework we frequently use \"Authorization\" header for authentication. Request Body: \u00b6 When we want to pass the data to the server securely then we use request body to send the data in request. Request body is mostly used by POST, PUT, PATCH Request methods. Note: In GET request method we pass the data in the url. Example Request Format: Host learnbatta.com User-Agent Mozilla/5.0 (X11; Ubuntu; Linux) Gecko/20100101 Firefox/56.0 Accept text/html,application/xhtml+xm\u2026plication/xml;q=0.9, / ;q=0.8 Accept-Language en-US,en;q=0.5 Accept-Encoding gzip, deflate, br Connection keep-alive Upgrade-Insecure-Requests 1 Method GET Body Request methods in REST API's and it's usage: \u00b6 GET \u00b6 We use get method to retrieve the information of a specific resource. Resource will not be modified in the GET api request. We can retrieve a single resource or multiple resources with pagination and filters by using GET api request. Expected HTTP status code to the successful request is 200. If requested resource was not found then we should return HTTP status code of 404. If the GET request is not formed correctly as per api documentation then we supposed to return the error response with status code of 400. Example urls for GET request http://www.testdomain.com/users?offset=20&page=5 http://www.testdomain.com/users/1/detail POST \u00b6 We use \"POST\" method to create the resource information in the database. If resource successfully created then API should respond with HTTP status code of 201. We need to validate the data before creating the resource information into the database. If the request data is not valid the server should return the errors data along with HTTP status code of 400. POST method neither safe nor idempotent. Two identical POST requests may result in data duplication(i.e same data but different resource id's ). PUT \u00b6 In general, we use request method \"PUT\" to updated the resource information in the database. Resource will be modified upon successful completion of the request. For successful \"PUT\" request API should respond with HTTP status code of 200. It needs a resource Id to identify the correct resource to update. PATCH \u00b6 We use request method \"PATCH\" to update the resource partially. If resource successfully created then API should respond with HTTP status code of 200. If resource is not found then API should respond with HTTP status code of 404. It needs a resource Id to identify the correct resource to update it partially. DELETE \u00b6 The request method name itself represents that \"DELETE\" is used to delete the resource on the server database. When the resource \"DELETE\" request is processed successfully then it should return HTTP status code of 200. If the resource is not found then API should return a HTTP status code of 404. It needs a resource Id to identify the correct resource to delete it. Summary of HTTP Methods for RESTful APIs \u00b6 REQUEST METHOD OPERATION HTTP Status Code POST Create 201 (Created) or 400 (Bad Request) GET Read 200 (OK) or 404 (Not Found) or 400 (Bad Request) PUT Update/Replace 200 (OK) or 404 (Not Found) or 400 (Bad Request) PATCH Partial Update/Modify 200 (OK) or 404 (Not Found) or 400 (Bad Request) DELETE Delete 200 (OK) or 404 (Not Found) or 400 (Bad Request) References: https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html https://en.wikipedia.org/wiki/List_of_HTTP_header_fields http://www.django-rest-framework.org/api-guide/authentication/","title":"Introduction To Restful Apis"},{"location":"blog/introduction-to-restful-apis-72/#introduction-to-restful-apis","text":"REST(Representational state transfer) is a one of the architectural(designed with some specific rules and regulations) ways to transfer the data by using the HTTP protocol. In this article we will learn what are the restful api's and why we use it.we'll understand api request format and request methods in REST api's and it's usage.","title":"Introduction To Restful Apis"},{"location":"blog/introduction-to-restful-apis-72/#why-we-use-rest-apis","text":"It is mostly used with client server based applications. It's mostly used for Mobile application development(Android, iOS, etc), Client side web application development(ReactJS, AngularJS, BackBoneJS, etc). It transfers the data in the form of objects. The object is in the form of JSON. JSON usually is a better fit for data and parses much faster. REST follows a client server architecture . We use REST API's when there is a need of communication between multiple applications which were developed with different technologies(multiple programming languages like C, python, java, VB.NET, etc.) We can speed up the process by using cache mechanism in REST API's.","title":"Why we use REST API's ?"},{"location":"blog/introduction-to-restful-apis-72/#understanding-request-format","text":"Before talking about the request methods first we need to understand the components of request. Every HTTP request is composed of two parts 1. Request Header and 2. Request Body.","title":"Understanding Request Format:"},{"location":"blog/introduction-to-restful-apis-72/#request-header","text":"Request Method: It contains the request methods like GET, POST, PUT, PATCH, DELETE, etc. Request URI: It contains the information of domain and path. Example: https://learnbatta.com/blog/ In the above example domain = \"learnbatta.com\" and path = \"/blog/\" HTTP Headers: These are in the form of key and value. Find some of headers below Accept: text/plain Accept-Charset: utf-8 Accept-Encoding: gzip, deflate Accept-Language: en-US Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== Authorization: Token GfsgzxJUbjpvcGVuIHNlc2FtZQ== Referer: https://learnbatta.com/ In Django REST Framework we frequently use \"Authorization\" header for authentication.","title":"Request Header:"},{"location":"blog/introduction-to-restful-apis-72/#request-body","text":"When we want to pass the data to the server securely then we use request body to send the data in request. Request body is mostly used by POST, PUT, PATCH Request methods. Note: In GET request method we pass the data in the url. Example Request Format: Host learnbatta.com User-Agent Mozilla/5.0 (X11; Ubuntu; Linux) Gecko/20100101 Firefox/56.0 Accept text/html,application/xhtml+xm\u2026plication/xml;q=0.9, / ;q=0.8 Accept-Language en-US,en;q=0.5 Accept-Encoding gzip, deflate, br Connection keep-alive Upgrade-Insecure-Requests 1 Method GET Body","title":"Request Body:"},{"location":"blog/introduction-to-restful-apis-72/#request-methods-in-rest-apis-and-its-usage","text":"","title":"Request methods in REST API's and it's usage:"},{"location":"blog/introduction-to-restful-apis-72/#get","text":"We use get method to retrieve the information of a specific resource. Resource will not be modified in the GET api request. We can retrieve a single resource or multiple resources with pagination and filters by using GET api request. Expected HTTP status code to the successful request is 200. If requested resource was not found then we should return HTTP status code of 404. If the GET request is not formed correctly as per api documentation then we supposed to return the error response with status code of 400. Example urls for GET request http://www.testdomain.com/users?offset=20&page=5 http://www.testdomain.com/users/1/detail","title":"GET"},{"location":"blog/introduction-to-restful-apis-72/#post","text":"We use \"POST\" method to create the resource information in the database. If resource successfully created then API should respond with HTTP status code of 201. We need to validate the data before creating the resource information into the database. If the request data is not valid the server should return the errors data along with HTTP status code of 400. POST method neither safe nor idempotent. Two identical POST requests may result in data duplication(i.e same data but different resource id's ).","title":"POST"},{"location":"blog/introduction-to-restful-apis-72/#put","text":"In general, we use request method \"PUT\" to updated the resource information in the database. Resource will be modified upon successful completion of the request. For successful \"PUT\" request API should respond with HTTP status code of 200. It needs a resource Id to identify the correct resource to update.","title":"PUT"},{"location":"blog/introduction-to-restful-apis-72/#patch","text":"We use request method \"PATCH\" to update the resource partially. If resource successfully created then API should respond with HTTP status code of 200. If resource is not found then API should respond with HTTP status code of 404. It needs a resource Id to identify the correct resource to update it partially.","title":"PATCH"},{"location":"blog/introduction-to-restful-apis-72/#delete","text":"The request method name itself represents that \"DELETE\" is used to delete the resource on the server database. When the resource \"DELETE\" request is processed successfully then it should return HTTP status code of 200. If the resource is not found then API should return a HTTP status code of 404. It needs a resource Id to identify the correct resource to delete it.","title":"DELETE"},{"location":"blog/introduction-to-restful-apis-72/#summary-of-http-methods-for-restful-apis","text":"REQUEST METHOD OPERATION HTTP Status Code POST Create 201 (Created) or 400 (Bad Request) GET Read 200 (OK) or 404 (Not Found) or 400 (Bad Request) PUT Update/Replace 200 (OK) or 404 (Not Found) or 400 (Bad Request) PATCH Partial Update/Modify 200 (OK) or 404 (Not Found) or 400 (Bad Request) DELETE Delete 200 (OK) or 404 (Not Found) or 400 (Bad Request) References: https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html https://en.wikipedia.org/wiki/List_of_HTTP_header_fields http://www.django-rest-framework.org/api-guide/authentication/","title":"Summary of HTTP Methods for RESTful APIs"},{"location":"blog/iterators-in-python-2/","text":"Iterators In Python \u00b6 Iterators in python: \u00b6 Iterators in python is one of the simple and strong features of python. We already know that in python everything's an object. So, iterator is also a python object, which has a special method called \"next\". In python iterator acts like a container. When we call method \"next\" on the iterator object. It will creates and return the objects onfly. After returning the object it will longer available to access again. Python provides the built-in keyword \"next\". when we call the \"next\" with iterator object it will call the object method \"next\" which will return the object onfly. usage of iterators in python \u00b6 We can convert any object to an iterable object if only if it has a method \" iter \" implemented. To convert a object to an iterable object we need to call the python's built-in function \"iter\" with the object as an argument. It will call the \" iter \" method which is responsible to return iterable objects. Example: \u00b6 class Fibonacci : def __init__ ( self , limit ): self . limit = limit self . counter = 0 self . fib_data = [] def __iter__ ( self ): return self def next ( self ): self . counter += 1 if self . counter > self . limit : raise StopIteration if len ( self . fib_data ) < 2 : self . fib_data . append ( 1 ) else : self . fib_data = [ self . fib_data [ - 1 ], self . fib_data [ - 1 ] + self . fib_data [ - 2 ] ] return self . fib_data [ - 1 ] # Case1 for i in Fibonacci ( 3 ): print ( i ) # Output: # 1 # 1 # 2 # Case2 iter_obj = Fibonacci ( 3 ) print ( next ( iter_obj )) print ( next ( iter_obj )) print ( next ( iter_obj )) print ( next ( iter_obj )) # Output: # 1 # 1 # 2 # Traceback (most recent call last): # File \"fibonacci.py\", line 35, in <module> # print next(iter_obj) # StopIteration In above code we have created a fibonacci iterator it will generate first 'n' number of fibonacci numbers. When we call method next on the fibonacci iterator object it will return the fibonacci number.In case2 output we got \"StopIteration\" Error because it does not satisfy the condition in code. In similar manner python's built in function \"range\" is implemented. Python's built in structures like list, tuple, dict, etc. have methods \" iter \", \"next\". So, that we can convert them into iterators by using python's built-in function \"iter\". Lets see usage of iterators with python builtin methods # convert list to iterable object l = [ 1 , 2 , 3 ] iter_obj = iter ( l ) print ( iter_obj . next ()) # Output: 1 # convert dict to iterable object d = { 1 : 2 , 3 : 4 } iter_obj = iter ( d ) print ( iter_obj . next ()) # Output: 1 # convert list to iterable object t = ( 1 , 2 , 3 ) iter_obj = iter ( t ) print ( iter_obj . next ()) # Output: 1 If we want to use the objects onfly then it's a good approach to use iterators. If we want to the past results also then we have to use data structures like lists, tuples, etc.","title":"Iterators In Python"},{"location":"blog/iterators-in-python-2/#iterators-in-python","text":"","title":"Iterators In Python"},{"location":"blog/iterators-in-python-2/#iterators-in-python_1","text":"Iterators in python is one of the simple and strong features of python. We already know that in python everything's an object. So, iterator is also a python object, which has a special method called \"next\". In python iterator acts like a container. When we call method \"next\" on the iterator object. It will creates and return the objects onfly. After returning the object it will longer available to access again. Python provides the built-in keyword \"next\". when we call the \"next\" with iterator object it will call the object method \"next\" which will return the object onfly.","title":"Iterators in python:"},{"location":"blog/iterators-in-python-2/#usage-of-iterators-in-python","text":"We can convert any object to an iterable object if only if it has a method \" iter \" implemented. To convert a object to an iterable object we need to call the python's built-in function \"iter\" with the object as an argument. It will call the \" iter \" method which is responsible to return iterable objects.","title":"usage of iterators in python"},{"location":"blog/iterators-in-python-2/#example","text":"class Fibonacci : def __init__ ( self , limit ): self . limit = limit self . counter = 0 self . fib_data = [] def __iter__ ( self ): return self def next ( self ): self . counter += 1 if self . counter > self . limit : raise StopIteration if len ( self . fib_data ) < 2 : self . fib_data . append ( 1 ) else : self . fib_data = [ self . fib_data [ - 1 ], self . fib_data [ - 1 ] + self . fib_data [ - 2 ] ] return self . fib_data [ - 1 ] # Case1 for i in Fibonacci ( 3 ): print ( i ) # Output: # 1 # 1 # 2 # Case2 iter_obj = Fibonacci ( 3 ) print ( next ( iter_obj )) print ( next ( iter_obj )) print ( next ( iter_obj )) print ( next ( iter_obj )) # Output: # 1 # 1 # 2 # Traceback (most recent call last): # File \"fibonacci.py\", line 35, in <module> # print next(iter_obj) # StopIteration In above code we have created a fibonacci iterator it will generate first 'n' number of fibonacci numbers. When we call method next on the fibonacci iterator object it will return the fibonacci number.In case2 output we got \"StopIteration\" Error because it does not satisfy the condition in code. In similar manner python's built in function \"range\" is implemented. Python's built in structures like list, tuple, dict, etc. have methods \" iter \", \"next\". So, that we can convert them into iterators by using python's built-in function \"iter\". Lets see usage of iterators with python builtin methods # convert list to iterable object l = [ 1 , 2 , 3 ] iter_obj = iter ( l ) print ( iter_obj . next ()) # Output: 1 # convert dict to iterable object d = { 1 : 2 , 3 : 4 } iter_obj = iter ( d ) print ( iter_obj . next ()) # Output: 1 # convert list to iterable object t = ( 1 , 2 , 3 ) iter_obj = iter ( t ) print ( iter_obj . next ()) # Output: 1 If we want to use the objects onfly then it's a good approach to use iterators. If we want to the past results also then we have to use data structures like lists, tuples, etc.","title":"Example:"},{"location":"blog/javascript-wait-for-asynchronous-callbacks/","text":"javascript wait for asynchronous callbacks \u00b6 We use ajax calls very frequently on frontend applications. One of most used javascript libraries for making the ajax calls is jQuery . By using jQuery ajax we can make both synchronous and asynchronous calls. how to make asynchronous ajax call with jQuery? \u00b6 Let's see an example to make an api call with ajax for ( i = 0 ; i < 3 ; i ++ ) { $ . ajax ({ url : \"https://reqres.in/api/users/2\" , dataType : \"json\" , timeout : 500 , success : function ( data , status , xhr ) { console . log ( \"count\" , i ); }, error : function ( jqXhr , textStatus , errorMessage ) { console . log ( jqXhr , textStatus , errorMessage ); } }); } output: count 3 count 3 count 3 By default it jQuery uses the async request To check it code just visit https://codepen.io/anjaneyulubatta505/pen/gORWgOz and open the console and see the log statements. It will log the count as always 3 as ajax executes asynchronously. how to make synchronous ajax call with jQuery? \u00b6 To make the synchronous ajax call we just need to pass the attribute async: true in the ajax call. Let's modify the above example by adding the async to true . for ( i = 0 ; i < 3 ; i ++ ) { $ . ajax ({ url : \"https://reqres.in/api/users/2\" , dataType : \"json\" , async : false , timeout : 500 , success : function ( data , status , xhr ) { console . log ( \"count\" , i ); }, error : function ( jqXhr , textStatus , errorMessage ) { console . log ( jqXhr , textStatus , errorMessage ); } }); } output: count 0 count 1 count 2 - like above example when we pass async to false then jQuery executes the request synchronously how to wait for all asynchrous requests to complete? \u00b6 sometimes, we need to process a set of requests asynchronously and after execution of all requests we need to perform a specific functionality then we need to use [Promise])( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise ) Let's see an example to implement this scenario. let promises = []; for ( i = 0 ; i < 3 ; i ++ ) { promises . push ( $ . ajax ({ url : \"https://reqres.in/api/users/2\" , dataType : \"json\" , timeout : 500 , success : function ( data , status , xhr ) { console . log ( \"count\" , i , \"random\" , Math . floor ( Math . random () * 10 )); }, error : function ( jqXhr , textStatus , errorMessage ) { console . log ( jqXhr , textStatus , errorMessage ); } }) ); } Promise . all ( promises ). then ( function (){ console . log ( \"It's executing after all promises resolved. Hooray!\" ) }) output: count 3 random 9 count 3 random 1 count 3 random 4 It's executing after all promises resolved. Hooray! From the above code we can see that after executing the all asynchronous ajax calls our log statement executed. jquery Ajax generates a promice when we do a ajax call. References: https://codepen.io/anjaneyulubatta505/pen/gORWgOz https://api.jquery.com/jQuery.ajax/","title":"javascript wait for asynchronous callbacks with ajax"},{"location":"blog/javascript-wait-for-asynchronous-callbacks/#javascript-wait-for-asynchronous-callbacks","text":"We use ajax calls very frequently on frontend applications. One of most used javascript libraries for making the ajax calls is jQuery . By using jQuery ajax we can make both synchronous and asynchronous calls.","title":"javascript wait for asynchronous callbacks"},{"location":"blog/javascript-wait-for-asynchronous-callbacks/#how-to-make-asynchronous-ajax-call-with-jquery","text":"Let's see an example to make an api call with ajax for ( i = 0 ; i < 3 ; i ++ ) { $ . ajax ({ url : \"https://reqres.in/api/users/2\" , dataType : \"json\" , timeout : 500 , success : function ( data , status , xhr ) { console . log ( \"count\" , i ); }, error : function ( jqXhr , textStatus , errorMessage ) { console . log ( jqXhr , textStatus , errorMessage ); } }); } output: count 3 count 3 count 3 By default it jQuery uses the async request To check it code just visit https://codepen.io/anjaneyulubatta505/pen/gORWgOz and open the console and see the log statements. It will log the count as always 3 as ajax executes asynchronously.","title":"how to make asynchronous ajax call with jQuery?"},{"location":"blog/javascript-wait-for-asynchronous-callbacks/#how-to-make-synchronous-ajax-call-with-jquery","text":"To make the synchronous ajax call we just need to pass the attribute async: true in the ajax call. Let's modify the above example by adding the async to true . for ( i = 0 ; i < 3 ; i ++ ) { $ . ajax ({ url : \"https://reqres.in/api/users/2\" , dataType : \"json\" , async : false , timeout : 500 , success : function ( data , status , xhr ) { console . log ( \"count\" , i ); }, error : function ( jqXhr , textStatus , errorMessage ) { console . log ( jqXhr , textStatus , errorMessage ); } }); } output: count 0 count 1 count 2 - like above example when we pass async to false then jQuery executes the request synchronously","title":"how to make synchronous ajax call with jQuery?"},{"location":"blog/javascript-wait-for-asynchronous-callbacks/#how-to-wait-for-all-asynchrous-requests-to-complete","text":"sometimes, we need to process a set of requests asynchronously and after execution of all requests we need to perform a specific functionality then we need to use [Promise])( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise ) Let's see an example to implement this scenario. let promises = []; for ( i = 0 ; i < 3 ; i ++ ) { promises . push ( $ . ajax ({ url : \"https://reqres.in/api/users/2\" , dataType : \"json\" , timeout : 500 , success : function ( data , status , xhr ) { console . log ( \"count\" , i , \"random\" , Math . floor ( Math . random () * 10 )); }, error : function ( jqXhr , textStatus , errorMessage ) { console . log ( jqXhr , textStatus , errorMessage ); } }) ); } Promise . all ( promises ). then ( function (){ console . log ( \"It's executing after all promises resolved. Hooray!\" ) }) output: count 3 random 9 count 3 random 1 count 3 random 4 It's executing after all promises resolved. Hooray! From the above code we can see that after executing the all asynchronous ajax calls our log statement executed. jquery Ajax generates a promice when we do a ajax call. References: https://codepen.io/anjaneyulubatta505/pen/gORWgOz https://api.jquery.com/jQuery.ajax/","title":"how to wait for all asynchrous requests to complete?"},{"location":"blog/kubernetes-django-app-deployment-107/","text":"kubernetes django app deployment \u00b6 Kubernetes has awesome deployment features. Deploying the django application with kubernetes even more awesome. We can use kubernetes cloud providers like Googles GKS , Amazons EKS and for local environment we can use microk8s . Setting up microk8s in local environment \u00b6 To install microk8s in local environment execute the below commands sudo snap install microk8s --classic --channel = 1 .16/stable sudo usermod -a -G microk8s $USER su - $USER microk8s.status --wait-ready After installation enable the DNS to allow services to communicate with one another using below command microk8s.enable dns storage Now, open ~/.bashrc and below line at the end of the file. alias k8s = \"microk8s.kubectl\" Deploying the django app in micro kubernetes \u00b6 I've written the deployment docs and django app and pushed the project to the github. We can find it at https://github.com/AnjaneyuluBatta505/kubernetes_django . Clone kubernetes_django repo \u00b6 git clone git@github.com:AnjaneyuluBatta505/kubernetes_django.git Setting up postgres service \u00b6 In the postgres we have 4 yaml configuration files. secrets.yaml - Useful when using secret environment varibles in the apps volume.yaml - Persistent Volume for Postgres database volume_claim.yaml - This claim lets our deployment application store its data in an external location, so that if one of the application\u2019s containers fails, it can be replaced with a new container and continue accessing its data stored externally, as though an outage never occurred. deployment.yaml - Deployment to start the application containers service.yaml - Allows other apps to comminicate with it's related deployment(i.e pods/containers) Now, create above objects in kubernetes using below commands k8s apply -f kubernetes/postgres/secrets.yaml k8s apply -f kubernetes/postgres/volume.yaml k8s apply -f kubernetes/postgres/volume_claim.yaml k8s apply -f kubernetes/postgres/deployment.yaml k8s apply -f kubernetes/postgres/service.yaml We have successfully created the postgres service in k8s(i.e kubernetes cluster). Setting up redis service \u00b6 In the redis we have 2 yaml configuration files. To setup the redis service in k8s execute the below commands k8s apply -f kubernetes/redis/deployment.yaml k8s apply -f kubernetes/redis/service.yaml Setting up django app \u00b6 In django app we have 3 yaml configuration files. To setup the django app in k8s execute the below commands k8s apply -f kubernetes/django/job-migration.yaml k8s apply -f kubernetes/django/deployment.yaml k8s apply -f kubernetes/django/service.yaml Setting up celery app \u00b6 In celery app we have 2 yaml configuration files. To setup the django app in k8s execute the below commands k8s apply -f kubernetes/celery/beat-deployment.yaml k8s apply -f kubernetes/celery/worker-deployment.yaml Setting up celery-flower app \u00b6 In flower app we have 2 yaml configuration files. To setup the django app in k8s execute the below commands k8s apply -f kubernetes/flower/deployment.yaml k8s apply -f kubernetes/flower/service.yaml How to debug the pods for errors if any failures occurs ? \u00b6 $ k8s get po NAME READY STATUS RESTARTS AGE celery-beat-75b5f954-m2pzj 1/1 Running 0 64m celery-worker-56fc7b88f5-shd87 1/1 Running 0 61m django-688f76f576-kt4h6 1/1 Error 0 60m django-migrations-mhng7 0/1 Completed 0 59m flower-77bf99c799-9drnp 1/1 Running 87 20h postgres-76dc76ffbb-hzmdc 1/1 Running 2 23h redis-76f6f4857b-srxlw 1/1 Running 1 20h We can debug the pod failure using command k8s logs <pod name> . Sometimes k8s describe <name of k8s object> How to access the django app in our local browser \u00b6 $ k8s get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE django-service NodePort 10.152.183.146 <none> 8000:32693/TCP 21h flower-service NodePort 10.152.183.170 <none> 5555:30675/TCP 21h kubernetes ClusterIP 10.152.183.1 <none> 443/TCP 25h postgres-service ClusterIP 10.152.183.151 <none> 5432/TCP 24h redis-service ClusterIP 10.152.183.89 <none> 6379/TCP 21h Visit url \"10.152.183.146:8000\" (i.e CLUSTER-IP:PORT ). It's just for testing. References: https://microk8s.io/docs/ https://kubernetes.io/docs/home/ https://medium.com/edureka/what-is-kubernetes-container-orchestration-tool-d972741550f6","title":"kubernetes django app deployment"},{"location":"blog/kubernetes-django-app-deployment-107/#kubernetes-django-app-deployment","text":"Kubernetes has awesome deployment features. Deploying the django application with kubernetes even more awesome. We can use kubernetes cloud providers like Googles GKS , Amazons EKS and for local environment we can use microk8s .","title":"kubernetes django app deployment"},{"location":"blog/kubernetes-django-app-deployment-107/#setting-up-microk8s-in-local-environment","text":"To install microk8s in local environment execute the below commands sudo snap install microk8s --classic --channel = 1 .16/stable sudo usermod -a -G microk8s $USER su - $USER microk8s.status --wait-ready After installation enable the DNS to allow services to communicate with one another using below command microk8s.enable dns storage Now, open ~/.bashrc and below line at the end of the file. alias k8s = \"microk8s.kubectl\"","title":"Setting up microk8s in local environment"},{"location":"blog/kubernetes-django-app-deployment-107/#deploying-the-django-app-in-micro-kubernetes","text":"I've written the deployment docs and django app and pushed the project to the github. We can find it at https://github.com/AnjaneyuluBatta505/kubernetes_django .","title":"Deploying the django app in micro kubernetes"},{"location":"blog/kubernetes-django-app-deployment-107/#clone-kubernetes_django-repo","text":"git clone git@github.com:AnjaneyuluBatta505/kubernetes_django.git","title":"Clone kubernetes_django repo"},{"location":"blog/kubernetes-django-app-deployment-107/#setting-up-postgres-service","text":"In the postgres we have 4 yaml configuration files. secrets.yaml - Useful when using secret environment varibles in the apps volume.yaml - Persistent Volume for Postgres database volume_claim.yaml - This claim lets our deployment application store its data in an external location, so that if one of the application\u2019s containers fails, it can be replaced with a new container and continue accessing its data stored externally, as though an outage never occurred. deployment.yaml - Deployment to start the application containers service.yaml - Allows other apps to comminicate with it's related deployment(i.e pods/containers) Now, create above objects in kubernetes using below commands k8s apply -f kubernetes/postgres/secrets.yaml k8s apply -f kubernetes/postgres/volume.yaml k8s apply -f kubernetes/postgres/volume_claim.yaml k8s apply -f kubernetes/postgres/deployment.yaml k8s apply -f kubernetes/postgres/service.yaml We have successfully created the postgres service in k8s(i.e kubernetes cluster).","title":"Setting up postgres service"},{"location":"blog/kubernetes-django-app-deployment-107/#setting-up-redis-service","text":"In the redis we have 2 yaml configuration files. To setup the redis service in k8s execute the below commands k8s apply -f kubernetes/redis/deployment.yaml k8s apply -f kubernetes/redis/service.yaml","title":"Setting up redis service"},{"location":"blog/kubernetes-django-app-deployment-107/#setting-up-django-app","text":"In django app we have 3 yaml configuration files. To setup the django app in k8s execute the below commands k8s apply -f kubernetes/django/job-migration.yaml k8s apply -f kubernetes/django/deployment.yaml k8s apply -f kubernetes/django/service.yaml","title":"Setting up django app"},{"location":"blog/kubernetes-django-app-deployment-107/#setting-up-celery-app","text":"In celery app we have 2 yaml configuration files. To setup the django app in k8s execute the below commands k8s apply -f kubernetes/celery/beat-deployment.yaml k8s apply -f kubernetes/celery/worker-deployment.yaml","title":"Setting up celery app"},{"location":"blog/kubernetes-django-app-deployment-107/#setting-up-celery-flower-app","text":"In flower app we have 2 yaml configuration files. To setup the django app in k8s execute the below commands k8s apply -f kubernetes/flower/deployment.yaml k8s apply -f kubernetes/flower/service.yaml","title":"Setting up celery-flower app"},{"location":"blog/kubernetes-django-app-deployment-107/#how-to-debug-the-pods-for-errors-if-any-failures-occurs","text":"$ k8s get po NAME READY STATUS RESTARTS AGE celery-beat-75b5f954-m2pzj 1/1 Running 0 64m celery-worker-56fc7b88f5-shd87 1/1 Running 0 61m django-688f76f576-kt4h6 1/1 Error 0 60m django-migrations-mhng7 0/1 Completed 0 59m flower-77bf99c799-9drnp 1/1 Running 87 20h postgres-76dc76ffbb-hzmdc 1/1 Running 2 23h redis-76f6f4857b-srxlw 1/1 Running 1 20h We can debug the pod failure using command k8s logs <pod name> . Sometimes k8s describe <name of k8s object>","title":"How to debug the pods for errors if any failures occurs ?"},{"location":"blog/kubernetes-django-app-deployment-107/#how-to-access-the-django-app-in-our-local-browser","text":"$ k8s get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE django-service NodePort 10.152.183.146 <none> 8000:32693/TCP 21h flower-service NodePort 10.152.183.170 <none> 5555:30675/TCP 21h kubernetes ClusterIP 10.152.183.1 <none> 443/TCP 25h postgres-service ClusterIP 10.152.183.151 <none> 5432/TCP 24h redis-service ClusterIP 10.152.183.89 <none> 6379/TCP 21h Visit url \"10.152.183.146:8000\" (i.e CLUSTER-IP:PORT ). It's just for testing. References: https://microk8s.io/docs/ https://kubernetes.io/docs/home/ https://medium.com/edureka/what-is-kubernetes-container-orchestration-tool-d972741550f6","title":"How to access the django app in our local browser"},{"location":"blog/model-serializers-in-django-rest-framework-78/","text":"Model Serializers In Django Rest Framework \u00b6 Model serializers in django rest framework are very similar to the django model forms. By using the model serializers we can reduce the effort of writing the more code for serializers. Model serializers are the shortcuts that allow us to automatically create a serializer with fields that associated with the resective model. Model serializer class is same as normal serializer class with some extra abilities Model serializer class will automatically generate a set of fields for us, based on the model. IModel serializer class will automatically generate validators for the serializer, such as max_length, unique_together validators, etc. Model serializer class includes default implementations of .create() and .update() Creating a django rest framework Model serializer class For all model serializers we use \"ModelSerializer\" class as a base class. It provides the common functionality like fields, validators, etc. automatically. Let's see an example for model serializer. models.py from django.db import models from django.core.validators import MaxValueValidator , MinValueValidator class Movie ( models . Model ): title = models . CharField ( max_length = 100 , unique = True ) rating = models . FloatField ( validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )], ) director = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from app.models import Movie class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = ( 'id' , 'title' , 'rating' , 'director' ) # exclude = ('rating',) By default all the fields we have mentioned in the above model serializer class will be mapped to a corresponding serializer fields. In the above serializer we have added all the field names in the meta class \"fields\" attribute. we can also do this like fields = '__all__' . If can also specify the fields that we required instead of all fields. We also have the another attribute exclude which will allow us to add all fields to the serializer except one or two fields. Working with django rest framework model serializers \u00b6 Let's play with the above serializer that we have created on django shell. django shell - data serialization from app.models import Movie from app.serializer import MovieSerializer instance = Movie . objects . create ( title = 'Bahubali' , rating = 8.6 , director = 'Rajamouli' ) serializer = MovieSerializer ( instance ) print ( serializer . data ) # output: {'id': 2, 'title': 'Bahubali', 'rating': 8.6, 'director': 'Rajamouli'} In the above code we have created the movie model object and serialized it using model serializer django shell - data validation with serializer from app.models import Movie from app.serializer import MovieSerializer # validate the serilizer data data = { 'title' : '' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # output: {'title': ['This field is required.']} data = { 'title' : 'Avatar' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) # validate the serilizer data print ( serializer . is_valid ()) # output: True In the above code we have first given the invalid data to the model serializer and the we validated the correctness of the data using is_valid serializer method and then we have printed the errors using the serializer attribute errors. In order to use the attribute errors first we need to call method is_valid otherwise it will raise errors. django shell - save valid data into database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 9 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) serializer . is_valid () # output: True new_obj = serializer . save () print ( new_obj . id , new_obj . title ) # output: 3 Avatar In the above code we have given valid data to the serializer and then we have called the is_valid method after that we saved the data to database using the serializer method save. Before calling the method save first we should call is_valid method otherwise it will raises the errors. django shell - update data in the database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 10 } instance = Movie . objects . get ( id = 3 ) serializer = MovieSerializer ( instance , data = data ) serializer . is_valid () instance = serializer . save () print ( instance . rating ) # output: 10 In the above code we have given rating as 10 previously it's value is 9. In the above while initializing the serializer we have provided instance and data to the serializer because when we save the serializer it will updated the given data in the given instance otherwise it will create a new object. References: https://www.django-rest-framework.org/api-guide/serializers/","title":"Model Serializers In Django Rest Framework"},{"location":"blog/model-serializers-in-django-rest-framework-78/#model-serializers-in-django-rest-framework","text":"Model serializers in django rest framework are very similar to the django model forms. By using the model serializers we can reduce the effort of writing the more code for serializers. Model serializers are the shortcuts that allow us to automatically create a serializer with fields that associated with the resective model. Model serializer class is same as normal serializer class with some extra abilities Model serializer class will automatically generate a set of fields for us, based on the model. IModel serializer class will automatically generate validators for the serializer, such as max_length, unique_together validators, etc. Model serializer class includes default implementations of .create() and .update() Creating a django rest framework Model serializer class For all model serializers we use \"ModelSerializer\" class as a base class. It provides the common functionality like fields, validators, etc. automatically. Let's see an example for model serializer. models.py from django.db import models from django.core.validators import MaxValueValidator , MinValueValidator class Movie ( models . Model ): title = models . CharField ( max_length = 100 , unique = True ) rating = models . FloatField ( validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )], ) director = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from app.models import Movie class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = ( 'id' , 'title' , 'rating' , 'director' ) # exclude = ('rating',) By default all the fields we have mentioned in the above model serializer class will be mapped to a corresponding serializer fields. In the above serializer we have added all the field names in the meta class \"fields\" attribute. we can also do this like fields = '__all__' . If can also specify the fields that we required instead of all fields. We also have the another attribute exclude which will allow us to add all fields to the serializer except one or two fields.","title":"Model Serializers In Django Rest Framework"},{"location":"blog/model-serializers-in-django-rest-framework-78/#working-with-django-rest-framework-model-serializers","text":"Let's play with the above serializer that we have created on django shell. django shell - data serialization from app.models import Movie from app.serializer import MovieSerializer instance = Movie . objects . create ( title = 'Bahubali' , rating = 8.6 , director = 'Rajamouli' ) serializer = MovieSerializer ( instance ) print ( serializer . data ) # output: {'id': 2, 'title': 'Bahubali', 'rating': 8.6, 'director': 'Rajamouli'} In the above code we have created the movie model object and serialized it using model serializer django shell - data validation with serializer from app.models import Movie from app.serializer import MovieSerializer # validate the serilizer data data = { 'title' : '' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # output: {'title': ['This field is required.']} data = { 'title' : 'Avatar' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) # validate the serilizer data print ( serializer . is_valid ()) # output: True In the above code we have first given the invalid data to the model serializer and the we validated the correctness of the data using is_valid serializer method and then we have printed the errors using the serializer attribute errors. In order to use the attribute errors first we need to call method is_valid otherwise it will raise errors. django shell - save valid data into database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 9 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) serializer . is_valid () # output: True new_obj = serializer . save () print ( new_obj . id , new_obj . title ) # output: 3 Avatar In the above code we have given valid data to the serializer and then we have called the is_valid method after that we saved the data to database using the serializer method save. Before calling the method save first we should call is_valid method otherwise it will raises the errors. django shell - update data in the database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 10 } instance = Movie . objects . get ( id = 3 ) serializer = MovieSerializer ( instance , data = data ) serializer . is_valid () instance = serializer . save () print ( instance . rating ) # output: 10 In the above code we have given rating as 10 previously it's value is 9. In the above while initializing the serializer we have provided instance and data to the serializer because when we save the serializer it will updated the given data in the given instance otherwise it will create a new object. References: https://www.django-rest-framework.org/api-guide/serializers/","title":"Working with django rest framework model serializers"},{"location":"blog/mysql-1553-cannot-drop-index/","text":"MySQL #1553 \u2013 Cannot drop index \u00b6 how to re-produce? \u00b6 Let's create tables company and company.sql CREATE TABLE ` company ` ( ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , ` name ` varchar ( 45 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB AUTO_INCREMENT = 3 DEFAULT CHARSET = latin1 company_address.sql CREATE TABLE ` company_address ` ( ` id ` int ( 11 ) NOT NULL , ` company_id ` int ( 11 ) NOT NULL , ` line1 ` varchar ( 45 ) NOT NULL , ` line2 ` varchar ( 45 ) DEFAULT NULL , ` city ` varchar ( 45 ) DEFAULT NULL , ` postal_code ` varchar ( 45 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ), UNIQUE INDEX ` address_index ` ( ` company_id ` , ` line1 ` ), CONSTRAINT ` company_id_fk ` FOREIGN KEY ( ` company_id ` ) REFERENCES ` company ` ( ` id ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB DEFAULT CHARSET = latin1 In above table, we have index address_index with columns ( company_id , line1 ) Now, try to drop the index address_index with below SQL drop index address_index on company_address ; It will raise an error Cannot drop index 'address_index': needed in a foreign key constraint with error code 1553 why MySQL raises an error #1553? \u00b6 A foreign key always requires an index. how to fix MySQL error #1553? \u00b6 Let's say foreign key didn't have an index then if a new record is inserted then the foreign key constraint would require a full table scan on referenced table. It takes more time it means lower performance So, when creating a foreign key, the database checks if an index exists. If not an index will be created. By default, it will have the same name as the constraint. When there is only one index that can be used for the foreign key, it can't be dropped. If you really wan't to drop it, you either have to drop the foreign key constraint or to create another index for it first. For above example table company_address let's remove the index address_index drop index address_index on company_address ; It will throw below error Error Code : 1553 . Cannot drop index 'address_index' : needed in a foreign key constraint so, how to fix it? we can fix it by adding a new index for foreign key company_id let's name the index as company_id_idx and column company_id after that we can drop the existing column. step1: add new index company_id_idx ALTER TABLE company_address ADD INDEX ` company_id_idx ` ( ` company_id ` ASC ); step2: remove existing index ALTER TABLE company_address DROP INDEX address_index ; References \u00b6 https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html","title":"MySQL \\#1553 \u2013 Cannot drop index"},{"location":"blog/mysql-1553-cannot-drop-index/#mysql-1553-cannot-drop-index","text":"","title":"MySQL #1553 \u2013 Cannot drop index"},{"location":"blog/mysql-1553-cannot-drop-index/#how-to-re-produce","text":"Let's create tables company and company.sql CREATE TABLE ` company ` ( ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , ` name ` varchar ( 45 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB AUTO_INCREMENT = 3 DEFAULT CHARSET = latin1 company_address.sql CREATE TABLE ` company_address ` ( ` id ` int ( 11 ) NOT NULL , ` company_id ` int ( 11 ) NOT NULL , ` line1 ` varchar ( 45 ) NOT NULL , ` line2 ` varchar ( 45 ) DEFAULT NULL , ` city ` varchar ( 45 ) DEFAULT NULL , ` postal_code ` varchar ( 45 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ), UNIQUE INDEX ` address_index ` ( ` company_id ` , ` line1 ` ), CONSTRAINT ` company_id_fk ` FOREIGN KEY ( ` company_id ` ) REFERENCES ` company ` ( ` id ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB DEFAULT CHARSET = latin1 In above table, we have index address_index with columns ( company_id , line1 ) Now, try to drop the index address_index with below SQL drop index address_index on company_address ; It will raise an error Cannot drop index 'address_index': needed in a foreign key constraint with error code 1553","title":"how to re-produce?"},{"location":"blog/mysql-1553-cannot-drop-index/#why-mysql-raises-an-error-1553","text":"A foreign key always requires an index.","title":"why MySQL raises an error #1553?"},{"location":"blog/mysql-1553-cannot-drop-index/#how-to-fix-mysql-error-1553","text":"Let's say foreign key didn't have an index then if a new record is inserted then the foreign key constraint would require a full table scan on referenced table. It takes more time it means lower performance So, when creating a foreign key, the database checks if an index exists. If not an index will be created. By default, it will have the same name as the constraint. When there is only one index that can be used for the foreign key, it can't be dropped. If you really wan't to drop it, you either have to drop the foreign key constraint or to create another index for it first. For above example table company_address let's remove the index address_index drop index address_index on company_address ; It will throw below error Error Code : 1553 . Cannot drop index 'address_index' : needed in a foreign key constraint so, how to fix it? we can fix it by adding a new index for foreign key company_id let's name the index as company_id_idx and column company_id after that we can drop the existing column. step1: add new index company_id_idx ALTER TABLE company_address ADD INDEX ` company_id_idx ` ( ` company_id ` ASC ); step2: remove existing index ALTER TABLE company_address DROP INDEX address_index ;","title":"how to fix MySQL error #1553?"},{"location":"blog/mysql-1553-cannot-drop-index/#references","text":"https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html","title":"References"},{"location":"blog/mysql-basics-in-ubuntu-98/","text":"Mysql Basics In Ubuntu \u00b6 MySQL is a opensource database software it helps users to store, organise and retrieve data. To manage the MySQL database we can install MySQL Workbench software. Let's see installation process of MySQL How to install MySQL on ubuntu ? \u00b6 We can install the MySQL database on ubuntu with the below command sudo apt-get install -y mysql-server mysql-client After executing the above command on the terminal it ask for the root password. Do not forget to take a note of the root password. You will need it to login to MySQL shell. How to access the MySQL shell ? \u00b6 To login to MySQL shell we need to execute the below command sudo mysql -u root In the above command -u represents \"username\" and -p represents \"password\". We can get more detail about about command using another command \"mysql --help\". After executing the above command it will ask for root password, enter the password to login to the MySQL shell. Show list of databases using MySQL shell \u00b6 To show list of all available databases in MySQL execute the SHOW DATABASES; It will show the output like below mysql > SHOW DATABASES ; + --------------------+ | Database | + --------------------+ | information_schema | | mysql | | performance_schema | + --------------------+ 3 rows in set ( 0 . 01 sec ) Create a database using MySQL shell \u00b6 mysql > CREATE DATABASE test ; Use database \"test\" \u00b6 mysql > USE DATABASE test ; Above command will use the database test for further queries. Create a table in the database \"test\" \u00b6 Let's create student table in the database with below SQL query mysql > CREATE TABLE student ( id int , last_name varchar ( 255 ), first_name varchar ( 255 ), address varchar ( 255 ), city varchar ( 255 ) ); List all available tables in the database \"test\" \u00b6 Let's write a SQL query to list all available tables in the database mysql > SHOW TABLES ; + ------------------+ | student | + ------------------+ 1 row in set ( 0 . 01 sec ) Insert data into table \"student\" \u00b6 Let's write a query to insert data into our newly created table \"student\" mysql > INSERT INTO student ( id , first_name , last_name , address , city ) VALUES ( 1 , 'John' , 'B' , 'Noth Venis' , 'California' ); mysql > INSERT INTO student ( id , first_name , last_name , address , city ) VALUES ( 2 , 'Shera' , 'D' , 'Missori' , 'Missori' ); List all available rows in a table \"student\" \u00b6 Let's write a query to list all available rows in the table \"student\" mysql > select * from student ; + ------+-----------+------------+------------+------------+ | id | last_name | first_name | address | city | + ------+-----------+------------+------------+------------+ | 1 | B | John | Noth Venis | California | | 2 | D | Shera | Missori | Missori | + ------+-----------+------------+------------+------------+ 2 rows in set ( 0 . 00 sec ) Update a row in in a table \"student\" \u00b6 Let's write a query to update the row with id \"1\" in table \"student\" mysql > update student set first_name = \"Sam\" where id = 1 ; Query OK , 1 row affected ( 0 . 19 sec ) Rows matched : 1 Changed : 1 Warnings : 0 Delete a row in in a table \"student\" \u00b6 Let's write a query to delete the row with id \"1\" in table \"student\" mysql > delete from student where id = 1 ; Query OK , 1 row affected ( 0 . 12 sec ); That's it folks. We can do more with mysql. Stay tuned for more articles.","title":"Mysql Basics In Ubuntu"},{"location":"blog/mysql-basics-in-ubuntu-98/#mysql-basics-in-ubuntu","text":"MySQL is a opensource database software it helps users to store, organise and retrieve data. To manage the MySQL database we can install MySQL Workbench software. Let's see installation process of MySQL","title":"Mysql Basics In Ubuntu"},{"location":"blog/mysql-basics-in-ubuntu-98/#how-to-install-mysql-on-ubuntu","text":"We can install the MySQL database on ubuntu with the below command sudo apt-get install -y mysql-server mysql-client After executing the above command on the terminal it ask for the root password. Do not forget to take a note of the root password. You will need it to login to MySQL shell.","title":"How to install MySQL on ubuntu ?"},{"location":"blog/mysql-basics-in-ubuntu-98/#how-to-access-the-mysql-shell","text":"To login to MySQL shell we need to execute the below command sudo mysql -u root In the above command -u represents \"username\" and -p represents \"password\". We can get more detail about about command using another command \"mysql --help\". After executing the above command it will ask for root password, enter the password to login to the MySQL shell.","title":"How to access the MySQL shell ?"},{"location":"blog/mysql-basics-in-ubuntu-98/#show-list-of-databases-using-mysql-shell","text":"To show list of all available databases in MySQL execute the SHOW DATABASES; It will show the output like below mysql > SHOW DATABASES ; + --------------------+ | Database | + --------------------+ | information_schema | | mysql | | performance_schema | + --------------------+ 3 rows in set ( 0 . 01 sec )","title":"Show list of databases using MySQL shell"},{"location":"blog/mysql-basics-in-ubuntu-98/#create-a-database-using-mysql-shell","text":"mysql > CREATE DATABASE test ;","title":"Create a database using MySQL shell"},{"location":"blog/mysql-basics-in-ubuntu-98/#use-database-test","text":"mysql > USE DATABASE test ; Above command will use the database test for further queries.","title":"Use database \"test\""},{"location":"blog/mysql-basics-in-ubuntu-98/#create-a-table-in-the-database-test","text":"Let's create student table in the database with below SQL query mysql > CREATE TABLE student ( id int , last_name varchar ( 255 ), first_name varchar ( 255 ), address varchar ( 255 ), city varchar ( 255 ) );","title":"Create a table in the database \"test\""},{"location":"blog/mysql-basics-in-ubuntu-98/#list-all-available-tables-in-the-database-test","text":"Let's write a SQL query to list all available tables in the database mysql > SHOW TABLES ; + ------------------+ | student | + ------------------+ 1 row in set ( 0 . 01 sec )","title":"List all available tables in the database \"test\""},{"location":"blog/mysql-basics-in-ubuntu-98/#insert-data-into-table-student","text":"Let's write a query to insert data into our newly created table \"student\" mysql > INSERT INTO student ( id , first_name , last_name , address , city ) VALUES ( 1 , 'John' , 'B' , 'Noth Venis' , 'California' ); mysql > INSERT INTO student ( id , first_name , last_name , address , city ) VALUES ( 2 , 'Shera' , 'D' , 'Missori' , 'Missori' );","title":"Insert data into table \"student\""},{"location":"blog/mysql-basics-in-ubuntu-98/#list-all-available-rows-in-a-table-student","text":"Let's write a query to list all available rows in the table \"student\" mysql > select * from student ; + ------+-----------+------------+------------+------------+ | id | last_name | first_name | address | city | + ------+-----------+------------+------------+------------+ | 1 | B | John | Noth Venis | California | | 2 | D | Shera | Missori | Missori | + ------+-----------+------------+------------+------------+ 2 rows in set ( 0 . 00 sec )","title":"List all available rows in a table \"student\""},{"location":"blog/mysql-basics-in-ubuntu-98/#update-a-row-in-in-a-table-student","text":"Let's write a query to update the row with id \"1\" in table \"student\" mysql > update student set first_name = \"Sam\" where id = 1 ; Query OK , 1 row affected ( 0 . 19 sec ) Rows matched : 1 Changed : 1 Warnings : 0","title":"Update a row in in a table \"student\""},{"location":"blog/mysql-basics-in-ubuntu-98/#delete-a-row-in-in-a-table-student","text":"Let's write a query to delete the row with id \"1\" in table \"student\" mysql > delete from student where id = 1 ; Query OK , 1 row affected ( 0 . 12 sec ); That's it folks. We can do more with mysql. Stay tuned for more articles.","title":"Delete a row in in a table \"student\""},{"location":"blog/parsers-in-django-rest-framework-85/","text":"Parsers In Django Rest Framework \u00b6 Parsers in Django REST are used to parse the content of incoming HTTP request. In HTTP request we receive the data as a string format. Parsers will parse the HTTP contents in to python data types based on the Content-Type header received in the HTTP request. Django REST Framework provides a number of built-in parsers which parses different types of contents like \"application/json\", \"multipart/form-data\", \"application/xml\", etc., based on the Content-Type header received in the HTTP request. Parser Classes in Django REST: \u00b6 JSONParser \u00b6 It parses the incoming request JSON content into python content type dict. It is used if \"Content-Type\" is set to \"application/json\". FormParser \u00b6 It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"application/x-www-form-urlencoded\". MultiPartParser \u00b6 It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"multipart/form-data\". request.data will be a QueryDict containing all the form parameters. request.files will be a QueryDict containing all the form files. FormParser and MultiPartParser together used for full support of HTML form data. FileUploadParser \u00b6 It is used to parse a single file sent in HTTP request. It expects a url keyword argument \"filename\". If it's not provided then we should provide the filename in the Content-Disposition HTTP header. For example Content-Disposition: attachment; filename=upload.jpg. request.file is used to access the contents of uploaded file. To work with XML data we have use third party library \" REST Framework XML \" . Configuring default parsers in Django REST: \u00b6 We configure the parsers in django settings.py . We configure the default parsers using DEFAULT_PARSER_CLASSES setting. Let's see some code below. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES' : ( 'rest_framework.parsers.JSONParser' , ) } How to override default parsers in views or viewsets ? \u00b6 If we do not specify parser classes in views or viewsets then it will use the default parsers classes defined in DEFAULT\\_PARSER\\_CLASSES in settings. Let's do some code. from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView ( APIView ): \"\"\" A view that can accept POST requests with JSON content. \"\"\" parser_classes = ( JSONParser ,) def post ( self , request , format = None ): return Response ({ 'received data' : request . data }) We override default parser classes views or viewsets using the attribute \"parser_classes\" . We can also specify multiple parsers. Reference: https://www.django-rest-framework.org/api-guide/parsers","title":"Parsers In Django Rest Framework"},{"location":"blog/parsers-in-django-rest-framework-85/#parsers-in-django-rest-framework","text":"Parsers in Django REST are used to parse the content of incoming HTTP request. In HTTP request we receive the data as a string format. Parsers will parse the HTTP contents in to python data types based on the Content-Type header received in the HTTP request. Django REST Framework provides a number of built-in parsers which parses different types of contents like \"application/json\", \"multipart/form-data\", \"application/xml\", etc., based on the Content-Type header received in the HTTP request.","title":"Parsers In Django Rest Framework"},{"location":"blog/parsers-in-django-rest-framework-85/#parser-classes-in-django-rest","text":"","title":"Parser Classes in Django REST:"},{"location":"blog/parsers-in-django-rest-framework-85/#jsonparser","text":"It parses the incoming request JSON content into python content type dict. It is used if \"Content-Type\" is set to \"application/json\".","title":"JSONParser"},{"location":"blog/parsers-in-django-rest-framework-85/#formparser","text":"It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"application/x-www-form-urlencoded\".","title":"FormParser"},{"location":"blog/parsers-in-django-rest-framework-85/#multipartparser","text":"It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"multipart/form-data\". request.data will be a QueryDict containing all the form parameters. request.files will be a QueryDict containing all the form files. FormParser and MultiPartParser together used for full support of HTML form data.","title":"MultiPartParser"},{"location":"blog/parsers-in-django-rest-framework-85/#fileuploadparser","text":"It is used to parse a single file sent in HTTP request. It expects a url keyword argument \"filename\". If it's not provided then we should provide the filename in the Content-Disposition HTTP header. For example Content-Disposition: attachment; filename=upload.jpg. request.file is used to access the contents of uploaded file. To work with XML data we have use third party library \" REST Framework XML \" .","title":"FileUploadParser"},{"location":"blog/parsers-in-django-rest-framework-85/#configuring-default-parsers-in-django-rest","text":"We configure the parsers in django settings.py . We configure the default parsers using DEFAULT_PARSER_CLASSES setting. Let's see some code below. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES' : ( 'rest_framework.parsers.JSONParser' , ) }","title":"Configuring default parsers in Django REST:"},{"location":"blog/parsers-in-django-rest-framework-85/#how-to-override-default-parsers-in-views-or-viewsets","text":"If we do not specify parser classes in views or viewsets then it will use the default parsers classes defined in DEFAULT\\_PARSER\\_CLASSES in settings. Let's do some code. from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView ( APIView ): \"\"\" A view that can accept POST requests with JSON content. \"\"\" parser_classes = ( JSONParser ,) def post ( self , request , format = None ): return Response ({ 'received data' : request . data }) We override default parser classes views or viewsets using the attribute \"parser_classes\" . We can also specify multiple parsers. Reference: https://www.django-rest-framework.org/api-guide/parsers","title":"How to override default parsers in views or viewsets ?"},{"location":"blog/permissions-in-django-rest-framework-82/","text":"Permissions In Django Rest Framework \u00b6 Permissions in Django Rest Framework are used to grant or deny access for different types of users to different parts of the API. Permissions are very useful when serving API resources/end-points with certain restrictions. For example, let's consider you are writing an api endpoint to create an answer to a question just like stackoverflow . It only allows an authenticated user to create the answers. In this case we restrict the user by checking user is authenticated or not. If user user is authenticated then we allow user to access the API resource otherwise we deny the user. It's a simple example to use django rest permission classes. Permissions Flow in DRF \u00b6 Whenever any request comes to DRF then it enters the \"dispatch\" method. \"dispatch\" method should route the request to appropriate request method like \"get\", \"post\", \"put\", \"delete\", etc. But, before routing the request to the one of these methods it will checks the authentication, \"permissions\" and then it checks throttles(i.e used to limit the number of requests per user or per IP). In Django REST framework we always define permissions as a list. In DRF we can setup global permission classes or we can specify the permission classes in Views and Viewsets. If all permission checks are valid then request will be passed to appropriate method (i.e \"get\", \"post\", \"put\", \"delete\", etc. ) based on the request type otherwise an exception will be raised. The exception can be one of exceptions.PermissionDenied or exceptions.NotAuthenticated . If authentication fails then it returns status code of 401 and if any other permissions fails then it will return the status code of 403. Default Permissions Classes provided by DRF \u00b6 Django rest framework provides the following permission classes which are used frequently.. AllowAny \u00b6 This permission class do not restrict the user to access the API resource. IsAuthenticated \u00b6 This permission class only permits authenticated or logged in users to access the API resource. IsAdminUser \u00b6 This permission class only allows Django Admin Users(i.e user.is_staff = True) to access the api resource and all other users will not be able access the API resource. IsAuthenticatedOrReadOnly \u00b6 This permission class allows authenticated users to perform read and write operations on the API resource. All users which are not authenticated will have read access only. If they try to update the API resource then it will raise permission denied error. DjangoModelPermissions \u00b6 It is based on model permissions provided by django.contrib.auth . It only be applied to views that have a queryset property. It only applied on authenticated users who has the relevant model permissions assigned. POST requests require the user to have the add permission on the model. PUT and PATCH requests require the user to have the change permission on the model. DELETE requests require the user to have the delete permission on the model. DjangoModelPermissionsOrAnonReadOnly \u00b6 Same as DjangoModelPermissions, but it also allows unauthenticated users to have read-only access to the API resource. Configuring the Permissions Gobally in \"settings.py\" \u00b6 If we configure the global permission then these permission will apply on all API Views and ViewSets unless these permissions are overidden in Views and ViewSets. Let's see how to configure the permission globally. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES' : ( 'rest_framework.permissions.IsAuthenticated' , ) } DEFAULT_PERMISSION_CLASSES takes data type of list or tuple or any iterable types. We can configure multiple permissions globally. Working with Permissions in DRF \u00b6 In the last article we have seen how to setup the token based authentication in Django REST Framework. Let's write some code to know how to work with permissions. urls.py from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] views.py from rest_framework.response import Response from rest_framework.views import APIView class ProtectedAPIView ( APIView ): def get ( self , request , format = None ): content = { 'message' : 'Hey! you have authenticated!' } return Response ( content ) We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"Hey! you have authenticated!\"} In above code we have not defined the any permission class but it will ask for user authentication permission to access the API resource. Because we have defined the authentication permission globally. So, we have passed the authentication token in the python request to access the API resource. Writing Custom Permissions in DRF \u00b6 In Django REST Framework we can use custom permission classes also. We can write two types of permission classes \"view level\" and \"object level\" . View level permissions We use these permission when we want to check the user permission/access level before passing the request to process it further. Object level permissions We use it when we want to check the user permission on object level. For example, let's consider the book writer scenario where user writes books and if only allow its owner to modify it. In that kind of scenarios we use object level permissions. Let's write a custom permission to block some IP address to access the API. permissions.py from rest_framework import permissions from .models import Blacklist class BlacklistPermission ( permissions . BasePermission ): \"\"\" Permission check for blacklisted IPs. \"\"\" def has_permission ( self , request , view ): ip_addr = request . META [ 'REMOTE_ADDR' ] blacklisted = Blacklist . objects . filter ( ip_addr = ip_addr ) . exists () return not blacklisted \"BasePermission\" is the base class for all custom permissions. It provides the method \"has_permission\" to implement our custom permissions. In above code we have overriden \"has_permission\" method to implement our permission functionality. It's an example for view level permission. Let's write some code to implement object level permission. models.py from django.db import models from .models import User class Book ( models . Model ): title = models . CharField ( max_length = 30 ) owner = models . ForeignKey ( User , on_delete = models . CASCADE ) class Blacklist ( models . Model ): ip_addr = models . GenericIPAddressField () permissions.py from rest_framework import permissions from .models import Blacklist , Writer class IsBookOwner ( permissions . BasePermission ): \"\"\" Check if user is Book owner or not. \"\"\" def has_object_permission ( self , request , view , obj ): return obj . owner == request . user urls.py from . import views urlpatterns = [ path ( 'api/book/<int:pk>/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] serializers.py from rest_framework import serializers from .models import Book class BookSerializer ( serializers . ModelSeriaizer ): class Meta : model = Book views.py from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated from rest_framework.views import RetrieveAPIView from .permissions import IsBookOwner , BlacklistPermission from .serializers import BookSerializer class BookAPIView ( RetrieveAPIView ): permission_classes = [ BlacklistPermission , IsAuthenticated , IsBookOwner ] serializer_class = BookSerializer We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/book/1/\" , headers = headers ) print ( r . json ()) # Output: {\"title\": \"Smart People Do Smart Things!\"} In \"BookAPIView\" we have overridden global permission classes with our custom permission classes. API Permissions is one of the most powerful features of django rest framework. Reference: https://www.django-rest-framework.org/api-guide/permissions/","title":"Permissions In Django Rest Framework"},{"location":"blog/permissions-in-django-rest-framework-82/#permissions-in-django-rest-framework","text":"Permissions in Django Rest Framework are used to grant or deny access for different types of users to different parts of the API. Permissions are very useful when serving API resources/end-points with certain restrictions. For example, let's consider you are writing an api endpoint to create an answer to a question just like stackoverflow . It only allows an authenticated user to create the answers. In this case we restrict the user by checking user is authenticated or not. If user user is authenticated then we allow user to access the API resource otherwise we deny the user. It's a simple example to use django rest permission classes.","title":"Permissions In Django Rest Framework"},{"location":"blog/permissions-in-django-rest-framework-82/#permissions-flow-in-drf","text":"Whenever any request comes to DRF then it enters the \"dispatch\" method. \"dispatch\" method should route the request to appropriate request method like \"get\", \"post\", \"put\", \"delete\", etc. But, before routing the request to the one of these methods it will checks the authentication, \"permissions\" and then it checks throttles(i.e used to limit the number of requests per user or per IP). In Django REST framework we always define permissions as a list. In DRF we can setup global permission classes or we can specify the permission classes in Views and Viewsets. If all permission checks are valid then request will be passed to appropriate method (i.e \"get\", \"post\", \"put\", \"delete\", etc. ) based on the request type otherwise an exception will be raised. The exception can be one of exceptions.PermissionDenied or exceptions.NotAuthenticated . If authentication fails then it returns status code of 401 and if any other permissions fails then it will return the status code of 403.","title":"Permissions Flow in DRF"},{"location":"blog/permissions-in-django-rest-framework-82/#default-permissions-classes-provided-by-drf","text":"Django rest framework provides the following permission classes which are used frequently..","title":"Default Permissions Classes provided by DRF"},{"location":"blog/permissions-in-django-rest-framework-82/#allowany","text":"This permission class do not restrict the user to access the API resource.","title":"AllowAny"},{"location":"blog/permissions-in-django-rest-framework-82/#isauthenticated","text":"This permission class only permits authenticated or logged in users to access the API resource.","title":"IsAuthenticated"},{"location":"blog/permissions-in-django-rest-framework-82/#isadminuser","text":"This permission class only allows Django Admin Users(i.e user.is_staff = True) to access the api resource and all other users will not be able access the API resource.","title":"IsAdminUser"},{"location":"blog/permissions-in-django-rest-framework-82/#isauthenticatedorreadonly","text":"This permission class allows authenticated users to perform read and write operations on the API resource. All users which are not authenticated will have read access only. If they try to update the API resource then it will raise permission denied error.","title":"IsAuthenticatedOrReadOnly"},{"location":"blog/permissions-in-django-rest-framework-82/#djangomodelpermissions","text":"It is based on model permissions provided by django.contrib.auth . It only be applied to views that have a queryset property. It only applied on authenticated users who has the relevant model permissions assigned. POST requests require the user to have the add permission on the model. PUT and PATCH requests require the user to have the change permission on the model. DELETE requests require the user to have the delete permission on the model.","title":"DjangoModelPermissions"},{"location":"blog/permissions-in-django-rest-framework-82/#djangomodelpermissionsoranonreadonly","text":"Same as DjangoModelPermissions, but it also allows unauthenticated users to have read-only access to the API resource.","title":"DjangoModelPermissionsOrAnonReadOnly"},{"location":"blog/permissions-in-django-rest-framework-82/#configuring-the-permissions-gobally-in-settingspy","text":"If we configure the global permission then these permission will apply on all API Views and ViewSets unless these permissions are overidden in Views and ViewSets. Let's see how to configure the permission globally. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES' : ( 'rest_framework.permissions.IsAuthenticated' , ) } DEFAULT_PERMISSION_CLASSES takes data type of list or tuple or any iterable types. We can configure multiple permissions globally.","title":"Configuring the Permissions Gobally in \"settings.py\""},{"location":"blog/permissions-in-django-rest-framework-82/#working-with-permissions-in-drf","text":"In the last article we have seen how to setup the token based authentication in Django REST Framework. Let's write some code to know how to work with permissions. urls.py from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] views.py from rest_framework.response import Response from rest_framework.views import APIView class ProtectedAPIView ( APIView ): def get ( self , request , format = None ): content = { 'message' : 'Hey! you have authenticated!' } return Response ( content ) We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"Hey! you have authenticated!\"} In above code we have not defined the any permission class but it will ask for user authentication permission to access the API resource. Because we have defined the authentication permission globally. So, we have passed the authentication token in the python request to access the API resource.","title":"Working with Permissions in DRF"},{"location":"blog/permissions-in-django-rest-framework-82/#writing-custom-permissions-in-drf","text":"In Django REST Framework we can use custom permission classes also. We can write two types of permission classes \"view level\" and \"object level\" . View level permissions We use these permission when we want to check the user permission/access level before passing the request to process it further. Object level permissions We use it when we want to check the user permission on object level. For example, let's consider the book writer scenario where user writes books and if only allow its owner to modify it. In that kind of scenarios we use object level permissions. Let's write a custom permission to block some IP address to access the API. permissions.py from rest_framework import permissions from .models import Blacklist class BlacklistPermission ( permissions . BasePermission ): \"\"\" Permission check for blacklisted IPs. \"\"\" def has_permission ( self , request , view ): ip_addr = request . META [ 'REMOTE_ADDR' ] blacklisted = Blacklist . objects . filter ( ip_addr = ip_addr ) . exists () return not blacklisted \"BasePermission\" is the base class for all custom permissions. It provides the method \"has_permission\" to implement our custom permissions. In above code we have overriden \"has_permission\" method to implement our permission functionality. It's an example for view level permission. Let's write some code to implement object level permission. models.py from django.db import models from .models import User class Book ( models . Model ): title = models . CharField ( max_length = 30 ) owner = models . ForeignKey ( User , on_delete = models . CASCADE ) class Blacklist ( models . Model ): ip_addr = models . GenericIPAddressField () permissions.py from rest_framework import permissions from .models import Blacklist , Writer class IsBookOwner ( permissions . BasePermission ): \"\"\" Check if user is Book owner or not. \"\"\" def has_object_permission ( self , request , view , obj ): return obj . owner == request . user urls.py from . import views urlpatterns = [ path ( 'api/book/<int:pk>/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] serializers.py from rest_framework import serializers from .models import Book class BookSerializer ( serializers . ModelSeriaizer ): class Meta : model = Book views.py from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated from rest_framework.views import RetrieveAPIView from .permissions import IsBookOwner , BlacklistPermission from .serializers import BookSerializer class BookAPIView ( RetrieveAPIView ): permission_classes = [ BlacklistPermission , IsAuthenticated , IsBookOwner ] serializer_class = BookSerializer We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/book/1/\" , headers = headers ) print ( r . json ()) # Output: {\"title\": \"Smart People Do Smart Things!\"} In \"BookAPIView\" we have overridden global permission classes with our custom permission classes. API Permissions is one of the most powerful features of django rest framework. Reference: https://www.django-rest-framework.org/api-guide/permissions/","title":"Writing Custom Permissions in DRF"},{"location":"blog/python-exception-handling-66/","text":"Python Exception Handling \u00b6 python exception handling is one of the concepts in python programming. Before start working with exceptional handling in python what is an exception ? An exception is an event which occurs while running the program which stops the program to work further. Exception also tells about the problem in the code execution. We can write our own exception. Some time if some exception is raised while running the program and we don't want our program to stop. what can we do ? we can handle it using syntax \" try.....except....finally \" in python. Bult-in exceptions in python \u00b6 We have many built-in exceptions in python, but most probable exceptions are ImportError: >>> from collections import mycollecton Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ImportError : cannot import name 'mycollecton' It occurs when we try to import a function or class or any name from a module or a package then this exeption will be raised. IndexError >>> my_list = [ 1 , 2 , \"Guido\" , \"Batta\" ] >>> my_list [ 10 ] Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > IndexError : list index out of range It occurs when we try to access an element in a list with an index which doesn't exists then this exceptions will be raised. KeyError >>> my_dict = { \"one\" : 1 , \"two\" : 2 } >>> my_dict [ \"three\" ] Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > KeyError : 'three' It occurs when we try to access a key in the dictionary which does not exists then this exception will be raised. NameError >>> my_name Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'my_name' is not defined It occurs when we try to access a variable that is not defined then this exception will be raised SyntaxError >>> if 10 ; print ( 100 ) File \"<stdin>\" , line 1 if 10 ; print ( 100 ) ^ SyntaxError : invalid syntax It occurs when we try to run an invalid syntax then this exeption will be raised. IndentationError >>> if True : ... print ( 10 ) File \"<stdin>\" , line 2 print ( 10 ) ^ IndentationError : expected an indented block It occurs when we try to write not indented code then this exception will be raised. We must follow indentation while writing the code. All built-in errors are child classes of BaseException class. We find more information on it in python documentation on exceptional handling . Raising custom exception in python \u00b6 Let's write an email validator that will raise an exception when an email is invalid. class InvalidEmailException ( Exception ): pass # lets raise it import re if not re . match ( r \"[^@]+@[^@]+\\.[^@]+\" , \"google.co.in\" ): raise InvalidEmailException In above code we are raising our custom exception for invalid emails. \"raise\" is a keyword that is used to throw an exception in python. It will stops further execution of the program. This is how exceptions are used. Handling exceptions in python \u00b6 For handling exceptions we use try....except...finally clause in python. Let's see an example below Case: write a function to return division of given numbers def division ( a , b ): try : result = a / b print ( result ) except ZeroDivisionError : print ( \"Can't devide with zero\" ) result = 'Inf' finally : return result # check the function with below tests division ( 12 , 2 ) # 6.0 division ( 10 , 0 ) # Can't divide with zero In above case we have handled \"ZeroDivisionError\" exception and returned the string 'Inf' for \"division(10, 0)\". We can do more with exception handling in python. References: https://docs.python.org/3/library/exceptions.html","title":"Python Exception Handling"},{"location":"blog/python-exception-handling-66/#python-exception-handling","text":"python exception handling is one of the concepts in python programming. Before start working with exceptional handling in python what is an exception ? An exception is an event which occurs while running the program which stops the program to work further. Exception also tells about the problem in the code execution. We can write our own exception. Some time if some exception is raised while running the program and we don't want our program to stop. what can we do ? we can handle it using syntax \" try.....except....finally \" in python.","title":"Python Exception Handling"},{"location":"blog/python-exception-handling-66/#bult-in-exceptions-in-python","text":"We have many built-in exceptions in python, but most probable exceptions are ImportError: >>> from collections import mycollecton Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ImportError : cannot import name 'mycollecton' It occurs when we try to import a function or class or any name from a module or a package then this exeption will be raised. IndexError >>> my_list = [ 1 , 2 , \"Guido\" , \"Batta\" ] >>> my_list [ 10 ] Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > IndexError : list index out of range It occurs when we try to access an element in a list with an index which doesn't exists then this exceptions will be raised. KeyError >>> my_dict = { \"one\" : 1 , \"two\" : 2 } >>> my_dict [ \"three\" ] Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > KeyError : 'three' It occurs when we try to access a key in the dictionary which does not exists then this exception will be raised. NameError >>> my_name Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'my_name' is not defined It occurs when we try to access a variable that is not defined then this exception will be raised SyntaxError >>> if 10 ; print ( 100 ) File \"<stdin>\" , line 1 if 10 ; print ( 100 ) ^ SyntaxError : invalid syntax It occurs when we try to run an invalid syntax then this exeption will be raised. IndentationError >>> if True : ... print ( 10 ) File \"<stdin>\" , line 2 print ( 10 ) ^ IndentationError : expected an indented block It occurs when we try to write not indented code then this exception will be raised. We must follow indentation while writing the code. All built-in errors are child classes of BaseException class. We find more information on it in python documentation on exceptional handling .","title":"Bult-in exceptions in python"},{"location":"blog/python-exception-handling-66/#raising-custom-exception-in-python","text":"Let's write an email validator that will raise an exception when an email is invalid. class InvalidEmailException ( Exception ): pass # lets raise it import re if not re . match ( r \"[^@]+@[^@]+\\.[^@]+\" , \"google.co.in\" ): raise InvalidEmailException In above code we are raising our custom exception for invalid emails. \"raise\" is a keyword that is used to throw an exception in python. It will stops further execution of the program. This is how exceptions are used.","title":"Raising custom exception in python"},{"location":"blog/python-exception-handling-66/#handling-exceptions-in-python","text":"For handling exceptions we use try....except...finally clause in python. Let's see an example below Case: write a function to return division of given numbers def division ( a , b ): try : result = a / b print ( result ) except ZeroDivisionError : print ( \"Can't devide with zero\" ) result = 'Inf' finally : return result # check the function with below tests division ( 12 , 2 ) # 6.0 division ( 10 , 0 ) # Can't divide with zero In above case we have handled \"ZeroDivisionError\" exception and returned the string 'Inf' for \"division(10, 0)\". We can do more with exception handling in python. References: https://docs.python.org/3/library/exceptions.html","title":"Handling exceptions in python"},{"location":"blog/python-introduction-to-programming-33/","text":"Python Introduction To Programming \u00b6 Python is a high-level and interpreted programming language. It is created by Guido van Rossum. Python first released in 1991, Python has a good design philosophy. It provides features like code readability, and a syntax that allows fewer lines of code to implement functionality compare to other programming languages. Python is a general purpose programming language. History of python \u00b6 Python was conceived in the late 1980s, and its implementation began in December 1989 by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the operating system Amoeba. Rossum was fan of a comedy series from late seventies. The name \"Python\" was taken from the same series \"Monty Python's Flying Circus\". Features of Python Programming \u00b6 A simple language which is easier to learn Free and open source Portability (run code in any platform) Extensible and embeddable(c, c++, etc) A high level interpreted language Large standard libraries to solve common problems Supports object oriented programming Applications of python \u00b6 Web and Internet Development Frameworks such as Django and Pyramid . Micro-frameworks such as Flask and Bottle . Advanced content management systems such as Plone and django CMS . Scientific and Numeric SciPy is a collection of packages for mathematics, science, and engineering. Pandas is a data analysis and modeling library. Education Python is a superb language for teaching programming, both at the introductory level and in more advanced courses. Books such as How to Think Like a Computer Scientist , Python Programming: An Introduction to Computer Science , and Practical Programming . Desktop GUIs wxWidgets Kivy , for writing multitouch applications. Qt via pyqt or pyside Software Development Python used as a supporting language for software developers along with other programming languages. Python is used in automation of software processes. Also used for build, control and management, testing and in many other ways. SCons for build control. Buildbot and Apache Gump for automated continuous compilation and testing. Roundup or Trac for bug tracking and project management. Business Applications python is used for ERP(enterprice resource planning) and internet e-commerce applications. Odoo offers a range of business applications that form a complete pack of enterprise management applications. Tryton is a high-level general purpose application platform. Before start programming in python, we have to install python software. To install python software go to https://www.python.org/downloads/ and download and install the python software which is compatible with your operating system. Python program - \"Hello World\" \u00b6 print(\"Hello World\") when we run the above code the python interpreter will give output \"Hello World\". What is a program ? \u00b6 A program is a sequence of instructions that tells how to solve a given problem. For example, Finding a square of a number. Basic terminology of programming Input: Get data from the keyboard, a file, or some other device. Math: Perform basic mathematical operations like addition and multiplication. Conditional execution: Check for certain conditions and execute the appropriate sequence of statements. Repetition: Perform some action repeatedly, usually with some variation. Output: Display data on the screen or send data to a file or other device. When we run any program it takes the input **and **processes the given input and produces the processed output.","title":"Python Introduction To Programming"},{"location":"blog/python-introduction-to-programming-33/#python-introduction-to-programming","text":"Python is a high-level and interpreted programming language. It is created by Guido van Rossum. Python first released in 1991, Python has a good design philosophy. It provides features like code readability, and a syntax that allows fewer lines of code to implement functionality compare to other programming languages. Python is a general purpose programming language.","title":"Python Introduction To Programming"},{"location":"blog/python-introduction-to-programming-33/#history-of-python","text":"Python was conceived in the late 1980s, and its implementation began in December 1989 by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the operating system Amoeba. Rossum was fan of a comedy series from late seventies. The name \"Python\" was taken from the same series \"Monty Python's Flying Circus\".","title":"History of python"},{"location":"blog/python-introduction-to-programming-33/#features-of-python-programming","text":"A simple language which is easier to learn Free and open source Portability (run code in any platform) Extensible and embeddable(c, c++, etc) A high level interpreted language Large standard libraries to solve common problems Supports object oriented programming","title":"Features of Python Programming"},{"location":"blog/python-introduction-to-programming-33/#applications-of-python","text":"Web and Internet Development Frameworks such as Django and Pyramid . Micro-frameworks such as Flask and Bottle . Advanced content management systems such as Plone and django CMS . Scientific and Numeric SciPy is a collection of packages for mathematics, science, and engineering. Pandas is a data analysis and modeling library. Education Python is a superb language for teaching programming, both at the introductory level and in more advanced courses. Books such as How to Think Like a Computer Scientist , Python Programming: An Introduction to Computer Science , and Practical Programming . Desktop GUIs wxWidgets Kivy , for writing multitouch applications. Qt via pyqt or pyside Software Development Python used as a supporting language for software developers along with other programming languages. Python is used in automation of software processes. Also used for build, control and management, testing and in many other ways. SCons for build control. Buildbot and Apache Gump for automated continuous compilation and testing. Roundup or Trac for bug tracking and project management. Business Applications python is used for ERP(enterprice resource planning) and internet e-commerce applications. Odoo offers a range of business applications that form a complete pack of enterprise management applications. Tryton is a high-level general purpose application platform. Before start programming in python, we have to install python software. To install python software go to https://www.python.org/downloads/ and download and install the python software which is compatible with your operating system.","title":"Applications of python"},{"location":"blog/python-introduction-to-programming-33/#python-program-hello-world","text":"print(\"Hello World\") when we run the above code the python interpreter will give output \"Hello World\".","title":"Python program - \"Hello World\""},{"location":"blog/python-introduction-to-programming-33/#what-is-a-program","text":"A program is a sequence of instructions that tells how to solve a given problem. For example, Finding a square of a number. Basic terminology of programming Input: Get data from the keyboard, a file, or some other device. Math: Perform basic mathematical operations like addition and multiplication. Conditional execution: Check for certain conditions and execute the appropriate sequence of statements. Repetition: Perform some action repeatedly, usually with some variation. Output: Display data on the screen or send data to a file or other device. When we run any program it takes the input **and **processes the given input and produces the processed output.","title":"What is a program ?"},{"location":"blog/python-memory-allocation-and-garbage-collection-10/","text":"Python Memory Management - Memory Allocation And Garbage Collection \u00b6 In python everything is considered as an object. In python we do not have variables instead python has names. When we declare a name/variable in python it stores the name in the memory. Every python name/variable points to its reference in the memory and reference points to the object. Let's consider the example code \"a = 100\" , \"a\" is name and it's points to the reference \"31365024\" and the reference points to the object \"100\" which is in binary format. A name is just a label for an object. In python each object can have lots of names. Python has stack memory and heap memory. Stack memory stores the state of the program. Private heap memory stores the objects and data structures. Python memory manager will takes care of the allocation of the private heap memory to the names/variables. Python manager uses the concept called Reference counting, whenever a new object is created it will update the reference count of the object. case1 a = 100 b = 200 case2 a = 100 b = 100 Lets consider the above code. In \"case1\" python memory manager will create the two objects. \"a\" points to the object \"100\" and \"b\" points to the object \"200\". The reference count of the object \"100\" is 1 and the reference count of the object \"200\" is 1. In \"case2\" python memory manager creates only one object i.e \"100\" and reference count is \"2\". Whenever a new object is created pyhon manager will checks the memory for the object. If object already exists python manager will not create new object instead it references the name to the object and increases the reference counter of the object. Every python object holds three things object type object value object reference counter Memory table for \"case2\" type int value 100 reference count 2 references a, b We can get the object memory location with python built-in function \"id\" a = 100 print ( id ( a )) # 10914336 b = 100 print ( id ( b )) # 10914336 print ( id ( a ) == id ( b )) # True try the above code in python interpreter to confirm yourself. Garbage collection in python Garbage collection is the process of removing the unused variables/names and freeing the memory. In python garbage collection is performed based on the reference count mechanism. Whenever the object is created the python will increases the reference count of the object by one. Whenever the reference is removed then it decreases the reference count by one. Garbage collector periodically checks and removes the objects from memory whose reference count is zero. a = 100 b = 100 # reference count of object 100 is 2 del a # reference count of object 100 is 1 del b # reference count of object 100 is 0 # So, garbage collector will remove the object 100 from the memory.","title":"Python Memory Management - Memory Allocation And Garbage Collection"},{"location":"blog/python-memory-allocation-and-garbage-collection-10/#python-memory-management-memory-allocation-and-garbage-collection","text":"In python everything is considered as an object. In python we do not have variables instead python has names. When we declare a name/variable in python it stores the name in the memory. Every python name/variable points to its reference in the memory and reference points to the object. Let's consider the example code \"a = 100\" , \"a\" is name and it's points to the reference \"31365024\" and the reference points to the object \"100\" which is in binary format. A name is just a label for an object. In python each object can have lots of names. Python has stack memory and heap memory. Stack memory stores the state of the program. Private heap memory stores the objects and data structures. Python memory manager will takes care of the allocation of the private heap memory to the names/variables. Python manager uses the concept called Reference counting, whenever a new object is created it will update the reference count of the object. case1 a = 100 b = 200 case2 a = 100 b = 100 Lets consider the above code. In \"case1\" python memory manager will create the two objects. \"a\" points to the object \"100\" and \"b\" points to the object \"200\". The reference count of the object \"100\" is 1 and the reference count of the object \"200\" is 1. In \"case2\" python memory manager creates only one object i.e \"100\" and reference count is \"2\". Whenever a new object is created pyhon manager will checks the memory for the object. If object already exists python manager will not create new object instead it references the name to the object and increases the reference counter of the object. Every python object holds three things object type object value object reference counter Memory table for \"case2\" type int value 100 reference count 2 references a, b We can get the object memory location with python built-in function \"id\" a = 100 print ( id ( a )) # 10914336 b = 100 print ( id ( b )) # 10914336 print ( id ( a ) == id ( b )) # True try the above code in python interpreter to confirm yourself. Garbage collection in python Garbage collection is the process of removing the unused variables/names and freeing the memory. In python garbage collection is performed based on the reference count mechanism. Whenever the object is created the python will increases the reference count of the object by one. Whenever the reference is removed then it decreases the reference count by one. Garbage collector periodically checks and removes the objects from memory whose reference count is zero. a = 100 b = 100 # reference count of object 100 is 2 del a # reference count of object 100 is 1 del b # reference count of object 100 is 0 # So, garbage collector will remove the object 100 from the memory.","title":"Python Memory Management - Memory Allocation And Garbage Collection"},{"location":"blog/python-method-overloading-60/","text":"Python Method Overloading \u00b6 method overloading in python can be defined as writing the method in such a way that method will provide different functionality for different datatype arguments with the same method name. Programming languages like Java and C++ implements the method overloading by defining the two methods with the same name but different parameters. In python we do not implement *method overloading *in that way because Java and C++ languages are statically typed hence we need to specify the data types before compilation. But python is a dynamically typed language hence we can implement the same behavior with a same method in python. How to overload a method in python? \u00b6 Let's do some code to implement the method overloading in python. class SayHello : def hello ( self , first_name = None , last_name = None ): if first_name and last_name : print ( \"Hello {0} {1} !\" . format ( first_name , last_name )) elif first_name : print ( \"Hello {0} !\" . format ( first_name )) else : print ( \"Hello !\" ) obj = SayHello () obj . hello ( \"Anjaneyulu\" , \"Batta\" ) # Output: Hello Anjaneyulu Batta! obj . hello ( \"Anji\" ) # Output: Hello Anji ! obj . hello () # Output: Hello ! In above code we have implemented method overloading for the method hello. After creating object we have called the method hello with two arguments first name \"Anjaneyulu\" and last name \"Batta\" and the method hello returned output Hello Anjaneyulu Batta !. In the next line we called the same method with a single argument name \"Anji\" now the method returned Hello Anji !. In the next line we have called the same method without the parameter now, the method returned the output Hello !. In above code we can see that method hello is behaving differently for different parameters that means we are overloading the behavior of the method for different arguments.","title":"Python Method Overloading"},{"location":"blog/python-method-overloading-60/#python-method-overloading","text":"method overloading in python can be defined as writing the method in such a way that method will provide different functionality for different datatype arguments with the same method name. Programming languages like Java and C++ implements the method overloading by defining the two methods with the same name but different parameters. In python we do not implement *method overloading *in that way because Java and C++ languages are statically typed hence we need to specify the data types before compilation. But python is a dynamically typed language hence we can implement the same behavior with a same method in python.","title":"Python Method Overloading"},{"location":"blog/python-method-overloading-60/#how-to-overload-a-method-in-python","text":"Let's do some code to implement the method overloading in python. class SayHello : def hello ( self , first_name = None , last_name = None ): if first_name and last_name : print ( \"Hello {0} {1} !\" . format ( first_name , last_name )) elif first_name : print ( \"Hello {0} !\" . format ( first_name )) else : print ( \"Hello !\" ) obj = SayHello () obj . hello ( \"Anjaneyulu\" , \"Batta\" ) # Output: Hello Anjaneyulu Batta! obj . hello ( \"Anji\" ) # Output: Hello Anji ! obj . hello () # Output: Hello ! In above code we have implemented method overloading for the method hello. After creating object we have called the method hello with two arguments first name \"Anjaneyulu\" and last name \"Batta\" and the method hello returned output Hello Anjaneyulu Batta !. In the next line we called the same method with a single argument name \"Anji\" now the method returned Hello Anji !. In the next line we have called the same method without the parameter now, the method returned the output Hello !. In above code we can see that method hello is behaving differently for different parameters that means we are overloading the behavior of the method for different arguments.","title":"How to overload a method in python?"},{"location":"blog/python-object-oriented-programming-59/","text":"Python Object Oriented Programming \u00b6 Object oriented programming is one of the programming approaches in solving the problems with programming. Python supports object oriented programming(OOP) approach. While using OOPS in python we mostly use terms like object, class, method, etc. Some of the principles of Object Oriented Programming class object method inheritance polymorphism data abstraction encapsulation class \u00b6 Class is a program-code-template for creating the objects. Classes provide a means of bundling data and functionality together. Class Definition Syntax class ClassName : < statement - 1 > . . . < statement - n > example class class MyClass : \"\"\"A simple example class\"\"\" i = 12345 def f ( self ): return 'hello world' object \u00b6 object refers to a particular instance of a class, where the object can be a combination of variables, functions, and data structures. object can have state and behaviour. creation of object is called instantiation, hence object is called as instance of the class. let's create the object for above class. x = MyClass () print ( \"Value of attribute i:\" , x . i ) # Output: 12345 method \u00b6 method is a function/procedure that is associated with the object. let's see an example x = MyClass () print ( \"Value of method f():\" , x . f ()) # Output: hello world inheritance \u00b6 Inheritance is simply aquiring the properties from the parent class to the inherited class. Let's consider that we have two classes \"A\" and \"B\". If class \"B\" inherits the class \"A\" then class \"A\" is called as Base Class / Super Class for class \"B\". Class \"B\" is called as child class for class \"A\". polymorphism \u00b6 Polymorphism is the ability to leverage the same interface for different underlying forms such as data types or classes. This permits functions to use entities of different types at different times. Reference: https://docs.python.org/3/tutorial/classes.html","title":"Python Object Oriented Programming"},{"location":"blog/python-object-oriented-programming-59/#python-object-oriented-programming","text":"Object oriented programming is one of the programming approaches in solving the problems with programming. Python supports object oriented programming(OOP) approach. While using OOPS in python we mostly use terms like object, class, method, etc. Some of the principles of Object Oriented Programming class object method inheritance polymorphism data abstraction encapsulation","title":"Python Object Oriented Programming"},{"location":"blog/python-object-oriented-programming-59/#class","text":"Class is a program-code-template for creating the objects. Classes provide a means of bundling data and functionality together. Class Definition Syntax class ClassName : < statement - 1 > . . . < statement - n > example class class MyClass : \"\"\"A simple example class\"\"\" i = 12345 def f ( self ): return 'hello world'","title":"class"},{"location":"blog/python-object-oriented-programming-59/#object","text":"object refers to a particular instance of a class, where the object can be a combination of variables, functions, and data structures. object can have state and behaviour. creation of object is called instantiation, hence object is called as instance of the class. let's create the object for above class. x = MyClass () print ( \"Value of attribute i:\" , x . i ) # Output: 12345","title":"object"},{"location":"blog/python-object-oriented-programming-59/#method","text":"method is a function/procedure that is associated with the object. let's see an example x = MyClass () print ( \"Value of method f():\" , x . f ()) # Output: hello world","title":"method"},{"location":"blog/python-object-oriented-programming-59/#inheritance","text":"Inheritance is simply aquiring the properties from the parent class to the inherited class. Let's consider that we have two classes \"A\" and \"B\". If class \"B\" inherits the class \"A\" then class \"A\" is called as Base Class / Super Class for class \"B\". Class \"B\" is called as child class for class \"A\".","title":"inheritance"},{"location":"blog/python-object-oriented-programming-59/#polymorphism","text":"Polymorphism is the ability to leverage the same interface for different underlying forms such as data types or classes. This permits functions to use entities of different types at different times. Reference: https://docs.python.org/3/tutorial/classes.html","title":"polymorphism"},{"location":"blog/python-polymorphism-62/","text":"Python Polymorphism \u00b6 Polymorphism can be defined as declaring a uniform interface that is not aware of the type of the data, leaving implementation details to concrete data types that implement the interface. In general terms we can define it as different objects acts differently for same interface. In python we can implement polymorphism in two ways. polymorphism with functions polymorphism with classes Python Polymorphism with Functions \u00b6 In function based polymorphism we define a generic function and define the some functionality. We use the same generic function to perform actions based on the parameters that sent. Let's see an example for function based polymorphism in python. def find_length ( a ): if ( isinstance ( a , Iterable )): return len ( a ) else : return 1 # try checking out print ( find_length ([ 1 , 2 , 3 ])) # output: 3 print ( find_length ( \"123\" )) # output: 3 print ( find_length ( 123 )) # output: 1 Python Polymorphism with Classes \u00b6 In class based polymorphism we define a method in all classes(i.e same method name in all classes). we use the same method to perform the actions. Let's see an example for function based polymorphism in python. class Animal ( object ): def __init__ ( self , name ): self . name = name def talk ( self ): raise NotImplementedError class Dog ( Animal ): def talk ( self ): return \"Bow...Bow...\" class Cat ( Animal ): def talk ( self ): return \"Meow...Meow...\" class Human ( Animal ): def talk ( self ): return \"I can talk more....\" object_list = [ Dog ( name = \"Dog\" ), Cat ( \"cat\" ), Human ( \"Human\" )] for obj in object_list : print ( \"Name: %s \" % obj . name ) print ( \"Talk: %s \" % obj . talk ()) # Output: # Name: Dog # Talk: Bow...Bow... # Name: cat # Talk: Meow...Meow... # Name: Human # Talk: I can talk more.... We have seen simple examples above to understand the python polymorphism concept. Actually, We can do more with it.","title":"Python Polymorphism"},{"location":"blog/python-polymorphism-62/#python-polymorphism","text":"Polymorphism can be defined as declaring a uniform interface that is not aware of the type of the data, leaving implementation details to concrete data types that implement the interface. In general terms we can define it as different objects acts differently for same interface. In python we can implement polymorphism in two ways. polymorphism with functions polymorphism with classes","title":"Python Polymorphism"},{"location":"blog/python-polymorphism-62/#python-polymorphism-with-functions","text":"In function based polymorphism we define a generic function and define the some functionality. We use the same generic function to perform actions based on the parameters that sent. Let's see an example for function based polymorphism in python. def find_length ( a ): if ( isinstance ( a , Iterable )): return len ( a ) else : return 1 # try checking out print ( find_length ([ 1 , 2 , 3 ])) # output: 3 print ( find_length ( \"123\" )) # output: 3 print ( find_length ( 123 )) # output: 1","title":"Python Polymorphism with Functions"},{"location":"blog/python-polymorphism-62/#python-polymorphism-with-classes","text":"In class based polymorphism we define a method in all classes(i.e same method name in all classes). we use the same method to perform the actions. Let's see an example for function based polymorphism in python. class Animal ( object ): def __init__ ( self , name ): self . name = name def talk ( self ): raise NotImplementedError class Dog ( Animal ): def talk ( self ): return \"Bow...Bow...\" class Cat ( Animal ): def talk ( self ): return \"Meow...Meow...\" class Human ( Animal ): def talk ( self ): return \"I can talk more....\" object_list = [ Dog ( name = \"Dog\" ), Cat ( \"cat\" ), Human ( \"Human\" )] for obj in object_list : print ( \"Name: %s \" % obj . name ) print ( \"Talk: %s \" % obj . talk ()) # Output: # Name: Dog # Talk: Bow...Bow... # Name: cat # Talk: Meow...Meow... # Name: Human # Talk: I can talk more.... We have seen simple examples above to understand the python polymorphism concept. Actually, We can do more with it.","title":"Python Polymorphism with Classes"},{"location":"blog/python-reading-and-writing-files-65/","text":"Python Reading And Writing Files \u00b6 File reading and File writing is widely used concept in python because, As we (i.e humans) are lazy we do not remember all the information so we invented the computers(i.e storage devices) to store the information. where will computers store the information? Computer always stores the information in files. Hence, As we programmers we have to learn python file reading and writing so that we can play with files. Python File Reading \u00b6 In python we have a keyword named \"open\" by using that keyword we open files and read contents of it. Let's see a code example to read a simple text file. file_location = '/home/ubuntu/sample.txt' open_mode = 'r' file = open ( file_location , open_mode ) contents = file . read () print ( contents ) file . close () # output: # Hello World # Hello Python python keyword \"open\" takes two parameters to read the file. First parameter is location of the file(i.e full path of the file where the file resides in the operating system) and second parameter is opening mode type. Based on the mode type file will be open for reading or writing. Types of file modes in python Mode Description 'r' Opens file for reading 'w' Opens file for writing. It creates a new file if file does not exist or truncates the file if exists. 'x' Opens file for exclusive creation. If the file already exists, the operation fails. 'a' Opens file for appending at the end of the file without truncating it. Creates a new file if it does not exist. 't' Opens file in text mode. 'b' Opens file in binary mode. '+' Opens file for updating both reading and writing Choose the file opening mode based on the requirement whether you want to open it for reading or writing. Opening the file for reading is faster than writing or appending. \"read\" is file method which is used to read the contents of the file. It's always recommended to close the file after opening it. Because whenever we opens the file the operating system loads the file contents into the memory. When we close the file then that occupied memory will be freed. Python File Writing \u00b6 file_location = '/home/ubuntu/sample.txt' open_mode = 'w' file = open ( file_location , open_mode ) file . write ( \"Hello Google \\n \" ) file . write ( \"Hello Yahoo\" ) file . close () # output: # Hello World # Hello Python * In above code we have used the file open mode \"w\" to write the contents into the file. * We have used the file method \"write\" which is used to write the contents into the file. * It's always recommended to close the file after our usage. Available Python File Methods \u00b6 Method Description close() It closes the file if opened (no effect otherwise) detach() Separates the underlying binary buffer from the TextIOBase and return it. fileno() It returns descriptor of the file. flush() Flush the write buffer of the file stream. isatty() Return True if the file stream is interactive. read(n) Read atmost n characters form the file. Reads till end of file if it is negative or None. readable() Returns True if the file stream can nbe read from. readline(n=-1) Read and return one line from the file. Reads in at most nbytes if specified. readlines(n=-1) Read and return a list of lines from the file. Reads in at most n bytes/characters if specified. seek(offset,from=SEEK_SET) Change the file position to offset bytes, in reference to from(start, current, end). seekable() Returns True if the file stream supports random access. tell() Returns the current file location. truncate(size=None) Resize the file stream to size bytes. If size is not specified, resize to current location. writable() Returns True if the file stream can be written to. write(s) Write string s to the file and return the number of characters written. writelines(lines) Write a list of lines to the file. Pythonic way to open and close the file \u00b6 We generally opens a file and do some operations with it and then closes it. Whe doing operations if we get any error then the file remains opened. The file uses memory for no use. So, We should always close the file though we get errors. We can achieve it using \"try ... finally\" in python. Let's see an example code file_location = '/home/ubuntu/sample.txt' try : file = open ( file_location , 'a+' ) # do some operations finally : file . close () Above example can be simplified as below file_location = '/home/ubuntu/sample.txt' with open ( file_location , 'a+' ) as file : # do some operations Reference: https://docs.python.org/dev/library/io.html","title":"Python Reading And Writing Files"},{"location":"blog/python-reading-and-writing-files-65/#python-reading-and-writing-files","text":"File reading and File writing is widely used concept in python because, As we (i.e humans) are lazy we do not remember all the information so we invented the computers(i.e storage devices) to store the information. where will computers store the information? Computer always stores the information in files. Hence, As we programmers we have to learn python file reading and writing so that we can play with files.","title":"Python Reading And Writing Files"},{"location":"blog/python-reading-and-writing-files-65/#python-file-reading","text":"In python we have a keyword named \"open\" by using that keyword we open files and read contents of it. Let's see a code example to read a simple text file. file_location = '/home/ubuntu/sample.txt' open_mode = 'r' file = open ( file_location , open_mode ) contents = file . read () print ( contents ) file . close () # output: # Hello World # Hello Python python keyword \"open\" takes two parameters to read the file. First parameter is location of the file(i.e full path of the file where the file resides in the operating system) and second parameter is opening mode type. Based on the mode type file will be open for reading or writing. Types of file modes in python Mode Description 'r' Opens file for reading 'w' Opens file for writing. It creates a new file if file does not exist or truncates the file if exists. 'x' Opens file for exclusive creation. If the file already exists, the operation fails. 'a' Opens file for appending at the end of the file without truncating it. Creates a new file if it does not exist. 't' Opens file in text mode. 'b' Opens file in binary mode. '+' Opens file for updating both reading and writing Choose the file opening mode based on the requirement whether you want to open it for reading or writing. Opening the file for reading is faster than writing or appending. \"read\" is file method which is used to read the contents of the file. It's always recommended to close the file after opening it. Because whenever we opens the file the operating system loads the file contents into the memory. When we close the file then that occupied memory will be freed.","title":"Python File Reading"},{"location":"blog/python-reading-and-writing-files-65/#python-file-writing","text":"file_location = '/home/ubuntu/sample.txt' open_mode = 'w' file = open ( file_location , open_mode ) file . write ( \"Hello Google \\n \" ) file . write ( \"Hello Yahoo\" ) file . close () # output: # Hello World # Hello Python * In above code we have used the file open mode \"w\" to write the contents into the file. * We have used the file method \"write\" which is used to write the contents into the file. * It's always recommended to close the file after our usage.","title":"Python File Writing"},{"location":"blog/python-reading-and-writing-files-65/#available-python-file-methods","text":"Method Description close() It closes the file if opened (no effect otherwise) detach() Separates the underlying binary buffer from the TextIOBase and return it. fileno() It returns descriptor of the file. flush() Flush the write buffer of the file stream. isatty() Return True if the file stream is interactive. read(n) Read atmost n characters form the file. Reads till end of file if it is negative or None. readable() Returns True if the file stream can nbe read from. readline(n=-1) Read and return one line from the file. Reads in at most nbytes if specified. readlines(n=-1) Read and return a list of lines from the file. Reads in at most n bytes/characters if specified. seek(offset,from=SEEK_SET) Change the file position to offset bytes, in reference to from(start, current, end). seekable() Returns True if the file stream supports random access. tell() Returns the current file location. truncate(size=None) Resize the file stream to size bytes. If size is not specified, resize to current location. writable() Returns True if the file stream can be written to. write(s) Write string s to the file and return the number of characters written. writelines(lines) Write a list of lines to the file.","title":"Available Python File Methods"},{"location":"blog/python-reading-and-writing-files-65/#pythonic-way-to-open-and-close-the-file","text":"We generally opens a file and do some operations with it and then closes it. Whe doing operations if we get any error then the file remains opened. The file uses memory for no use. So, We should always close the file though we get errors. We can achieve it using \"try ... finally\" in python. Let's see an example code file_location = '/home/ubuntu/sample.txt' try : file = open ( file_location , 'a+' ) # do some operations finally : file . close () Above example can be simplified as below file_location = '/home/ubuntu/sample.txt' with open ( file_location , 'a+' ) as file : # do some operations Reference: https://docs.python.org/dev/library/io.html","title":"Pythonic way to open and close the file"},{"location":"blog/python-staticmethod-classmethod-and-instancemethod-63/","text":"python staticmethod, classmethod and instancemethod \u00b6 Python Static Methods \u00b6 In python classes we define static methods using the decorator @staticmethod . Let's check out the python static method syntax below. class Circle ( object ): @staticmethod def area ( radius ): return ( 22 / 7.0 ) * radius * radius area = Circle . area ( 10 ) print ( area ) # Output: 314.285714286 We can define the static method without using decorator also but it will not be available on class instances. We can use static methods when the code of the method only belongs to the class and it do not require the self or the object itself. staticmethod is nothing more than a function defined inside a class. It is callable without instantiating the class first. It\u2019s definition is immutable via inheritance. Python Class Methods \u00b6 In python classes we define class methods using the decorator @classmethod . Let's check out the python class method syntax below. class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( '-' )) date = cls ( day , month , year ) return date def __str__ ( self ): return 'Date( {} , {} , {} )' . format ( self . day , self . month , self . year ) d = Date . from_string ( '01-12-2019' ) print ( d ) # Output: Date(1, 12, 2019) Python class methods are not specific to a particular instance but they involved with the class. Python class methods can be overridden by its child classes. classmethod decorator also improves the code readability. Python Instance Methods \u00b6 Unike the static and class methods, python instance methods does not require any decorator. Let's check out the python instance method syntax below. class User ( object ): def __init__ ( self , user_id , first_name , last_name ): self . user_id = user_id self . first_name = first_name self . last_name = last_name def get_full_name ( self ): return ' {} {} ' . format ( self . first_name , self . last_name ) u1 = User ( 1 , 'Anji' , 'B' ) print ( u1 . get_full_name ()) # Output: Anji B u2 = User ( 2 , 'Shiva' , 'D' ) print ( u2 . get_full_name ()) # Output: Shiva D - \"Python instance method\" the name itself says that it only works with the instance of the class. - instance method always considers the first parameter as class instance. By default we use first parameter as \"self\" to instance methods. - Python instance methods can be overridden by it's child classes.","title":"python staticmethod, classmethod and instancemethod"},{"location":"blog/python-staticmethod-classmethod-and-instancemethod-63/#python-staticmethod-classmethod-and-instancemethod","text":"","title":"python staticmethod, classmethod and instancemethod"},{"location":"blog/python-staticmethod-classmethod-and-instancemethod-63/#python-static-methods","text":"In python classes we define static methods using the decorator @staticmethod . Let's check out the python static method syntax below. class Circle ( object ): @staticmethod def area ( radius ): return ( 22 / 7.0 ) * radius * radius area = Circle . area ( 10 ) print ( area ) # Output: 314.285714286 We can define the static method without using decorator also but it will not be available on class instances. We can use static methods when the code of the method only belongs to the class and it do not require the self or the object itself. staticmethod is nothing more than a function defined inside a class. It is callable without instantiating the class first. It\u2019s definition is immutable via inheritance.","title":"Python Static Methods"},{"location":"blog/python-staticmethod-classmethod-and-instancemethod-63/#python-class-methods","text":"In python classes we define class methods using the decorator @classmethod . Let's check out the python class method syntax below. class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( '-' )) date = cls ( day , month , year ) return date def __str__ ( self ): return 'Date( {} , {} , {} )' . format ( self . day , self . month , self . year ) d = Date . from_string ( '01-12-2019' ) print ( d ) # Output: Date(1, 12, 2019) Python class methods are not specific to a particular instance but they involved with the class. Python class methods can be overridden by its child classes. classmethod decorator also improves the code readability.","title":"Python Class Methods"},{"location":"blog/python-staticmethod-classmethod-and-instancemethod-63/#python-instance-methods","text":"Unike the static and class methods, python instance methods does not require any decorator. Let's check out the python instance method syntax below. class User ( object ): def __init__ ( self , user_id , first_name , last_name ): self . user_id = user_id self . first_name = first_name self . last_name = last_name def get_full_name ( self ): return ' {} {} ' . format ( self . first_name , self . last_name ) u1 = User ( 1 , 'Anji' , 'B' ) print ( u1 . get_full_name ()) # Output: Anji B u2 = User ( 2 , 'Shiva' , 'D' ) print ( u2 . get_full_name ()) # Output: Shiva D - \"Python instance method\" the name itself says that it only works with the instance of the class. - instance method always considers the first parameter as class instance. By default we use first parameter as \"self\" to instance methods. - Python instance methods can be overridden by it's child classes.","title":"Python Instance Methods"},{"location":"blog/python-variables-and-data-types-34/","text":"Python Variables And Data Types \u00b6 Let's begin learning variables and data types in python programming. In this article we will learn about how to use variable to store the data. we will also learn about different data types provided by python programming language. In python, without using the variables and data types we can't able write programs that can solve problems. What is a variable ? \u00b6 Variable is a name which is used as a pointer to data that is stored on computer memory. In python we call variables as names. message = \"Hello World\" print ( message ) # Output: Hello World my_var = \"Hi\" print ( my_var ) # Output: Hi print ( your_var ) # Output: # NameError: name 'your_var' is not defined In above python program we have stored the message \"Hello World\" in the name/variable message. Actually it is stored in computer memory and variable \"message\" is a pointer to the data \"Hello World\". In above program when we print \"your_var\" we got an error. Because the the variable/name is not defined. Instead of naming the variable as \"message\" we can use anything like \"my_var\", \"your_var\", etc. But, it's not a good practice to give random names. We should follow some rule to name variables in python. Note: Use variable/names only if you use it more than once Variable naming rules in python \u00b6 variable name should not contain a space variable name should starts with a letter or an underscore(_) special symbols (~, !, @, #, $, etc.) are not allowed in variable name. variable should be short and meaningful as per the data stored in variable. If we want to use multiple words in a variable we can use underscore(_) to separate the words. Example variables \"student_name\", \"account_number\", \"phone_num1\", \"phone_num2\", etc. Python is case sensitive language so, it treats the lowercase letters and upper case letters differently. For example variable \"Student\" is different from the variable \"student\". We should not use python reserved variables/names as variables though we are allowed to use it. It is better practice to use lowercase letters instead of uppercase letters. Note: It needs some practice to use good variable names. What is a datatype in python ? \u00b6 Datatype is a classification of data which tells the computer that how the programer wants to use the data. For example the data \"hello\" is different from the data 255. data \"hello\" is of type string and 255 is of type int in python. In python, we can classify the data types into two. Immutable data type Mutable data type Immutable data type: \u00b6 Immutable data type is defined as once we declare the data of a datatype then it will not allow us to modify it. The following data types are immutable data types in python. bool - Boolean data type int - Integer data type float - Float data type str - String data type tuple - Tuple data type frozenset - Immutable set data type Mutable data type: \u00b6 **Mutable data type**is defined as it is a data type in which we can modify the data whenever we want. It's simply opposite to the immutable data type. The following data types are mutable data types in python. list - List data type or Array data type set - Set data type dict - Dictionary data type In python we can also define our own data types. The above mentioned data types are some of the built-in data types provided by the python. We will learn more about each of them in coming articles.","title":"Python Variables And Data Types"},{"location":"blog/python-variables-and-data-types-34/#python-variables-and-data-types","text":"Let's begin learning variables and data types in python programming. In this article we will learn about how to use variable to store the data. we will also learn about different data types provided by python programming language. In python, without using the variables and data types we can't able write programs that can solve problems.","title":"Python Variables And Data Types"},{"location":"blog/python-variables-and-data-types-34/#what-is-a-variable","text":"Variable is a name which is used as a pointer to data that is stored on computer memory. In python we call variables as names. message = \"Hello World\" print ( message ) # Output: Hello World my_var = \"Hi\" print ( my_var ) # Output: Hi print ( your_var ) # Output: # NameError: name 'your_var' is not defined In above python program we have stored the message \"Hello World\" in the name/variable message. Actually it is stored in computer memory and variable \"message\" is a pointer to the data \"Hello World\". In above program when we print \"your_var\" we got an error. Because the the variable/name is not defined. Instead of naming the variable as \"message\" we can use anything like \"my_var\", \"your_var\", etc. But, it's not a good practice to give random names. We should follow some rule to name variables in python. Note: Use variable/names only if you use it more than once","title":"What is a variable ?"},{"location":"blog/python-variables-and-data-types-34/#variable-naming-rules-in-python","text":"variable name should not contain a space variable name should starts with a letter or an underscore(_) special symbols (~, !, @, #, $, etc.) are not allowed in variable name. variable should be short and meaningful as per the data stored in variable. If we want to use multiple words in a variable we can use underscore(_) to separate the words. Example variables \"student_name\", \"account_number\", \"phone_num1\", \"phone_num2\", etc. Python is case sensitive language so, it treats the lowercase letters and upper case letters differently. For example variable \"Student\" is different from the variable \"student\". We should not use python reserved variables/names as variables though we are allowed to use it. It is better practice to use lowercase letters instead of uppercase letters. Note: It needs some practice to use good variable names.","title":"Variable naming rules in python"},{"location":"blog/python-variables-and-data-types-34/#what-is-a-datatype-in-python","text":"Datatype is a classification of data which tells the computer that how the programer wants to use the data. For example the data \"hello\" is different from the data 255. data \"hello\" is of type string and 255 is of type int in python. In python, we can classify the data types into two. Immutable data type Mutable data type","title":"What is a datatype in python ?"},{"location":"blog/python-variables-and-data-types-34/#immutable-data-type","text":"Immutable data type is defined as once we declare the data of a datatype then it will not allow us to modify it. The following data types are immutable data types in python. bool - Boolean data type int - Integer data type float - Float data type str - String data type tuple - Tuple data type frozenset - Immutable set data type","title":"Immutable data type:"},{"location":"blog/python-variables-and-data-types-34/#mutable-data-type","text":"**Mutable data type**is defined as it is a data type in which we can modify the data whenever we want. It's simply opposite to the immutable data type. The following data types are mutable data types in python. list - List data type or Array data type set - Set data type dict - Dictionary data type In python we can also define our own data types. The above mentioned data types are some of the built-in data types provided by the python. We will learn more about each of them in coming articles.","title":"Mutable data type:"},{"location":"blog/python-working-with-boolean-data-type-36/","text":"Python Working With Boolean Data Type \u00b6 Boolean data type is a one of the data types in python programming language. Boolean data has only two values True and False. It is mostly used to check whether the given statement is correct or not. It is the most used data type in any programming languages. Boolean data intended to use for Boolean Algebra . In python we mostly use it conditional statements (if...elif...else). Working with logical \"and\" operator \u00b6 x and y Returns True and True True True and False False False and True False False and False False Above truth table represents how the operator \"and\" works with Boolean values. \"and\" will return \"True\" if and only if two operands have \"True\" value. Let's see some examples with code. a = 10 b = 30 c = 20 # Case1 result = a > b and b < c print ( result ) # Output: False # Case2 result = a < b and b > c print ( result ) # Output: True From above code, In Case1, a > b returns False because 10 > 30 is invlaid and we have \"and\" operator. In \"and\" operator to get True both the operands needs to have value True. In our case it's not. so, it will return False irrespective of the value b < c. In Case2, a < b returns True, because 10 < 30 is valid and we have \"and\" operator. First operand has value \"True\" so, lets check for the second operand. b > c returns \"True\", because 30 > 20 is valid. If we replace both truth values then \"a < b and b > c\" will become \"True and True\", from above truth table the returning value is \"True\". Working with logical \"or\" operator \u00b6 x or y Returns True or True True True or False True False or True True False or False False Consider variables \"x\" and \"y\". It will return \"True\" if any one of the variables contains the value \"True\" otherwise it returns \"False\". # a number is a lucky number if it's divisible by 5 or 7 number = 21 is_lucky = ( number % 5 == 0 ) or ( number % 7 == 0 ) print ( is_lucky ) # Output: True if ( is_lucky ): print ( \"I'm lucky\" ) else : print ( \"Better luck next time\" ) In python the execution of statement is from left to right and it executes the statements inside brackets first. so, it executes \"(number % 5 == 0)\" and it returns \"False\" after it executes \"(number % 7 == 0)\" and returns \"True\" then the statement becomes \"False or True\". From the above truth table the result is True. Working with logical \"not\" operator \u00b6 not x Returns not True False not False True Consider a variable \"x\". If value of \"x\" is \"True\" then \"not x\" will return \"False\" otherwise if value of \"x\" is \"False\" then \"not x\" will return \"True\". Working with \"==\" operator \u00b6 x == y Returns True == True True True == False False False == True False False == False True == is called as a equality operator . If we have two variables x, y. when we apply \"==\" on x, y like \"x == y\" then it checks that both \"x\", \"y\" have the same value or not. If it have same value then it returns \"True\" otherwise it returns \"False\".","title":"Python Working With Boolean Data Type"},{"location":"blog/python-working-with-boolean-data-type-36/#python-working-with-boolean-data-type","text":"Boolean data type is a one of the data types in python programming language. Boolean data has only two values True and False. It is mostly used to check whether the given statement is correct or not. It is the most used data type in any programming languages. Boolean data intended to use for Boolean Algebra . In python we mostly use it conditional statements (if...elif...else).","title":"Python Working With Boolean Data Type"},{"location":"blog/python-working-with-boolean-data-type-36/#working-with-logical-and-operator","text":"x and y Returns True and True True True and False False False and True False False and False False Above truth table represents how the operator \"and\" works with Boolean values. \"and\" will return \"True\" if and only if two operands have \"True\" value. Let's see some examples with code. a = 10 b = 30 c = 20 # Case1 result = a > b and b < c print ( result ) # Output: False # Case2 result = a < b and b > c print ( result ) # Output: True From above code, In Case1, a > b returns False because 10 > 30 is invlaid and we have \"and\" operator. In \"and\" operator to get True both the operands needs to have value True. In our case it's not. so, it will return False irrespective of the value b < c. In Case2, a < b returns True, because 10 < 30 is valid and we have \"and\" operator. First operand has value \"True\" so, lets check for the second operand. b > c returns \"True\", because 30 > 20 is valid. If we replace both truth values then \"a < b and b > c\" will become \"True and True\", from above truth table the returning value is \"True\".","title":"Working with logical \"and\" operator"},{"location":"blog/python-working-with-boolean-data-type-36/#working-with-logical-or-operator","text":"x or y Returns True or True True True or False True False or True True False or False False Consider variables \"x\" and \"y\". It will return \"True\" if any one of the variables contains the value \"True\" otherwise it returns \"False\". # a number is a lucky number if it's divisible by 5 or 7 number = 21 is_lucky = ( number % 5 == 0 ) or ( number % 7 == 0 ) print ( is_lucky ) # Output: True if ( is_lucky ): print ( \"I'm lucky\" ) else : print ( \"Better luck next time\" ) In python the execution of statement is from left to right and it executes the statements inside brackets first. so, it executes \"(number % 5 == 0)\" and it returns \"False\" after it executes \"(number % 7 == 0)\" and returns \"True\" then the statement becomes \"False or True\". From the above truth table the result is True.","title":"Working with logical \"or\" operator"},{"location":"blog/python-working-with-boolean-data-type-36/#working-with-logical-not-operator","text":"not x Returns not True False not False True Consider a variable \"x\". If value of \"x\" is \"True\" then \"not x\" will return \"False\" otherwise if value of \"x\" is \"False\" then \"not x\" will return \"True\".","title":"Working with logical \"not\" operator"},{"location":"blog/python-working-with-boolean-data-type-36/#working-with-operator","text":"x == y Returns True == True True True == False False False == True False False == False True == is called as a equality operator . If we have two variables x, y. when we apply \"==\" on x, y like \"x == y\" then it checks that both \"x\", \"y\" have the same value or not. If it have same value then it returns \"True\" otherwise it returns \"False\".","title":"Working with \"==\" operator"},{"location":"blog/python-working-with-classes-and-objects-58/","text":"Python Working With Classes And Objects \u00b6 In this article we will learn how to work with classes and objects in python. Python classes are mainly used for code reusability and better maintainability. You might have a question that we have a functions why do we need classes ? that's a good question. By using functions we can reuse the functionality In some cases we may need to hold the data and functionality together which is not possible with python functions. So, to bundle the data and functionality together we use python classes.we can use the object oriented programming principles like inheritance, encapsulation, etc. using python classes. Syntax of a pyhon class \u00b6 class < ClassName > : < statement - 1 > . . . < statement - n > Working with python class \u00b6 class Snake : name = 'python' def change_name ( self , new_name ): self . name = new_name self . status = \"name changed\" Creating an object in python obj = Snake () we have created an object of class \"Snake\". The process of creating a class object is called \"instantiation\". So, object of the class is also called as an instance of a class which is created from. Accessing the attribute of a class obj = Snake () print ( obj . name ) #Output: python The variables that are defined inside the class are called as \"attributes\". In python, we have two types of attributes 1. instance attribute 2.class attribute. In above example we have seen accessing the instance attribute. In the next example we will see how to access class attribute of a python class. Accessing the class attribute of a class. Class attribute is also called as class variable. print ( Snake . name ) #Output: python In the above code we have not created an object of the class. But, we are still able to access it. Because it is a class variable. Accessing the method of a class obj = Snake () obj . change_name ( 'Cobra' ) print ( obj . name ) #Output: Cobra In above code we have called the class method \"change_name\". In python we call the function as method if it is inside the class. In the method signature we have used \"self\" keyword of python. The keyword \"self\" is used inside the class definition. It is used to represent the instance of the class. It means it represents the object itself.","title":"Python Working With Classes And Objects"},{"location":"blog/python-working-with-classes-and-objects-58/#python-working-with-classes-and-objects","text":"In this article we will learn how to work with classes and objects in python. Python classes are mainly used for code reusability and better maintainability. You might have a question that we have a functions why do we need classes ? that's a good question. By using functions we can reuse the functionality In some cases we may need to hold the data and functionality together which is not possible with python functions. So, to bundle the data and functionality together we use python classes.we can use the object oriented programming principles like inheritance, encapsulation, etc. using python classes.","title":"Python Working With Classes And Objects"},{"location":"blog/python-working-with-classes-and-objects-58/#syntax-of-a-pyhon-class","text":"class < ClassName > : < statement - 1 > . . . < statement - n >","title":"Syntax of a pyhon class"},{"location":"blog/python-working-with-classes-and-objects-58/#working-with-python-class","text":"class Snake : name = 'python' def change_name ( self , new_name ): self . name = new_name self . status = \"name changed\" Creating an object in python obj = Snake () we have created an object of class \"Snake\". The process of creating a class object is called \"instantiation\". So, object of the class is also called as an instance of a class which is created from. Accessing the attribute of a class obj = Snake () print ( obj . name ) #Output: python The variables that are defined inside the class are called as \"attributes\". In python, we have two types of attributes 1. instance attribute 2.class attribute. In above example we have seen accessing the instance attribute. In the next example we will see how to access class attribute of a python class. Accessing the class attribute of a class. Class attribute is also called as class variable. print ( Snake . name ) #Output: python In the above code we have not created an object of the class. But, we are still able to access it. Because it is a class variable. Accessing the method of a class obj = Snake () obj . change_name ( 'Cobra' ) print ( obj . name ) #Output: Cobra In above code we have called the class method \"change_name\". In python we call the function as method if it is inside the class. In the method signature we have used \"self\" keyword of python. The keyword \"self\" is used inside the class definition. It is used to represent the instance of the class. It means it represents the object itself.","title":"Working with python class"},{"location":"blog/python-working-with-dict-data-type-53/","text":"Python Working With Dict Data Type \u00b6 Lets start working with dict data type in python. Dictionary is collection of unordered set of key, value pairs. We can create an empty dictionary with the empty braces {}. dict data type in python is one of the most used datatypes in python builtin data types. We can only able to use keys which are in immutable nature. i.e. we can use string, tuple, numbers as keys. But, we cannot use lists, sets, etc. dict is a mutable data type in python. Basic operations of python dictionary(dict) \u00b6 Creating a dictionary(dict) # empty dict using curly braces d1 = {} # empty dict using builtin dict function d2 = dict () # create dict from list of key, value pairs d3 = dict ([( 1 , 2 ), ( \"hi\" , \"hello\" )]) print ( d3 ) # output: {1: 2, 'hi': 'hello'} # create dict from kwargs d4 = dict ( hi = \"hello\" , hello = \"hi\" ) print ( d4 ) # output: {'hello': 'hi', 'hi': 'hello'} Add a key to dictionary(dict) d1 = {} # add key \"hi\" with value \"hello\" to dict d1 d1 [ \"hi\" ] = \"hello\" print ( d1 ) # output: {\"hi\": \"hello\"} It will raises an error if key is not found. Get key from dictionary(dict) d1 = { \"hi\" : \"hello\" } # get key value from dict d1 val = d1 [ \"hi\" ] print ( val ) # output: \"hello\" Remove a key from the dictionary(dict) d1 = { \"hi\" : \"hello\" , \"me\" : \"anji\" } del d1 [ \"me\" ] print ( d1 ) # output: {'hi': 'hello'} It will raises an error if the is not present . Working with dictionary(dict) methods in python \u00b6 Working with \"clear\" method in dict # D.clear() -> None. Remove all items from D. d1 = { \"hi\" : \"hello\" , \"me\" : \"anji\" } d1 . clear () print ( d1 ) # output: {} Working with \"copy\" method in dict # D.copy() -> a shallow copy of D d1 = { \"hi\" : \"hello\" } d2 = d1 . copy () print ( d2 ) # output: {'hi': 'hello'} print ( id ( d1 ), id ( d2 )) # output: 140645374610760 140645374610440 Working with \"fromkeys\" method in dict # dict.fromkeys(seq[, value]) --> dict keys = ( \"ram\" , \"robert\" , \"raheem\" ) d1 = dict . fromkeys ( keys ) print ( d1 ) # output: {'ram': None, 'robert': None, 'raheem': None} d2 = dict . fromkeys ( keys , 100 ) print ( d2 ) # output: {'ram': 100, 'robert': 100, 'raheem': 100} It takes iterable set of elements and a value as an argument and creates the dictionary with keys and value will be same. If default value is not given then it takes the value as None. Working with \"get\" method in dict # D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. d1 = { \"hi\" : \"hi\" , \"hello\" : 125 } v1 = d1 . get ( \"hello\" ) print ( v1 ) # output: 125 v2 = d1 . get ( \"invalid_key\" ) print ( v2 ) # output: None v3 = d1 . get ( \"invalid_key\" , 100 ) print ( v3 ) # output: 100 It takes a key and returns its value from the dict. If the key is not found then it returns None. If default value is given then it returns the default value. Working with \"items\" method in dict # D.items() -> a set-like object providing a view on D's items d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . items () print ( result ) # output: dict_items([('c', 3), ('b', 2), ('a', 1)]) It returns all the values as set of tuples with key, value as a pair. The returning data type is dict-items. It is a set-like object. Working with \"keys\" method in dict # D.keys() -> a set-like object providing a view on D's keys d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . keys () print ( result ) # output: dict_keys(['c', 'b', 'a']) It returns the set-like object which contains all the keys of the dict. Working with \"pop\" method in dict # D.pop(k[,d]) -> v, remove specified key and return the corresponding value. d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . pop ( \"a\" ) print ( result ) # output: 1 print ( d1 ) # output: {'c': 3, 'b': 2} result = d1 . pop ( \"a1\" ) # output: KeyError result = d1 . pop ( \"a1\" , 100 ) print ( result ) # output: 100 If key is not found, d is returned if given, otherwise KeyError is raised. If key not found and default is provided then default will be returned. Working with \"popitem\" method in dict # D.popitem() -> (k, v) # remove and return some (key, value) pair as a 2-tuple; # but raise KeyError if D is empty. d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . popitem () print ( result ) # output: print ( d1 ) # output: ('c', 3) d2 = {} result = d2 . popitem () # output: KeyError It randomly remove a key, value from the dictionary and returns it as a pair of tuple. Working with \"setdefault\" method in dict # D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D Working with \"update\" method in dict # D.update([E, ]**F) -> None. d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } d2 = { \"a\" : 10 , \"d\" : 100 , \"e\" : 120 } d1 . update ( d2 ) print ( d1 ) # output: {'d': 100, 'c': 3, 'b': 2, 'e': 120, 'a': 10} d1 = { \"a\" : 1 } d2 = { \"b\" : 2 , \"c\" : 3 } d1 . update ( d2 , z = 26 ) print ( d1 ) # output: {'z': 26, 'c': 3, 'b': 2, 'a': 1} Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k]. If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. Working with \"values\" method in dict # D.values() -> an object providing a view on D's values d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . values () print ( result ) # output: dict_values([3, 2, 1]) It returns an set like object which contains all the values of the dictionary. Rerefences: https://docs.python.org/3/tutorial/datastructures.html#dictionaries","title":"Python Working With Dict Data Type"},{"location":"blog/python-working-with-dict-data-type-53/#python-working-with-dict-data-type","text":"Lets start working with dict data type in python. Dictionary is collection of unordered set of key, value pairs. We can create an empty dictionary with the empty braces {}. dict data type in python is one of the most used datatypes in python builtin data types. We can only able to use keys which are in immutable nature. i.e. we can use string, tuple, numbers as keys. But, we cannot use lists, sets, etc. dict is a mutable data type in python.","title":"Python Working With Dict Data Type"},{"location":"blog/python-working-with-dict-data-type-53/#basic-operations-of-python-dictionarydict","text":"Creating a dictionary(dict) # empty dict using curly braces d1 = {} # empty dict using builtin dict function d2 = dict () # create dict from list of key, value pairs d3 = dict ([( 1 , 2 ), ( \"hi\" , \"hello\" )]) print ( d3 ) # output: {1: 2, 'hi': 'hello'} # create dict from kwargs d4 = dict ( hi = \"hello\" , hello = \"hi\" ) print ( d4 ) # output: {'hello': 'hi', 'hi': 'hello'} Add a key to dictionary(dict) d1 = {} # add key \"hi\" with value \"hello\" to dict d1 d1 [ \"hi\" ] = \"hello\" print ( d1 ) # output: {\"hi\": \"hello\"} It will raises an error if key is not found. Get key from dictionary(dict) d1 = { \"hi\" : \"hello\" } # get key value from dict d1 val = d1 [ \"hi\" ] print ( val ) # output: \"hello\" Remove a key from the dictionary(dict) d1 = { \"hi\" : \"hello\" , \"me\" : \"anji\" } del d1 [ \"me\" ] print ( d1 ) # output: {'hi': 'hello'} It will raises an error if the is not present .","title":"Basic operations of python dictionary(dict)"},{"location":"blog/python-working-with-dict-data-type-53/#working-with-dictionarydict-methods-in-python","text":"Working with \"clear\" method in dict # D.clear() -> None. Remove all items from D. d1 = { \"hi\" : \"hello\" , \"me\" : \"anji\" } d1 . clear () print ( d1 ) # output: {} Working with \"copy\" method in dict # D.copy() -> a shallow copy of D d1 = { \"hi\" : \"hello\" } d2 = d1 . copy () print ( d2 ) # output: {'hi': 'hello'} print ( id ( d1 ), id ( d2 )) # output: 140645374610760 140645374610440 Working with \"fromkeys\" method in dict # dict.fromkeys(seq[, value]) --> dict keys = ( \"ram\" , \"robert\" , \"raheem\" ) d1 = dict . fromkeys ( keys ) print ( d1 ) # output: {'ram': None, 'robert': None, 'raheem': None} d2 = dict . fromkeys ( keys , 100 ) print ( d2 ) # output: {'ram': 100, 'robert': 100, 'raheem': 100} It takes iterable set of elements and a value as an argument and creates the dictionary with keys and value will be same. If default value is not given then it takes the value as None. Working with \"get\" method in dict # D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. d1 = { \"hi\" : \"hi\" , \"hello\" : 125 } v1 = d1 . get ( \"hello\" ) print ( v1 ) # output: 125 v2 = d1 . get ( \"invalid_key\" ) print ( v2 ) # output: None v3 = d1 . get ( \"invalid_key\" , 100 ) print ( v3 ) # output: 100 It takes a key and returns its value from the dict. If the key is not found then it returns None. If default value is given then it returns the default value. Working with \"items\" method in dict # D.items() -> a set-like object providing a view on D's items d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . items () print ( result ) # output: dict_items([('c', 3), ('b', 2), ('a', 1)]) It returns all the values as set of tuples with key, value as a pair. The returning data type is dict-items. It is a set-like object. Working with \"keys\" method in dict # D.keys() -> a set-like object providing a view on D's keys d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . keys () print ( result ) # output: dict_keys(['c', 'b', 'a']) It returns the set-like object which contains all the keys of the dict. Working with \"pop\" method in dict # D.pop(k[,d]) -> v, remove specified key and return the corresponding value. d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . pop ( \"a\" ) print ( result ) # output: 1 print ( d1 ) # output: {'c': 3, 'b': 2} result = d1 . pop ( \"a1\" ) # output: KeyError result = d1 . pop ( \"a1\" , 100 ) print ( result ) # output: 100 If key is not found, d is returned if given, otherwise KeyError is raised. If key not found and default is provided then default will be returned. Working with \"popitem\" method in dict # D.popitem() -> (k, v) # remove and return some (key, value) pair as a 2-tuple; # but raise KeyError if D is empty. d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . popitem () print ( result ) # output: print ( d1 ) # output: ('c', 3) d2 = {} result = d2 . popitem () # output: KeyError It randomly remove a key, value from the dictionary and returns it as a pair of tuple. Working with \"setdefault\" method in dict # D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D Working with \"update\" method in dict # D.update([E, ]**F) -> None. d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } d2 = { \"a\" : 10 , \"d\" : 100 , \"e\" : 120 } d1 . update ( d2 ) print ( d1 ) # output: {'d': 100, 'c': 3, 'b': 2, 'e': 120, 'a': 10} d1 = { \"a\" : 1 } d2 = { \"b\" : 2 , \"c\" : 3 } d1 . update ( d2 , z = 26 ) print ( d1 ) # output: {'z': 26, 'c': 3, 'b': 2, 'a': 1} Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k]. If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. Working with \"values\" method in dict # D.values() -> an object providing a view on D's values d1 = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } result = d1 . values () print ( result ) # output: dict_values([3, 2, 1]) It returns an set like object which contains all the values of the dictionary. Rerefences: https://docs.python.org/3/tutorial/datastructures.html#dictionaries","title":"Working with dictionary(dict) methods in python"},{"location":"blog/python-working-with-for-loop-55/","text":"Python Working With For Loop \u00b6 Let's start working with for loop in python. For loop is used when want to execute a block of code repeatedly a fixed number of times. Python also comes with the support of iterating the sequences using the for loop. we can use any number of for loops one inside another. we call it as nested for loops. We can skip the execution of code that is inside for loop using the \"continue\" statement. We can also stop the for loop based on some condition using the \"break\" statement. Syntax of \"for\" loop: \u00b6 for item in sequence : statements - 1 statements - 2 statements - 3 # ..... Usage of keyword \"range\" in python: \u00b6 \"range\" is used to create an iterator of integers from start number to end number with an defined shift number. By default start number is zero(0) and shift number is 1. Let's see some examples how it can be used. # syntax: range(start_number=0, end_number, shift_number=1) one_to_ten = range ( 10 ) print ( one_to_ten ) # output: range(0, 10) print ( list ( range ( 10 ))) # output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print ( list ( range ( 3 , 9 , 3 ))) # output: [3, 6] From the above code we can understand that range returns an iterator generator. so, it didn't print the actual output. But, after converting it to list we can see the output. If observe above outputs we can find it will not include the end number in the output. working with \"for\" loop with \"range\" \u00b6 Case: Write a program to print the 9 th table. for num in range ( 1 , 11 ): print ( 9 , \"X\" , num , \"=\" , 9 * num ) # Output: # 9 X 1 = 9 # 9 X 2 = 18 # 9 X 3 = 27 # 9 X 4 = 36 # 9 X 5 = 45 # 9 X 6 = 54 # 9 X 7 = 63 # 9 X 8 = 72 # 9 X 9 = 81 # 9 X 10 = 90 working with \"for\" loop on iterables (\"list\", \"tuple\", \"dict\", \"set\", \"string\") \u00b6 Case: Write a program that say's \"Hello\" to given names(\"Ram\", \"Shera\", \"Katlin\") names = ( \"Ram\" , \"Shera\" , \"Katlin\" ) for name in names : print ( \"Hello, \" , name ) # output: # Hello, Ram # Hello, Shera # Hello, Katlin It works same with all the iterables. For simplicity we have used a tuple in above example. You can try it with all the iterables mentioned above. accessing index and item in from ordered iterables (\"list\", \"tuple\") \u00b6 Case: Write a program to print a merit student list with a rank. cosider the order of the students for ranking (i.e, students = [\"Ajax\", \"Mangli\", \"Bob\"]) students = [ \"Ajax\" , \"Mangli\" , \"Bob\" ] rank = 1 for student in students : print ( \"Name: \" , student , \" Rank: \" , rank ) rank = rank + 1 # output: # Name: Ajax Rank: 1 # Name: Mangli Rank: 2 # Name: Bob Rank: 3 The above can be simplified using python's bultin function \"enumerate\" students = [ \"Ajax\" , \"Mangli\" , \"Bob\" ] for rank , student in enumerate ( students ): print ( \"Name: \" , student , \" Rank: \" , rank + 1 ) # output: # Name: Ajax Rank: 1 # Name: Mangli Rank: 2 # Name: Bob Rank: 3 In python \"enumerate\" will take the iterable and finds it's length and iterates the index and object. Note: index starts with zero(0). That's the reason we used \"rank + 1\" in the above code. I've named index as \"rank\" in above code.","title":"Python Working With For Loop"},{"location":"blog/python-working-with-for-loop-55/#python-working-with-for-loop","text":"Let's start working with for loop in python. For loop is used when want to execute a block of code repeatedly a fixed number of times. Python also comes with the support of iterating the sequences using the for loop. we can use any number of for loops one inside another. we call it as nested for loops. We can skip the execution of code that is inside for loop using the \"continue\" statement. We can also stop the for loop based on some condition using the \"break\" statement.","title":"Python Working With For Loop"},{"location":"blog/python-working-with-for-loop-55/#syntax-of-for-loop","text":"for item in sequence : statements - 1 statements - 2 statements - 3 # .....","title":"Syntax of \"for\" loop:"},{"location":"blog/python-working-with-for-loop-55/#usage-of-keyword-range-in-python","text":"\"range\" is used to create an iterator of integers from start number to end number with an defined shift number. By default start number is zero(0) and shift number is 1. Let's see some examples how it can be used. # syntax: range(start_number=0, end_number, shift_number=1) one_to_ten = range ( 10 ) print ( one_to_ten ) # output: range(0, 10) print ( list ( range ( 10 ))) # output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print ( list ( range ( 3 , 9 , 3 ))) # output: [3, 6] From the above code we can understand that range returns an iterator generator. so, it didn't print the actual output. But, after converting it to list we can see the output. If observe above outputs we can find it will not include the end number in the output.","title":"Usage of keyword \"range\" in python:"},{"location":"blog/python-working-with-for-loop-55/#working-with-for-loop-with-range","text":"Case: Write a program to print the 9 th table. for num in range ( 1 , 11 ): print ( 9 , \"X\" , num , \"=\" , 9 * num ) # Output: # 9 X 1 = 9 # 9 X 2 = 18 # 9 X 3 = 27 # 9 X 4 = 36 # 9 X 5 = 45 # 9 X 6 = 54 # 9 X 7 = 63 # 9 X 8 = 72 # 9 X 9 = 81 # 9 X 10 = 90","title":"working with \"for\" loop with \"range\""},{"location":"blog/python-working-with-for-loop-55/#working-with-for-loop-on-iterables-list-tuple-dict-set-string","text":"Case: Write a program that say's \"Hello\" to given names(\"Ram\", \"Shera\", \"Katlin\") names = ( \"Ram\" , \"Shera\" , \"Katlin\" ) for name in names : print ( \"Hello, \" , name ) # output: # Hello, Ram # Hello, Shera # Hello, Katlin It works same with all the iterables. For simplicity we have used a tuple in above example. You can try it with all the iterables mentioned above.","title":"working with \"for\" loop on iterables (\"list\", \"tuple\", \"dict\", \"set\", \"string\")"},{"location":"blog/python-working-with-for-loop-55/#accessing-index-and-item-in-from-ordered-iterables-list-tuple","text":"Case: Write a program to print a merit student list with a rank. cosider the order of the students for ranking (i.e, students = [\"Ajax\", \"Mangli\", \"Bob\"]) students = [ \"Ajax\" , \"Mangli\" , \"Bob\" ] rank = 1 for student in students : print ( \"Name: \" , student , \" Rank: \" , rank ) rank = rank + 1 # output: # Name: Ajax Rank: 1 # Name: Mangli Rank: 2 # Name: Bob Rank: 3 The above can be simplified using python's bultin function \"enumerate\" students = [ \"Ajax\" , \"Mangli\" , \"Bob\" ] for rank , student in enumerate ( students ): print ( \"Name: \" , student , \" Rank: \" , rank + 1 ) # output: # Name: Ajax Rank: 1 # Name: Mangli Rank: 2 # Name: Bob Rank: 3 In python \"enumerate\" will take the iterable and finds it's length and iterates the index and object. Note: index starts with zero(0). That's the reason we used \"rank + 1\" in the above code. I've named index as \"rank\" in above code.","title":"accessing index and item in from ordered iterables (\"list\", \"tuple\")"},{"location":"blog/python-working-with-frozenset-data-type-50/","text":"Python Working With Frozenset Data Type \u00b6 Frozenset is an immutable unordered collection of unique elements. It holds collection of element but it does not guarantee the order of the elements in it. As it is immutable we cannot able to update the data once created. when we need to get a unique elements out of group of the repeated elements then we can simply use built-in function **\"frozenset\". **we can also use the set but we should only use it when we want to update it afterwards. Because it consumes more memory than frozenset. working with frozenset data type in python \u00b6 Convert a group of repeated list elements into a set of non repeated elements s = [ 1 , 2 , 3 , \"hi\" , 1 , 2 , 3 , 5 , 8 , \"hi\" , \"hello\" , \"google\" ] output = frozenset ( s ) print ( output ) # Output: frozenset({1, 2, 3, 'google', 5, 8, 'hi', 'hello'}) Copy one set S1 into another set S2 s = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s . copy () print ( output ) # Output: frozenset({1, 2, 4, 5, 7}) Return a shallow copy of a set. Find the set difference between set S1 and set S2 s1 = frozenset (( 1 , 2 , 4 , 5 , 7 )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . difference ( s2 ) # s1 - s2 print ( output ) # Output: frozenset({1, 2}) Returns all elements that are in this set but not the others. Find if set S1 is disjoint of set S2 s1 = frozenset (( 1 , 2 , 4 , 5 , 7 )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . isdisjoint ( s2 ) print ( output ) # Output: False s1 = frozenset (( 1 , 2 , 3 , \"a\" )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . isdisjoint ( s2 ) print ( output ) # Output: True Return True if two sets have a null intersection. Find if set S1 is superset of set S2 s1 = frozenset (( 1 , 2 , 4 , 5 , 7 )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . issuperset ( s2 ) print ( output ) # Output: False s1 = frozenset (( 1 , 2 , 3 , \"a\" , 5 , 4 )) s2 = frozenset (( 4 , 5 )) output = s1 . issuperset ( s2 ) print ( output ) # Output: True Report whether this set contains another set. Find if set S1 is subset of S2 s1 = frozenset (( 4 , 5 , 7 )) s2 = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s1 . issubset ( s2 ) print ( output ) # Output: True s1 = frozenset (( 1 , 2 , 3 , \"a\" , 5 , 4 )) s2 = frozenset (( 4 , 5 )) output = s1 . issubset ( s2 ) print ( output ) # Output: False Report whether another set contains this set. Find union of set S1 and set S2 s1 = frozenset (( 4 , 5 , 7 )) s2 = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s1 . union ( s2 ) print ( output ) # Output: frozenset({1, 2, 4, 5, 7}) Returns all elements that are in either set Find Symmetric difference of set S1 and set S2 s1 = frozenset (( 4 , 5 , 7 )) s2 = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s1 . symmetric_difference ( s2 ) print ( output ) # Output: frozenset({1, 2}) Returns all elements that are in exactly one of the sets Reference: * https://docs.python.org/3/library/stdtypes.html#frozenset * https://en.wikipedia.org/wiki/Set_theory","title":"Python Working With Frozenset Data Type"},{"location":"blog/python-working-with-frozenset-data-type-50/#python-working-with-frozenset-data-type","text":"Frozenset is an immutable unordered collection of unique elements. It holds collection of element but it does not guarantee the order of the elements in it. As it is immutable we cannot able to update the data once created. when we need to get a unique elements out of group of the repeated elements then we can simply use built-in function **\"frozenset\". **we can also use the set but we should only use it when we want to update it afterwards. Because it consumes more memory than frozenset.","title":"Python Working With Frozenset Data Type"},{"location":"blog/python-working-with-frozenset-data-type-50/#working-with-frozenset-data-type-in-python","text":"Convert a group of repeated list elements into a set of non repeated elements s = [ 1 , 2 , 3 , \"hi\" , 1 , 2 , 3 , 5 , 8 , \"hi\" , \"hello\" , \"google\" ] output = frozenset ( s ) print ( output ) # Output: frozenset({1, 2, 3, 'google', 5, 8, 'hi', 'hello'}) Copy one set S1 into another set S2 s = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s . copy () print ( output ) # Output: frozenset({1, 2, 4, 5, 7}) Return a shallow copy of a set. Find the set difference between set S1 and set S2 s1 = frozenset (( 1 , 2 , 4 , 5 , 7 )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . difference ( s2 ) # s1 - s2 print ( output ) # Output: frozenset({1, 2}) Returns all elements that are in this set but not the others. Find if set S1 is disjoint of set S2 s1 = frozenset (( 1 , 2 , 4 , 5 , 7 )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . isdisjoint ( s2 ) print ( output ) # Output: False s1 = frozenset (( 1 , 2 , 3 , \"a\" )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . isdisjoint ( s2 ) print ( output ) # Output: True Return True if two sets have a null intersection. Find if set S1 is superset of set S2 s1 = frozenset (( 1 , 2 , 4 , 5 , 7 )) s2 = frozenset (( 4 , 5 , 7 )) output = s1 . issuperset ( s2 ) print ( output ) # Output: False s1 = frozenset (( 1 , 2 , 3 , \"a\" , 5 , 4 )) s2 = frozenset (( 4 , 5 )) output = s1 . issuperset ( s2 ) print ( output ) # Output: True Report whether this set contains another set. Find if set S1 is subset of S2 s1 = frozenset (( 4 , 5 , 7 )) s2 = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s1 . issubset ( s2 ) print ( output ) # Output: True s1 = frozenset (( 1 , 2 , 3 , \"a\" , 5 , 4 )) s2 = frozenset (( 4 , 5 )) output = s1 . issubset ( s2 ) print ( output ) # Output: False Report whether another set contains this set. Find union of set S1 and set S2 s1 = frozenset (( 4 , 5 , 7 )) s2 = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s1 . union ( s2 ) print ( output ) # Output: frozenset({1, 2, 4, 5, 7}) Returns all elements that are in either set Find Symmetric difference of set S1 and set S2 s1 = frozenset (( 4 , 5 , 7 )) s2 = frozenset (( 1 , 2 , 4 , 5 , 7 )) output = s1 . symmetric_difference ( s2 ) print ( output ) # Output: frozenset({1, 2}) Returns all elements that are in exactly one of the sets Reference: * https://docs.python.org/3/library/stdtypes.html#frozenset * https://en.wikipedia.org/wiki/Set_theory","title":"working with frozenset data type in python"},{"location":"blog/python-working-with-functions-57/","text":"Python Working With Functions \u00b6 A function in python defined as a a group of statements that required to perform a task which takes required inputs and returns the output. We have two types of functions 1. built-in functions and 2. user defined functions. We have many built-in functions in python. You can see the list of python built-in functions in in python documentation. Syntax of python function: \u00b6 def function_name ( arg1 , arg2 ): # statement 1 # statement 2 return None \"def\" is a keyword in python which is used to define the function in python. A python function may take or may not take arguments. In above syntax we have used return statement. The \"return\" statement is used to return the result of a function. If return statement is not included in the function code then the python function returns the \"None\" value by default. Python funciton to find the factorial of a number \u00b6 def factorial ( number ): result = 1 for i in range ( 1 , number + 1 ): result = result * i return result # call the function print ( factorial ( 4 )) # Output: 24 print ( factorial ( 5 )) # Output: 120 Above function take a number and returns the factorial of that number. In above we have called the function twice. Each time we call the function we used difference input.","title":"Python Working With Functions"},{"location":"blog/python-working-with-functions-57/#python-working-with-functions","text":"A function in python defined as a a group of statements that required to perform a task which takes required inputs and returns the output. We have two types of functions 1. built-in functions and 2. user defined functions. We have many built-in functions in python. You can see the list of python built-in functions in in python documentation.","title":"Python Working With Functions"},{"location":"blog/python-working-with-functions-57/#syntax-of-python-function","text":"def function_name ( arg1 , arg2 ): # statement 1 # statement 2 return None \"def\" is a keyword in python which is used to define the function in python. A python function may take or may not take arguments. In above syntax we have used return statement. The \"return\" statement is used to return the result of a function. If return statement is not included in the function code then the python function returns the \"None\" value by default.","title":"Syntax of python function:"},{"location":"blog/python-working-with-functions-57/#python-funciton-to-find-the-factorial-of-a-number","text":"def factorial ( number ): result = 1 for i in range ( 1 , number + 1 ): result = result * i return result # call the function print ( factorial ( 4 )) # Output: 24 print ( factorial ( 5 )) # Output: 120 Above function take a number and returns the factorial of that number. In above we have called the function twice. Each time we call the function we used difference input.","title":"Python funciton to find the factorial of a number"},{"location":"blog/python-working-with-if-elif-else-conditions-54/","text":"Python Working With If ... Elif ... Else Conditions \u00b6 Lets start working with if ... elif .. else conditions in python. if ... elif .. else allow us to take decisions. It can be nested. In some cases we may need to execute the code based on conditions. Then we use if ... elif ... else conditions in python. For example, if we wan to sort the students based on their grades then we have to use these conditional expressions(if ... elif...else). Using \"if\" statement in python: \u00b6 The syntax of the if condition is if ( condition ): statement ( s ) Use case: Take a number in a name/variable with some integer value and add 50 if number is less than 100 and print the resulting number. number = 20 if number < 100 : number = number + 50 print ( number ) # Output: 70 Using \"if ... else\" statements in python: \u00b6 The syntax of the if condition is if ( condition ): statement ( s ) else : statement ( s ) Use case: Take a number and check if it is odd number or not(if the number is odd number if its remainder is 1). number = 21 if number % 2 == 1 : print ( \"odd\" ) else : print ( \"even\" ) print ( number ) # Output: odd Using \"if ... elif...else\" statements in python: \u00b6 The elif statement allows us to check multiple conditions and execute a block of code as soon as one of the conditions are valid. we can have multiple number of \" elif \"statements followed by a \" if \" statement. Note: elif statement is optional The syntax of the if condition is if ( condition1 ): statement ( s ) elif ( condition2 ): statement ( s ) elif ( condition3 ): statement ( s ) else : statement ( s ) Use case: Take a student marks in a name/variable and check the student grade based on below conditions. If marks greater than or equal to 90 grade is \"A\" If marks are in between 80 and 89 (inclusive) then grade is \"B\" If marks are in between 70 and 79 (inclusive) then grade is \"C\" If marks are in between 60 and 79 (inclusive) then grade is \"D\" If marks below 60 then grade is \"F\" \u200b\u200b\u200b\u200b\u200b marks = 80 if marks >= 90 : grade = 'A' elif marks >= 80 : grade = 'B' elif marks >= 70 : grade = 'C' elif marks >= 60 : grade = 'D' else : grade = 'F' print ( grade ) #output: B Using nested \"if ... elif ... else\" statements in python: \u00b6 We can use if...elif...else statement inside another if...elif...else statement. It is called as nested conditioning. Use case: You have a adult website. You have to restrict users who are having age under 18 years and old people who are having age above 80 years. age = int ( input ( 'Enter your age: ' )) if age > 18 : if x > 80 : print ( 'You are too old, go away!' ) else : print ( 'Welcome, you are of the right age!' ) else : print ( 'You are too young, go away!' ) Note: \"input\" will allow program to take data from user or keyboard at program runtime.","title":"Python Working With If ... Elif ... Else Conditions"},{"location":"blog/python-working-with-if-elif-else-conditions-54/#python-working-with-if-elif-else-conditions","text":"Lets start working with if ... elif .. else conditions in python. if ... elif .. else allow us to take decisions. It can be nested. In some cases we may need to execute the code based on conditions. Then we use if ... elif ... else conditions in python. For example, if we wan to sort the students based on their grades then we have to use these conditional expressions(if ... elif...else).","title":"Python Working With If ... Elif ... Else Conditions"},{"location":"blog/python-working-with-if-elif-else-conditions-54/#using-if-statement-in-python","text":"The syntax of the if condition is if ( condition ): statement ( s ) Use case: Take a number in a name/variable with some integer value and add 50 if number is less than 100 and print the resulting number. number = 20 if number < 100 : number = number + 50 print ( number ) # Output: 70","title":"Using \"if\" statement in python:"},{"location":"blog/python-working-with-if-elif-else-conditions-54/#using-if-else-statements-in-python","text":"The syntax of the if condition is if ( condition ): statement ( s ) else : statement ( s ) Use case: Take a number and check if it is odd number or not(if the number is odd number if its remainder is 1). number = 21 if number % 2 == 1 : print ( \"odd\" ) else : print ( \"even\" ) print ( number ) # Output: odd","title":"Using \"if ... else\" statements in python:"},{"location":"blog/python-working-with-if-elif-else-conditions-54/#using-if-elifelse-statements-in-python","text":"The elif statement allows us to check multiple conditions and execute a block of code as soon as one of the conditions are valid. we can have multiple number of \" elif \"statements followed by a \" if \" statement. Note: elif statement is optional The syntax of the if condition is if ( condition1 ): statement ( s ) elif ( condition2 ): statement ( s ) elif ( condition3 ): statement ( s ) else : statement ( s ) Use case: Take a student marks in a name/variable and check the student grade based on below conditions. If marks greater than or equal to 90 grade is \"A\" If marks are in between 80 and 89 (inclusive) then grade is \"B\" If marks are in between 70 and 79 (inclusive) then grade is \"C\" If marks are in between 60 and 79 (inclusive) then grade is \"D\" If marks below 60 then grade is \"F\" \u200b\u200b\u200b\u200b\u200b marks = 80 if marks >= 90 : grade = 'A' elif marks >= 80 : grade = 'B' elif marks >= 70 : grade = 'C' elif marks >= 60 : grade = 'D' else : grade = 'F' print ( grade ) #output: B","title":"Using \"if ... elif...else\" statements in python:"},{"location":"blog/python-working-with-if-elif-else-conditions-54/#using-nested-if-elif-else-statements-in-python","text":"We can use if...elif...else statement inside another if...elif...else statement. It is called as nested conditioning. Use case: You have a adult website. You have to restrict users who are having age under 18 years and old people who are having age above 80 years. age = int ( input ( 'Enter your age: ' )) if age > 18 : if x > 80 : print ( 'You are too old, go away!' ) else : print ( 'Welcome, you are of the right age!' ) else : print ( 'You are too young, go away!' ) Note: \"input\" will allow program to take data from user or keyboard at program runtime.","title":"Using nested \"if ... elif ... else\" statements in python:"},{"location":"blog/python-working-with-inheritance-oops-61/","text":"Python Working With Inheritance - Oops \u00b6 Inheritance in python defined as acquiring the properties from the parent/base class to its child classes. In reality we develop complex applications that provides more utilities to users. In developer perspective each utility involves different modules which work together to provide an utility to the user. Each module involves many functions and classes. Most of the these shares similar properties and functionalities. If did not use inheritance concept then we have to write the same code in different functions or classes which results in writing more code and it will become difficult to maintain the code. It will also take more time to fix bugs or to enhance the existing functionality. Advantage of the inheritance is that we write a base class and implement the common functionalities init and inherit it in a child class. Now, the child class gets all the properties from the base class . we can use that functionality and we can also implement extra functionality. We can also override the base class functionality if it requires. Python Inheritance Example \u00b6 class Person ( object ): def __init__ ( self , first_name , last_name , age , gender ): self . first_name = first_name self . last_name = last_name self . age = age self . gender = gender def print_full_name ( self ): msg = ' {first_name} {last_name} ' . format ( first_name = self . first_name , last_name = self . last_name ) print ( msg ) class Teacher ( Person ): def __init__ ( self , first_name , last_name , age , gender , subject ): super () . __init__ ( first_name , last_name , age , gender ) self . subject = subject def print_subject ( self ): msg = \"Subject: {subject} \" . format ( subject = self . subject ) print ( msg ) class Student ( Person ): def __init__ ( self , first_name , last_name , age , gender , std_class ): super () . __init__ ( first_name , last_name , age , gender ) self . std_class = std_class def print_class_name ( self ): msg = 'Class name: {name} ' . format ( name = self . std_class ) print ( msg ) p = Person ( 'Shera' , 'Md' , 20 , 'Male' ) p . print_full_name () t = Teacher ( 'Gilchrist' , 'Adam' , 20 , 'Male' , 'Maths' ) t . print_full_name () t . print_subject () s = Student ( 'Priya' , 'Ch' , 20 , 'Female' , '3rd Class' ) s . print_full_name () s . print_class_name () In the above example we have created a base class \"Person\" and implemented the common functionality and we inherited it in its base classes \"Teacher\" and \"Student\". We also implemented the exta functionalities in child classes in addition to inherited functionality.","title":"Python Working With Inheritance - Oops"},{"location":"blog/python-working-with-inheritance-oops-61/#python-working-with-inheritance-oops","text":"Inheritance in python defined as acquiring the properties from the parent/base class to its child classes. In reality we develop complex applications that provides more utilities to users. In developer perspective each utility involves different modules which work together to provide an utility to the user. Each module involves many functions and classes. Most of the these shares similar properties and functionalities. If did not use inheritance concept then we have to write the same code in different functions or classes which results in writing more code and it will become difficult to maintain the code. It will also take more time to fix bugs or to enhance the existing functionality. Advantage of the inheritance is that we write a base class and implement the common functionalities init and inherit it in a child class. Now, the child class gets all the properties from the base class . we can use that functionality and we can also implement extra functionality. We can also override the base class functionality if it requires.","title":"Python Working With Inheritance - Oops"},{"location":"blog/python-working-with-inheritance-oops-61/#python-inheritance-example","text":"class Person ( object ): def __init__ ( self , first_name , last_name , age , gender ): self . first_name = first_name self . last_name = last_name self . age = age self . gender = gender def print_full_name ( self ): msg = ' {first_name} {last_name} ' . format ( first_name = self . first_name , last_name = self . last_name ) print ( msg ) class Teacher ( Person ): def __init__ ( self , first_name , last_name , age , gender , subject ): super () . __init__ ( first_name , last_name , age , gender ) self . subject = subject def print_subject ( self ): msg = \"Subject: {subject} \" . format ( subject = self . subject ) print ( msg ) class Student ( Person ): def __init__ ( self , first_name , last_name , age , gender , std_class ): super () . __init__ ( first_name , last_name , age , gender ) self . std_class = std_class def print_class_name ( self ): msg = 'Class name: {name} ' . format ( name = self . std_class ) print ( msg ) p = Person ( 'Shera' , 'Md' , 20 , 'Male' ) p . print_full_name () t = Teacher ( 'Gilchrist' , 'Adam' , 20 , 'Male' , 'Maths' ) t . print_full_name () t . print_subject () s = Student ( 'Priya' , 'Ch' , 20 , 'Female' , '3rd Class' ) s . print_full_name () s . print_class_name () In the above example we have created a base class \"Person\" and implemented the common functionality and we inherited it in its base classes \"Teacher\" and \"Student\". We also implemented the exta functionalities in child classes in addition to inherited functionality.","title":"Python Inheritance Example"},{"location":"blog/python-working-with-lists-51/","text":"Python Working With Lists \u00b6 List is a one of the most used data types in python programming. It is a heterogeneous and ordered set of data structure in python. As it is an ordered data structure so, it obliviously supports indexing. We can access the elements of a list using index. It supports both positive and negative indexing. Positive index starts from 0 and negative index starts from -1. In general we call negative indexing as reverse indexing. Basic operations of List in Python \u00b6 Representation of list # create an empty list lst = [] # create a list with initial elements lst = [ 1 , 2 , 3 ] # type conversion using \"list\" built-in function s = 'google' ouput = list ( s ) print ( ouput ) # Output: ['g', 'o', 'o', 'g', 'l', 'e'] d = { 1 : 1 , 2 : 2 } ouput = list ( d ) print ( ouput ) # Output: [1,2] t = ( 1 , 2 , 'a' ) ouput = list ( t ) print ( ouput ) # Output: [1,2] Accessing element in a list using indexes lst = [ \"hi\" , \"hello\" , 3.27 , 1000 , { 1 : 1 }] d = lst [ - 1 ] print ( d ) # Output: {1:1} s = lst [ 0 ] print ( s ) # Output: hello not_exists = lst [ 100 ] # Output: IndexError: list index out of range We can store objects any kinds in the list data structure in python. In above code we have accessed the elements with both positive and negative indexes. When we access with index that is not in the range of objects we get IndexError. Working with list methods in python \u00b6 Working with \"append\" list method in python # L.append(object) -- append object to end lst = [ \"hi\" , \"hello\" ] new_obj = \"world\" lst . append ( new_obj ) print ( lst ) # Output: [\"hi\", \"hello\", \"world\"] When append an object to the list it inserted at end or right after the last object in the list. Working with \"count\" list method in python # L.count(value) -> integer -- return number of occurrences of value lst = [ 'hi' , 'hello' , 'world' , 'hi' ] count = lst . count ( 'hi' ) print ( count ) # Output: 2 Using this method we can count the number of occurences of a given object. Working with \"extend\" list method in python # L.extend(iterable) -- extend list by appending elements from the iterable lst = [ 'hi' , 'hello' , 'world' ] iter_obj = ( 1 , 2 , 3 , 4 ) lst . extend ( iter_obj ) print ( lst ) # Output: ['hi', 'hello', 'world', 1, 2, 3, 4] Using this method we can add the group of objects to the list in a single operation. Working with \"index\" list method in python # L.index(value, [start, [stop]]) -> integer -- return first index of value. lst = [ 'hi' , 'hello' , 'world' ] index = lst . index ( \"world\" ) print ( index ) # Output: 2 It returns the positive index of first occurrence of the given object/element. Raises ValueError if the value is not present. We can specify the start and end indexes to look for given object. Working with \"insert\" list method in python # L.insert(index, object) -- insert object before index lst = [ 'hi' , 'hello' , 'world' ] lst . insert ( 1 , \"google\" ) print ( lst ) # Output: ['hi', 'google', 'hello', 'world'] \"insert\" method inserts an object in a given index. It will not replace the object of a given index. Working with \"pop\" list method in python # L.pop([index]) -> item -- remove and return item at index (default last). lst = [ 'hi' , 'hello' , 'world' ] pop_obj = lst . pop ( 1 ) print ( pop_obj ) # Output: 'hello' pop_obj = lst . pop ( 100 ) print ( pop_obj ) # Output: IndexError It removes the object at a given index and returns the object.It raises IndexError if list is empty or index is out of range. Working with \"remove\" list method in python # L.remove(value) -> None lst = [ 'hi' , 'hello' , 'world' , 'hello' ] lst . remove ( 'hello' ) print ( lst ) # Output: ['hi', 'world', 'hello'] lst . remove ( 'hyd' ) # Output: ValueError: list.remove(x): x not in list Working with \"reverse\" list method in python # L.reverse() --> None lst = [ 'world' , 'hello' , 0 , 3 , 'hello' , 'hi' , 4 , 2 , 1 ] lst . reverse () print ( lst ) # Output: [1, 2, 4, 'hi', 'hello', 3, 0, 'hello', 'world'] It reverses the list (INPLACE). It will permanently reverses the list. If you don't want permanently then use \"reversed\" builtin function. Working with \"sort\" list method in python # L.sort(cmp=None, key=None, reverse=False) --> None lst = [ 0 , 4 , 2 , 1 ] lst . sort () print ( lst ) # Output: [0, 1, 2, 4] References: * https://developers.google.com/edu/python/lists * https://docs.python.org/3/tutorial/datastructures.html","title":"Python Working With Lists"},{"location":"blog/python-working-with-lists-51/#python-working-with-lists","text":"List is a one of the most used data types in python programming. It is a heterogeneous and ordered set of data structure in python. As it is an ordered data structure so, it obliviously supports indexing. We can access the elements of a list using index. It supports both positive and negative indexing. Positive index starts from 0 and negative index starts from -1. In general we call negative indexing as reverse indexing.","title":"Python Working With Lists"},{"location":"blog/python-working-with-lists-51/#basic-operations-of-list-in-python","text":"Representation of list # create an empty list lst = [] # create a list with initial elements lst = [ 1 , 2 , 3 ] # type conversion using \"list\" built-in function s = 'google' ouput = list ( s ) print ( ouput ) # Output: ['g', 'o', 'o', 'g', 'l', 'e'] d = { 1 : 1 , 2 : 2 } ouput = list ( d ) print ( ouput ) # Output: [1,2] t = ( 1 , 2 , 'a' ) ouput = list ( t ) print ( ouput ) # Output: [1,2] Accessing element in a list using indexes lst = [ \"hi\" , \"hello\" , 3.27 , 1000 , { 1 : 1 }] d = lst [ - 1 ] print ( d ) # Output: {1:1} s = lst [ 0 ] print ( s ) # Output: hello not_exists = lst [ 100 ] # Output: IndexError: list index out of range We can store objects any kinds in the list data structure in python. In above code we have accessed the elements with both positive and negative indexes. When we access with index that is not in the range of objects we get IndexError.","title":"Basic operations of List in Python"},{"location":"blog/python-working-with-lists-51/#working-with-list-methods-in-python","text":"Working with \"append\" list method in python # L.append(object) -- append object to end lst = [ \"hi\" , \"hello\" ] new_obj = \"world\" lst . append ( new_obj ) print ( lst ) # Output: [\"hi\", \"hello\", \"world\"] When append an object to the list it inserted at end or right after the last object in the list. Working with \"count\" list method in python # L.count(value) -> integer -- return number of occurrences of value lst = [ 'hi' , 'hello' , 'world' , 'hi' ] count = lst . count ( 'hi' ) print ( count ) # Output: 2 Using this method we can count the number of occurences of a given object. Working with \"extend\" list method in python # L.extend(iterable) -- extend list by appending elements from the iterable lst = [ 'hi' , 'hello' , 'world' ] iter_obj = ( 1 , 2 , 3 , 4 ) lst . extend ( iter_obj ) print ( lst ) # Output: ['hi', 'hello', 'world', 1, 2, 3, 4] Using this method we can add the group of objects to the list in a single operation. Working with \"index\" list method in python # L.index(value, [start, [stop]]) -> integer -- return first index of value. lst = [ 'hi' , 'hello' , 'world' ] index = lst . index ( \"world\" ) print ( index ) # Output: 2 It returns the positive index of first occurrence of the given object/element. Raises ValueError if the value is not present. We can specify the start and end indexes to look for given object. Working with \"insert\" list method in python # L.insert(index, object) -- insert object before index lst = [ 'hi' , 'hello' , 'world' ] lst . insert ( 1 , \"google\" ) print ( lst ) # Output: ['hi', 'google', 'hello', 'world'] \"insert\" method inserts an object in a given index. It will not replace the object of a given index. Working with \"pop\" list method in python # L.pop([index]) -> item -- remove and return item at index (default last). lst = [ 'hi' , 'hello' , 'world' ] pop_obj = lst . pop ( 1 ) print ( pop_obj ) # Output: 'hello' pop_obj = lst . pop ( 100 ) print ( pop_obj ) # Output: IndexError It removes the object at a given index and returns the object.It raises IndexError if list is empty or index is out of range. Working with \"remove\" list method in python # L.remove(value) -> None lst = [ 'hi' , 'hello' , 'world' , 'hello' ] lst . remove ( 'hello' ) print ( lst ) # Output: ['hi', 'world', 'hello'] lst . remove ( 'hyd' ) # Output: ValueError: list.remove(x): x not in list Working with \"reverse\" list method in python # L.reverse() --> None lst = [ 'world' , 'hello' , 0 , 3 , 'hello' , 'hi' , 4 , 2 , 1 ] lst . reverse () print ( lst ) # Output: [1, 2, 4, 'hi', 'hello', 3, 0, 'hello', 'world'] It reverses the list (INPLACE). It will permanently reverses the list. If you don't want permanently then use \"reversed\" builtin function. Working with \"sort\" list method in python # L.sort(cmp=None, key=None, reverse=False) --> None lst = [ 0 , 4 , 2 , 1 ] lst . sort () print ( lst ) # Output: [0, 1, 2, 4] References: * https://developers.google.com/edu/python/lists * https://docs.python.org/3/tutorial/datastructures.html","title":"Working with list methods in python"},{"location":"blog/python-working-with-numbers-37/","text":"Python Working With Numbers \u00b6 Python has four basic number types. 1. Integers(int), 2. Floating point numbers(float), 3. Long integers(long), 4. Complex Numbers(complex). All these numeric types are immutable data types, it means changing the value of a numeric data type will results in a newly creation of an object. Integers( int ) An integer is a whole number (not a fractional number ) that can be positive, negative, or zero. Examples of integers are: -5, 1, 5, 8, 97, and 3,043 etc. Working with integers in python asdsa Floating point numbers( float ) These are real numbers and are written with a decimal point dividing the integer and fractional parts. Examples of floating point numbers are 1.223, -123.55, 0.123, 125.66 etc. Long integers( long ) These are just like integers the only difference is long type integer has unlimited size. \"int\" can only maintain upto 9223372036854775807 but long can store number with any length of size. Examples: 9223372036854775807323424, 9223372036854775807323424324342342490, etc. Complex Numbers( complex ) These are a real numbres of the form \"a + bj\", where \"a\" and \"b\" are real numbers, and \"j\" represents the unit imaginary numbers equal to the positive square root of -1. Examples: 5 + 8j, -10 + 10j , -10 - 10.5j, etc. Summery of operations \u00b6 Operation Result x + y sum of x and y x - y difference of x and y x * y product of x and y x / y quotient of x and y x // y (floored) quotient of x and y x % y remainder of x / y -x x negated +x x unchanged abs(x) absolute value or magnitude of x int(x) x converted to integer long(x) x converted to long integer float(x) x converted to floating point complex(re,im) a complex number with real part re, imaginary part im. im defaults to zero. c.conjugate() conjugate of the complex number c divmod(x, y) the pair (x // y, x % y) pow(x, y) x to the power y x ** y x to the power y","title":"Python Working With Numbers"},{"location":"blog/python-working-with-numbers-37/#python-working-with-numbers","text":"Python has four basic number types. 1. Integers(int), 2. Floating point numbers(float), 3. Long integers(long), 4. Complex Numbers(complex). All these numeric types are immutable data types, it means changing the value of a numeric data type will results in a newly creation of an object. Integers( int ) An integer is a whole number (not a fractional number ) that can be positive, negative, or zero. Examples of integers are: -5, 1, 5, 8, 97, and 3,043 etc. Working with integers in python asdsa Floating point numbers( float ) These are real numbers and are written with a decimal point dividing the integer and fractional parts. Examples of floating point numbers are 1.223, -123.55, 0.123, 125.66 etc. Long integers( long ) These are just like integers the only difference is long type integer has unlimited size. \"int\" can only maintain upto 9223372036854775807 but long can store number with any length of size. Examples: 9223372036854775807323424, 9223372036854775807323424324342342490, etc. Complex Numbers( complex ) These are a real numbres of the form \"a + bj\", where \"a\" and \"b\" are real numbers, and \"j\" represents the unit imaginary numbers equal to the positive square root of -1. Examples: 5 + 8j, -10 + 10j , -10 - 10.5j, etc.","title":"Python Working With Numbers"},{"location":"blog/python-working-with-numbers-37/#summery-of-operations","text":"Operation Result x + y sum of x and y x - y difference of x and y x * y product of x and y x / y quotient of x and y x // y (floored) quotient of x and y x % y remainder of x / y -x x negated +x x unchanged abs(x) absolute value or magnitude of x int(x) x converted to integer long(x) x converted to long integer float(x) x converted to floating point complex(re,im) a complex number with real part re, imaginary part im. im defaults to zero. c.conjugate() conjugate of the complex number c divmod(x, y) the pair (x // y, x % y) pow(x, y) x to the power y x ** y x to the power y","title":"Summery of operations"},{"location":"blog/python-working-with-operators-35/","text":"Python Working With Operators \u00b6 In this article we will learn about different types of operators & working with operators in python. An operator is a symbol or a character in programming which takes two operands to perform an action. For example, in the expression \"4 + 5\" , \"+\" is an operator It will perform sum of numbers \"4\" and \"5\" and returns result \"9\". Types of operators in python \u00b6 Arithmetic Operators Comparison Operators Assignment Operators Logical Operators Bitwise Operators Membership Operators Identity Operators Arithmetic Operators \u00b6 consider the values a = 10 and b = 21 Operator Description Example Output > Greater than print(b > a) True < Less than print(b < a) False >= Greater than or equal print(b >= a) True <= Less than or equal print(b <= a) False Comparison Operators \u00b6 consider the values a = 10 and b = 20. comparison operators always returns a boolean value either True or False Operator Description Example Output > Greater than print(b > a) True < Less than print(b < a) False >= Greater than or equal print(b >= a) True <= Less than or equal print(b <= a) False Assignment Operators \u00b6 Consider the value of b = 20 Operator Description Example = Assigns the value a = 100 += Performs addition & assignment b += 23 equivalent to b = b + 23 -= Performs subtraction & assignment b -= 13 equivalent to b = b - 13 *= Performs multiplication & assignment b *= 3 equivalent to b = b * 3 /= Performs division & assignment b /= 13 equivalent to b = b / 13 %= Performs modulus operation & assign b %= 3 equivalent to b = b % 3 //= Performs floor div & assignment b //= 13 equivalent to b = b // 13 **= Performs exp calculation & assignment b **= 3 equivalent to b = b ** 3 Logical Operators \u00b6 Operator Description Example and Returns boolean value if given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 90 and a < 110 \u21d2 True a > 90 and a > 110 \u21d2 False or Returns boolean value At least one of the given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 190 and a < 110 \u21d2 True a > 190 and a > 110 \u21d2 True not It inverts the boolean value not True \u21d2 False not False \u21d2 True Bitwise Operators \u00b6 Operator Description & Operator copies a bit to the result if it exists in both operands ^ It copies the bit if it is set in one operand but not both. ~ It is unary and has the effect of 'flipping' bits. >> The left operands value is moved left by the number of bits specified by the right operand. << The left operands value is moved right by the number of bits specified by the right operand. Membership Operators \u00b6 Operator Description Example in Returns boolean value if it finds the var in given sequence returns true a = 10 a in [1, 2, 10, 20] \u21d2 True a in [1, 2, 110, 20] \u21d2 False not in Returns boolean value a = 10 a not in [1, 2, 10, 20] \u21d2 False a not in [1, 2, 110, 20] \u21d2 True Identity Operators \u00b6 Operator Description Example is Returns boolean value True if both variables points to the same memory location in the RAM a = 100; b = 100; c = 101; a is b \u21d2 True a is c \u21d2 False Is not Returns boolean value a = 100 b = 100 c = 101 a is not b \u21d2 False a is not c \u21d2 True","title":"Python Working With Operators"},{"location":"blog/python-working-with-operators-35/#python-working-with-operators","text":"In this article we will learn about different types of operators & working with operators in python. An operator is a symbol or a character in programming which takes two operands to perform an action. For example, in the expression \"4 + 5\" , \"+\" is an operator It will perform sum of numbers \"4\" and \"5\" and returns result \"9\".","title":"Python Working With Operators"},{"location":"blog/python-working-with-operators-35/#types-of-operators-in-python","text":"Arithmetic Operators Comparison Operators Assignment Operators Logical Operators Bitwise Operators Membership Operators Identity Operators","title":"Types of operators in python"},{"location":"blog/python-working-with-operators-35/#arithmetic-operators","text":"consider the values a = 10 and b = 21 Operator Description Example Output > Greater than print(b > a) True < Less than print(b < a) False >= Greater than or equal print(b >= a) True <= Less than or equal print(b <= a) False","title":"Arithmetic Operators"},{"location":"blog/python-working-with-operators-35/#comparison-operators","text":"consider the values a = 10 and b = 20. comparison operators always returns a boolean value either True or False Operator Description Example Output > Greater than print(b > a) True < Less than print(b < a) False >= Greater than or equal print(b >= a) True <= Less than or equal print(b <= a) False","title":"Comparison Operators"},{"location":"blog/python-working-with-operators-35/#assignment-operators","text":"Consider the value of b = 20 Operator Description Example = Assigns the value a = 100 += Performs addition & assignment b += 23 equivalent to b = b + 23 -= Performs subtraction & assignment b -= 13 equivalent to b = b - 13 *= Performs multiplication & assignment b *= 3 equivalent to b = b * 3 /= Performs division & assignment b /= 13 equivalent to b = b / 13 %= Performs modulus operation & assign b %= 3 equivalent to b = b % 3 //= Performs floor div & assignment b //= 13 equivalent to b = b // 13 **= Performs exp calculation & assignment b **= 3 equivalent to b = b ** 3","title":"Assignment Operators"},{"location":"blog/python-working-with-operators-35/#logical-operators","text":"Operator Description Example and Returns boolean value if given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 90 and a < 110 \u21d2 True a > 90 and a > 110 \u21d2 False or Returns boolean value At least one of the given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 190 and a < 110 \u21d2 True a > 190 and a > 110 \u21d2 True not It inverts the boolean value not True \u21d2 False not False \u21d2 True","title":"Logical Operators"},{"location":"blog/python-working-with-operators-35/#bitwise-operators","text":"Operator Description & Operator copies a bit to the result if it exists in both operands ^ It copies the bit if it is set in one operand but not both. ~ It is unary and has the effect of 'flipping' bits. >> The left operands value is moved left by the number of bits specified by the right operand. << The left operands value is moved right by the number of bits specified by the right operand.","title":"Bitwise Operators"},{"location":"blog/python-working-with-operators-35/#membership-operators","text":"Operator Description Example in Returns boolean value if it finds the var in given sequence returns true a = 10 a in [1, 2, 10, 20] \u21d2 True a in [1, 2, 110, 20] \u21d2 False not in Returns boolean value a = 10 a not in [1, 2, 10, 20] \u21d2 False a not in [1, 2, 110, 20] \u21d2 True","title":"Membership Operators"},{"location":"blog/python-working-with-operators-35/#identity-operators","text":"Operator Description Example is Returns boolean value True if both variables points to the same memory location in the RAM a = 100; b = 100; c = 101; a is b \u21d2 True a is c \u21d2 False Is not Returns boolean value a = 100 b = 100 c = 101 a is not b \u21d2 False a is not c \u21d2 True","title":"Identity Operators"},{"location":"blog/python-working-with-set-data-type-52/","text":"Python Working With Set Data Type \u00b6 Lets start working with set data type in python. Set is a heterogeneous un-ordered set of elements with no repetition. set data structure is also just like frozensets. The only difference between sets and frozensets is sets are immutable where as frozensets are not mutable in nature. we can use sets to checking of membership and eliminating the repetitive/duplicate elements. Sets support operations like union, symmetric difference, intersection and difference. Basic operations of Sets in python \u00b6 Create a set with and without elements # create empty set s2 = set () # set() -> new empty set object # create set with elements s1 = { 1 , 2 , 3 , 4 , \"hi\" , 1.24 } s2 = set ([ 1 , 2 , 3 , 4 , \"hi\" , 1.24 ]) # set(iterable) -> new set object print ( type ( s1 )) # Output: <class 'set'> print ( type ( s2 )) # Output: <class 'set'> Add element to set s1 = { 1 , 2 , 3 , 3 , 3 } s1 . add ( 100 ) s1 . add ( 98 ) print ( s1 ) # Output: {1, 2, 3, 100, 98} As we can see above set do not contains duplicate elements and it is a unordered set of elements. Remove element from set s1 = { 1 , 2 , 100 } s1 . remove ( 100 ) print ( s1 ) # Output: {1,2} remove method in set can take the element and removes from the set. Working with Sets methods in python \u00b6 Working with \"clear\" method in sets in python s1 = { 1 , 2 , 3 } s1 . clear () print ( s1 ) # Output: {} Remove all elements from this set. It means simply making the set to empty. Working with \"copy\" method in sets in python s1 = { 1 , 2 , 3 } s2 = s1 . copy () s2 . add ( 100 ) print ( s1 ) # output: {1,2,3} print ( s2 ) # Output: {1,2,3,100} print ( id ( s1 ), id ( s2 )) # Output: 139732324395720 139732306460744 Return a shallow copy of a set. Working with \"difference\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 2 , 100 } s3 = s1 . difference ( s2 ) print ( s3 ) # Output: {200, 1, 3} Return the difference of two or more sets as a new set. There will be no affect on the operating sets(ie. s1, s2). i.e. all elements that are in this set but not the others. Working with \"difference_update\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 2 , 100 } s1 . difference_update ( s2 ) print ( s1 ) # Output: {1, 3, 200} Remove all elements of another set from this set. The method finds the difference and updates the result in the set s1. Working with \"discard\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s1 . discard ( 100 ) print ( s1 ) # output: {1,2,3, 200} Remove an element from a set if it is a member. If the element is not a member, do nothing. Working with \"intersection\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 100 , 200 } s3 = s1 . intersection ( s2 ) print ( s3 ) # Output: {200, 100} Return the intersection of two or more sets as a new set(i.e. elements that are common to all of the sets). No affect on sets on s1 and s2. Working with \"intersection_update\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 100 , 200 } s1 . intersection_update ( s2 ) print ( s1 ) # Output: {200, 100} Update a set with the intersection of itself and another. Working with \"isdisjoint\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 500 , 400 } result = s1 . isdisjoint ( s2 ) print ( result ) # Output: True s3 = { 100 , 200 } result = s1 . isdisjoint ( s3 ) print ( result ) # Output: False Return True if two sets have a null intersection. Working with \"issubset\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 500 , 400 } result = s1 . issubset ( s2 ) print ( result ) # Output: False s3 = { 1 , 2 , 3 } result = s3 . issubset ( s1 ) print ( result ) # Output: True Report whether another set contains this set. Working with \"issuperset\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 500 , 400 } result = s1 . issuperset ( s2 ) print ( result ) # Output: False s3 = { 1 , 2 , 3 } result = s1 . issuperset ( s3 ) print ( result ) # Output: True Report whether this set contains another set. Working with \"pop\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s1 . pop () print ( s1 ) # Output: {1, 2, 3, 100} s1 = {} s1 . pop () # Output: KeyError: 'pop from an empty set' Remove and return an arbitrary set element. Raises KeyError if the set is empty. Working with \"remove\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s1 . remove ( 100 ) print ( s1 ) # output: {200, 1, 2, 3} s1 . remove ( 500 ) # output: KeyError: 500 Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError. Working with \"symmetric_difference\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s3 = s1 . symmetric_difference ( s2 ) print ( s3 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Return the symmetric difference of two sets as a new set.(i.e. all elements that are in exactly one of the sets.) Working with \"symmetric_difference_update\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s1 . symmetric_difference ( s2 ) print ( s1 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Update a set with the symmetric difference of itself and another. Working with \"union\" method in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s3 = s1 . union ( s2 ) print ( s3 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Return the union of sets as a new set. (i.e. all elements that are in either set.) Working with \"update\" method in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s1 . update ( s2 ) print ( s1 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Update a set with the union of itself and others. References: https://docs.python.org/3/tutorial/datastructures.html#sets","title":"Python Working With Set Data Type"},{"location":"blog/python-working-with-set-data-type-52/#python-working-with-set-data-type","text":"Lets start working with set data type in python. Set is a heterogeneous un-ordered set of elements with no repetition. set data structure is also just like frozensets. The only difference between sets and frozensets is sets are immutable where as frozensets are not mutable in nature. we can use sets to checking of membership and eliminating the repetitive/duplicate elements. Sets support operations like union, symmetric difference, intersection and difference.","title":"Python Working With Set Data Type"},{"location":"blog/python-working-with-set-data-type-52/#basic-operations-of-sets-in-python","text":"Create a set with and without elements # create empty set s2 = set () # set() -> new empty set object # create set with elements s1 = { 1 , 2 , 3 , 4 , \"hi\" , 1.24 } s2 = set ([ 1 , 2 , 3 , 4 , \"hi\" , 1.24 ]) # set(iterable) -> new set object print ( type ( s1 )) # Output: <class 'set'> print ( type ( s2 )) # Output: <class 'set'> Add element to set s1 = { 1 , 2 , 3 , 3 , 3 } s1 . add ( 100 ) s1 . add ( 98 ) print ( s1 ) # Output: {1, 2, 3, 100, 98} As we can see above set do not contains duplicate elements and it is a unordered set of elements. Remove element from set s1 = { 1 , 2 , 100 } s1 . remove ( 100 ) print ( s1 ) # Output: {1,2} remove method in set can take the element and removes from the set.","title":"Basic operations of Sets in python"},{"location":"blog/python-working-with-set-data-type-52/#working-with-sets-methods-in-python","text":"Working with \"clear\" method in sets in python s1 = { 1 , 2 , 3 } s1 . clear () print ( s1 ) # Output: {} Remove all elements from this set. It means simply making the set to empty. Working with \"copy\" method in sets in python s1 = { 1 , 2 , 3 } s2 = s1 . copy () s2 . add ( 100 ) print ( s1 ) # output: {1,2,3} print ( s2 ) # Output: {1,2,3,100} print ( id ( s1 ), id ( s2 )) # Output: 139732324395720 139732306460744 Return a shallow copy of a set. Working with \"difference\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 2 , 100 } s3 = s1 . difference ( s2 ) print ( s3 ) # Output: {200, 1, 3} Return the difference of two or more sets as a new set. There will be no affect on the operating sets(ie. s1, s2). i.e. all elements that are in this set but not the others. Working with \"difference_update\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 2 , 100 } s1 . difference_update ( s2 ) print ( s1 ) # Output: {1, 3, 200} Remove all elements of another set from this set. The method finds the difference and updates the result in the set s1. Working with \"discard\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s1 . discard ( 100 ) print ( s1 ) # output: {1,2,3, 200} Remove an element from a set if it is a member. If the element is not a member, do nothing. Working with \"intersection\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 100 , 200 } s3 = s1 . intersection ( s2 ) print ( s3 ) # Output: {200, 100} Return the intersection of two or more sets as a new set(i.e. elements that are common to all of the sets). No affect on sets on s1 and s2. Working with \"intersection_update\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 100 , 200 } s1 . intersection_update ( s2 ) print ( s1 ) # Output: {200, 100} Update a set with the intersection of itself and another. Working with \"isdisjoint\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 500 , 400 } result = s1 . isdisjoint ( s2 ) print ( result ) # Output: True s3 = { 100 , 200 } result = s1 . isdisjoint ( s3 ) print ( result ) # Output: False Return True if two sets have a null intersection. Working with \"issubset\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 500 , 400 } result = s1 . issubset ( s2 ) print ( result ) # Output: False s3 = { 1 , 2 , 3 } result = s3 . issubset ( s1 ) print ( result ) # Output: True Report whether another set contains this set. Working with \"issuperset\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 500 , 400 } result = s1 . issuperset ( s2 ) print ( result ) # Output: False s3 = { 1 , 2 , 3 } result = s1 . issuperset ( s3 ) print ( result ) # Output: True Report whether this set contains another set. Working with \"pop\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s1 . pop () print ( s1 ) # Output: {1, 2, 3, 100} s1 = {} s1 . pop () # Output: KeyError: 'pop from an empty set' Remove and return an arbitrary set element. Raises KeyError if the set is empty. Working with \"remove\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s1 . remove ( 100 ) print ( s1 ) # output: {200, 1, 2, 3} s1 . remove ( 500 ) # output: KeyError: 500 Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError. Working with \"symmetric_difference\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s3 = s1 . symmetric_difference ( s2 ) print ( s3 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Return the symmetric difference of two sets as a new set.(i.e. all elements that are in exactly one of the sets.) Working with \"symmetric_difference_update\" method in sets in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s1 . symmetric_difference ( s2 ) print ( s1 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Update a set with the symmetric difference of itself and another. Working with \"union\" method in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s3 = s1 . union ( s2 ) print ( s3 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Return the union of sets as a new set. (i.e. all elements that are in either set.) Working with \"update\" method in python s1 = { 1 , 2 , 3 , 100 , 200 } s2 = { 5 , 6 , 7 } s1 . update ( s2 ) print ( s1 ) # Output: {1, 2, 3, 100, 5, 6, 7, 200} Update a set with the union of itself and others. References: https://docs.python.org/3/tutorial/datastructures.html#sets","title":"Working with Sets methods in python"},{"location":"blog/python-working-with-strings-38/","text":"Python Working With Strings \u00b6 String is a most used data type in python programming. A string is simply a series of characters. Anything inside quotes is considered as a string in Python, we can use either single or double quote. As python is a case sensitive language so string 'an' is considered different from string 'An'. In python string represented by data type \"str\". Note: String is an immutable object in python. So, it cannot be modified. Representation of \"string\" datatype \u00b6 \"This is a string.\" 'This is also a string.' 'string with single quote(' ) ' # SyntaxError: invalid syntax 'string with single quote( \\' )' \"string with double quote( \\\" )\" \"single quote inside a double quoted string(') \" 'double quote inside a single quoted string(\")' # storing string in a variable/name full_name = 'Anjaneyulu Batta' print ( full_name ) # Anjaneyulu Batta To represent the string we place the data inside a single quote( ' ) or a doouble quote( \" ). But, sometimes it may be required to use a single quote inside a single quoted string and double quote inside a double quoted string. In such cases we can simply place a backslash( \\ ) character just before the single quote or a double quote. Basic operations of strings in python \u00b6 String is a collection of characters. we can access these characters with indexes. Index starts from zero(0). Negative index is also supported. Let's consider the below code my_str = 'Hello' # Get first charactor first_char = my_str [ 0 ] sec_char = my_str [ 1 ] # Get substring from 1 to 3 sub_string = my_str [ 1 : 4 ] We have used slicing operation on strings to get a substring. Slicing Method Signature is \"S[start:end]\". Note: End index is not included in the resulted string. Working with string methods in python \u00b6 working with \" capitalize \" string method in python # method signature: S.capitalize() --> str s = \"hello WorlD\" out = s . capitalize () print ( out ) # Output: Hello world \"capitalize\" means making the first character of the string to upercase and remaining characters to lower case. working with \" title \" string method in python # method signature: S.title() --> str s = 'heLLo worLd' out = s . title () print ( out ) # Output: Hello World \"title\" case means words start with title case characters or upper case characters and all remaining cased characters have lower case. working with \" lower \" string method in python # method signature: S.lower() --> str s = 'heLLo worLd' out = s . lower () print ( out ) # Output: hello world \"lower\" method converts all the characters in the given string in lower case letters and returns it. working with \" upper \" string method in python # method signature: S.upper() --> str s = 'heLLo worLd' out = s . upper () print ( out ) # Output: HELLO WORLD \"upper\" method converts all the characters in the given string in upper case letters and returns it. working with \"count\" string method in python # method signature: S.count(sub_string, start=0, end=len(S)) -> int s = 'This is my world' count = s . count ( \"is\" ) print ( count ) # Output: 2 working with \" find \" string method in python # method signature: S.count(sub_string, start=0, end=len(S)) -> int s = 'heLLo worLd' out = s . find ( 'Lo' ) print ( out ) # Output: 3 working with \"index\" string method in python # method signature: S.index(sub_string, start=0, end=len(S)) -> int s = 'heLLo worLd' out = s . index ( 'w' ) print ( out ) # Output: 6 It returns the index of first occurrence of the substring in a given string. It raises valueError exception when the substring is not found. working with \"split\" string method in python # method signature: S.split(sep=None, maxsplit=-1) -> list of strings s = 'I am learning python' out = s . split ( sep = ' ' , maxsplit = 2 ) print ( out ) # Output: ['I', 'am', 'learning python'] out = s . split () print ( out ) # Output: ['I', 'am', 'learning', 'python'] Return a list of the words in S, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done. If sep is not specified or is None, any whitespace string is a separator and empty strings are removed from the result. working with \"replace\" string method in python # method signature: S.replace(old, new, count) -> str s = 'I am learning python. I am searhing in google.' out = s . replace ( 'am' , 'AM' , 1 ) print ( out ) # Output: I AM learning python. I am searhing in google. out = s . replace ( 'am' , 'AM' ) print ( out ) # Output: I AM learning python. I AM searhing in google. Return a copy of S with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced. working with \"strip\" string method in python # method signature: S.strip([chars]) -> str s = ' Search for python in Google ' out = s . strip () print ( out ) # Output: Search for python in Google s = 'eeepy(e)thoneee' out = s . strip ( 'e' ) print ( out ) # Output: py(e)thon Return a copy of the string S with leading and trailing whitespace removed. If chars is given and not None, remove characters in chars instead. working with \"lstrip\" string method in python # method signature: S.lstrip([chars]) -> str s = ' python ' out = s . lstrip () print ( out ) # Output: 'python ' s = 'eeepy(e)thoneee' out = s . lstrip ( 'e' ) print ( out ) # Output: py(e)thoneee Return a copy of the string S with leading whitespace removed. If chars is given and not None, remove characters in chars instead. working with \"rstrip\" string method in python # method signature: S.rstrip([chars]) -> str s = ' python ' out = s . rstrip () print ( out ) # Output: ' python' s = 'eeepy(e)thoneee' out = s . rstrip ( 'e' ) print ( out ) # Output: eeepy(e)thon It returns a copy of the string S with trailing whitespace removed. If chars is given and not None, remove characters in chars instead. working with \"join\" string method in python # method signature: S.join([iterables]) -> str out = ',' . join ([ 'Ravi' , 'Ram' , 'Diana' , 'Raheem' ]) print ( out ) # Output: Ravi,Ram,Diana,Raheem It returns a string which is the concatenation of the strings in the iterable. The separator between elements is S. working with \"swapcase\" string method in python # method signature: S.swapcase() -> str s = 'hello WOrLD' out = s . swapcase () print ( out ) # Output: HELLO woRld It returns a copy of S with uppercase characters converted to lowercase and vice versa. working with \"format\" string method in python # method signature: S.format(*args, **kwargs) -> str out = 'My name is {0} {1} ' . format ( \"Anjaneyulu\" , \"Batta\" ) print ( out ) # Output: My name is Anjaneyulu Batta out = 'My name is {first_name} {last_name} ' . format ( first_name = \"Anjaneyulu\" , last_name = \"Batta\" ) print ( out ) # Output: My name is Anjaneyulu Batta Return a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces ( { and } ). working with \"partition\" string method in python # method signature: S.partition(sep) -> (head, sep, tail) s = 'searching for python' out = s . partition ( 'for' ) print ( out ) # Output: ('searching ', 'for', ' python') Search for the separator sep in S, and return the part before it, the separator itself, and the part after it. If the separator is not found, return S and two empty strings. Working with boolean string methods in python \u00b6 working with \"startswith\" string method in python # method signature: S.startswith(prefix, start=0, end=len(S)) -> bool s = 'heLLo worLd' out = s . startswith ( 'he' ) print ( out ) # Output: True out = s . startswith ( 'Good' ) print ( out ) # Output: False Return True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try. working with \"endswith\" string method in python # method signature: S.endswith(prefix, start=0, end=len(S)) -> bool s = 'heLLo worLd' out = s . endswith ( 'rLd' ) print ( out ) # Output: True out = s . endswith ( 'Good' ) print ( out ) # Output: False Return True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try. working with \"isalnum\" string method in python # method signature: S.isalnum() -> bool s = '1234abcd' out = s . isalnum () print ( out ) # Output: True s = 'This is # letter 1234' out = s . isalnum () print ( out ) # Output: False Return True if all characters in S are alphanumeric, False otherwise. working with \"isalpha\" string method in python # method signature: S.isalpha() -> bool s = '1234abcd' out = s . isalpha () print ( out ) # Output: False s = 'alphabetsonly' out = s . isalpha () print ( out ) # Output: True Return True if all characters in S are alphabetic and there is at least one character in S, False otherwise. working with \"isdecimal\" string method in python # method signature: S.isdecimal() -> bool s = '1234abcd' out = s . isdecimal () print ( out ) # Output: False s = '12345' out = s . isalpha () print ( out ) # Output: True It return True if there are only decimal characters in S, False otherwise. working with \"isdigit\" string method in python # method signature: S.isdigit() -> bool s = '1234abcd' out = s . isdigit () print ( out ) # Output: False s = '1234' out = s . isdigit () print ( out ) # Output: True Return True if all characters in S are digits and there is at least one character in S, False otherwise. working with \"islower\" string method in python # method signature: S.islower() -> bool s = 'Hello world' out = s . islower () print ( out ) # Output: False s = 'hello world' out = s . islower () print ( out ) # Output: True working with \"islower\" string method in python # method signature: S.islower() -> bool s = 'Hello world' out = s . islower () print ( out ) # Output: False s = 'hello world' out = s . islower () print ( out ) # Output: True working with \"islower\" string method in python # method signature: S.islower() -> bool s = 'Hello world' out = s . islower () print ( out ) # Output: False s = 'hello world' out = s . islower () print ( out ) # Output: True Return True if all cased characters in S are lowercase and there is at least one cased character in S, False otherwise. working with \"isupper\" string method in python # method signature: S.isupper() -> bool s = 'Hello world' out = s . isupper () print ( out ) # Output: False s = 'HELLO' out = s . isupper () print ( out ) # Output: True Return True if all cased characters in s are uppercase and there is at least one cased character in s , False otherwise. working with \"isnumeric\" string method in python # method signature: S.isnumeric() -> bool s = '1234.234g' out = s . isnumeric () print ( out ) # Output: False s = '12355600' out = s . isnumeric () print ( out ) # Output: True Return True if there are only numeric characters in S, False otherwise. working with \"isspace\" string method in python # method signature: S.isspace() -> bool s = 'Hello world' out = s . isspace () print ( out ) # Output: False s = ' \\n \\t ' out = s . isspace () print ( out ) # Output: True Return True if all characters in S are whitespace and there is at least one character in S, False otherwise. working with \"istitle\" string method in python # method signature: S.istite() -> bool s = 'hello world' out = s . istite () print ( out ) # Output: False s = 'Hello World' out = s . istite () print ( out ) # Output: True Return True if s is a titlecase string and there is at least one character in s , i.e. upper- and titlecase characters may only follow uncased characters and lowercase characters only cased ones. Return False otherwise. Reference: https://docs.python.org/2/library/string.html","title":"Python Working With Strings"},{"location":"blog/python-working-with-strings-38/#python-working-with-strings","text":"String is a most used data type in python programming. A string is simply a series of characters. Anything inside quotes is considered as a string in Python, we can use either single or double quote. As python is a case sensitive language so string 'an' is considered different from string 'An'. In python string represented by data type \"str\". Note: String is an immutable object in python. So, it cannot be modified.","title":"Python Working With Strings"},{"location":"blog/python-working-with-strings-38/#representation-of-string-datatype","text":"\"This is a string.\" 'This is also a string.' 'string with single quote(' ) ' # SyntaxError: invalid syntax 'string with single quote( \\' )' \"string with double quote( \\\" )\" \"single quote inside a double quoted string(') \" 'double quote inside a single quoted string(\")' # storing string in a variable/name full_name = 'Anjaneyulu Batta' print ( full_name ) # Anjaneyulu Batta To represent the string we place the data inside a single quote( ' ) or a doouble quote( \" ). But, sometimes it may be required to use a single quote inside a single quoted string and double quote inside a double quoted string. In such cases we can simply place a backslash( \\ ) character just before the single quote or a double quote.","title":"Representation of \"string\" datatype"},{"location":"blog/python-working-with-strings-38/#basic-operations-of-strings-in-python","text":"String is a collection of characters. we can access these characters with indexes. Index starts from zero(0). Negative index is also supported. Let's consider the below code my_str = 'Hello' # Get first charactor first_char = my_str [ 0 ] sec_char = my_str [ 1 ] # Get substring from 1 to 3 sub_string = my_str [ 1 : 4 ] We have used slicing operation on strings to get a substring. Slicing Method Signature is \"S[start:end]\". Note: End index is not included in the resulted string.","title":"Basic operations of strings in python"},{"location":"blog/python-working-with-strings-38/#working-with-string-methods-in-python","text":"working with \" capitalize \" string method in python # method signature: S.capitalize() --> str s = \"hello WorlD\" out = s . capitalize () print ( out ) # Output: Hello world \"capitalize\" means making the first character of the string to upercase and remaining characters to lower case. working with \" title \" string method in python # method signature: S.title() --> str s = 'heLLo worLd' out = s . title () print ( out ) # Output: Hello World \"title\" case means words start with title case characters or upper case characters and all remaining cased characters have lower case. working with \" lower \" string method in python # method signature: S.lower() --> str s = 'heLLo worLd' out = s . lower () print ( out ) # Output: hello world \"lower\" method converts all the characters in the given string in lower case letters and returns it. working with \" upper \" string method in python # method signature: S.upper() --> str s = 'heLLo worLd' out = s . upper () print ( out ) # Output: HELLO WORLD \"upper\" method converts all the characters in the given string in upper case letters and returns it. working with \"count\" string method in python # method signature: S.count(sub_string, start=0, end=len(S)) -> int s = 'This is my world' count = s . count ( \"is\" ) print ( count ) # Output: 2 working with \" find \" string method in python # method signature: S.count(sub_string, start=0, end=len(S)) -> int s = 'heLLo worLd' out = s . find ( 'Lo' ) print ( out ) # Output: 3 working with \"index\" string method in python # method signature: S.index(sub_string, start=0, end=len(S)) -> int s = 'heLLo worLd' out = s . index ( 'w' ) print ( out ) # Output: 6 It returns the index of first occurrence of the substring in a given string. It raises valueError exception when the substring is not found. working with \"split\" string method in python # method signature: S.split(sep=None, maxsplit=-1) -> list of strings s = 'I am learning python' out = s . split ( sep = ' ' , maxsplit = 2 ) print ( out ) # Output: ['I', 'am', 'learning python'] out = s . split () print ( out ) # Output: ['I', 'am', 'learning', 'python'] Return a list of the words in S, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done. If sep is not specified or is None, any whitespace string is a separator and empty strings are removed from the result. working with \"replace\" string method in python # method signature: S.replace(old, new, count) -> str s = 'I am learning python. I am searhing in google.' out = s . replace ( 'am' , 'AM' , 1 ) print ( out ) # Output: I AM learning python. I am searhing in google. out = s . replace ( 'am' , 'AM' ) print ( out ) # Output: I AM learning python. I AM searhing in google. Return a copy of S with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced. working with \"strip\" string method in python # method signature: S.strip([chars]) -> str s = ' Search for python in Google ' out = s . strip () print ( out ) # Output: Search for python in Google s = 'eeepy(e)thoneee' out = s . strip ( 'e' ) print ( out ) # Output: py(e)thon Return a copy of the string S with leading and trailing whitespace removed. If chars is given and not None, remove characters in chars instead. working with \"lstrip\" string method in python # method signature: S.lstrip([chars]) -> str s = ' python ' out = s . lstrip () print ( out ) # Output: 'python ' s = 'eeepy(e)thoneee' out = s . lstrip ( 'e' ) print ( out ) # Output: py(e)thoneee Return a copy of the string S with leading whitespace removed. If chars is given and not None, remove characters in chars instead. working with \"rstrip\" string method in python # method signature: S.rstrip([chars]) -> str s = ' python ' out = s . rstrip () print ( out ) # Output: ' python' s = 'eeepy(e)thoneee' out = s . rstrip ( 'e' ) print ( out ) # Output: eeepy(e)thon It returns a copy of the string S with trailing whitespace removed. If chars is given and not None, remove characters in chars instead. working with \"join\" string method in python # method signature: S.join([iterables]) -> str out = ',' . join ([ 'Ravi' , 'Ram' , 'Diana' , 'Raheem' ]) print ( out ) # Output: Ravi,Ram,Diana,Raheem It returns a string which is the concatenation of the strings in the iterable. The separator between elements is S. working with \"swapcase\" string method in python # method signature: S.swapcase() -> str s = 'hello WOrLD' out = s . swapcase () print ( out ) # Output: HELLO woRld It returns a copy of S with uppercase characters converted to lowercase and vice versa. working with \"format\" string method in python # method signature: S.format(*args, **kwargs) -> str out = 'My name is {0} {1} ' . format ( \"Anjaneyulu\" , \"Batta\" ) print ( out ) # Output: My name is Anjaneyulu Batta out = 'My name is {first_name} {last_name} ' . format ( first_name = \"Anjaneyulu\" , last_name = \"Batta\" ) print ( out ) # Output: My name is Anjaneyulu Batta Return a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces ( { and } ). working with \"partition\" string method in python # method signature: S.partition(sep) -> (head, sep, tail) s = 'searching for python' out = s . partition ( 'for' ) print ( out ) # Output: ('searching ', 'for', ' python') Search for the separator sep in S, and return the part before it, the separator itself, and the part after it. If the separator is not found, return S and two empty strings.","title":"Working with string methods in python"},{"location":"blog/python-working-with-strings-38/#working-with-boolean-string-methods-in-python","text":"working with \"startswith\" string method in python # method signature: S.startswith(prefix, start=0, end=len(S)) -> bool s = 'heLLo worLd' out = s . startswith ( 'he' ) print ( out ) # Output: True out = s . startswith ( 'Good' ) print ( out ) # Output: False Return True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try. working with \"endswith\" string method in python # method signature: S.endswith(prefix, start=0, end=len(S)) -> bool s = 'heLLo worLd' out = s . endswith ( 'rLd' ) print ( out ) # Output: True out = s . endswith ( 'Good' ) print ( out ) # Output: False Return True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try. working with \"isalnum\" string method in python # method signature: S.isalnum() -> bool s = '1234abcd' out = s . isalnum () print ( out ) # Output: True s = 'This is # letter 1234' out = s . isalnum () print ( out ) # Output: False Return True if all characters in S are alphanumeric, False otherwise. working with \"isalpha\" string method in python # method signature: S.isalpha() -> bool s = '1234abcd' out = s . isalpha () print ( out ) # Output: False s = 'alphabetsonly' out = s . isalpha () print ( out ) # Output: True Return True if all characters in S are alphabetic and there is at least one character in S, False otherwise. working with \"isdecimal\" string method in python # method signature: S.isdecimal() -> bool s = '1234abcd' out = s . isdecimal () print ( out ) # Output: False s = '12345' out = s . isalpha () print ( out ) # Output: True It return True if there are only decimal characters in S, False otherwise. working with \"isdigit\" string method in python # method signature: S.isdigit() -> bool s = '1234abcd' out = s . isdigit () print ( out ) # Output: False s = '1234' out = s . isdigit () print ( out ) # Output: True Return True if all characters in S are digits and there is at least one character in S, False otherwise. working with \"islower\" string method in python # method signature: S.islower() -> bool s = 'Hello world' out = s . islower () print ( out ) # Output: False s = 'hello world' out = s . islower () print ( out ) # Output: True working with \"islower\" string method in python # method signature: S.islower() -> bool s = 'Hello world' out = s . islower () print ( out ) # Output: False s = 'hello world' out = s . islower () print ( out ) # Output: True working with \"islower\" string method in python # method signature: S.islower() -> bool s = 'Hello world' out = s . islower () print ( out ) # Output: False s = 'hello world' out = s . islower () print ( out ) # Output: True Return True if all cased characters in S are lowercase and there is at least one cased character in S, False otherwise. working with \"isupper\" string method in python # method signature: S.isupper() -> bool s = 'Hello world' out = s . isupper () print ( out ) # Output: False s = 'HELLO' out = s . isupper () print ( out ) # Output: True Return True if all cased characters in s are uppercase and there is at least one cased character in s , False otherwise. working with \"isnumeric\" string method in python # method signature: S.isnumeric() -> bool s = '1234.234g' out = s . isnumeric () print ( out ) # Output: False s = '12355600' out = s . isnumeric () print ( out ) # Output: True Return True if there are only numeric characters in S, False otherwise. working with \"isspace\" string method in python # method signature: S.isspace() -> bool s = 'Hello world' out = s . isspace () print ( out ) # Output: False s = ' \\n \\t ' out = s . isspace () print ( out ) # Output: True Return True if all characters in S are whitespace and there is at least one character in S, False otherwise. working with \"istitle\" string method in python # method signature: S.istite() -> bool s = 'hello world' out = s . istite () print ( out ) # Output: False s = 'Hello World' out = s . istite () print ( out ) # Output: True Return True if s is a titlecase string and there is at least one character in s , i.e. upper- and titlecase characters may only follow uncased characters and lowercase characters only cased ones. Return False otherwise. Reference: https://docs.python.org/2/library/string.html","title":"Working with boolean string methods in python"},{"location":"blog/python-working-with-tuple-data-type-41/","text":"Python Working With Tuple Data Type \u00b6 Tuple is a sequential data structure in python. It is a immutable data type so, we cannot make any modifications to the tuple once created. Tuple stores the data in a sequential manner. we can access the data in the tuple with indexes. Form the from index starts from 0, 1,2, 3, etc. Tuple also supports negative indexing. Form the rear the index starts from -1, -2, etc. Advantages of tuples \u00b6 In general tuples are faster than the lists . Tuples are write protected so, use it when you are defining the write protected data in your programs. Tuple can store heterogeneous data types. How to creat tuple in python ? \u00b6 # with builtin tuple function t = ( 1 , 2 , 3 \"hello\" ) # or simply t = 1 , 2 , 3 , 4 , \"hello\" print ( t ) # Output: (1,2,3,4, \"hello\") t = 1 print ( type ( t )) # Output: <type int> # tuple Trick t = 1 , print ( type ( t )) # Output: <type 'tuple'> Try above code in python interpreter to know how to create tuple in a simpler way. we can also use a python builtin function \"tuple\" to convert any sequential data type into a tuple. Using \"tuple\" builtin function \u00b6 # lets convert the string into a tuple s = \"hello world\" t = tuple ( s ) print ( t ) # Output: ('h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd') # lets convert the list into a tuple lst = [ \"Anju\" , 223 , { 1 : 2 }] t = tuple ( lst ) print ( t ) # Output: ('Anju', 223, {1: 2}) # lets convert the dict into a tuple d = { \"tuple\" : ( 1 , 2 , 4 ), \"list\" : [ \"hi\" , 2 ]} t = tuple ( d ) print ( t ) # Output: ('list', 'tuple') Execute the above code in python interpreter. In above code we have converted the string, list and dict into a tuple. But, If we observe we can find that when converting the dictionary into the tuple the result contains only the keys of the dictionary/dict. Working with tuple in python \u00b6 get an value of an element in a tuple with an index t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) out = t [ 4 ] # 4 is index value of \"hi\" print ( out ) # Output: hi out = t [ - 4 ] print ( out ) # Output: 2 get a tuple item with an index number # method signature: T.index(value) --> int t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) index = t . index ( 4 ) # item print ( index ) # Output: 3 count the number of occurrences of an element in a tuple with method \"count\" # method signature: T.count(value) --> int t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) count = t . count ( 1 ) # element = 1 print ( count ) # Output: 2 slice operation on a tuple # Signature: T[start_index:end_index] t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) out = t [ 3 : 7 ] print ( out ) # Output: (4, 'hi', 1, 2) add tuple \"t1\" and tuple \"t2\" (\"+\" operation on tuple data) t1 = ( 1 , 2 , 3 , 4 , \"hi\" ) t2 = ( 3 , 4 ) out = t1 + t2 print ( out ) # Output: (1, 2, 3, 4, 'hi', 3, 4) Multiplication operator on python t = ( 1 , 2 , 3 , 4 , \"hi\" ) out = t * 2 print ( out ) # output: (1, 2, 3, 4, 'hi', 1, 2, 3, 4, 'hi') Reference: http://python-reference.readthedocs.io/en/latest/docs/tuple/ https://docs.python.org/3.1/tutorial/datastructures.html#tuples-and-sequences","title":"Python Working With Tuple Data Type"},{"location":"blog/python-working-with-tuple-data-type-41/#python-working-with-tuple-data-type","text":"Tuple is a sequential data structure in python. It is a immutable data type so, we cannot make any modifications to the tuple once created. Tuple stores the data in a sequential manner. we can access the data in the tuple with indexes. Form the from index starts from 0, 1,2, 3, etc. Tuple also supports negative indexing. Form the rear the index starts from -1, -2, etc.","title":"Python Working With Tuple Data Type"},{"location":"blog/python-working-with-tuple-data-type-41/#advantages-of-tuples","text":"In general tuples are faster than the lists . Tuples are write protected so, use it when you are defining the write protected data in your programs. Tuple can store heterogeneous data types.","title":"Advantages of tuples"},{"location":"blog/python-working-with-tuple-data-type-41/#how-to-creat-tuple-in-python","text":"# with builtin tuple function t = ( 1 , 2 , 3 \"hello\" ) # or simply t = 1 , 2 , 3 , 4 , \"hello\" print ( t ) # Output: (1,2,3,4, \"hello\") t = 1 print ( type ( t )) # Output: <type int> # tuple Trick t = 1 , print ( type ( t )) # Output: <type 'tuple'> Try above code in python interpreter to know how to create tuple in a simpler way. we can also use a python builtin function \"tuple\" to convert any sequential data type into a tuple.","title":"How to creat tuple in python ?"},{"location":"blog/python-working-with-tuple-data-type-41/#using-tuple-builtin-function","text":"# lets convert the string into a tuple s = \"hello world\" t = tuple ( s ) print ( t ) # Output: ('h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd') # lets convert the list into a tuple lst = [ \"Anju\" , 223 , { 1 : 2 }] t = tuple ( lst ) print ( t ) # Output: ('Anju', 223, {1: 2}) # lets convert the dict into a tuple d = { \"tuple\" : ( 1 , 2 , 4 ), \"list\" : [ \"hi\" , 2 ]} t = tuple ( d ) print ( t ) # Output: ('list', 'tuple') Execute the above code in python interpreter. In above code we have converted the string, list and dict into a tuple. But, If we observe we can find that when converting the dictionary into the tuple the result contains only the keys of the dictionary/dict.","title":"Using \"tuple\" builtin function"},{"location":"blog/python-working-with-tuple-data-type-41/#working-with-tuple-in-python","text":"get an value of an element in a tuple with an index t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) out = t [ 4 ] # 4 is index value of \"hi\" print ( out ) # Output: hi out = t [ - 4 ] print ( out ) # Output: 2 get a tuple item with an index number # method signature: T.index(value) --> int t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) index = t . index ( 4 ) # item print ( index ) # Output: 3 count the number of occurrences of an element in a tuple with method \"count\" # method signature: T.count(value) --> int t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) count = t . count ( 1 ) # element = 1 print ( count ) # Output: 2 slice operation on a tuple # Signature: T[start_index:end_index] t = ( 1 , 2 , 3 , 4 , \"hi\" , 1 , 2 , 3 , 4 , 5 ) out = t [ 3 : 7 ] print ( out ) # Output: (4, 'hi', 1, 2) add tuple \"t1\" and tuple \"t2\" (\"+\" operation on tuple data) t1 = ( 1 , 2 , 3 , 4 , \"hi\" ) t2 = ( 3 , 4 ) out = t1 + t2 print ( out ) # Output: (1, 2, 3, 4, 'hi', 3, 4) Multiplication operator on python t = ( 1 , 2 , 3 , 4 , \"hi\" ) out = t * 2 print ( out ) # output: (1, 2, 3, 4, 'hi', 1, 2, 3, 4, 'hi') Reference: http://python-reference.readthedocs.io/en/latest/docs/tuple/ https://docs.python.org/3.1/tutorial/datastructures.html#tuples-and-sequences","title":"Working with tuple in python"},{"location":"blog/python-working-with-while-loop-56/","text":"Python Working With While Loop \u00b6 Let's start working with while loop in python. While loop is used to execute a block of code until certain condition is met. we can also terminate it before using the python keyword \"break\" If condition is not met then it will run for infinite number of times and we should avoid it. Unlike for loop it won't run for a fixed number of times. Syntax of \"while\" loop in python: \u00b6 while ( condition ): statement - 1 statement - 2 Basic usage of \"while\" loop in python \u00b6 Use Case: Print 15 table in python number = 1 while ( number <= 10 ): print ( \"15 X \" , number , \"=\" , 15 * number ) number = number + 1 # Output: # 15 X 1 = 15 # 15 X 2 = 30 # 15 X 3 = 45 # 15 X 4 = 60 # 15 X 5 = 75 # 15 X 6 = 90 # 15 X 7 = 105 # 15 X 8 = 120 # 15 X 9 = 135 # 15 X 10 = 150 When we run the above code it assigns the value 1 to the name \"number\". After, it starts the while loop execution. First it checks the condition \"number <= 10\" which is true(ie. 1 <= 10). So, it will executes the code inside the block of while loop. The first statement inside the while loop block is \"print\" so it executes and output will printed on the terminal/console(\"15 X 1 = 15\"). We know a computer executes code line by line. So, It will execute the next statement\"number = number + 1\" . Now, number = 2. No other statements left inside the while loop block. So, again it goes to the while loop condition and repeats the same process until the condition (number <= 10 ) is false. Practice \"While\" loop \u00b6 Printing out a left-justified right triangle * ** *** **** ***** ****** ******* ******** ********* Solution: start = 1 while ( start < 10 ): print ( \"*\" * start ) start = start + 1 Printing out a inverted left-justified right triangle ********** ********* ******** ******* ****** ***** **** *** ** * Solution: start = 10 while ( start > 0 ): print ( \"*\" * start ) start = start - 1 Infinite While loop in python while ( True ): print ( \"Infinite Loop...\" )","title":"Python Working With While Loop"},{"location":"blog/python-working-with-while-loop-56/#python-working-with-while-loop","text":"Let's start working with while loop in python. While loop is used to execute a block of code until certain condition is met. we can also terminate it before using the python keyword \"break\" If condition is not met then it will run for infinite number of times and we should avoid it. Unlike for loop it won't run for a fixed number of times.","title":"Python Working With While Loop"},{"location":"blog/python-working-with-while-loop-56/#syntax-of-while-loop-in-python","text":"while ( condition ): statement - 1 statement - 2","title":"Syntax of \"while\" loop in python:"},{"location":"blog/python-working-with-while-loop-56/#basic-usage-of-while-loop-in-python","text":"Use Case: Print 15 table in python number = 1 while ( number <= 10 ): print ( \"15 X \" , number , \"=\" , 15 * number ) number = number + 1 # Output: # 15 X 1 = 15 # 15 X 2 = 30 # 15 X 3 = 45 # 15 X 4 = 60 # 15 X 5 = 75 # 15 X 6 = 90 # 15 X 7 = 105 # 15 X 8 = 120 # 15 X 9 = 135 # 15 X 10 = 150 When we run the above code it assigns the value 1 to the name \"number\". After, it starts the while loop execution. First it checks the condition \"number <= 10\" which is true(ie. 1 <= 10). So, it will executes the code inside the block of while loop. The first statement inside the while loop block is \"print\" so it executes and output will printed on the terminal/console(\"15 X 1 = 15\"). We know a computer executes code line by line. So, It will execute the next statement\"number = number + 1\" . Now, number = 2. No other statements left inside the while loop block. So, again it goes to the while loop condition and repeats the same process until the condition (number <= 10 ) is false.","title":"Basic usage of \"while\" loop in python"},{"location":"blog/python-working-with-while-loop-56/#practice-while-loop","text":"Printing out a left-justified right triangle * ** *** **** ***** ****** ******* ******** ********* Solution: start = 1 while ( start < 10 ): print ( \"*\" * start ) start = start + 1 Printing out a inverted left-justified right triangle ********** ********* ******** ******* ****** ***** **** *** ** * Solution: start = 10 while ( start > 0 ): print ( \"*\" * start ) start = start - 1 Infinite While loop in python while ( True ): print ( \"Infinite Loop...\" )","title":"Practice \"While\" loop"},{"location":"blog/python-writing-modules-and-packages-64/","text":"python writing modules and packages \u00b6 We basically write computer programs to solve the problems. Problem may be simpler or moderate one or a complex. For simple problems we can solve it with 50 to 80 lines of code. If it is the case then we can easily manage the code. But, if code grows in an amount thousands of lines then obiviously it will be very difficult to maintain that code. So, we devide the code into modules each module contains a group of reusable functionalities. After, we combine these modules into packages by putting them into directories based on their nature. Python Modules \u00b6 Python module is a file it contains definitions and statements. It can be composed of functions, classes and variables. In python, a piece of code in a moule can be inherited to other module using the \"import\" keyword. Let's do some code and check how it works. # simple_math.py def add ( a , b ): return a + b def substract ( a , b ): return a - b # main.py from simple_math import add , substract print ( add ( 100 , 50 )) # output: print ( substract ( 100 , 50 )) # output: In above code we have created a module called \"simple_math.py\" and imported it's functions in the other module \"main.py\" and used them. In python source code we can find many reusable modules like os, math, collections, etc. Python Packages \u00b6 In python a package is simply a directory which contains modules. Each python package must contain a special file named \" init .py\". Because it tells python interpreter that the directory is a package. we can import a package just like a python module. First see the directory structure \u251c\u2500\u2500 main.py \u251c\u2500\u2500 my_package \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 utils.py \u251c\u2500\u2500 simple_math.py Let's do some code and check how it works. # utils.py def say_hello ( name ): print ( \"Hello {} \" . format ( name )) # main.py from my_package import utils utils . say_hello ( \"LearnBATTA\" ) # output: Hello LearnBATTA - We can find many python packages at PyPI","title":"python writing modules and packages"},{"location":"blog/python-writing-modules-and-packages-64/#python-writing-modules-and-packages","text":"We basically write computer programs to solve the problems. Problem may be simpler or moderate one or a complex. For simple problems we can solve it with 50 to 80 lines of code. If it is the case then we can easily manage the code. But, if code grows in an amount thousands of lines then obiviously it will be very difficult to maintain that code. So, we devide the code into modules each module contains a group of reusable functionalities. After, we combine these modules into packages by putting them into directories based on their nature.","title":"python writing modules and packages"},{"location":"blog/python-writing-modules-and-packages-64/#python-modules","text":"Python module is a file it contains definitions and statements. It can be composed of functions, classes and variables. In python, a piece of code in a moule can be inherited to other module using the \"import\" keyword. Let's do some code and check how it works. # simple_math.py def add ( a , b ): return a + b def substract ( a , b ): return a - b # main.py from simple_math import add , substract print ( add ( 100 , 50 )) # output: print ( substract ( 100 , 50 )) # output: In above code we have created a module called \"simple_math.py\" and imported it's functions in the other module \"main.py\" and used them. In python source code we can find many reusable modules like os, math, collections, etc.","title":"Python Modules"},{"location":"blog/python-writing-modules-and-packages-64/#python-packages","text":"In python a package is simply a directory which contains modules. Each python package must contain a special file named \" init .py\". Because it tells python interpreter that the directory is a package. we can import a package just like a python module. First see the directory structure \u251c\u2500\u2500 main.py \u251c\u2500\u2500 my_package \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 utils.py \u251c\u2500\u2500 simple_math.py Let's do some code and check how it works. # utils.py def say_hello ( name ): print ( \"Hello {} \" . format ( name )) # main.py from my_package import utils utils . say_hello ( \"LearnBATTA\" ) # output: Hello LearnBATTA - We can find many python packages at PyPI","title":"Python Packages"},{"location":"blog/rabbitmq-for-beginners/","text":"RabbitMQ for beginners \u00b6 what is RabbitMQ? \u00b6 RabbitMQ is a message-queueing software also known as a message broker or queue manager. It implements Advanced Message Queuing protocol. RabbitMQ is one of the most popular open-source message brokers. terminology to be aware of before using RabbitMQ \u00b6 Producer : A producer sends or pushes messages to a queue based on a queue name Queue : A queue is a medium via which we can transfer and store messages or buffers Consumer : A consumer subscribes, receives, or consumes messages from the broker, and then processes or uses them in another process or application Exchange : An exchange is an entry point to the broker as it receives messages from a publisher and routes them to the appropriate queue Bindings : Bindings are rules that exchanges use (among other things) to route messages to queues. To instruct an exchange E to route messages to a queue Q, Q has to be bound to E. Broker : A message broker basically offers a storage mechanism for data produced from one application. This data is usually meant to be consumed by another application that connects to the broker with the given parameters or connection strings Channel : Channels offer a sort of lightweight connection to a broker via a singular and shared TCP connection. This is due to the fact that creating multiple open connections to a broker is an expensive operation Virtual host (Vhost) : Virtual hosts make it possible for a single broker to host a couple of isolated environments Standard RabbitMQ message flow \u00b6 The producer publishes a message to the exchange . The exchange receives the message and is now responsible for the routing of the message. Binding must be set up between the queue and the exchange. The messages stay in the queue until they are handled by a consumer. The consumer handles the message. Types of exchanges in RabbitMQ \u00b6 Default Exchange \u00b6 The default exchange is a direct exchange with no name (empty string) pre-declared by the broker. It has one special property that makes it very useful for simple applications every queue that is created is automatically bound to it with a routing key which is the same as the queue name. Direct Exchange \u00b6 A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages Example: A queue binds to the exchange with a routing key K When a new message with routing key R arrives at the direct exchange, the exchange routes it to the queue if K = R Fanout Exchange \u00b6 A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored. If N queues are bound to a fanout exchange, when a new message is published to that exchange a copy of the message is delivered to all N queues. Fanout exchanges are ideal for the broadcast routing of messages. Topic Exchange \u00b6 Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange. The topic exchange type is often used to implement various publish/subscribe pattern variations. Topic exchanges are commonly used for the multicast routing of messages. Headers Exchange \u00b6 A headers exchange is designed for routing on multiple attributes that are more easily expressed as message headers than a routing key. Headers exchanges ignore the routing key attribute. Instead, the attributes used for routing are taken from the headers attribute. A message is considered matching if the value of the header equals the value specified upon binding. installing RabbitMQ \u00b6 Install it using docker docker run -itd --rm --name rabbitmq -p 5672 :5672 -p 15672 :15672 rabbitmq:3.9-management After installing it with docker visit http://localhost:15672/ and login to rabbitmq web admin interface with username guest and password guest . Try to create queue, bindings, exchanges and add messages to queues and recieve messages from the queues. for other type of installations, visit https://www.rabbitmq.com/download.html When to use RabbitMQ? \u00b6 When we have long running processes and background jobs For quick HTTP responses (i.e add to queue and process later) When we have event driven systems at a microservices level That's it folks. Let's see how we can use it with python's celery in upcoming articles. References: https://www.rabbitmq.com/tutorials/amqp-concepts.html https://www.youtube.com/watch?v=7rkeORD4jSw&ab_channel=IBMCloud","title":"RabbitMQ for beginners"},{"location":"blog/rabbitmq-for-beginners/#rabbitmq-for-beginners","text":"","title":"RabbitMQ for beginners"},{"location":"blog/rabbitmq-for-beginners/#what-is-rabbitmq","text":"RabbitMQ is a message-queueing software also known as a message broker or queue manager. It implements Advanced Message Queuing protocol. RabbitMQ is one of the most popular open-source message brokers.","title":"what is RabbitMQ?"},{"location":"blog/rabbitmq-for-beginners/#terminology-to-be-aware-of-before-using-rabbitmq","text":"Producer : A producer sends or pushes messages to a queue based on a queue name Queue : A queue is a medium via which we can transfer and store messages or buffers Consumer : A consumer subscribes, receives, or consumes messages from the broker, and then processes or uses them in another process or application Exchange : An exchange is an entry point to the broker as it receives messages from a publisher and routes them to the appropriate queue Bindings : Bindings are rules that exchanges use (among other things) to route messages to queues. To instruct an exchange E to route messages to a queue Q, Q has to be bound to E. Broker : A message broker basically offers a storage mechanism for data produced from one application. This data is usually meant to be consumed by another application that connects to the broker with the given parameters or connection strings Channel : Channels offer a sort of lightweight connection to a broker via a singular and shared TCP connection. This is due to the fact that creating multiple open connections to a broker is an expensive operation Virtual host (Vhost) : Virtual hosts make it possible for a single broker to host a couple of isolated environments","title":"terminology to be aware of before using RabbitMQ"},{"location":"blog/rabbitmq-for-beginners/#standard-rabbitmq-message-flow","text":"The producer publishes a message to the exchange . The exchange receives the message and is now responsible for the routing of the message. Binding must be set up between the queue and the exchange. The messages stay in the queue until they are handled by a consumer. The consumer handles the message.","title":"Standard RabbitMQ message flow"},{"location":"blog/rabbitmq-for-beginners/#types-of-exchanges-in-rabbitmq","text":"","title":"Types of exchanges in RabbitMQ"},{"location":"blog/rabbitmq-for-beginners/#default-exchange","text":"The default exchange is a direct exchange with no name (empty string) pre-declared by the broker. It has one special property that makes it very useful for simple applications every queue that is created is automatically bound to it with a routing key which is the same as the queue name.","title":"Default Exchange"},{"location":"blog/rabbitmq-for-beginners/#direct-exchange","text":"A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages Example: A queue binds to the exchange with a routing key K When a new message with routing key R arrives at the direct exchange, the exchange routes it to the queue if K = R","title":"Direct Exchange"},{"location":"blog/rabbitmq-for-beginners/#fanout-exchange","text":"A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored. If N queues are bound to a fanout exchange, when a new message is published to that exchange a copy of the message is delivered to all N queues. Fanout exchanges are ideal for the broadcast routing of messages.","title":"Fanout Exchange"},{"location":"blog/rabbitmq-for-beginners/#topic-exchange","text":"Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange. The topic exchange type is often used to implement various publish/subscribe pattern variations. Topic exchanges are commonly used for the multicast routing of messages.","title":"Topic Exchange"},{"location":"blog/rabbitmq-for-beginners/#headers-exchange","text":"A headers exchange is designed for routing on multiple attributes that are more easily expressed as message headers than a routing key. Headers exchanges ignore the routing key attribute. Instead, the attributes used for routing are taken from the headers attribute. A message is considered matching if the value of the header equals the value specified upon binding.","title":"Headers Exchange"},{"location":"blog/rabbitmq-for-beginners/#installing-rabbitmq","text":"Install it using docker docker run -itd --rm --name rabbitmq -p 5672 :5672 -p 15672 :15672 rabbitmq:3.9-management After installing it with docker visit http://localhost:15672/ and login to rabbitmq web admin interface with username guest and password guest . Try to create queue, bindings, exchanges and add messages to queues and recieve messages from the queues. for other type of installations, visit https://www.rabbitmq.com/download.html","title":"installing RabbitMQ"},{"location":"blog/rabbitmq-for-beginners/#when-to-use-rabbitmq","text":"When we have long running processes and background jobs For quick HTTP responses (i.e add to queue and process later) When we have event driven systems at a microservices level That's it folks. Let's see how we can use it with python's celery in upcoming articles. References: https://www.rabbitmq.com/tutorials/amqp-concepts.html https://www.youtube.com/watch?v=7rkeORD4jSw&ab_channel=IBMCloud","title":"When to use RabbitMQ?"},{"location":"blog/reading-and-writing-csv-files-using-python-12/","text":"Reading and writing csv files using python \u00b6 Comma Separated Values - CSV \u00b6 CSV is stands for comma separated values. CSV file format is most commonly used format for imports and exports of data to spreadsheets and databases. Advantages to using CSV \u00b6 edit csv file manually with any text editor ease of parsing and implementing the data in csv faster to handle the csv and smaller file size csv is considered to be standard format Disadvantages using CSV \u00b6 csv cannot deal with complex configurations No separation between numeric data and text data Some of the databases doesn't support csv files to import data No full support for special charactors Reading and Writing CSV files in python \u00b6 Python provides a in-built module csv to read and write the csv files. Writing csv files using python \u00b6 # bulk writing csv files using python data = [ ( 'First Name' , 'Last Name' , 'City' ), ( 'Ram' , 'B' , 'Warangal' ), ( 'Naveen' , 'M' , 'Hyderabad' ), ] with open ( 'test.csv' , 'a+' ) as csv_file : writer = csv . writer ( csv_file , delimiter = ',' ) writer . writerows ( data ) # write a row with open ( 'test.csv' , 'a+' ) as csv_file : row = ( 'Naveen' , 'M' , 'Hyderabad' ) writer = csv . writer ( csv_file , delimiter = ',' ) writer . writerow ( row ) If we open a file using \"with\" statement we do not need to take care of closing of the file, It will close the csv file automatically. The function \"writer\" in module csv takes the file, delemeter as parameters and returns the writer object. The parameter \"delemeter\" is used to separate the columns in a row. we can write bulk rows to file at once using method \"writerows\". To write a single row use method \"writerow\" . Above code is the simple example for writing csv files using python . Reading csv files using python \u00b6 import csv with open ( 'test.csv' , 'r' ) as csv_file : reader = csv . reader ( csv_file , delimiter = ',' ) for row in reader : print ( type ( row )) # list for cell in row : print ( cell ) print \"*\" * 10 The function \"reader\" in module csv takes the file, delemeter as parameters and returns the \"reader object\". The parameter \"delemeter\" is used to separate the columns in a row. we can iterate through the reader object to get rows. each row in a reader object is a list. we can iterate through the row to get the column. Above code is the simple example for reading csv files using python. Reference: \u00b6 https://docs.python.org/3/library/csv.html","title":"Reading and writing csv files using python"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#reading-and-writing-csv-files-using-python","text":"","title":"Reading and writing csv files using python"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#comma-separated-values-csv","text":"CSV is stands for comma separated values. CSV file format is most commonly used format for imports and exports of data to spreadsheets and databases.","title":"Comma Separated Values - CSV"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#advantages-to-using-csv","text":"edit csv file manually with any text editor ease of parsing and implementing the data in csv faster to handle the csv and smaller file size csv is considered to be standard format","title":"Advantages to using CSV"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#disadvantages-using-csv","text":"csv cannot deal with complex configurations No separation between numeric data and text data Some of the databases doesn't support csv files to import data No full support for special charactors","title":"Disadvantages using CSV"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#reading-and-writing-csv-files-in-python","text":"Python provides a in-built module csv to read and write the csv files.","title":"Reading and Writing CSV files in python"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#writing-csv-files-using-python","text":"# bulk writing csv files using python data = [ ( 'First Name' , 'Last Name' , 'City' ), ( 'Ram' , 'B' , 'Warangal' ), ( 'Naveen' , 'M' , 'Hyderabad' ), ] with open ( 'test.csv' , 'a+' ) as csv_file : writer = csv . writer ( csv_file , delimiter = ',' ) writer . writerows ( data ) # write a row with open ( 'test.csv' , 'a+' ) as csv_file : row = ( 'Naveen' , 'M' , 'Hyderabad' ) writer = csv . writer ( csv_file , delimiter = ',' ) writer . writerow ( row ) If we open a file using \"with\" statement we do not need to take care of closing of the file, It will close the csv file automatically. The function \"writer\" in module csv takes the file, delemeter as parameters and returns the writer object. The parameter \"delemeter\" is used to separate the columns in a row. we can write bulk rows to file at once using method \"writerows\". To write a single row use method \"writerow\" . Above code is the simple example for writing csv files using python .","title":"Writing csv files using python"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#reading-csv-files-using-python","text":"import csv with open ( 'test.csv' , 'r' ) as csv_file : reader = csv . reader ( csv_file , delimiter = ',' ) for row in reader : print ( type ( row )) # list for cell in row : print ( cell ) print \"*\" * 10 The function \"reader\" in module csv takes the file, delemeter as parameters and returns the \"reader object\". The parameter \"delemeter\" is used to separate the columns in a row. we can iterate through the reader object to get rows. each row in a reader object is a list. we can iterate through the row to get the column. Above code is the simple example for reading csv files using python.","title":"Reading csv files using python"},{"location":"blog/reading-and-writing-csv-files-using-python-12/#reference","text":"https://docs.python.org/3/library/csv.html","title":"Reference:"},{"location":"blog/renderers-in-django-rest-framework-86/","text":"renderers in Django Rest Framework \u00b6 Renderers are used to serialize the response into a specific media type like JSON, XML, YAML, etc. Django REST Framework provides various built-in renderer classes and it also supports to write a custom renderer. We specify renderers as an iterable type (i.e tuple, list, set, etc.). It means we can use multiple renderers for a single view/viewset. A renderer is chosen based on the media type received in the request. We can also specify default renderers globally in settings. Setting renderers globally \u00b6 We can set renderers globally like below in settings.py REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES' : [ 'rest_framework.renderers.JSONRenderer' , 'rest_framework.renderers.BrowsableAPIRenderer' , ] } Setting renderer for a View or Viewset \u00b6 we can set renderer to a view or viewset using attribute \"renderer_classes\" like below. from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView ( APIView ): \"\"\" A view that returns the count of active users in JSON. \"\"\" renderer_classes = [ JSONRenderer ] def get ( self , request , format = None ): user_count = User . objects . filter ( active = True ) . count () content = { 'user_count' : user_count } return Response ( content ) To generate \"xml\" response then use third party package \"REST Framework XML\" To generate \"jsonp\" response then use third party package \"REST framework JSONP\" To generate \"YAML\" response then use third party package \"REST framework YAML\"","title":"renderers in Django Rest Framework"},{"location":"blog/renderers-in-django-rest-framework-86/#renderers-in-django-rest-framework","text":"Renderers are used to serialize the response into a specific media type like JSON, XML, YAML, etc. Django REST Framework provides various built-in renderer classes and it also supports to write a custom renderer. We specify renderers as an iterable type (i.e tuple, list, set, etc.). It means we can use multiple renderers for a single view/viewset. A renderer is chosen based on the media type received in the request. We can also specify default renderers globally in settings.","title":"renderers in Django Rest Framework"},{"location":"blog/renderers-in-django-rest-framework-86/#setting-renderers-globally","text":"We can set renderers globally like below in settings.py REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES' : [ 'rest_framework.renderers.JSONRenderer' , 'rest_framework.renderers.BrowsableAPIRenderer' , ] }","title":"Setting renderers globally"},{"location":"blog/renderers-in-django-rest-framework-86/#setting-renderer-for-a-view-or-viewset","text":"we can set renderer to a view or viewset using attribute \"renderer_classes\" like below. from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView ( APIView ): \"\"\" A view that returns the count of active users in JSON. \"\"\" renderer_classes = [ JSONRenderer ] def get ( self , request , format = None ): user_count = User . objects . filter ( active = True ) . count () content = { 'user_count' : user_count } return Response ( content ) To generate \"xml\" response then use third party package \"REST Framework XML\" To generate \"jsonp\" response then use third party package \"REST framework JSONP\" To generate \"YAML\" response then use third party package \"REST framework YAML\"","title":"Setting renderer for a View or Viewset"},{"location":"blog/routers-in-django-rest-framework-84/","text":"Routers In Django Rest Framework \u00b6 Routers are used with ViewSets in django rest framework to auto config the urls. Routers provides a simple, quick and consistent way of wiring ViewSet logic to a set of URLs. Router automatically maps the incoming request to proper viewset action based on the request method type(i.e GET, POST, etc). Let's start using routers. Working with DRF Routers \u00b6 Lets's see a simple example how to configure viewset urls urls.py from rest_framework import routers from .views import UserViewSet router = routers . SimpleRouter () router . register ( 'users' , UserViewSet ) urlpatterns = router . urls Above example will generate urls configuration like below URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' We have two types of routers in Django REST SimpleRouter \u00b6 It includes actions for all actions (i.e list, create, retrieve, update, partial_update and destroy). Let's see how it configures the urls URL Style HTTP Method Action URL Name {prefix}/ GET list {basename}-list POST create {prefix}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} DefaultRouter \u00b6 It also includes all actions just like SimpleRouter and it additionally provides a default root view which returns a response containing hyperlinks to all the list views. Let's see how it configures the urls URL Style HTTP Method Action URL Name [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} To avoid trailing slash we have to provide trailing_slash=False while initiating the router like below. router = SimpleRouter ( trailing_slash = False ) # or # router = DefaultRouter(trailing_slash=False) Reference: https://www.django-rest-framework.org/api-guide/routers SourceCode: https://github.com/encode/django-rest-framework/blob/master/rest_framework/routers.py","title":"Routers In Django Rest Framework"},{"location":"blog/routers-in-django-rest-framework-84/#routers-in-django-rest-framework","text":"Routers are used with ViewSets in django rest framework to auto config the urls. Routers provides a simple, quick and consistent way of wiring ViewSet logic to a set of URLs. Router automatically maps the incoming request to proper viewset action based on the request method type(i.e GET, POST, etc). Let's start using routers.","title":"Routers In Django Rest Framework"},{"location":"blog/routers-in-django-rest-framework-84/#working-with-drf-routers","text":"Lets's see a simple example how to configure viewset urls urls.py from rest_framework import routers from .views import UserViewSet router = routers . SimpleRouter () router . register ( 'users' , UserViewSet ) urlpatterns = router . urls Above example will generate urls configuration like below URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' We have two types of routers in Django REST","title":"Working with DRF Routers"},{"location":"blog/routers-in-django-rest-framework-84/#simplerouter","text":"It includes actions for all actions (i.e list, create, retrieve, update, partial_update and destroy). Let's see how it configures the urls URL Style HTTP Method Action URL Name {prefix}/ GET list {basename}-list POST create {prefix}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name}","title":"SimpleRouter"},{"location":"blog/routers-in-django-rest-framework-84/#defaultrouter","text":"It also includes all actions just like SimpleRouter and it additionally provides a default root view which returns a response containing hyperlinks to all the list views. Let's see how it configures the urls URL Style HTTP Method Action URL Name [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} To avoid trailing slash we have to provide trailing_slash=False while initiating the router like below. router = SimpleRouter ( trailing_slash = False ) # or # router = DefaultRouter(trailing_slash=False) Reference: https://www.django-rest-framework.org/api-guide/routers SourceCode: https://github.com/encode/django-rest-framework/blob/master/rest_framework/routers.py","title":"DefaultRouter"},{"location":"blog/running-flask-app-inside-docker-103/","text":"running flask app inside docker \u00b6 Docker is container platform is used by hundreds of develops and system admins to build, share and run applications. Let's get started with docker and running a simple flask application using the docker. Installing docker in ubuntu using snap or apt \u00b6 To install the docker using snap then run the below command sudo snap install docker --classic or to install the docker using snap then run the below command sudo apt-get install docker Test the installation of docker using below command docker --version If docker installed sucessfully in your system then output looks like below. Docker version 18 .06.1-ce, build e68fc7a Create a simple flask application \u00b6 Let's create new directory named \" my_flask_app \". Inside that directory create file named \" app.py \". my_flaskapp/app.py from flask import Flask app = Flask ( __name__ ) @app . route ( '/' ) def hello_world (): return 'Hello Flask App!' if __name__ == '__main__' : app . run ( debug = True , host = '0.0.0.0' , port = 5000 ) To test the app functionality run the command \" python app.py \" and access url \" http://localhost:5000 \". Let's add the requirements to the app. my_flaskapp/requirements.txt Flask == 1 .1.1 Create \"Dockerfile\" to containerize the flask app \u00b6 my_flaskapp/Dockerfile FROM python:3 RUN mkdir /app WORKDIR /app COPY . /app RUN pip install -r requirements.txt EXPOSE 5000 CMD [ \"python\" , \"app.py\" , \"0.0.0.0:5000\" ] In the above docker file we have added instruction for docker to build the docker image. These are the steps defined in the dockerfile Install the python3 environment Create a directory \"/app\" in docker image Change directory to \"/app\" inside docker image Copy current directory of host to \"/app\" directory in the docker image Run the command \"pip install -r requirements.txt\" Expose port \"5000\" to host system from the docker Run the command \"python app.py 0.0.0.0:5000\" Build the docker image using the dockerfile \u00b6 To build the docker image run the below command sudo docker build -t my_flaskapp:latest . To create container from the docker image run the below command sudo docker run -p 5000 :5000 -d my_flaskapp:latest Now, access the url \" http://localhost:5000 \" to confirm the running of the application. Reference: https://docs.docker.com/get-started/","title":"running flask app inside docker"},{"location":"blog/running-flask-app-inside-docker-103/#running-flask-app-inside-docker","text":"Docker is container platform is used by hundreds of develops and system admins to build, share and run applications. Let's get started with docker and running a simple flask application using the docker.","title":"running flask app inside docker"},{"location":"blog/running-flask-app-inside-docker-103/#installing-docker-in-ubuntu-using-snap-or-apt","text":"To install the docker using snap then run the below command sudo snap install docker --classic or to install the docker using snap then run the below command sudo apt-get install docker Test the installation of docker using below command docker --version If docker installed sucessfully in your system then output looks like below. Docker version 18 .06.1-ce, build e68fc7a","title":"Installing docker in ubuntu using snap or apt"},{"location":"blog/running-flask-app-inside-docker-103/#create-a-simple-flask-application","text":"Let's create new directory named \" my_flask_app \". Inside that directory create file named \" app.py \". my_flaskapp/app.py from flask import Flask app = Flask ( __name__ ) @app . route ( '/' ) def hello_world (): return 'Hello Flask App!' if __name__ == '__main__' : app . run ( debug = True , host = '0.0.0.0' , port = 5000 ) To test the app functionality run the command \" python app.py \" and access url \" http://localhost:5000 \". Let's add the requirements to the app. my_flaskapp/requirements.txt Flask == 1 .1.1","title":"Create a simple flask application"},{"location":"blog/running-flask-app-inside-docker-103/#create-dockerfile-to-containerize-the-flask-app","text":"my_flaskapp/Dockerfile FROM python:3 RUN mkdir /app WORKDIR /app COPY . /app RUN pip install -r requirements.txt EXPOSE 5000 CMD [ \"python\" , \"app.py\" , \"0.0.0.0:5000\" ] In the above docker file we have added instruction for docker to build the docker image. These are the steps defined in the dockerfile Install the python3 environment Create a directory \"/app\" in docker image Change directory to \"/app\" inside docker image Copy current directory of host to \"/app\" directory in the docker image Run the command \"pip install -r requirements.txt\" Expose port \"5000\" to host system from the docker Run the command \"python app.py 0.0.0.0:5000\"","title":"Create \"Dockerfile\" to containerize the flask app"},{"location":"blog/running-flask-app-inside-docker-103/#build-the-docker-image-using-the-dockerfile","text":"To build the docker image run the below command sudo docker build -t my_flaskapp:latest . To create container from the docker image run the below command sudo docker run -p 5000 :5000 -d my_flaskapp:latest Now, access the url \" http://localhost:5000 \" to confirm the running of the application. Reference: https://docs.docker.com/get-started/","title":"Build the docker image using the dockerfile"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/","text":"scheduled jobs with kubernetes cronjobs \u00b6 what are scheduled jobs? \u00b6 Scheduled Jobs are automated pieces of work that can be performed at a specific time or on a recurring schedule. Example use cases: Sending performance metrics on weekly/monthly basis Analyse and send user behaviour metrics to admins on a daily basis what are cronjobs? \u00b6 A cron job is a Linux command used for scheduling tasks to be executed sometime in the future. This is normally used to schedule a job that is executed periodically Syntax: # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59) # \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23) # \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31) # \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12) # \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6) (Sunday to Saturday; # \u2502 \u2502 \u2502 \u2502 \u2502 7 is also Sunday on some systems) # \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 # * * * * * - https://crontab.guru/ will help us with configuration Prerequisites \u00b6 How Kubernetes works and schedules containers as pods How Kubernetes manages objects and config in a declarative way The differences between a service, deployment, and Horizontal Pod Autoscaler Aware of usual Kubernetes terms like Node, Kubelet, and the likes. kubernetes and cronjobs \u00b6 Kubernetes comes with objects called cronjobs which works similar to the linux cronjobs The timezone is taken from the k8s/kubernetes cluster Cronjobs are a wrapper around kubernetes jobs simple configuration yaml file for kubernetes cronjob \u00b6 apiVersion : batch/v1beta1 kind : CronJob metadata : name : simple-job-name spec : schedule : \"5 * * * *\" concurrencyPolicy : Replace jobTemplate : spec : template : spec : containers : - name : hello image : busybox imagePullPolicy : IfNotPresent command : - /bin/sh - -c - date; echo \"Hello from the Kubernetes cluster\" restartPolicy : OnFailure Above example is simple job which runs every 5 minutes and executes the command We can have multiple containers concurrencyPolicy can have values Allow , Forbid , Replace Allow (default): The cron job allows concurrently running jobs Forbid : The cron job does not allow concurrent runs; if it is time for a new job run and the previous job run hasn't finished yet, the cron job skips the new job run Replace : If it is time for a new job run and the previous job run hasn't finished yet, the cron job replaces the currently running job run with a new job run restartPolicy can have values OnFailure , Never Notes to remember before scheduling the cronjob \u00b6 when restartPolicy is set to OnFailure then it will be restarted if any of the containers failed. It won't follow the sheduled time when it runs for failure. Make sure your command didn't create any issues if it runs at irregular intervals. Commands to work with kubernets \u00b6 Create the kubernetes cronjob kubectl apply -f cronjob.yaml -n namespace Get all scheduled cronjobs kubectl get cronjobs -n namespace suspend kubernetes cronjob kubectl patch cronjobs <job-name> -p '{\"spec\" : {\"suspend\" : true }}' -n namespace delete kubernetes cronjob kubectl delete cronjobs <job-name> -n namespace describe a cronjob kubectl describe cronjobs <job-name> -n namespace Ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/","title":"scheduled jobs with kubernetes cronjobs"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#scheduled-jobs-with-kubernetes-cronjobs","text":"","title":"scheduled jobs with kubernetes cronjobs"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#what-are-scheduled-jobs","text":"Scheduled Jobs are automated pieces of work that can be performed at a specific time or on a recurring schedule. Example use cases: Sending performance metrics on weekly/monthly basis Analyse and send user behaviour metrics to admins on a daily basis","title":"what are scheduled jobs?"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#what-are-cronjobs","text":"A cron job is a Linux command used for scheduling tasks to be executed sometime in the future. This is normally used to schedule a job that is executed periodically Syntax: # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59) # \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23) # \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31) # \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12) # \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6) (Sunday to Saturday; # \u2502 \u2502 \u2502 \u2502 \u2502 7 is also Sunday on some systems) # \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 # * * * * * - https://crontab.guru/ will help us with configuration","title":"what are cronjobs?"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#prerequisites","text":"How Kubernetes works and schedules containers as pods How Kubernetes manages objects and config in a declarative way The differences between a service, deployment, and Horizontal Pod Autoscaler Aware of usual Kubernetes terms like Node, Kubelet, and the likes.","title":"Prerequisites"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#kubernetes-and-cronjobs","text":"Kubernetes comes with objects called cronjobs which works similar to the linux cronjobs The timezone is taken from the k8s/kubernetes cluster Cronjobs are a wrapper around kubernetes jobs","title":"kubernetes and cronjobs"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#simple-configuration-yaml-file-for-kubernetes-cronjob","text":"apiVersion : batch/v1beta1 kind : CronJob metadata : name : simple-job-name spec : schedule : \"5 * * * *\" concurrencyPolicy : Replace jobTemplate : spec : template : spec : containers : - name : hello image : busybox imagePullPolicy : IfNotPresent command : - /bin/sh - -c - date; echo \"Hello from the Kubernetes cluster\" restartPolicy : OnFailure Above example is simple job which runs every 5 minutes and executes the command We can have multiple containers concurrencyPolicy can have values Allow , Forbid , Replace Allow (default): The cron job allows concurrently running jobs Forbid : The cron job does not allow concurrent runs; if it is time for a new job run and the previous job run hasn't finished yet, the cron job skips the new job run Replace : If it is time for a new job run and the previous job run hasn't finished yet, the cron job replaces the currently running job run with a new job run restartPolicy can have values OnFailure , Never","title":"simple configuration yaml file for kubernetes cronjob"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#notes-to-remember-before-scheduling-the-cronjob","text":"when restartPolicy is set to OnFailure then it will be restarted if any of the containers failed. It won't follow the sheduled time when it runs for failure. Make sure your command didn't create any issues if it runs at irregular intervals.","title":"Notes to remember before scheduling the cronjob"},{"location":"blog/scheduled-jobs-with-kubernetes-cronjobs/#commands-to-work-with-kubernets","text":"Create the kubernetes cronjob kubectl apply -f cronjob.yaml -n namespace Get all scheduled cronjobs kubectl get cronjobs -n namespace suspend kubernetes cronjob kubectl patch cronjobs <job-name> -p '{\"spec\" : {\"suspend\" : true }}' -n namespace delete kubernetes cronjob kubectl delete cronjobs <job-name> -n namespace describe a cronjob kubectl describe cronjobs <job-name> -n namespace Ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/","title":"Commands to work with kubernets"},{"location":"blog/sending-images-in-django-email/","text":"Sending images in django emails \u00b6 Images have proven to be one of the most compelling and information-dense media available to marketers today. A good image can communicate emotion, transmit knowledge and get that critical engagement leading to a purchase. Every marketer needs to consider including images across their media, and email is no different. There is, however, a big caveat for images in email: They can be notoriously difficult to work with. If not handled well, embedding images in an email can affect deliverability, engagement and sender reputation. Appearances in a recipient\u2019s inbox also can change from email client to email client. To get around these issues, it\u2019s critical to understand the usable methods for embedding images in emails, as well as their benefits and drawbacks. Senders today primarily have three different methods for embedding images at their disposal: CID tags, inline embedding and linked images. But before using these methods, email marketers should take a close look at how their active recipients behave with current emails. The importance of analyzing recipient behavior before using images cannot be overstated. You will need to know what email clients to design images for, what size is optimal for these email clients, how these clients treat ALT text and how they both do and do not render images for recipients. We can embed images in two ways 1. by using content id and 2. by using web image url. Let's send images in django email. from email.mime.image import MIMEImage from django.core.mail import EmailMultiAlternatives subject = 'Django sending email' body_html = ''' <html> <body> <img src=\"cid:logo.png\" /> <img src=\"https://www.google.com/logos/doodles/2015/googles-new-logo-5078286822539264.3-hp2x.gif\" /> </body> </html> ''' from_email = 'hello@localhost.com' to_email = 'hi@localhost.com' msg = EmailMultiAlternatives ( subject , body_html , from_email = from_email , to = [ to_email ] ) msg . mixed_subtype = 'related' msg . attach_alternative ( body_html , \"text/html\" ) img_dir = 'static' image = 'logo.png file_path = os . path . join ( img_dir , image ) with open ( file_path , 'r' ) as f : img = MIMEImage ( f . read ()) img . add_header ( 'Content-ID' , '< {name} >' . format ( name = image )) img . add_header ( 'Content-Disposition' , 'inline' , filename = image ) msg . attach ( img ) Like above we can send embed and send the images in the django. In the above code we are using the cid for the first email and web url for the second email. It's that simple to send images in the emails.","title":"Sending images in django emails"},{"location":"blog/sending-images-in-django-email/#sending-images-in-django-emails","text":"Images have proven to be one of the most compelling and information-dense media available to marketers today. A good image can communicate emotion, transmit knowledge and get that critical engagement leading to a purchase. Every marketer needs to consider including images across their media, and email is no different. There is, however, a big caveat for images in email: They can be notoriously difficult to work with. If not handled well, embedding images in an email can affect deliverability, engagement and sender reputation. Appearances in a recipient\u2019s inbox also can change from email client to email client. To get around these issues, it\u2019s critical to understand the usable methods for embedding images in emails, as well as their benefits and drawbacks. Senders today primarily have three different methods for embedding images at their disposal: CID tags, inline embedding and linked images. But before using these methods, email marketers should take a close look at how their active recipients behave with current emails. The importance of analyzing recipient behavior before using images cannot be overstated. You will need to know what email clients to design images for, what size is optimal for these email clients, how these clients treat ALT text and how they both do and do not render images for recipients. We can embed images in two ways 1. by using content id and 2. by using web image url. Let's send images in django email. from email.mime.image import MIMEImage from django.core.mail import EmailMultiAlternatives subject = 'Django sending email' body_html = ''' <html> <body> <img src=\"cid:logo.png\" /> <img src=\"https://www.google.com/logos/doodles/2015/googles-new-logo-5078286822539264.3-hp2x.gif\" /> </body> </html> ''' from_email = 'hello@localhost.com' to_email = 'hi@localhost.com' msg = EmailMultiAlternatives ( subject , body_html , from_email = from_email , to = [ to_email ] ) msg . mixed_subtype = 'related' msg . attach_alternative ( body_html , \"text/html\" ) img_dir = 'static' image = 'logo.png file_path = os . path . join ( img_dir , image ) with open ( file_path , 'r' ) as f : img = MIMEImage ( f . read ()) img . add_header ( 'Content-ID' , '< {name} >' . format ( name = image )) img . add_header ( 'Content-Disposition' , 'inline' , filename = image ) msg . attach ( img ) Like above we can send embed and send the images in the django. In the above code we are using the cid for the first email and web url for the second email. It's that simple to send images in the emails.","title":"Sending images in django emails"},{"location":"blog/serializers-in-django-rest-framework-77/","text":"Serializers In Django Rest Framework \u00b6 Serializers in django rest framework are similar to django forms. By using django rest framework serializers we can serialize and deserialize the data. We can also validate the incoming data using django rest framework serializers to maintain the integrity of the data. We can divide the django rest framework serializers into two categories. Normal Serializers It simply validates the data and performs the serialization and de-serialization. For normal serializers we need implement the serializer methods like \"save\" and \"update\". We also need to specify the each and every field of serializer externally and also in the serializer meta class \"fields\" attribute. Model serializers It comes with advanced features like in-built functionality for \"save\", \"update\". Unlike the normal serializers we can simply provide \"fields\" in the serializer meta class and no need to write external fields. In this article we will only practice about the normal serializers. Creating a django rest framework serializer class \u00b6 In django rest framework we use \"Serializer\" as a base class for all the serializers. we import it from \"rest_framework.serializers\" module. Let's create a student serializer class. from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 100 ) last_name = serializers . CharField ( max_length = 100 ) dob = serializers . DateField ( required = False ) college = serializers . CharField ( max_length = 100 ) address = serializers . CharField ( max_length = 100 ) we have created a serializer class for a \"Student\" that takes student information like \"first_name\", \"last_name\", \"dob\" (date of birth) and address. In above serializers we have used serializer fields \"CharField\", \"DateField\" only. We can find many more fields at \"http://www.django-rest-framework.org/api-guide/fields/\" . Every django rest framework serializer takes 2 parameters \"instance\", \"data\" as initializers. Working with django rest framework serializers \u00b6 from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have created the serializer instance with no instance and no data. After, we have validated the serializer against the data. By default every field in the serializer has a validator(i.e field required) . To avoid the field required validator we can specify \"required=False\" in the serializer field. We can validate the serializer by calling the method \" is_valid() \". It will return the boolean(True/False) value. If the serializer is not valid then we can get errors by using the attribute \"errors\". Note: \"errors\" attribute only available after calling the method \" is_valid() \" otherwise serializer will raise the errors. data = { 'first_name' : 'John' , 'last_name' : 'Williams' , 'college' : 'University of Columbia' , 'address' : '1-4h, Columbia' } serializer = StudentSerializer ( data = data ) # check if serializer is valid serializer . is_valid () # output: True # access the validated data serializer . validated_data # OrderedDict([ # ('first_name', 'John'), # ('last_name', 'Williams'), # ('college', 'University of Columbia'), # ('address', '1-4h, Columbia')]) In the above code we provided the serializer with valid data. We validated the serializer with the method \"is_valid()\" and it returned \"True\". It means the provided data is valid. Now, access the validated data from the serializer using the attribute \"validated_data\". Note: \"errors\" attribute only available after calling the method \"is_valid()\" otherwise serializer will raise the errors. Custom validations in django rest serializers \u00b6 we have two types of serializer validators 1.field validation using \"validate_ \" method 2.common validation using \"validate\" method field validation using \"validate_ \" method \u00b6 from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have written custom validator for field \"dob\". The validation method recieves the argument as the value of the field after converting it into a python object. common validation using \"validate\" method \u00b6 from rest_framework import serializers class EventSerializer ( serializers . Serializer ): description = serializers . CharField ( max_length = 100 ) start = serializers . DateTimeField () finish = serializers . DateTimeField () def validate ( self , data ): \"\"\" Check that the start is before the stop. \"\"\" if data [ 'start' ] > data [ 'finish' ]: raise serializers . ValidationError ( \"finish must occur after start\" ) return data # let's test it serializer = EventSerializer ( data = { 'description' : 'desc' , 'start' : '2100-12-12 0:0:0' , 'finish' : '2050-12-03 0:0:0' }) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # {'non_field_errors':[ErrorDetail(string='finish must occur after start',code='invalid')]} In the above code we have writer a common validation method for all the fields instead individual fields. The method receives the data() after converting fields data into equivalent python objects. In the next article we will discuss about django rest framework model serializers Reference: http://www.django-rest-framework.org/tutorial/1-serialization/","title":"Serializers In Django Rest Framework"},{"location":"blog/serializers-in-django-rest-framework-77/#serializers-in-django-rest-framework","text":"Serializers in django rest framework are similar to django forms. By using django rest framework serializers we can serialize and deserialize the data. We can also validate the incoming data using django rest framework serializers to maintain the integrity of the data. We can divide the django rest framework serializers into two categories. Normal Serializers It simply validates the data and performs the serialization and de-serialization. For normal serializers we need implement the serializer methods like \"save\" and \"update\". We also need to specify the each and every field of serializer externally and also in the serializer meta class \"fields\" attribute. Model serializers It comes with advanced features like in-built functionality for \"save\", \"update\". Unlike the normal serializers we can simply provide \"fields\" in the serializer meta class and no need to write external fields. In this article we will only practice about the normal serializers.","title":"Serializers In Django Rest Framework"},{"location":"blog/serializers-in-django-rest-framework-77/#creating-a-django-rest-framework-serializer-class","text":"In django rest framework we use \"Serializer\" as a base class for all the serializers. we import it from \"rest_framework.serializers\" module. Let's create a student serializer class. from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 100 ) last_name = serializers . CharField ( max_length = 100 ) dob = serializers . DateField ( required = False ) college = serializers . CharField ( max_length = 100 ) address = serializers . CharField ( max_length = 100 ) we have created a serializer class for a \"Student\" that takes student information like \"first_name\", \"last_name\", \"dob\" (date of birth) and address. In above serializers we have used serializer fields \"CharField\", \"DateField\" only. We can find many more fields at \"http://www.django-rest-framework.org/api-guide/fields/\" . Every django rest framework serializer takes 2 parameters \"instance\", \"data\" as initializers.","title":"Creating a django rest framework serializer class"},{"location":"blog/serializers-in-django-rest-framework-77/#working-with-django-rest-framework-serializers","text":"from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have created the serializer instance with no instance and no data. After, we have validated the serializer against the data. By default every field in the serializer has a validator(i.e field required) . To avoid the field required validator we can specify \"required=False\" in the serializer field. We can validate the serializer by calling the method \" is_valid() \". It will return the boolean(True/False) value. If the serializer is not valid then we can get errors by using the attribute \"errors\". Note: \"errors\" attribute only available after calling the method \" is_valid() \" otherwise serializer will raise the errors. data = { 'first_name' : 'John' , 'last_name' : 'Williams' , 'college' : 'University of Columbia' , 'address' : '1-4h, Columbia' } serializer = StudentSerializer ( data = data ) # check if serializer is valid serializer . is_valid () # output: True # access the validated data serializer . validated_data # OrderedDict([ # ('first_name', 'John'), # ('last_name', 'Williams'), # ('college', 'University of Columbia'), # ('address', '1-4h, Columbia')]) In the above code we provided the serializer with valid data. We validated the serializer with the method \"is_valid()\" and it returned \"True\". It means the provided data is valid. Now, access the validated data from the serializer using the attribute \"validated_data\". Note: \"errors\" attribute only available after calling the method \"is_valid()\" otherwise serializer will raise the errors.","title":"Working with django rest framework serializers"},{"location":"blog/serializers-in-django-rest-framework-77/#custom-validations-in-django-rest-serializers","text":"we have two types of serializer validators 1.field validation using \"validate_ \" method 2.common validation using \"validate\" method","title":"Custom validations in django rest serializers"},{"location":"blog/serializers-in-django-rest-framework-77/#field-validation-using-validate_-method","text":"from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have written custom validator for field \"dob\". The validation method recieves the argument as the value of the field after converting it into a python object.","title":"field validation using \"validate_\" method"},{"location":"blog/serializers-in-django-rest-framework-77/#common-validation-using-validate-method","text":"from rest_framework import serializers class EventSerializer ( serializers . Serializer ): description = serializers . CharField ( max_length = 100 ) start = serializers . DateTimeField () finish = serializers . DateTimeField () def validate ( self , data ): \"\"\" Check that the start is before the stop. \"\"\" if data [ 'start' ] > data [ 'finish' ]: raise serializers . ValidationError ( \"finish must occur after start\" ) return data # let's test it serializer = EventSerializer ( data = { 'description' : 'desc' , 'start' : '2100-12-12 0:0:0' , 'finish' : '2050-12-03 0:0:0' }) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # {'non_field_errors':[ErrorDetail(string='finish must occur after start',code='invalid')]} In the above code we have writer a common validation method for all the fields instead individual fields. The method receives the data() after converting fields data into equivalent python objects. In the next article we will discuss about django rest framework model serializers Reference: http://www.django-rest-framework.org/tutorial/1-serialization/","title":"common validation using \"validate\" method"},{"location":"blog/serverless-add-aws-lambda-to-existing-vpc/","text":"Serverless add AWS lambda to an existing VPC \u00b6 While developing the serverless applications we may need to access the resources which are in VPC. If we are using AWS Lambda functions then we need to add the lambda function to the VPC . To get started with AWS VPC visit the link https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html . Follow the instructions to create the VPC and it's components. How to add lambda function to AWS VPC in serverless \u00b6 we can add lambda function to VPC by adding a vpc object property in serverless.yaml file. Let's see an example configurations below. VPC configuration to a specific function \u00b6 # serverless.yml service : service-name provider : aws functions : hello : handler : handler.hello vpc : securityGroupIds : - securityGroupId1 - securityGroupId2 subnetIds : - subnetId1 - subnetId2 VPC configuration to all functions in the service \u00b6 # serverless.yml service : service-name provider : name : aws vpc : securityGroupIds : - securityGroupId1 - securityGroupId2 subnetIds : - subnetId1 - subnetId2 functions : hello : handler : handler.hello users : handler : handler.users If we want to override the VPC configuration for one of the functions then we can simple override the property vpc in that specific function. IAM role permissions required for VPC access \u00b6 Lambda function requires following IAM role permissions ec2:CreateNetworkInterface ec2:DescribeNetworkInterfaces ec2:DeleteNetworkInterface The final serverless.yml looks something like below. # serverless.yml service : service-name provider : aws functions : hello : handler : handler.hello iamRoleStatements : - Effect : \"Allow\" Action : - ec2:CreateNetworkInterface - ec2:DescribeNetworkInterfaces - ec2:DeleteNetworkInterface Resource : \"*\" vpc : securityGroupIds : - securityGroupId1 - securityGroupId2 subnetIds : - subnetId1 - subnetId2 Note: It requires plugin serverless-iam-roles-per-function References: https://www.serverless.com/framework/docs/providers/aws/guide/functions","title":"Serverless add AWS lambda to an existing VPC"},{"location":"blog/serverless-add-aws-lambda-to-existing-vpc/#serverless-add-aws-lambda-to-an-existing-vpc","text":"While developing the serverless applications we may need to access the resources which are in VPC. If we are using AWS Lambda functions then we need to add the lambda function to the VPC . To get started with AWS VPC visit the link https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html . Follow the instructions to create the VPC and it's components.","title":"Serverless add AWS lambda to an existing VPC"},{"location":"blog/serverless-add-aws-lambda-to-existing-vpc/#how-to-add-lambda-function-to-aws-vpc-in-serverless","text":"we can add lambda function to VPC by adding a vpc object property in serverless.yaml file. Let's see an example configurations below.","title":"How to add lambda function to AWS VPC in serverless"},{"location":"blog/serverless-add-aws-lambda-to-existing-vpc/#vpc-configuration-to-a-specific-function","text":"# serverless.yml service : service-name provider : aws functions : hello : handler : handler.hello vpc : securityGroupIds : - securityGroupId1 - securityGroupId2 subnetIds : - subnetId1 - subnetId2","title":"VPC configuration to a specific function"},{"location":"blog/serverless-add-aws-lambda-to-existing-vpc/#vpc-configuration-to-all-functions-in-the-service","text":"# serverless.yml service : service-name provider : name : aws vpc : securityGroupIds : - securityGroupId1 - securityGroupId2 subnetIds : - subnetId1 - subnetId2 functions : hello : handler : handler.hello users : handler : handler.users If we want to override the VPC configuration for one of the functions then we can simple override the property vpc in that specific function.","title":"VPC configuration to all functions in the service"},{"location":"blog/serverless-add-aws-lambda-to-existing-vpc/#iam-role-permissions-required-for-vpc-access","text":"Lambda function requires following IAM role permissions ec2:CreateNetworkInterface ec2:DescribeNetworkInterfaces ec2:DeleteNetworkInterface The final serverless.yml looks something like below. # serverless.yml service : service-name provider : aws functions : hello : handler : handler.hello iamRoleStatements : - Effect : \"Allow\" Action : - ec2:CreateNetworkInterface - ec2:DescribeNetworkInterfaces - ec2:DeleteNetworkInterface Resource : \"*\" vpc : securityGroupIds : - securityGroupId1 - securityGroupId2 subnetIds : - subnetId1 - subnetId2 Note: It requires plugin serverless-iam-roles-per-function References: https://www.serverless.com/framework/docs/providers/aws/guide/functions","title":"IAM role permissions required for VPC access"},{"location":"blog/setting-up-django-development-environment-25/","text":"Setting Up Django Development Environment \u00b6 Django Web Framework is becoming very popular because of its easiness to use and support for rapid development with good security and reliability. Django developers has a good demand in the industry. Before we are diving into django we need to install \"python 3.x.x\" in our OS(operating systems). Django is no longer providing the support for python 2.x.x. The last version of django support for python 2.x.x is Django 1.11. So, lets install python3. Installing Python 3 on Ubuntu(Linux) \u00b6 If you are using latest version of ubuntu or ubuntu 16.04 then install python3.6(stable version) with below commands sudo apt-get update sudo apt-get install python3.6 python3 --version If you are using windows then you need to download the latest python from the link \"https://www.python.org/downloads/windows/\" and choose latest version of python (python3.6)and install it. After installing python3.6 we can find the installation files at C:\\Python36 and when we install python packages that will install at C:\\Python36\\Scripts. We have installed the python but we do not access it with command line(cmd). In order to make python3 available on command line(cmd) we have to add below code to system path. C: \\P ython36 \\; C: \\P ython36 \\S cripts \\; we can do this by running the below command in command line(cmd). Replace the \"User\" with your username. [ Environment ] ::SetEnvironmentVariable ( \"Path\" , \" $env :Path;C:\\Python36\\;C:\\Python36\\Scripts\\\", \" User \") To confirm python setup open the command line(cmd) and type python3 then we can access python shell. Installing Python 3 on Mac OS \u00b6 To install python 3 on Mac OS open terminal and run the below commands. If you do not install brew then install brew . brew install python3 python3 --version We have completed the installation of python. Now, we should know how to work with virtualenv and pip(Python Package Index). We work with different projects in the future. For every project the requirements may change and for different projects we need to use different python packages. So, installing all the requirements systemwide will slowdown the system and it's not at all a good idea. To avoid this situation we use different python virtual environment for each and every project. Let's see the installation process of virtualenv in different operating systems. Installing virtualenv in Ubuntu \u00b6 Install pip on ubuntu and learn its usage Install virtualenv on ubuntu and learn its usage Installing virtualenv in Windows Install pip on windows and learn its usage Install virtualenv on windows and learn its usage Installing virtualenv in Mac OS http://www.marinamele.com/2014/07/install-python3-on-mac-os-x-and-use-virtualenv-and-virtualenvwrapper.htm Follow above links to install virtualenv. Now, it's time to install a best text editor Sublime Text. Install sublime text editor \u00b6 To install sublime text editor visit https://www.sublimetext.com/3 and download it based on your operating system and install it. sublime text has many plugins available which help in django development. We have installed all the required packages/softwares to develop a django application. So, Let's create a sample app. Create new folder named \"my_first_app\" and create a virtualenv with python3 named \"env3\" and then activate the env. Now, install the django using the *pip *and create a sample project \"myproject\" with command \"django-admin startproject myproject\" then run the development server with command \"python manage.py runserver\". Now, open the browser and access \"127.0.0.1:8000\" and see congratulations page. Basic process in to create django project in Ubuntu \u00b6 $ mkdir my_first_app $ cd my_first_app $ virtualenv -p python3 env3 $ source ./env3/bin/activate ( env3 ) $ pip install django ( env3 ) $ django-admin startproject myproject ( env3 ) $ cd myproject ( env3 ) $ python manage.py runserver 8000 Open browser and access http://127.0.0.1:8000/ to see congrats page. References: https://www.djangoproject.com/start/ https://pypi.python.org/pypi http://docs.python-guide.org/en/latest/dev/virtualenvs/","title":"Setting Up Django Development Environment"},{"location":"blog/setting-up-django-development-environment-25/#setting-up-django-development-environment","text":"Django Web Framework is becoming very popular because of its easiness to use and support for rapid development with good security and reliability. Django developers has a good demand in the industry. Before we are diving into django we need to install \"python 3.x.x\" in our OS(operating systems). Django is no longer providing the support for python 2.x.x. The last version of django support for python 2.x.x is Django 1.11. So, lets install python3.","title":"Setting Up Django Development Environment"},{"location":"blog/setting-up-django-development-environment-25/#installing-python-3-on-ubuntulinux","text":"If you are using latest version of ubuntu or ubuntu 16.04 then install python3.6(stable version) with below commands sudo apt-get update sudo apt-get install python3.6 python3 --version If you are using windows then you need to download the latest python from the link \"https://www.python.org/downloads/windows/\" and choose latest version of python (python3.6)and install it. After installing python3.6 we can find the installation files at C:\\Python36 and when we install python packages that will install at C:\\Python36\\Scripts. We have installed the python but we do not access it with command line(cmd). In order to make python3 available on command line(cmd) we have to add below code to system path. C: \\P ython36 \\; C: \\P ython36 \\S cripts \\; we can do this by running the below command in command line(cmd). Replace the \"User\" with your username. [ Environment ] ::SetEnvironmentVariable ( \"Path\" , \" $env :Path;C:\\Python36\\;C:\\Python36\\Scripts\\\", \" User \") To confirm python setup open the command line(cmd) and type python3 then we can access python shell.","title":"Installing Python 3 on Ubuntu(Linux)"},{"location":"blog/setting-up-django-development-environment-25/#installing-python-3-on-mac-os","text":"To install python 3 on Mac OS open terminal and run the below commands. If you do not install brew then install brew . brew install python3 python3 --version We have completed the installation of python. Now, we should know how to work with virtualenv and pip(Python Package Index). We work with different projects in the future. For every project the requirements may change and for different projects we need to use different python packages. So, installing all the requirements systemwide will slowdown the system and it's not at all a good idea. To avoid this situation we use different python virtual environment for each and every project. Let's see the installation process of virtualenv in different operating systems.","title":"Installing Python 3 on Mac OS"},{"location":"blog/setting-up-django-development-environment-25/#installing-virtualenv-in-ubuntu","text":"Install pip on ubuntu and learn its usage Install virtualenv on ubuntu and learn its usage Installing virtualenv in Windows Install pip on windows and learn its usage Install virtualenv on windows and learn its usage Installing virtualenv in Mac OS http://www.marinamele.com/2014/07/install-python3-on-mac-os-x-and-use-virtualenv-and-virtualenvwrapper.htm Follow above links to install virtualenv. Now, it's time to install a best text editor Sublime Text.","title":"Installing virtualenv in Ubuntu"},{"location":"blog/setting-up-django-development-environment-25/#install-sublime-text-editor","text":"To install sublime text editor visit https://www.sublimetext.com/3 and download it based on your operating system and install it. sublime text has many plugins available which help in django development. We have installed all the required packages/softwares to develop a django application. So, Let's create a sample app. Create new folder named \"my_first_app\" and create a virtualenv with python3 named \"env3\" and then activate the env. Now, install the django using the *pip *and create a sample project \"myproject\" with command \"django-admin startproject myproject\" then run the development server with command \"python manage.py runserver\". Now, open the browser and access \"127.0.0.1:8000\" and see congratulations page.","title":"Install sublime text editor"},{"location":"blog/setting-up-django-development-environment-25/#basic-process-in-to-create-django-project-in-ubuntu","text":"$ mkdir my_first_app $ cd my_first_app $ virtualenv -p python3 env3 $ source ./env3/bin/activate ( env3 ) $ pip install django ( env3 ) $ django-admin startproject myproject ( env3 ) $ cd myproject ( env3 ) $ python manage.py runserver 8000 Open browser and access http://127.0.0.1:8000/ to see congrats page. References: https://www.djangoproject.com/start/ https://pypi.python.org/pypi http://docs.python-guide.org/en/latest/dev/virtualenvs/","title":"Basic process in to create django project in Ubuntu"},{"location":"blog/signup-sign-in-using-facebook-django-application-9/","text":"Signup Or Sign-In Using Facebook To Django Application \u00b6 Nowadays most of the users are having the facebook account. Registration/Login will take the time fill the form and submit to create or login to our website. Adding the functionality to login/signup with facebook makes it very easy to login or to register to our website. There are many*third party django packages* are available to add facebook signup or facebook login to our django application . But, third-party packages will also provides the additional functionality that is not required for us. In this article we going to add the login with facebook or register with facebook functionality without using the third-party django packages. Login to Facebook developers account \"https://developers.facebook.com/\" . After login goto Facebook Apps page by visiting the link \" https://developers.facebook.com/apps/ \" there you can find the button/link with name \"Add a new app\", click on it. It will ask for App name or Display name and contact email. After filling the details click on the button \"create app id\" . On succesfull creation it will redirect us to products page. In products page we can find different products like Analytics, Messanger, Webhooks, Facebook Login, etc. We are implementing the facebook login so, choose the facebook login by clicking on button \"setup\". It will ask for the type of our application (iOS, Android, WWW, etc). We are implementing it on django web application so choose the web(WWW). After choosing the web we have follow the below steps. 1.Tell Us about Your Website 2.Set Up the Facebook SDK for Javascript 3. Check Login Status 4. Add the Facebook Login Button 5. Next Steps After finishing the above steps click on the button/link settings which can be find in left side menu. It will show the app details like App ID, App Secret, App Domain, etc. Update the details and copy the App ID, App Secret update these in \"settings.py\" file. FB_APP_ID = 'xxxxxxxxxxxxxxxxxxxx' FB_APP_SECRET = 'xxxxxxxxxxxxxxxxxxxxxx' Lets talk about the authentication process with facebook login Our App <===> Facebook App <===> Facebook Servers Lets start with very basic flow, when user clicks on the login with facebook button/link we redirect the user to facebook login page, after successful completion of the login facebook will returns to our application. Now we will implement it in our django application with the below code. urls.py from django.conf.urls import url from . import views urlpatterns = [ url ( r '^facebook-login/$' , views . facebook_login , name = \"facebook_login\" ), ] views.py from datetime import datetime from urllib import urlencode from django.conf import settings from django.contrib import messages from app.models import User def facebook_login ( request ): redirect_uri = \" %s :// %s%s \" % ( request . scheme , request . get_host (), reverse ( 'app:facebook_login' ) ) if ( 'code' in request . GET ): code = request . GET . get ( 'code' ) url = 'https://graph.facebook.com/v2.10/oauth/access_token' params = { 'client_id' : settings . FB_APP_ID , 'client_secret' : settings . FB_APP_SECRET , 'code' : code , 'redirect_uri' : redirect_uri , } response = requests . get ( url , params = params ) params = response . json () params . update ({ 'fields' : 'id,last_name,first_name,picture,birthday,email,gender' }) url = 'https://graph.facebook.com/me' user_data = requests . get ( url , params = params ) . json () email = user_data . get ( 'email' ) if email : user , _ = User . objects . get_or_create ( email = email , username = email ) gender = user_data . get ( 'gender' , '' ) . lower () dob = user_data . get ( 'birthday' ) if gender == 'male' : gender = 'M' elif gender == 'female' : gender = 'F' else : gender = 'O' data = { 'first_name' : user_data . get ( 'first_name' ), 'last_name' : user_data . get ( 'last_name' ), 'fb_avatar' : user_data . get ( 'picture' , {}) . get ( 'data' , {}) . get ( 'url' ), 'gender' : gender , 'dob' : datetime . strptime ( dob , \"%m/ %d /%Y\" ) if dob else None , 'is_active' : True } user . __dict__ . update ( data ) user . save () user . backend = settings . AUTHENTICATION_BACKENDS [ 0 ] login ( request , user ) else : messages . error ( request , 'Unable to login with Facebook Please try again' ) return redirect ( '/' ) else : url = \"https://graph.facebook.com/oauth/authorize\" params = { 'client_id' : settings . FB_APP_ID , 'redirect_uri' : redirect_uri , 'scope' : 'email,public_profile,user_birthday' } url += '?' + urlencode ( params ) return redirect ( url ) when user clicks on the login with facebook button we redirect request to facebook with facebook app id, redirect uri for response, scope is to authorize to get the resource. After successful login facebook will return response to our redirect uri with access token code or authorization code. By using the authorization code we send the request to facebook to get the resources from the facebook. In above code I have requested the resources \"id,last_name,first_name,picture,birthday,email,gender\". After getting the resource if user is not existed in our database then we create and get a new user otherwise we simply get the user from db. Now, we have user object so, we make the user login and redirect user to home page(in my case). References: https://developers.facebook.com/docs/graph-api/ https://developers.google.com/identity/protocols/OAuth2","title":"Signup Or Sign-In Using Facebook To Django Application"},{"location":"blog/signup-sign-in-using-facebook-django-application-9/#signup-or-sign-in-using-facebook-to-django-application","text":"Nowadays most of the users are having the facebook account. Registration/Login will take the time fill the form and submit to create or login to our website. Adding the functionality to login/signup with facebook makes it very easy to login or to register to our website. There are many*third party django packages* are available to add facebook signup or facebook login to our django application . But, third-party packages will also provides the additional functionality that is not required for us. In this article we going to add the login with facebook or register with facebook functionality without using the third-party django packages. Login to Facebook developers account \"https://developers.facebook.com/\" . After login goto Facebook Apps page by visiting the link \" https://developers.facebook.com/apps/ \" there you can find the button/link with name \"Add a new app\", click on it. It will ask for App name or Display name and contact email. After filling the details click on the button \"create app id\" . On succesfull creation it will redirect us to products page. In products page we can find different products like Analytics, Messanger, Webhooks, Facebook Login, etc. We are implementing the facebook login so, choose the facebook login by clicking on button \"setup\". It will ask for the type of our application (iOS, Android, WWW, etc). We are implementing it on django web application so choose the web(WWW). After choosing the web we have follow the below steps. 1.Tell Us about Your Website 2.Set Up the Facebook SDK for Javascript 3. Check Login Status 4. Add the Facebook Login Button 5. Next Steps After finishing the above steps click on the button/link settings which can be find in left side menu. It will show the app details like App ID, App Secret, App Domain, etc. Update the details and copy the App ID, App Secret update these in \"settings.py\" file. FB_APP_ID = 'xxxxxxxxxxxxxxxxxxxx' FB_APP_SECRET = 'xxxxxxxxxxxxxxxxxxxxxx' Lets talk about the authentication process with facebook login Our App <===> Facebook App <===> Facebook Servers Lets start with very basic flow, when user clicks on the login with facebook button/link we redirect the user to facebook login page, after successful completion of the login facebook will returns to our application. Now we will implement it in our django application with the below code. urls.py from django.conf.urls import url from . import views urlpatterns = [ url ( r '^facebook-login/$' , views . facebook_login , name = \"facebook_login\" ), ] views.py from datetime import datetime from urllib import urlencode from django.conf import settings from django.contrib import messages from app.models import User def facebook_login ( request ): redirect_uri = \" %s :// %s%s \" % ( request . scheme , request . get_host (), reverse ( 'app:facebook_login' ) ) if ( 'code' in request . GET ): code = request . GET . get ( 'code' ) url = 'https://graph.facebook.com/v2.10/oauth/access_token' params = { 'client_id' : settings . FB_APP_ID , 'client_secret' : settings . FB_APP_SECRET , 'code' : code , 'redirect_uri' : redirect_uri , } response = requests . get ( url , params = params ) params = response . json () params . update ({ 'fields' : 'id,last_name,first_name,picture,birthday,email,gender' }) url = 'https://graph.facebook.com/me' user_data = requests . get ( url , params = params ) . json () email = user_data . get ( 'email' ) if email : user , _ = User . objects . get_or_create ( email = email , username = email ) gender = user_data . get ( 'gender' , '' ) . lower () dob = user_data . get ( 'birthday' ) if gender == 'male' : gender = 'M' elif gender == 'female' : gender = 'F' else : gender = 'O' data = { 'first_name' : user_data . get ( 'first_name' ), 'last_name' : user_data . get ( 'last_name' ), 'fb_avatar' : user_data . get ( 'picture' , {}) . get ( 'data' , {}) . get ( 'url' ), 'gender' : gender , 'dob' : datetime . strptime ( dob , \"%m/ %d /%Y\" ) if dob else None , 'is_active' : True } user . __dict__ . update ( data ) user . save () user . backend = settings . AUTHENTICATION_BACKENDS [ 0 ] login ( request , user ) else : messages . error ( request , 'Unable to login with Facebook Please try again' ) return redirect ( '/' ) else : url = \"https://graph.facebook.com/oauth/authorize\" params = { 'client_id' : settings . FB_APP_ID , 'redirect_uri' : redirect_uri , 'scope' : 'email,public_profile,user_birthday' } url += '?' + urlencode ( params ) return redirect ( url ) when user clicks on the login with facebook button we redirect request to facebook with facebook app id, redirect uri for response, scope is to authorize to get the resource. After successful login facebook will return response to our redirect uri with access token code or authorization code. By using the authorization code we send the request to facebook to get the resources from the facebook. In above code I have requested the resources \"id,last_name,first_name,picture,birthday,email,gender\". After getting the resource if user is not existed in our database then we create and get a new user otherwise we simply get the user from db. Now, we have user object so, we make the user login and redirect user to home page(in my case). References: https://developers.facebook.com/docs/graph-api/ https://developers.google.com/identity/protocols/OAuth2","title":"Signup Or Sign-In Using Facebook To Django Application"},{"location":"blog/signup-sign-in-using-google-to-django-application-8/","text":"Signup Or Sign-In Using Google To Django Application \u00b6 Nowadays most of the users are having the Gmail account. Registration/Login will take the time fill the form and submit to create or login to our website. Adding the functionality to login/signup with google makes it very easy to login or to register to our website. There are many*third party django packages* are available to add google signup or google login to our django application . But, third-party packages will also provides the additional functionality that is not required for us If you only need just google login and registration. In this article we going to add the login with google or register with google functionality without using the third-party django packages. Login to Google developers account \"https://console.developers.google.com/apis/dashboard\" . After login, look for \"select a Project\" dropdown it's visible only if you do not have any projects created, otherwise dropdown automatically selects one of the available projects. If available choose the project or create new project. After choosing the project click on the link credentials there you can find the create credentials dropdown box which is having the options like API key, Oauth client Id, etc., click on \"Oauth client Id\". It will ask you for application type then choose \"Web Application\" because we are working with web application. After choosing it, It will ask you for \"Application Name\", \"Authorized JavaScript origins\", \"Authorized redirect URIs\". Enter you application name for , For \"Authorized JavaScript origins\" enter value of your domain name if you are in production otherwise enter \" https://learnbatta.com \" (default for django dev app) and for \"Authorized redirect URIs\" enter the callback url in my case it is \" https://learnbatta.com/google-login/ \". Google will post the data to us when user accept/reject our application to use user's google data. After click on save button It will produce \"client id\" and \"client secret\" which will be used to tell the google that we are authorized to use google apis, save \"client id\" and \"client secret\" in a text file, because, we will use it. Update the \"client id\" and \"client secret\" in \"settings.py\" file. GP_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxx' GP_CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxxx' Lets talk about the authentication process with Gmail login Our App <===> Gmail App <===> Gmail Servers Lets start with very basic flow, when user clicks on the login with google button/link we redirect the user to gmail and asks for user's consent. After, google redirects the response to our application. Now we will implement it in our django application with the below code. urls.py from django.conf.urls import url from . import views urlpatterns = [ url ( r '^google-login/$' , views . google_login , name = \"google_login\" ), ] views.py from datetime import datetime from urllib import urlencode from django.conf import settings from django.contrib import messages from app.models import User def google_login ( request ): redirect_uri = \" %s :// %s%s \" % ( request . scheme , request . get_host (), reverse ( 'pain:google_login' ) ) if ( 'code' in request . GET ): params = { 'grant_type' : 'authorization_code' , 'code' : request . GET . get ( 'code' ), 'redirect_uri' : redirect_uri , 'client_id' : settings . GP_CLIENT_ID , 'client_secret' : settings . GP_CLIENT_SECRET } url = 'https://accounts.google.com/o/oauth2/token' response = requests . post ( url , data = params ) url = 'https://www.googleapis.com/oauth2/v1/userinfo' access_token = response . json () . get ( 'access_token' ) response = requests . get ( url , params = { 'access_token' : access_token }) user_data = response . json () email = user_data . get ( 'email' ) if email : user , _ = User . objects . get_or_create ( email = email , username = email ) gender = user_data . get ( 'gender' , '' ) . lower () if gender == 'male' : gender = 'M' elif gender == 'female' : gender = 'F' else : gender = 'O' data = { 'first_name' : user_data . get ( 'name' , '' ) . split ()[ 0 ], 'last_name' : user_data . get ( 'family_name' ), 'google_avatar' : user_data . get ( 'picture' ), 'gender' : gender , 'is_active' : True } user . __dict__ . update ( data ) user . save () user . backend = settings . AUTHENTICATION_BACKENDS [ 0 ] login ( request , user ) else : messages . error ( request , 'Unable to login with Gmail Please try again' ) return redirect ( '/' ) else : url = \"https://accounts.google.com/o/oauth2/auth?client_id= %s &response_type=code&scope= %s &redirect_uri= %s &state=google\" scope = [ \"https://www.googleapis.com/auth/userinfo.profile\" , \"https://www.googleapis.com/auth/userinfo.email\" ] scope = \" \" . join ( scope ) url = url % ( settings . GP_CLIENT_ID , scope , redirect_uri ) return redirect ( url ) when user clicks on the login with google button we redirect request to google/gmail with google client id, redirect uri for response, scope is to authorize to get the resource. After successful login google will return response to our redirect uri with access token code or authorization code. By using the authorization code we send the request to google to get the user resources from the google api's. In above code I have requested the resources \"full name, family name, user profile picture and gender\". After getting the resource if user is not existed in our database then we create and get a new user otherwise we simply get the user from db. Now, we have user object so, we make the user login and redirect user to home page(in my case). References: https://developers.google.com/identity/protocols/OAuth2","title":"Signup Or Sign-In Using Google To Django Application"},{"location":"blog/signup-sign-in-using-google-to-django-application-8/#signup-or-sign-in-using-google-to-django-application","text":"Nowadays most of the users are having the Gmail account. Registration/Login will take the time fill the form and submit to create or login to our website. Adding the functionality to login/signup with google makes it very easy to login or to register to our website. There are many*third party django packages* are available to add google signup or google login to our django application . But, third-party packages will also provides the additional functionality that is not required for us If you only need just google login and registration. In this article we going to add the login with google or register with google functionality without using the third-party django packages. Login to Google developers account \"https://console.developers.google.com/apis/dashboard\" . After login, look for \"select a Project\" dropdown it's visible only if you do not have any projects created, otherwise dropdown automatically selects one of the available projects. If available choose the project or create new project. After choosing the project click on the link credentials there you can find the create credentials dropdown box which is having the options like API key, Oauth client Id, etc., click on \"Oauth client Id\". It will ask you for application type then choose \"Web Application\" because we are working with web application. After choosing it, It will ask you for \"Application Name\", \"Authorized JavaScript origins\", \"Authorized redirect URIs\". Enter you application name for , For \"Authorized JavaScript origins\" enter value of your domain name if you are in production otherwise enter \" https://learnbatta.com \" (default for django dev app) and for \"Authorized redirect URIs\" enter the callback url in my case it is \" https://learnbatta.com/google-login/ \". Google will post the data to us when user accept/reject our application to use user's google data. After click on save button It will produce \"client id\" and \"client secret\" which will be used to tell the google that we are authorized to use google apis, save \"client id\" and \"client secret\" in a text file, because, we will use it. Update the \"client id\" and \"client secret\" in \"settings.py\" file. GP_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxx' GP_CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxxx' Lets talk about the authentication process with Gmail login Our App <===> Gmail App <===> Gmail Servers Lets start with very basic flow, when user clicks on the login with google button/link we redirect the user to gmail and asks for user's consent. After, google redirects the response to our application. Now we will implement it in our django application with the below code. urls.py from django.conf.urls import url from . import views urlpatterns = [ url ( r '^google-login/$' , views . google_login , name = \"google_login\" ), ] views.py from datetime import datetime from urllib import urlencode from django.conf import settings from django.contrib import messages from app.models import User def google_login ( request ): redirect_uri = \" %s :// %s%s \" % ( request . scheme , request . get_host (), reverse ( 'pain:google_login' ) ) if ( 'code' in request . GET ): params = { 'grant_type' : 'authorization_code' , 'code' : request . GET . get ( 'code' ), 'redirect_uri' : redirect_uri , 'client_id' : settings . GP_CLIENT_ID , 'client_secret' : settings . GP_CLIENT_SECRET } url = 'https://accounts.google.com/o/oauth2/token' response = requests . post ( url , data = params ) url = 'https://www.googleapis.com/oauth2/v1/userinfo' access_token = response . json () . get ( 'access_token' ) response = requests . get ( url , params = { 'access_token' : access_token }) user_data = response . json () email = user_data . get ( 'email' ) if email : user , _ = User . objects . get_or_create ( email = email , username = email ) gender = user_data . get ( 'gender' , '' ) . lower () if gender == 'male' : gender = 'M' elif gender == 'female' : gender = 'F' else : gender = 'O' data = { 'first_name' : user_data . get ( 'name' , '' ) . split ()[ 0 ], 'last_name' : user_data . get ( 'family_name' ), 'google_avatar' : user_data . get ( 'picture' ), 'gender' : gender , 'is_active' : True } user . __dict__ . update ( data ) user . save () user . backend = settings . AUTHENTICATION_BACKENDS [ 0 ] login ( request , user ) else : messages . error ( request , 'Unable to login with Gmail Please try again' ) return redirect ( '/' ) else : url = \"https://accounts.google.com/o/oauth2/auth?client_id= %s &response_type=code&scope= %s &redirect_uri= %s &state=google\" scope = [ \"https://www.googleapis.com/auth/userinfo.profile\" , \"https://www.googleapis.com/auth/userinfo.email\" ] scope = \" \" . join ( scope ) url = url % ( settings . GP_CLIENT_ID , scope , redirect_uri ) return redirect ( url ) when user clicks on the login with google button we redirect request to google/gmail with google client id, redirect uri for response, scope is to authorize to get the resource. After successful login google will return response to our redirect uri with access token code or authorization code. By using the authorization code we send the request to google to get the user resources from the google api's. In above code I have requested the resources \"full name, family name, user profile picture and gender\". After getting the resource if user is not existed in our database then we create and get a new user otherwise we simply get the user from db. Now, we have user object so, we make the user login and redirect user to home page(in my case). References: https://developers.google.com/identity/protocols/OAuth2","title":"Signup Or Sign-In Using Google To Django Application"},{"location":"blog/solid-principles-oops-python/","text":"SOLID Principles in Python \u00b6 The SOLID principles are: SRP - Single-Responsibility Principle OCP - The Open-Closed Principle LSP - Liskov Substitution Principle ISP - Interface Segregation Principle DIP - Dependency inversion Principle SOLID principles are the building blocks of the Class design Single-responsibility principle(SRP) \u00b6 Every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility. Let's see a simple example class User : def create_user ( self , username , password , email ): print ( \"registered user in db\" ) def send_email ( self , subject , to_email ): print ( \"email sent\" ) def log_error ( self , error ): print ( \"log:\" , error ) def register_user ( self , username , password , email ): try : self . create_user ( username , password , email ) self . send_email ( \"user registered\" , email ) except Exception : self . log_error ( \"error in user register\" ) if __name__ == '__main__' : user = User () user . register_user ( \"anji\" , \"secret\" , \"anji@example.com\" ) In above class, we can see the register_user , login_user , send_email and log_error total of 4 responsibilities. The class should only have the single responsibility i.e user realted. But, it also have sending email and logging an error functionalities. so, it should be separated and moved to classes like Email and ErrorLog . Let's re-write the code with single responsibility. class UserDB : def create_user ( self , username , password , email ): print ( \"registered user in db\" ) class Email : def send_email ( self , subject , to_email ): print ( \"email sent\" ) class ErrorLog : def log_error ( self , error ): print ( \"log:\" , error ) class User : def register_user ( self , username , password , email ): try : user_db = UserDB () user_db . create_user ( username , password , email ) email_server = Email () email_server . send_email ( \"user registered\" , email ) except Exception : logger = ErrorLog () logger . log_error ( \"error in user register\" ) if __name__ == '__main__' : user = User () user . register_user ( \"anji\" , \"secret\" , \"anji@example.com\" ) After, implementing the Single Responsibility Principle we can see that the code more readable and maintainable now. Let's say if want to add a new feature to update_user which updates the user info to the database. We can simply add the method to UserDB class. Because, it's related to database. The client class User will have a new method called update_user_info to use it. Open\u2013closed principle(OCP) \u00b6 Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification Let's check out the below example. class Calculator : def add ( self , a , b ): return a + b def sub ( self , a , b ): return a - b def mul ( self , a , b ): return a * b def div ( self , a , b ): return a / b In the above code, we have a class Calculator which performs the basic math operations like addition , subtraction , multiplication and division . If we want to add scientific math operations like sin , cos , tan then we do not add these methods in the same class. As per open-closed principle, we do not want to modify the existsing class but we can inherit the class and add the scientific math operations to the inherited class i.e ScientificCalculator import math class ScientificCalculator ( Calculator ): def sin ( self , value ): return math . sin ( value ) def cos ( self , value ): return math . cos ( value ) def tan ( self , value ): return math . tan ( value ) If we want to implement the business calculator then we can use the simpilar open-closed principle and solve it using class inheritance. Let's see the code. class BusinessCalculator ( Calculator ): def future_value ( self , pv , r , n ): return pv * ( 1 + r ) ** n def monthly_payment ( self , p , r , n ): return p * ( r * ( 1 + r ) ** n ) / ((( 1 + r ) ** n ) - 1 ) For ScientificCalculator and BusinessCalculator we did not modify the existing code but we have used it's functionality and implemented the new feature requirements. so, the code satisfies the open-closed principle. In the future, If we get any requirement related to business then we can only modify the BusinessCalculator . so, it won't have an effect on the other two classes. Liskov substitution principle \u00b6 Derived classes must be usable through the base class interface , without the need for the user to know the difference. \u2014Barbara Liskov If S is a subtype of T, then objects of type T may be replaced with objects of the S \u2014Barbara Liskov In simple words, Let's say we have a abstract class with 4 methods and 3 different classes are inheriting the abstract class. Then we should be able to access the methods abstract class without knowing the actual class that implemented the method. Let's use the classic example of shapes. import math from abc import ABC , abstractmethod class Shape ( ABC ): @abstractmethod def calculate_area ( self ): pass @abstractmethod def calculate_perimeter ( self ): pass class Rectangle ( Shape ): def __init__ ( self , width , height ): self . width = width self . height = height def calculate_area ( self ): return self . width * self . height def calculate_perimeter ( self ): return 2 * ( self . width + self . height ) class Square ( Rectangle ): def __init__ ( self , side ): super () . __init__ ( side , side ) def calculate_perimeter ( self ): return 4 * self . width class Circle ( Shape ): def __init__ ( self , radius ): self . radius = radius def calculate_area ( self ): return math . pi * ( self . radius ** 2 ) def calculate_perimeter ( self ): return 2 * math . pi * self . radius def print_shape_info ( shape : Shape ): data = { \"name\" : shape . __class__ . __name__ , \"area\" : shape . calculate_area (), \"perimeter\" : shape . calculate_perimeter (), } print ( data ) if __name__ == '__main__' : shapes = [ Rectangle ( 10 , 15 ), Square ( 8 ), Circle ( 12 ), ] for shape in shapes : print_shape_info ( shape ) Output: {'name': 'Rectangle', 'area': 150, 'perimeter': 50} {'name': 'Square', 'area': 64, 'perimeter': 32} {'name': 'Circle', 'area': 452.3893421169302, 'perimeter': 75.39822368615503} The function print_shape_info does not know the infomation about the implemeted class. It just know the abstract class. As per the Liskov substitution principle we can able to access the methods of Shape in all of it's chil classes. Interface Segregation Principle(ISP) \u00b6 Interface segregation principle (ISP) states that no code should be forced to depend on methods it does not use.ISP splits interfaces that are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. Let's consider the code below. from abc import ABC , abstractmethod class Animal ( ABC ): @abstractmethod def eat ( self ): pass @abstractmethod def walk ( self ): pass @abstractmethod def swim ( self ): pass @abstractmethod def fly ( self ): pass class Cat ( Animal ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): raise NotImplemented def fly ( self ): raise NotImplemented class Duck ( Animal ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): return True def fly ( self ): raise NotImplemented class Pigeon ( Animal ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): raise NotImplemented def fly ( self ): return True In the above code the class Animal is inherited by classes Cat , Duck , Pigeon . But, these classes do not require all methods from the Animal class. but, It's forcing these classes to implement the methods which are not required. It's violating the Interface Segregation Principle(ISP) . To implement fix this issue we seperate out the non-common methods to new classses SwimAbility , FlyAbility like below code. from abc import ABC , abstractmethod class Animal ( ABC ): @abstractmethod def eat ( self ): pass @abstractmethod def walk ( self ): pass class SwimAbility ( ABC ): @abstractmethod def swim ( self ): pass class FlyAbility ( ABC ): @abstractmethod def fly ( self ): pass class Cat ( Animal ): def eat ( self ): return True def walk ( self ): return True class Duck ( Animal , SwimAbility ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): return True class Pigeon ( Animal , FlyAbility ): def eat ( self ): return True def walk ( self ): return True def fly ( self ): return True The above code satisfies the principle Interface Segregation Principle(ISP) . We can see that there is no forced implementation of the inherited class methods. Dependency inversion Principle \u00b6 The Dependency Inversion Principle (DIP) states that high level modules should not depend on low level modules; both should depend on abstractions. Abstractions should not depend on details. Details should depend upon abstractions. Let's consider the scenario of electric switch board and electric devices. i.e Switches, Fan, Light Bulb, etc. class LightBulb : def turn_on ( self ): print ( \"LightBulb: on\" ) def turn_off ( self ): print ( \"LightBulb: off\" ) class PowerSwitch : def __init__ ( self , light_bulb : LightBulb ): self . light_bulb = light_bulb self . on = False def press ( self ): if self . on : self . light_bulb . turn_off () else : self . light_bulb . turn_on () self . on = True if __name__ == '__main__' : light_bulb = LightBulb () switch = PowerSwitch ( light_bulb ) switch . press () switch . press () The above code works perfectly, but it violates the Dependency Inversion Principle(DIP) . The class PowerSwitch is tightly coupled with class LightBulb . The power switch object takes in a light bulb and then directly calls the turn off and turn on method on that instance. Let's implement the pattern Dependency Inversion Principle(DIP) for above case. from abc import ABC , abstractmethod class Switchable ( ABC ): @abstractmethod def turn_on ( self ): pass @abstractmethod def turn_off ( self ): pass class LightBulb ( Switchable ): def turn_on ( self ): print ( \"LightBulb: on\" ) def turn_off ( self ): print ( \"LightBulb: off\" ) class PowerSwitch : def __init__ ( self , device : Switchable ): self . device = device self . on = False def press ( self ): if self . on : self . device . turn_off () else : self . device . turn_on () self . on = True if __name__ == '__main__' : light_bulb = LightBulb () switch = PowerSwitch ( light_bulb ) switch . press () switch . press () Now, the class PowerSwitch does not depend on the class LightBulb . It depends on the abstract class Switchable . with the above code we succesfully removed the dependency between PowerSwitch and LightBulb . If we want to implement the functionality for another device we can do easily by inheriting the class Switchable . Let's implement it for device Fan class Fan ( Switchable ): def turn_on ( self ): print ( \"Fan: on\" ) def turn_off ( self ): print ( \"Fan: off\" ) We can use the Fan object with the class PowerSwitch just like LightBulb . By Dependency Inversion Principle(DIP) , we have decoupled two classes through an interface, which in our case is Switchable. It is now clear to see the usefulness that dependency inversion provides by reducing coupling between classes. References \u00b6 http://www.cs.sjsu.edu/~pearce/modules/lectures/ood/principles/ocp.htm https://python.astrotech.io/design-patterns/oop/solid.html https://en.wikipedia.org/wiki/Interface_segregation_principle https://medium.com/@zackbunch/python-dependency-inversion-8096c2d5e46c https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/SOLID/DIP.py","title":"SOLID Principles in Python"},{"location":"blog/solid-principles-oops-python/#solid-principles-in-python","text":"The SOLID principles are: SRP - Single-Responsibility Principle OCP - The Open-Closed Principle LSP - Liskov Substitution Principle ISP - Interface Segregation Principle DIP - Dependency inversion Principle SOLID principles are the building blocks of the Class design","title":"SOLID Principles in Python"},{"location":"blog/solid-principles-oops-python/#single-responsibility-principlesrp","text":"Every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility. Let's see a simple example class User : def create_user ( self , username , password , email ): print ( \"registered user in db\" ) def send_email ( self , subject , to_email ): print ( \"email sent\" ) def log_error ( self , error ): print ( \"log:\" , error ) def register_user ( self , username , password , email ): try : self . create_user ( username , password , email ) self . send_email ( \"user registered\" , email ) except Exception : self . log_error ( \"error in user register\" ) if __name__ == '__main__' : user = User () user . register_user ( \"anji\" , \"secret\" , \"anji@example.com\" ) In above class, we can see the register_user , login_user , send_email and log_error total of 4 responsibilities. The class should only have the single responsibility i.e user realted. But, it also have sending email and logging an error functionalities. so, it should be separated and moved to classes like Email and ErrorLog . Let's re-write the code with single responsibility. class UserDB : def create_user ( self , username , password , email ): print ( \"registered user in db\" ) class Email : def send_email ( self , subject , to_email ): print ( \"email sent\" ) class ErrorLog : def log_error ( self , error ): print ( \"log:\" , error ) class User : def register_user ( self , username , password , email ): try : user_db = UserDB () user_db . create_user ( username , password , email ) email_server = Email () email_server . send_email ( \"user registered\" , email ) except Exception : logger = ErrorLog () logger . log_error ( \"error in user register\" ) if __name__ == '__main__' : user = User () user . register_user ( \"anji\" , \"secret\" , \"anji@example.com\" ) After, implementing the Single Responsibility Principle we can see that the code more readable and maintainable now. Let's say if want to add a new feature to update_user which updates the user info to the database. We can simply add the method to UserDB class. Because, it's related to database. The client class User will have a new method called update_user_info to use it.","title":"Single-responsibility principle(SRP)"},{"location":"blog/solid-principles-oops-python/#openclosed-principleocp","text":"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification Let's check out the below example. class Calculator : def add ( self , a , b ): return a + b def sub ( self , a , b ): return a - b def mul ( self , a , b ): return a * b def div ( self , a , b ): return a / b In the above code, we have a class Calculator which performs the basic math operations like addition , subtraction , multiplication and division . If we want to add scientific math operations like sin , cos , tan then we do not add these methods in the same class. As per open-closed principle, we do not want to modify the existsing class but we can inherit the class and add the scientific math operations to the inherited class i.e ScientificCalculator import math class ScientificCalculator ( Calculator ): def sin ( self , value ): return math . sin ( value ) def cos ( self , value ): return math . cos ( value ) def tan ( self , value ): return math . tan ( value ) If we want to implement the business calculator then we can use the simpilar open-closed principle and solve it using class inheritance. Let's see the code. class BusinessCalculator ( Calculator ): def future_value ( self , pv , r , n ): return pv * ( 1 + r ) ** n def monthly_payment ( self , p , r , n ): return p * ( r * ( 1 + r ) ** n ) / ((( 1 + r ) ** n ) - 1 ) For ScientificCalculator and BusinessCalculator we did not modify the existing code but we have used it's functionality and implemented the new feature requirements. so, the code satisfies the open-closed principle. In the future, If we get any requirement related to business then we can only modify the BusinessCalculator . so, it won't have an effect on the other two classes.","title":"Open\u2013closed principle(OCP)"},{"location":"blog/solid-principles-oops-python/#liskov-substitution-principle","text":"Derived classes must be usable through the base class interface , without the need for the user to know the difference. \u2014Barbara Liskov If S is a subtype of T, then objects of type T may be replaced with objects of the S \u2014Barbara Liskov In simple words, Let's say we have a abstract class with 4 methods and 3 different classes are inheriting the abstract class. Then we should be able to access the methods abstract class without knowing the actual class that implemented the method. Let's use the classic example of shapes. import math from abc import ABC , abstractmethod class Shape ( ABC ): @abstractmethod def calculate_area ( self ): pass @abstractmethod def calculate_perimeter ( self ): pass class Rectangle ( Shape ): def __init__ ( self , width , height ): self . width = width self . height = height def calculate_area ( self ): return self . width * self . height def calculate_perimeter ( self ): return 2 * ( self . width + self . height ) class Square ( Rectangle ): def __init__ ( self , side ): super () . __init__ ( side , side ) def calculate_perimeter ( self ): return 4 * self . width class Circle ( Shape ): def __init__ ( self , radius ): self . radius = radius def calculate_area ( self ): return math . pi * ( self . radius ** 2 ) def calculate_perimeter ( self ): return 2 * math . pi * self . radius def print_shape_info ( shape : Shape ): data = { \"name\" : shape . __class__ . __name__ , \"area\" : shape . calculate_area (), \"perimeter\" : shape . calculate_perimeter (), } print ( data ) if __name__ == '__main__' : shapes = [ Rectangle ( 10 , 15 ), Square ( 8 ), Circle ( 12 ), ] for shape in shapes : print_shape_info ( shape ) Output: {'name': 'Rectangle', 'area': 150, 'perimeter': 50} {'name': 'Square', 'area': 64, 'perimeter': 32} {'name': 'Circle', 'area': 452.3893421169302, 'perimeter': 75.39822368615503} The function print_shape_info does not know the infomation about the implemeted class. It just know the abstract class. As per the Liskov substitution principle we can able to access the methods of Shape in all of it's chil classes.","title":"Liskov substitution principle"},{"location":"blog/solid-principles-oops-python/#interface-segregation-principleisp","text":"Interface segregation principle (ISP) states that no code should be forced to depend on methods it does not use.ISP splits interfaces that are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. Let's consider the code below. from abc import ABC , abstractmethod class Animal ( ABC ): @abstractmethod def eat ( self ): pass @abstractmethod def walk ( self ): pass @abstractmethod def swim ( self ): pass @abstractmethod def fly ( self ): pass class Cat ( Animal ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): raise NotImplemented def fly ( self ): raise NotImplemented class Duck ( Animal ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): return True def fly ( self ): raise NotImplemented class Pigeon ( Animal ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): raise NotImplemented def fly ( self ): return True In the above code the class Animal is inherited by classes Cat , Duck , Pigeon . But, these classes do not require all methods from the Animal class. but, It's forcing these classes to implement the methods which are not required. It's violating the Interface Segregation Principle(ISP) . To implement fix this issue we seperate out the non-common methods to new classses SwimAbility , FlyAbility like below code. from abc import ABC , abstractmethod class Animal ( ABC ): @abstractmethod def eat ( self ): pass @abstractmethod def walk ( self ): pass class SwimAbility ( ABC ): @abstractmethod def swim ( self ): pass class FlyAbility ( ABC ): @abstractmethod def fly ( self ): pass class Cat ( Animal ): def eat ( self ): return True def walk ( self ): return True class Duck ( Animal , SwimAbility ): def eat ( self ): return True def walk ( self ): return True def swim ( self ): return True class Pigeon ( Animal , FlyAbility ): def eat ( self ): return True def walk ( self ): return True def fly ( self ): return True The above code satisfies the principle Interface Segregation Principle(ISP) . We can see that there is no forced implementation of the inherited class methods.","title":"Interface Segregation Principle(ISP)"},{"location":"blog/solid-principles-oops-python/#dependency-inversion-principle","text":"The Dependency Inversion Principle (DIP) states that high level modules should not depend on low level modules; both should depend on abstractions. Abstractions should not depend on details. Details should depend upon abstractions. Let's consider the scenario of electric switch board and electric devices. i.e Switches, Fan, Light Bulb, etc. class LightBulb : def turn_on ( self ): print ( \"LightBulb: on\" ) def turn_off ( self ): print ( \"LightBulb: off\" ) class PowerSwitch : def __init__ ( self , light_bulb : LightBulb ): self . light_bulb = light_bulb self . on = False def press ( self ): if self . on : self . light_bulb . turn_off () else : self . light_bulb . turn_on () self . on = True if __name__ == '__main__' : light_bulb = LightBulb () switch = PowerSwitch ( light_bulb ) switch . press () switch . press () The above code works perfectly, but it violates the Dependency Inversion Principle(DIP) . The class PowerSwitch is tightly coupled with class LightBulb . The power switch object takes in a light bulb and then directly calls the turn off and turn on method on that instance. Let's implement the pattern Dependency Inversion Principle(DIP) for above case. from abc import ABC , abstractmethod class Switchable ( ABC ): @abstractmethod def turn_on ( self ): pass @abstractmethod def turn_off ( self ): pass class LightBulb ( Switchable ): def turn_on ( self ): print ( \"LightBulb: on\" ) def turn_off ( self ): print ( \"LightBulb: off\" ) class PowerSwitch : def __init__ ( self , device : Switchable ): self . device = device self . on = False def press ( self ): if self . on : self . device . turn_off () else : self . device . turn_on () self . on = True if __name__ == '__main__' : light_bulb = LightBulb () switch = PowerSwitch ( light_bulb ) switch . press () switch . press () Now, the class PowerSwitch does not depend on the class LightBulb . It depends on the abstract class Switchable . with the above code we succesfully removed the dependency between PowerSwitch and LightBulb . If we want to implement the functionality for another device we can do easily by inheriting the class Switchable . Let's implement it for device Fan class Fan ( Switchable ): def turn_on ( self ): print ( \"Fan: on\" ) def turn_off ( self ): print ( \"Fan: off\" ) We can use the Fan object with the class PowerSwitch just like LightBulb . By Dependency Inversion Principle(DIP) , we have decoupled two classes through an interface, which in our case is Switchable. It is now clear to see the usefulness that dependency inversion provides by reducing coupling between classes.","title":"Dependency inversion Principle"},{"location":"blog/solid-principles-oops-python/#references","text":"http://www.cs.sjsu.edu/~pearce/modules/lectures/ood/principles/ocp.htm https://python.astrotech.io/design-patterns/oop/solid.html https://en.wikipedia.org/wiki/Interface_segregation_principle https://medium.com/@zackbunch/python-dependency-inversion-8096c2d5e46c https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/SOLID/DIP.py","title":"References"},{"location":"blog/tmux-working-with-split-terminal-95/","text":"Tmux Working With Split Terminal \u00b6 Tmux is a terminal multiplexer for linux systems. Tmux allows multiple terminal sessions can be accessed within a single window. Tmux is used for running more than one program in the same terminal at the same time. We can also use it to detach processes/programs from their controlling terminals. Tmux allows SSH sessions to remain active without being visible. How to install Tmux on ubuntu? \u00b6 Open the terminal and type the below command and install Tmux. sudo apt-get install tmux How to install Tmux on Cent OS and Fedora? \u00b6 Open the terminal and type the below command and install Tmux. sudo yum install tmux How to install Tmux on macOS? \u00b6 Open the terminal and type the below command and install Tmux. sudo brew install tmux Lets get started with Tmux \u00b6 To start the Tmux we have to simply execute below command in terminal. After execution of the command you will see a green page at the bottom of the terminal.tmux Let's do some magic with Tmux. Now, press Ctrl + B and then press % (i.e Shift + 5 ). Now, you can see a vertical split in the terminal window. To close the current session just type exit . To get help about Tmux press Ctrl + B and ? To split horizontally in tmux then press Ctrl + B and then press \" (i.e Shift + ' ). To detach the Tmux then press Ctrl + B and then press d Most common commands for managing Tmux \u00b6 Ctrl+b then c Create a new window (with shell) Ctrl+b then w Choose window from a list Ctrl+b then 0 Switch to window 0 (by number ) Ctrl+b then , Rename the current window Ctrl+b then % Split current pane horizontally into two panes Ctrl+b then \" Split current pane vertically into two panes Ctrl+b then o Go to the next pane Ctrl+b then ; Toggle between current and previous pane Ctrl+b then x Close the current pane Creating named sessions in Tmux \u00b6 By defaut when we create session in Tmux it will name the session with a number starting from zero. But, we can also create the session with name also. We can do it with below command.tmux new -s my_new_session List available sessions in Tmux \u00b6 To list available session in Tmux execute the below command in the terminal tmux ls Kill a session in Tmux \u00b6 To list available session in Tmux execute the below command in the terminal tmux kill-session -t ` my_new_session We have to give session name instead \" my_new_session \". If we do not give name to session then by default an integer will be given as a session name. Customizing Tmux \u00b6 All the configuration of tmux is loaded from file ~/.tmux.conf . We can customize it as per our requirements. Let's do some customizations # Improve colors set -g default-terminal 'screen-256color' # Set scrollback buffer to 20000 set -g history-limit 20000 # Customize the status line set -g status-fg green set -g status-bg black References: https://github.com/tmux/tmux/wiki https://gist.github.com/afair/3489752","title":"Tmux Working With Split Terminal"},{"location":"blog/tmux-working-with-split-terminal-95/#tmux-working-with-split-terminal","text":"Tmux is a terminal multiplexer for linux systems. Tmux allows multiple terminal sessions can be accessed within a single window. Tmux is used for running more than one program in the same terminal at the same time. We can also use it to detach processes/programs from their controlling terminals. Tmux allows SSH sessions to remain active without being visible.","title":"Tmux Working With Split Terminal"},{"location":"blog/tmux-working-with-split-terminal-95/#how-to-install-tmux-on-ubuntu","text":"Open the terminal and type the below command and install Tmux. sudo apt-get install tmux","title":"How to install Tmux on ubuntu?"},{"location":"blog/tmux-working-with-split-terminal-95/#how-to-install-tmux-on-cent-os-and-fedora","text":"Open the terminal and type the below command and install Tmux. sudo yum install tmux","title":"How to install Tmux on Cent OS and Fedora?"},{"location":"blog/tmux-working-with-split-terminal-95/#how-to-install-tmux-on-macos","text":"Open the terminal and type the below command and install Tmux. sudo brew install tmux","title":"How to install Tmux on macOS?"},{"location":"blog/tmux-working-with-split-terminal-95/#lets-get-started-with-tmux","text":"To start the Tmux we have to simply execute below command in terminal. After execution of the command you will see a green page at the bottom of the terminal.tmux Let's do some magic with Tmux. Now, press Ctrl + B and then press % (i.e Shift + 5 ). Now, you can see a vertical split in the terminal window. To close the current session just type exit . To get help about Tmux press Ctrl + B and ? To split horizontally in tmux then press Ctrl + B and then press \" (i.e Shift + ' ). To detach the Tmux then press Ctrl + B and then press d","title":"Lets get started with Tmux"},{"location":"blog/tmux-working-with-split-terminal-95/#most-common-commands-for-managing-tmux","text":"Ctrl+b then c Create a new window (with shell) Ctrl+b then w Choose window from a list Ctrl+b then 0 Switch to window 0 (by number ) Ctrl+b then , Rename the current window Ctrl+b then % Split current pane horizontally into two panes Ctrl+b then \" Split current pane vertically into two panes Ctrl+b then o Go to the next pane Ctrl+b then ; Toggle between current and previous pane Ctrl+b then x Close the current pane","title":"Most common commands for managing Tmux"},{"location":"blog/tmux-working-with-split-terminal-95/#creating-named-sessions-in-tmux","text":"By defaut when we create session in Tmux it will name the session with a number starting from zero. But, we can also create the session with name also. We can do it with below command.tmux new -s my_new_session","title":"Creating named sessions in Tmux"},{"location":"blog/tmux-working-with-split-terminal-95/#list-available-sessions-in-tmux","text":"To list available session in Tmux execute the below command in the terminal tmux ls","title":"List available sessions in Tmux"},{"location":"blog/tmux-working-with-split-terminal-95/#kill-a-session-in-tmux","text":"To list available session in Tmux execute the below command in the terminal tmux kill-session -t ` my_new_session We have to give session name instead \" my_new_session \". If we do not give name to session then by default an integer will be given as a session name.","title":"Kill a session in Tmux"},{"location":"blog/tmux-working-with-split-terminal-95/#customizing-tmux","text":"All the configuration of tmux is loaded from file ~/.tmux.conf . We can customize it as per our requirements. Let's do some customizations # Improve colors set -g default-terminal 'screen-256color' # Set scrollback buffer to 20000 set -g history-limit 20000 # Customize the status line set -g status-fg green set -g status-bg black References: https://github.com/tmux/tmux/wiki https://gist.github.com/afair/3489752","title":"Customizing Tmux"},{"location":"blog/understanding-django-project-structure-26/","text":"Understanding Django Project Structure \u00b6 In the previous article we have seen how to setup the django development environment . In this article we will learn about how to create django project and django project structure. We care about project structure because it helps us to organise the complex project code. A well structured project will helps the developers to navigate through the code quickly. Create django project \u00b6 To create django project open the terminal(ubuntu) or command(cmd) prompt and change the directory to a new directory where you want to create the project. Now, run the below command. django-admin startproject my_project Above command will create the django project with project name \"my_project\" and we can see the below project structure . my_project/ \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Django project structure \u00b6 manage.py: It is a python module it provides the command-line utilities for django project just like django-admin. To know the commands that provided by the \"manage.py\" then just run the command. It will show us all available commands. python manage . py -- help Most commonly used command is \"runserver\". It is used to run the development server. my_project: It is the python package of our project. It contains the configuration files of project settings , urls and wsgi. __init__.py : It's a python file which tells the python that the directory is a python package. settings.py: It's settings configuration file for the project. It contains the settings like database, urls, usgi and etc. urls.py: It base file of urls for django application. It is pointed in the settings.py file using the setting 'ROOT_URLCONF' . wsgi.py: It is file which contains the configuration of wsgi application. It is used to run the django application. It is pointed in settings.py file using the setting ' WSGI_APPLICATION' Let's talk about settings in settings.py \u00b6 DEBUG: It is set to boolean \"True\" in development mode and to boolean \"False\" in production mode. It will enable server to show us errors that helps developers to debug and fix the error if DEBUG set to \"True\". ALLOWED_HOSTS: It is a security measure in django. It prevents the HTTP Host header attacks . It takes a list of string that represents the host/domain names that django application can serve. INSTALLED_APPS: In django, we divide complex projects in sub projects and develop them to make it simple. we call these sub projects as apps. we put all these apps in this setting. django considers database migrations only for the apps which are in INSTALLED_APPS setting. ROOT_URLCONF: It is the base point for urls. When a request comes in django routes the request based on the url patterns. DATABASES: In django, database settings are used to connect to the database for information storing and retrying. TEMPLATES: when a request comes in we generally create an http response using a html template. In django template settings we provide template directory paths and template engines. Template paths are used to find the given template name and template engines are used to render the templates. STATIC_URL: It is a prefix added to the static files path when we use \"static\" template tag in a template. STATICFILES_DIRS: When we define a static resource in templates then it has to be served. In order to serve it django has to look in some directories. django uses this setting to look for static files. STATIC_ROOT: When deploying the django app we serve staticfiles with servers like nginx, apache. These servers takes a directory path where all staticfiles resides. To do it in django we have a command \"python manage.py collectstatic\". When we run this command it will collects all static files to the STATIC_ROOT directory. MEDIA_URL It's prefix added to the medial files path when a media resource is specified in templates. MEDIA_ROOT: It's a directory path where all media files will be stored. When a user uploads a file then it has to store somewhere. In general files deals with large amount of memort.So, we do not store files in databases instead we store it in filesystem. Above mentioned settings are basic settings that we use in django while developing the applications. In coming articles we will be discussing other django settings also.","title":"Understanding Django Project Structure"},{"location":"blog/understanding-django-project-structure-26/#understanding-django-project-structure","text":"In the previous article we have seen how to setup the django development environment . In this article we will learn about how to create django project and django project structure. We care about project structure because it helps us to organise the complex project code. A well structured project will helps the developers to navigate through the code quickly.","title":"Understanding Django Project Structure"},{"location":"blog/understanding-django-project-structure-26/#create-django-project","text":"To create django project open the terminal(ubuntu) or command(cmd) prompt and change the directory to a new directory where you want to create the project. Now, run the below command. django-admin startproject my_project Above command will create the django project with project name \"my_project\" and we can see the below project structure . my_project/ \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py","title":"Create django project"},{"location":"blog/understanding-django-project-structure-26/#django-project-structure","text":"manage.py: It is a python module it provides the command-line utilities for django project just like django-admin. To know the commands that provided by the \"manage.py\" then just run the command. It will show us all available commands. python manage . py -- help Most commonly used command is \"runserver\". It is used to run the development server. my_project: It is the python package of our project. It contains the configuration files of project settings , urls and wsgi. __init__.py : It's a python file which tells the python that the directory is a python package. settings.py: It's settings configuration file for the project. It contains the settings like database, urls, usgi and etc. urls.py: It base file of urls for django application. It is pointed in the settings.py file using the setting 'ROOT_URLCONF' . wsgi.py: It is file which contains the configuration of wsgi application. It is used to run the django application. It is pointed in settings.py file using the setting ' WSGI_APPLICATION'","title":"Django project structure"},{"location":"blog/understanding-django-project-structure-26/#lets-talk-about-settings-in-settingspy","text":"DEBUG: It is set to boolean \"True\" in development mode and to boolean \"False\" in production mode. It will enable server to show us errors that helps developers to debug and fix the error if DEBUG set to \"True\". ALLOWED_HOSTS: It is a security measure in django. It prevents the HTTP Host header attacks . It takes a list of string that represents the host/domain names that django application can serve. INSTALLED_APPS: In django, we divide complex projects in sub projects and develop them to make it simple. we call these sub projects as apps. we put all these apps in this setting. django considers database migrations only for the apps which are in INSTALLED_APPS setting. ROOT_URLCONF: It is the base point for urls. When a request comes in django routes the request based on the url patterns. DATABASES: In django, database settings are used to connect to the database for information storing and retrying. TEMPLATES: when a request comes in we generally create an http response using a html template. In django template settings we provide template directory paths and template engines. Template paths are used to find the given template name and template engines are used to render the templates. STATIC_URL: It is a prefix added to the static files path when we use \"static\" template tag in a template. STATICFILES_DIRS: When we define a static resource in templates then it has to be served. In order to serve it django has to look in some directories. django uses this setting to look for static files. STATIC_ROOT: When deploying the django app we serve staticfiles with servers like nginx, apache. These servers takes a directory path where all staticfiles resides. To do it in django we have a command \"python manage.py collectstatic\". When we run this command it will collects all static files to the STATIC_ROOT directory. MEDIA_URL It's prefix added to the medial files path when a media resource is specified in templates. MEDIA_ROOT: It's a directory path where all media files will be stored. When a user uploads a file then it has to store somewhere. In general files deals with large amount of memort.So, we do not store files in databases instead we store it in filesystem. Above mentioned settings are basic settings that we use in django while developing the applications. In coming articles we will be discussing other django settings also.","title":"Let's talk about settings in settings.py"},{"location":"blog/understanding-model-view-controller-mvc-in-django-27/","text":"Understanding Model View Controller(Mvc) In Django \u00b6 What is Model View Controller ? We call it in short MVC. It's a software architecture pattern that is used to divide the complex software into simple parts based on the functionality. When we use Google for web search, we simply open Google and search for \"food\" let's say. Then google will show us results about food. This what we see. But, actually what happens is when we search google with keyword \"food\", browser sends request to google server with query parameter as \"food\". Then, it will query the google search index database and fetches the records from the database. Let's say, these records not in the order as we see it in the google webpage. So, Google has to process queried database records to put them in order to display it. By using the processed data It will generate the html document to present it to the user. To simplify the software development software architects divided the process into 3 parts. Model Controller View Model: \u00b6 It deals with the database operations. Creating and updating the tables Fetching and updating the data in the database Controller \u00b6 It deals with processing of data. Some developers also call it as Business Logic part. Process the data and generate it into required format to be sent to next layer ie.View. View \u00b6 It deals with presenting the data to the end user. It receives the data from the controller and generates the html to present it to the end user. The django framework also follows the MVC architecture pattern. But, It just renamed MVC into MTV(Model, Template, View). Advantages of Model View Controller Architecture \u00b6 Multiple developers can work simultaneously. It will be easy to divide and distribute the work among multiple developers. It can be easy to debug and fix the errors because of separation of responsibilities.","title":"Understanding Model View Controller(Mvc) In Django"},{"location":"blog/understanding-model-view-controller-mvc-in-django-27/#understanding-model-view-controllermvc-in-django","text":"What is Model View Controller ? We call it in short MVC. It's a software architecture pattern that is used to divide the complex software into simple parts based on the functionality. When we use Google for web search, we simply open Google and search for \"food\" let's say. Then google will show us results about food. This what we see. But, actually what happens is when we search google with keyword \"food\", browser sends request to google server with query parameter as \"food\". Then, it will query the google search index database and fetches the records from the database. Let's say, these records not in the order as we see it in the google webpage. So, Google has to process queried database records to put them in order to display it. By using the processed data It will generate the html document to present it to the user. To simplify the software development software architects divided the process into 3 parts. Model Controller View","title":"Understanding Model View Controller(Mvc) In Django"},{"location":"blog/understanding-model-view-controller-mvc-in-django-27/#model","text":"It deals with the database operations. Creating and updating the tables Fetching and updating the data in the database","title":"Model:"},{"location":"blog/understanding-model-view-controller-mvc-in-django-27/#controller","text":"It deals with processing of data. Some developers also call it as Business Logic part. Process the data and generate it into required format to be sent to next layer ie.View.","title":"Controller"},{"location":"blog/understanding-model-view-controller-mvc-in-django-27/#view","text":"It deals with presenting the data to the end user. It receives the data from the controller and generates the html to present it to the end user. The django framework also follows the MVC architecture pattern. But, It just renamed MVC into MTV(Model, Template, View).","title":"View"},{"location":"blog/understanding-model-view-controller-mvc-in-django-27/#advantages-of-model-view-controller-architecture","text":"Multiple developers can work simultaneously. It will be easy to divide and distribute the work among multiple developers. It can be easy to debug and fix the errors because of separation of responsibilities.","title":"Advantages of Model View Controller Architecture"},{"location":"blog/understanding-of-http-protocol-28/","text":"Understanding Of Http Protocol \u00b6 Before talking about HTTP Protocol, let's talk about \"Protocol\". A protocol is a set rules to be followed to communicate with one another. Let's take two persons say A, B. Person A lives in USA and person B lives in India and he doesn't know english. Person A sent a message to B. In order to understand the message, B has to follow english language grammatical rules. We call these grammatical rules technically as \"protocol\". HTTP protocol is designed to provide communication between two computers. It's a server and client based protocol . A server is a computer where an application is running on it on a port number(it's 80 for HTTP protocol). A client is also a computer which sends a request to the server using the HTTP protocol. Most of the users sends request to the server from the web browser of users computer. If we want to do it programmatically then we need to the HTTP modules like urllib , requests, etc. in python. In order to understand the HTTP protocol we need to understand the HTTP request and HTTP response. In order to get a resource from the server we send a HTTP request to the server and the server responds us back with a HTTP response. HTTP request: \u00b6 It has two parts 1.HEADERS and 2.BODY HTTP REQUEST HEADERS: It contains the below information request method types \"GET\", \"POST\", \"PUT\", \"DELETE\", etc. request host name like \"google.com\", \"learnbatta.com\" request url path like \"/blog/django-introduction/\" other content headers like Content Type, Content Length, Authorization, etc. To know more about HTTP headers then visit the HTTP headers article on wikipedia . HTTP REQUEST MESSAGE BODY: It contains the data of message that is to be sent to the server. HTTP response: \u00b6 It also has two parts 1. HEADERS and 2.BODY HTTP RESPONSE HEADERS: It contains the information of headers like Content Type, Status Code, Cookies, etc. Headers will help us to understand the content that is received from the server. HTTP RESPONSE BODY: It contains the data received from the server. It's just a basic explanation about HTTP protocol. we will learn more about it in the upcoming articles. References: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol","title":"Understanding Of Http Protocol"},{"location":"blog/understanding-of-http-protocol-28/#understanding-of-http-protocol","text":"Before talking about HTTP Protocol, let's talk about \"Protocol\". A protocol is a set rules to be followed to communicate with one another. Let's take two persons say A, B. Person A lives in USA and person B lives in India and he doesn't know english. Person A sent a message to B. In order to understand the message, B has to follow english language grammatical rules. We call these grammatical rules technically as \"protocol\". HTTP protocol is designed to provide communication between two computers. It's a server and client based protocol . A server is a computer where an application is running on it on a port number(it's 80 for HTTP protocol). A client is also a computer which sends a request to the server using the HTTP protocol. Most of the users sends request to the server from the web browser of users computer. If we want to do it programmatically then we need to the HTTP modules like urllib , requests, etc. in python. In order to understand the HTTP protocol we need to understand the HTTP request and HTTP response. In order to get a resource from the server we send a HTTP request to the server and the server responds us back with a HTTP response.","title":"Understanding Of Http Protocol"},{"location":"blog/understanding-of-http-protocol-28/#http-request","text":"It has two parts 1.HEADERS and 2.BODY HTTP REQUEST HEADERS: It contains the below information request method types \"GET\", \"POST\", \"PUT\", \"DELETE\", etc. request host name like \"google.com\", \"learnbatta.com\" request url path like \"/blog/django-introduction/\" other content headers like Content Type, Content Length, Authorization, etc. To know more about HTTP headers then visit the HTTP headers article on wikipedia . HTTP REQUEST MESSAGE BODY: It contains the data of message that is to be sent to the server.","title":"HTTP request:"},{"location":"blog/understanding-of-http-protocol-28/#http-response","text":"It also has two parts 1. HEADERS and 2.BODY HTTP RESPONSE HEADERS: It contains the information of headers like Content Type, Status Code, Cookies, etc. Headers will help us to understand the content that is received from the server. HTTP RESPONSE BODY: It contains the data received from the server. It's just a basic explanation about HTTP protocol. we will learn more about it in the upcoming articles. References: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol","title":"HTTP response:"},{"location":"blog/understanding-of-python-slice-notation-6/","text":"understanding of python slice notation \u00b6 about python slice notation \u00b6 Lets start with understanding of python slice notation. We can access element in python lists/iterables by indexing. Slicing in python lists is defined as taking a part of the list from a bigger list. In python slicing takes 3 arguments 1. start index, 2. end index, 3. step to skip number of indexes. when we take slice in list it will create a new list/new iterable, starts from the given index and adds the element to the new list/new iterable. After it increments the index by step value and then adds the element to the new list/iterable until the incremented index is less than the end index. The basic form of the slice notation is [start step] default values of the slice notation is [None:None:None]. valid values for start, end, step are non zero integers or None type only. We have a builtin function \"slice\". It takes parameters as start index, end index and step and returns a slice object. If start is not given or \"None\" then the value of start is 0 If end is not given or \"None\" then the value of end is length of the list/iterable type. If step is \"None\" it then value of step is 1. when we use a slice notation it will create a new iterable object of given type. Basic usage of slice function in python \u00b6 # using python slice function my_tuple = ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 9 ) slice_obj = slice ( 1 : 6 : 2 ) my_slice = my_tuple [ slice_obj ] print ( my_slice ) # Output: (2, 4, 6) In above code, the slice function taken start index as 1, end index as 6, step as 2 and returned the slice obect. The returned slice object is used with variable \"my_tuple\" and returned the sliced tuple (2, 4, 6). Usage of step in slice notation \u00b6 numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] even_nums = numbers [ 1 : 8 : 2 ] print ( even_nums ) # Output: [2, 4, 6, 8] In above code, the slice notation start index is 1 and end index is 8 and step is 2. It will generate the index values which are between 1(inclusive) and 8(exclusive) those are 1, 3, 5 and 7. and the values are numbers[1] is 2, numbers[3] is 4, numbers[5] is 6 and numbers[7] is 8. So, we get the output as [2, 4, 6, 8]. Copy a list using slice notation \u00b6 my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] copied_list = my_list [:] # equivalent code to above statement copied_list = my_list [ None : None : None ] print ( id ( my_list ), id ( copied_list )) # Output: 140557707995328, 140557707995400 my_tuple = ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) copied_tuple = my_tuple [:] print ( id ( my_tuple ), id ( copied_tuple )) # Output: 140557707834512, 140557707834512 In above code, we have not specified start index, end index and step. So, it will takes start index value as 0, end index value as max of length of iterable type( in our case it's 10) and step as 1. So, It will generate all the index values starting from zero to nine. Which will result in all the elements in the list. We use python's built-in function \"id\" to check the memory location. We can see in above code that the orizinal list and copied list both have different values of memory locations. So, We can copy the list using python's slice notation. Note: we cannot copy the tuple/string(immutable datatype) with slice notation. Replacing data in list(mutable objects) with slice notation \u00b6 my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] my_list [ 1 : 7 : 2 ] = [ \"hi\" , \"hello\" , \"hey\" ] print ( my_list ) # Output: [0, 'hi', 2, 'hello', 4, 'hey', 6, 7, 8, 9] Remove data in list(mutable objects) with slice notation \u00b6 my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] my_list [ 1 : 7 ] = [] print ( my_list ) # Output: [0, 7, 8, 9] But, It will not work with step value of absolute(- or +) greater than 1 will not work. Reverse the data with python slice notation \u00b6 my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] new_list = my_list [:: - 1 ] print ( new_list ) # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] Note: We can use slicing on all python sequence data types strings byte sequences byte arrays lists tuples range objects References: \u00b6 https://docs.python.org/3/library/functions.html#slice https://docs.python.org/2.3/whatsnew/section-slices.html","title":"understanding of python slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#understanding-of-python-slice-notation","text":"","title":"understanding of python slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#about-python-slice-notation","text":"Lets start with understanding of python slice notation. We can access element in python lists/iterables by indexing. Slicing in python lists is defined as taking a part of the list from a bigger list. In python slicing takes 3 arguments 1. start index, 2. end index, 3. step to skip number of indexes. when we take slice in list it will create a new list/new iterable, starts from the given index and adds the element to the new list/new iterable. After it increments the index by step value and then adds the element to the new list/iterable until the incremented index is less than the end index. The basic form of the slice notation is [start step] default values of the slice notation is [None:None:None]. valid values for start, end, step are non zero integers or None type only. We have a builtin function \"slice\". It takes parameters as start index, end index and step and returns a slice object. If start is not given or \"None\" then the value of start is 0 If end is not given or \"None\" then the value of end is length of the list/iterable type. If step is \"None\" it then value of step is 1. when we use a slice notation it will create a new iterable object of given type.","title":"about python slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#basic-usage-of-slice-function-in-python","text":"# using python slice function my_tuple = ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 9 ) slice_obj = slice ( 1 : 6 : 2 ) my_slice = my_tuple [ slice_obj ] print ( my_slice ) # Output: (2, 4, 6) In above code, the slice function taken start index as 1, end index as 6, step as 2 and returned the slice obect. The returned slice object is used with variable \"my_tuple\" and returned the sliced tuple (2, 4, 6).","title":"Basic usage of slice function in python"},{"location":"blog/understanding-of-python-slice-notation-6/#usage-of-step-in-slice-notation","text":"numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] even_nums = numbers [ 1 : 8 : 2 ] print ( even_nums ) # Output: [2, 4, 6, 8] In above code, the slice notation start index is 1 and end index is 8 and step is 2. It will generate the index values which are between 1(inclusive) and 8(exclusive) those are 1, 3, 5 and 7. and the values are numbers[1] is 2, numbers[3] is 4, numbers[5] is 6 and numbers[7] is 8. So, we get the output as [2, 4, 6, 8].","title":"Usage of step in slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#copy-a-list-using-slice-notation","text":"my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] copied_list = my_list [:] # equivalent code to above statement copied_list = my_list [ None : None : None ] print ( id ( my_list ), id ( copied_list )) # Output: 140557707995328, 140557707995400 my_tuple = ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) copied_tuple = my_tuple [:] print ( id ( my_tuple ), id ( copied_tuple )) # Output: 140557707834512, 140557707834512 In above code, we have not specified start index, end index and step. So, it will takes start index value as 0, end index value as max of length of iterable type( in our case it's 10) and step as 1. So, It will generate all the index values starting from zero to nine. Which will result in all the elements in the list. We use python's built-in function \"id\" to check the memory location. We can see in above code that the orizinal list and copied list both have different values of memory locations. So, We can copy the list using python's slice notation. Note: we cannot copy the tuple/string(immutable datatype) with slice notation.","title":"Copy a list using slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#replacing-data-in-listmutable-objects-with-slice-notation","text":"my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] my_list [ 1 : 7 : 2 ] = [ \"hi\" , \"hello\" , \"hey\" ] print ( my_list ) # Output: [0, 'hi', 2, 'hello', 4, 'hey', 6, 7, 8, 9]","title":"Replacing data in list(mutable objects) with slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#remove-data-in-listmutable-objects-with-slice-notation","text":"my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] my_list [ 1 : 7 ] = [] print ( my_list ) # Output: [0, 7, 8, 9] But, It will not work with step value of absolute(- or +) greater than 1 will not work.","title":"Remove data in list(mutable objects) with slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#reverse-the-data-with-python-slice-notation","text":"my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] new_list = my_list [:: - 1 ] print ( new_list ) # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] Note: We can use slicing on all python sequence data types strings byte sequences byte arrays lists tuples range objects","title":"Reverse the data with python slice notation"},{"location":"blog/understanding-of-python-slice-notation-6/#references","text":"https://docs.python.org/3/library/functions.html#slice https://docs.python.org/2.3/whatsnew/section-slices.html","title":"References:"},{"location":"blog/understanding-request-response-lifecycle-in-django-29/","text":"Understanding The Request-Response Lifecycle In Django \u00b6 Let's start understanding the request-response lifecycle of a Django application. Every web application uses HTTP/HTTPS protocol. In the HTTP/HTTPS protocol client sends a request to the server based on the request data server sends the response back to the client. It's the basic principle of HTTP protocol. While setting up the django application in the server we need a webserver and wsgi server. Webserver helps us in serving static files/content. If we did not use the webserver to serve static files then it has to served by WSGI server which results in more number of requests to the server. So, gradually it slow down the application performance. Web server balances the requests load on the server. So, it's highly recommended to use the webserver. A client can be defined as a piece of software which can send a request by following the HTTP/HTTPS protocol. In general we consider client as a Web Browser. While deploying the django application on the server we use one of the combinations of a \"Nginx, uWSGI and Django\" or \"Nginx, gunicorn and Django\" or \"Apache, mod_wsgi and Nginx\". As of now, we will discuss the deployment process but we discuss about request-response lifecycle of Django application. We will be discussing on when a request comes in how it can be processed and how the response will be created and sent back to the client. When a client sends a request to the server it first passed to the webserver, It contains the configuration rules to dispatch the request to the WSGI server or served by itself. WSGI server pass the request to the Django application. Django has the following layers in dealing with request-response lifecycle of a Django application. Layers of Django Application \u00b6 Request Middlewares URL Router(URL Dispatcher) Views Context Processors Template Renderers Response Middlewares Whenever the request comes in it is handled by the Request middlewares. We can have multiple middlewares. we can find it in project settings(settings.py). Django request middlewares follows the order while processing the request. Suppose if we have request middlewares in the order A, B, C then the request first processed by the middleware A and then B and then C. Django comes up with bunch of default middlewares. We can also write our own or custom middlewares. After request processed by the middlewares it will be submitted to the URL Router or URL dispatcher. URL Router will take the request from the request middleware and it takes the URL Path from the request . Based on the url path URL router will tries to match the request path with the available URL patterns. These URL patterns are in the form of regular expressions. After matching the URL path with available URL patterns the request will be submitted to the View which is associated with the URL. Now, we are in business logic layer Views. Views processes the business logic using request and request data(data sent in GET, POST, etc). After processing the request in the view the request is sent context processors, by using the request context processors adds the context data that will help Template Renderers to render the template to generate the HTTP response. Again the request will send back to the Response middlewares to process it. Response middlewares will process the request and adds or modifies the header information/body information before sending it back to the client(Browser). After the browser will process and display it to the end user. References: https://docs.djangoproject.com/en/2.0/topics/http/middleware/ https://docs.djangoproject.com/en/2.0/ref/request-response/","title":"Understanding The Request-Response Lifecycle In Django"},{"location":"blog/understanding-request-response-lifecycle-in-django-29/#understanding-the-request-response-lifecycle-in-django","text":"Let's start understanding the request-response lifecycle of a Django application. Every web application uses HTTP/HTTPS protocol. In the HTTP/HTTPS protocol client sends a request to the server based on the request data server sends the response back to the client. It's the basic principle of HTTP protocol. While setting up the django application in the server we need a webserver and wsgi server. Webserver helps us in serving static files/content. If we did not use the webserver to serve static files then it has to served by WSGI server which results in more number of requests to the server. So, gradually it slow down the application performance. Web server balances the requests load on the server. So, it's highly recommended to use the webserver. A client can be defined as a piece of software which can send a request by following the HTTP/HTTPS protocol. In general we consider client as a Web Browser. While deploying the django application on the server we use one of the combinations of a \"Nginx, uWSGI and Django\" or \"Nginx, gunicorn and Django\" or \"Apache, mod_wsgi and Nginx\". As of now, we will discuss the deployment process but we discuss about request-response lifecycle of Django application. We will be discussing on when a request comes in how it can be processed and how the response will be created and sent back to the client. When a client sends a request to the server it first passed to the webserver, It contains the configuration rules to dispatch the request to the WSGI server or served by itself. WSGI server pass the request to the Django application. Django has the following layers in dealing with request-response lifecycle of a Django application.","title":"Understanding The Request-Response Lifecycle In Django"},{"location":"blog/understanding-request-response-lifecycle-in-django-29/#layers-of-django-application","text":"Request Middlewares URL Router(URL Dispatcher) Views Context Processors Template Renderers Response Middlewares Whenever the request comes in it is handled by the Request middlewares. We can have multiple middlewares. we can find it in project settings(settings.py). Django request middlewares follows the order while processing the request. Suppose if we have request middlewares in the order A, B, C then the request first processed by the middleware A and then B and then C. Django comes up with bunch of default middlewares. We can also write our own or custom middlewares. After request processed by the middlewares it will be submitted to the URL Router or URL dispatcher. URL Router will take the request from the request middleware and it takes the URL Path from the request . Based on the url path URL router will tries to match the request path with the available URL patterns. These URL patterns are in the form of regular expressions. After matching the URL path with available URL patterns the request will be submitted to the View which is associated with the URL. Now, we are in business logic layer Views. Views processes the business logic using request and request data(data sent in GET, POST, etc). After processing the request in the view the request is sent context processors, by using the request context processors adds the context data that will help Template Renderers to render the template to generate the HTTP response. Again the request will send back to the Response middlewares to process it. Response middlewares will process the request and adds or modifies the header information/body information before sending it back to the client(Browser). After the browser will process and display it to the end user. References: https://docs.djangoproject.com/en/2.0/topics/http/middleware/ https://docs.djangoproject.com/en/2.0/ref/request-response/","title":"Layers of Django Application"},{"location":"blog/usage-of-group_by-string_agg-in-django-postgresql-74/","text":"Usage Of Group_By And String_Agg In Django, Postgresql \u00b6 In this article we are going to learn how to optimize the queries in Django applications. Django has a built-in ORM which converts the django query into optimized SQL query. In some cases we need to group the data based on some common django field or a table column. This can also be done without using the group_by and string_agg in django query. In such cases we need to query for all matching records and then form the groups based on the fields. In this case we need to query first and then process the results. It will cost more time (i.e: SQL query time + Data Processing time). If we use group_by and string_agg in django with postgreSQL database, to optimize the query time and get the desired data format. Let's consider the below models from django.db import models class Customer ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) class Address ( models . Model ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE ) phone = models . CharField ( max_length = 15 ) line = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 50 ) Now, consider the below data tables Table: Customer id first_name last_name 1 Anji B 2 Jessi S 3 Rohan C Table: Address id customer_id phone line city 1 1 987654321 sri nagar Hyderabad 2 2 123654789 sai nagar Bangalore 3 1 987456321 prakash nagar Medak 4 1 321456987 Joshenbeg Rangareddy Desired Data Format: customer_id customer_name phone_numbers 1 Anji 987654321, 987456321, 321456987 2 Jessi 123654789 To get data format like above table we need use group_by and string_agg in django with postgreSQL database . Let's see the below django query from django.db.models import F from django.contrib.postgres.aggregates.general import StringAgg queryset = Address . objects . values ( 'customer_id' ) . order_by ( 'customer_id' ) . annotate ( phone_numbers = StringAgg ( 'phone' , delimiter = ',' ), customer_name = F ( 'customer__first_name' ) ) print ( queryset ) # Output: <QuerySet [{'phone_numbers': '987654321,987456321,321456987', # 'customer_name': 'Anji', 'customer_id': 1}, # {'phone_numbers': '123654789', 'customer_name': 'Jessi', # 'customer_id': 2}]> Try above code to test it practically in your project. References: https://docs.djangoproject.com/en/dev/_modules/django/contrib/postgres/aggregates/general/#StringAgg","title":"Usage Of Group_By And String_Agg In Django, Postgresql"},{"location":"blog/usage-of-group_by-string_agg-in-django-postgresql-74/#usage-of-group_by-and-string_agg-in-django-postgresql","text":"In this article we are going to learn how to optimize the queries in Django applications. Django has a built-in ORM which converts the django query into optimized SQL query. In some cases we need to group the data based on some common django field or a table column. This can also be done without using the group_by and string_agg in django query. In such cases we need to query for all matching records and then form the groups based on the fields. In this case we need to query first and then process the results. It will cost more time (i.e: SQL query time + Data Processing time). If we use group_by and string_agg in django with postgreSQL database, to optimize the query time and get the desired data format. Let's consider the below models from django.db import models class Customer ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) class Address ( models . Model ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE ) phone = models . CharField ( max_length = 15 ) line = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 50 ) Now, consider the below data tables Table: Customer id first_name last_name 1 Anji B 2 Jessi S 3 Rohan C Table: Address id customer_id phone line city 1 1 987654321 sri nagar Hyderabad 2 2 123654789 sai nagar Bangalore 3 1 987456321 prakash nagar Medak 4 1 321456987 Joshenbeg Rangareddy Desired Data Format: customer_id customer_name phone_numbers 1 Anji 987654321, 987456321, 321456987 2 Jessi 123654789 To get data format like above table we need use group_by and string_agg in django with postgreSQL database . Let's see the below django query from django.db.models import F from django.contrib.postgres.aggregates.general import StringAgg queryset = Address . objects . values ( 'customer_id' ) . order_by ( 'customer_id' ) . annotate ( phone_numbers = StringAgg ( 'phone' , delimiter = ',' ), customer_name = F ( 'customer__first_name' ) ) print ( queryset ) # Output: <QuerySet [{'phone_numbers': '987654321,987456321,321456987', # 'customer_name': 'Anji', 'customer_id': 1}, # {'phone_numbers': '123654789', 'customer_name': 'Jessi', # 'customer_id': 2}]> Try above code to test it practically in your project. References: https://docs.djangoproject.com/en/dev/_modules/django/contrib/postgres/aggregates/general/#StringAgg","title":"Usage Of Group_By And String_Agg In Django, Postgresql"},{"location":"blog/usage-of-property-decorator-in-python-40/","text":"Usage Of Property Decorator In Python \u00b6 In this article we will learn about usage of property decorator in python . \"property\" is a built-in decorator in python. \"property\" is mostly used with classes. The decorator \"property\" makes the method that acts like an attribute to the python class. \"property\" is a callable object in python. It has three methods \"getter\", \"setter\" and \"deleter\". class Person : def __init__ ( self , first_name , last_name ): self . first_name = first_name self . last_name = last_name @property def full_name ( self ): return self . first_name + \" \" + self . last_name @full_name . setter def full_name ( self , text ): self . first_name , self . last_name = text . split () @full_name . deleter def full_name ( self ): del self . first_name del self . last_name # working with property \"getter\" p = Person ( 'Ram' , 'B' ) print ( p . full_name ) # Output: Ram B # working with property \"setter\" p . full_name = \"Arun B\" print ( p . first_name ) # Output: Arun print ( p . last_name ) # Output: B # working with property \"deleter\" del p . full_name print ( p . full_name ) # Output: AttributeError: 'Person' object has no attribute 'first_name' In above code we have created a Person object which first name \"Ram\" and last name \"B\". We have defined the method \"full_name\" which returns persons full name by combining the first name and last name of person object. We have used the property as decorator so, we can access the method as just like an attribute of a class. In above, when we use the code \"p.full_name\", It returned the full name as \"Ram B\". Property has three method getter, setter and deleter. By default property acts like getter. In python If we assign a value to a method then the method functionality will be lost. But, using a property we can set value. In above code, we set \"Arun B\" as value to property \"full_name\". When we set the value it is passed to the @fullname.setter , there we process it. In above code we split it and updated the values of attributes \"first_name\" and \"last_name\". When we delete the property then the method @full_name.deleter will be called. We can see the same in the above code \"del p.full_name\" when we execute it then it called @full_name.deleter inside we have deleted attributes \"first_name\", \"last_name\". That's the reason we got an error \"object has no attribute\".","title":"Usage Of Property Decorator In Python"},{"location":"blog/usage-of-property-decorator-in-python-40/#usage-of-property-decorator-in-python","text":"In this article we will learn about usage of property decorator in python . \"property\" is a built-in decorator in python. \"property\" is mostly used with classes. The decorator \"property\" makes the method that acts like an attribute to the python class. \"property\" is a callable object in python. It has three methods \"getter\", \"setter\" and \"deleter\". class Person : def __init__ ( self , first_name , last_name ): self . first_name = first_name self . last_name = last_name @property def full_name ( self ): return self . first_name + \" \" + self . last_name @full_name . setter def full_name ( self , text ): self . first_name , self . last_name = text . split () @full_name . deleter def full_name ( self ): del self . first_name del self . last_name # working with property \"getter\" p = Person ( 'Ram' , 'B' ) print ( p . full_name ) # Output: Ram B # working with property \"setter\" p . full_name = \"Arun B\" print ( p . first_name ) # Output: Arun print ( p . last_name ) # Output: B # working with property \"deleter\" del p . full_name print ( p . full_name ) # Output: AttributeError: 'Person' object has no attribute 'first_name' In above code we have created a Person object which first name \"Ram\" and last name \"B\". We have defined the method \"full_name\" which returns persons full name by combining the first name and last name of person object. We have used the property as decorator so, we can access the method as just like an attribute of a class. In above, when we use the code \"p.full_name\", It returned the full name as \"Ram B\". Property has three method getter, setter and deleter. By default property acts like getter. In python If we assign a value to a method then the method functionality will be lost. But, using a property we can set value. In above code, we set \"Arun B\" as value to property \"full_name\". When we set the value it is passed to the @fullname.setter , there we process it. In above code we split it and updated the values of attributes \"first_name\" and \"last_name\". When we delete the property then the method @full_name.deleter will be called. We can see the same in the above code \"del p.full_name\" when we execute it then it called @full_name.deleter inside we have deleted attributes \"first_name\", \"last_name\". That's the reason we got an error \"object has no attribute\".","title":"Usage Of Property Decorator In Python"},{"location":"blog/using-custom-user-model-in-django-23/","text":"Using Custom User Model In Django \u00b6 When we start a new project we have to use custom user model in django application . Because, django provides basic fields required for the user. We may require to add extra fields in the future. So, we have to use custom user model. To implement the**custom user model in django** application we do not need to rewrite the model from the scratch. We can avoid it by inheriting the class AbstractUser from django. we can import it like from django.contrib.auth.models import AbstractUser . After writing the custom user model we have to add our custom user model to django project settings. We can do this by adding AUTH_USER_MODEL = 'myapp.User' in project/settings.py. using custom user model in django \u00b6 # myapp/models.py from django.contrib.auth.models import AbstractUser def user_avatar_path ( instance , filename ): return 'user_ {0} /avatar/ {1} ' . format ( instance . id , filename ) class User ( AbstractUser ): avatar = models . ImageField ( upload_to = user_avatar_path ) def __str__ ( self ): return self . username # myproject/settings.py # ....... # ....... AUTH_USER_MODEL = 'myapp.User' When we inherit the \"AbstractUser\" model we get the fields like \"first_name\", \"last_name\", \"email\", \"username\", \"password\", \"is_active\", \"is_superuser\" by default. In the above code we have added the extra field \"avatar\" that will store a photograph of the user. We can also add user phone number, country, etc. We are using the existing code and enhancing it with new features. We can modify the \"User\" model in the future without affecting the existing functionality if it is required. It can be achieved only by using custom user model in django. After pointing AUTH_USER_MODEL in settings. Try to run commands \" python manage.py makemigrations && python manage.py migrate \". When we run the command \" makemigrations \", It will create migrations and when we run command \" migrate \", ORM will convert these migrations into SQL queries and creates the tables. References: https://docs.djangoproject.com/en/2.0/topics/auth/customizing/","title":"Using Custom User Model In Django"},{"location":"blog/using-custom-user-model-in-django-23/#using-custom-user-model-in-django","text":"When we start a new project we have to use custom user model in django application . Because, django provides basic fields required for the user. We may require to add extra fields in the future. So, we have to use custom user model. To implement the**custom user model in django** application we do not need to rewrite the model from the scratch. We can avoid it by inheriting the class AbstractUser from django. we can import it like from django.contrib.auth.models import AbstractUser . After writing the custom user model we have to add our custom user model to django project settings. We can do this by adding AUTH_USER_MODEL = 'myapp.User' in project/settings.py.","title":"Using Custom User Model In Django"},{"location":"blog/using-custom-user-model-in-django-23/#using-custom-user-model-in-django_1","text":"# myapp/models.py from django.contrib.auth.models import AbstractUser def user_avatar_path ( instance , filename ): return 'user_ {0} /avatar/ {1} ' . format ( instance . id , filename ) class User ( AbstractUser ): avatar = models . ImageField ( upload_to = user_avatar_path ) def __str__ ( self ): return self . username # myproject/settings.py # ....... # ....... AUTH_USER_MODEL = 'myapp.User' When we inherit the \"AbstractUser\" model we get the fields like \"first_name\", \"last_name\", \"email\", \"username\", \"password\", \"is_active\", \"is_superuser\" by default. In the above code we have added the extra field \"avatar\" that will store a photograph of the user. We can also add user phone number, country, etc. We are using the existing code and enhancing it with new features. We can modify the \"User\" model in the future without affecting the existing functionality if it is required. It can be achieved only by using custom user model in django. After pointing AUTH_USER_MODEL in settings. Try to run commands \" python manage.py makemigrations && python manage.py migrate \". When we run the command \" makemigrations \", It will create migrations and when we run command \" migrate \", ORM will convert these migrations into SQL queries and creates the tables. References: https://docs.djangoproject.com/en/2.0/topics/auth/customizing/","title":"using custom user model in django"},{"location":"blog/using-custom-widgets-in-django-48/","text":"Using Custom Widgets In Django \u00b6 In Django we use built-in forms. After rendering the template with form and form fields we can see the equivalent html is generated from the form fields. How Django is doing that ? Well, to generate HTML from the form fields django uses form Widgets. In some cases we need the some specific HTML format from Django widgets. In such cases we write our own Django form widgets. How to write custom Django Widget ? \u00b6 To write custom Django widget we use forms.Widget class Which is base class for all django Widgets. If we use bootstrap framework in our project then we may need to add some bootstrap classes to HTML form fields and we should follow some HTML structure in order to generate desired design. While writing custom widgets we override html_template and render method of the inherited forms.Widget class. Let's see a custom django Bootstrap Widget Example Django Custom Widget from django import forms from django.template import loader from django.utils.safestring import mark_safe class BootstrapInputWidget ( forms . Widget ): template_name = 'template.html' def get_context ( self , name , value , attrs = None ): return { 'widget' : { 'name' : name , 'value' : value , }} def render ( self , name , value , attrs = None ): context = self . get_context ( name , value , attrs ) template = loader . get_template ( self . template_name ) . render ( context ) return mark_safe ( template ) template.html < div class = \"form-group input-group\" > < span class = \"input-group-addon\" > Name </ span > < input type = \"text\" class = \"form-control\" id = \"id-{{ widget.name }}\" name = \"{{ widget.name }}\" /> </ div > forms.py from django import forms from django.contrib.auth.models import User form . widgets import BootstrapInputWidget class CreateMyModelForm ( forms . ModelForm ): first_name = forms . CharField ( widget = BootstrapInputWidget ()) class Meta : model = User fields = [ 'name' ] widgets = { 'last_name' : BootstrapInputWidget ()}","title":"Using Custom Widgets In Django"},{"location":"blog/using-custom-widgets-in-django-48/#using-custom-widgets-in-django","text":"In Django we use built-in forms. After rendering the template with form and form fields we can see the equivalent html is generated from the form fields. How Django is doing that ? Well, to generate HTML from the form fields django uses form Widgets. In some cases we need the some specific HTML format from Django widgets. In such cases we write our own Django form widgets.","title":"Using Custom Widgets In Django"},{"location":"blog/using-custom-widgets-in-django-48/#how-to-write-custom-django-widget","text":"To write custom Django widget we use forms.Widget class Which is base class for all django Widgets. If we use bootstrap framework in our project then we may need to add some bootstrap classes to HTML form fields and we should follow some HTML structure in order to generate desired design. While writing custom widgets we override html_template and render method of the inherited forms.Widget class. Let's see a custom django Bootstrap Widget Example Django Custom Widget from django import forms from django.template import loader from django.utils.safestring import mark_safe class BootstrapInputWidget ( forms . Widget ): template_name = 'template.html' def get_context ( self , name , value , attrs = None ): return { 'widget' : { 'name' : name , 'value' : value , }} def render ( self , name , value , attrs = None ): context = self . get_context ( name , value , attrs ) template = loader . get_template ( self . template_name ) . render ( context ) return mark_safe ( template ) template.html < div class = \"form-group input-group\" > < span class = \"input-group-addon\" > Name </ span > < input type = \"text\" class = \"form-control\" id = \"id-{{ widget.name }}\" name = \"{{ widget.name }}\" /> </ div > forms.py from django import forms from django.contrib.auth.models import User form . widgets import BootstrapInputWidget class CreateMyModelForm ( forms . ModelForm ): first_name = forms . CharField ( widget = BootstrapInputWidget ()) class Meta : model = User fields = [ 'name' ] widgets = { 'last_name' : BootstrapInputWidget ()}","title":"How to write custom Django Widget ?"},{"location":"blog/viewsets-in-django-rest-framework-83/","text":"Viewsets In Django Rest Framework \u00b6 ViewSets are one of the super cool features of Django REST Framework. ViewSets are just a type of class based view but it do not provide request method handlers like \"get()\", \"post()\", \"patch()\", \"delete()\", etc. But, it provides actions such as \"create()\", \"list()\", \"retrieve()\", \"update()\", \"partial_update()\" and \"destroy()\". DRF allows us to combine the logic for a set of related views in a single class \" ViewSet \". ViewSets can speed-up the development and better maintainability. In class based views we map views to urls using url config (i.e path ), but where as in viewsets we use routers to register the viewsets . Routers simplifies the process of configuring the viewsets to urls. Advantages of ViewSets \u00b6 Repeated functionality can be combined into a single class. Routers are used to wiring up the url configurations so, we do not need to write url configurations externally. For large API's we can enforce a consistent URL configuration throughout the API. ViewSet classes in DRF ViewSet It does not provide the any implemetations of actions. We have to override the class and define the action implementations explicitly. We ca use the attributes like permission_classes, authentication_classes Example: Let's define a simple viewset that can be used to list or retrieve all the students in the school model. models.py from django.db import models class Student ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () def __str__ ( self ): return \" {name} \" . format ( name = self . name ) serializers.py from rest_framework import serializers from .models import Student class StudentSerializer ( serializers . ModelSerializer ): class Meta : model = Student fields = ( 'id' , 'name' , 'age' ) views.py from django.shortcuts import get_object_or_404 from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentViewSet ( viewsets . ViewSet ): def list ( self , request ): queryset = Student . objects . all () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , pk = None ): queryset = Student . objects . all () user = get_object_or_404 ( queryset , pk = pk ) serializer = StudentSerializer ( user ) return Response ( serializer . data ) GenericViewSet Just like \"ViewSet\", It also does not provide the implementation of actions. We ca use the attributes like permission_classes, authentication_classes The only difference between ViewSet and GenericViewSet is that it provides generic methods like get_object and get_queryset . Example: views.py from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentGenericViewSet ( viewsets . GenericViewSet ): def get_queryset ( self ): queryset = Student . objects . all () return queryset def get_object ( self ): queryset = self . get_queryset () obj = queryset . get ( pk = self . kwargs [ 'pk' ]) return obj def list ( self , request ): queryset = self . get_queryset () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , ** kwargs ): obj = self . get_object () serializer = StudentSerializer ( obj ) return Response ( serializer . data ) ModelViewSet It provides all the actions by default (i.e .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy()). Most of the times we use this because it provides the generic functionality so, we simply need to override the attributes like queryset , serializer_class , permission_classes and authentication_classes . If we any conditional logic then we can override methods like get_object , get_queryset , get_permission_classes , etc. Example: views.py from rest_framework import viewsets from .models import Student from .serializers import StudentSerializer class StudentModelViewSet ( viewsets . ModelViewSet ): queryset = Student . objects . all () serializer_class = StudentSerializer So, our viewsets are ready to go. But, we have not configured the urls. Yes, lets do this with Django Rest \"Routers\". urls.py from rest_framework.routers import DefaultRouter from . import views router = DefaultRouter () router . register ( 'student-viewset' , views . StudentViewSet , basename = 'student_vs' ) router . register ( 'student-generic-viewset' , views . StudentGenericViewSet , basename = 'student_gvs' ) router . register ( 'student-model-viewset' , views . StudentModelViewSet , basename = 'student_mvs' ) urlpatterns = router . urls # print(urlpatterns) StudentViewSet Urls '^student-viewset/$' '^student-viewset/(?P<pk>[^/.]+)/$' StudentGenericViewSet Urls '^student-generic-viewset/$' '^student-generic-viewset/(?P<pk>[^/.]+)/$' Student*ModelViewSet* Urls '^student-model-viewset/$' '^student-model-viewset/(?P<pk>[^/.]+)/$' For \" StudentViewSet \" and \" StudentGenericViewset \" we have implemeted two actions (i.e list and retrieve) only. so, we can only retrieve the resources. But, where as in \" StudentModelViewset \" we have inherited the \" ModelViewSet \" so it also provides functionalities like create update and partial update in addition to list and retrieve. so, try it on your own. You can find the sample project on github . I will write more about *\"Django REST Routers\"*in the next article.","title":"Viewsets In Django Rest Framework"},{"location":"blog/viewsets-in-django-rest-framework-83/#viewsets-in-django-rest-framework","text":"ViewSets are one of the super cool features of Django REST Framework. ViewSets are just a type of class based view but it do not provide request method handlers like \"get()\", \"post()\", \"patch()\", \"delete()\", etc. But, it provides actions such as \"create()\", \"list()\", \"retrieve()\", \"update()\", \"partial_update()\" and \"destroy()\". DRF allows us to combine the logic for a set of related views in a single class \" ViewSet \". ViewSets can speed-up the development and better maintainability. In class based views we map views to urls using url config (i.e path ), but where as in viewsets we use routers to register the viewsets . Routers simplifies the process of configuring the viewsets to urls.","title":"Viewsets In Django Rest Framework"},{"location":"blog/viewsets-in-django-rest-framework-83/#advantages-of-viewsets","text":"Repeated functionality can be combined into a single class. Routers are used to wiring up the url configurations so, we do not need to write url configurations externally. For large API's we can enforce a consistent URL configuration throughout the API. ViewSet classes in DRF ViewSet It does not provide the any implemetations of actions. We have to override the class and define the action implementations explicitly. We ca use the attributes like permission_classes, authentication_classes Example: Let's define a simple viewset that can be used to list or retrieve all the students in the school model. models.py from django.db import models class Student ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () def __str__ ( self ): return \" {name} \" . format ( name = self . name ) serializers.py from rest_framework import serializers from .models import Student class StudentSerializer ( serializers . ModelSerializer ): class Meta : model = Student fields = ( 'id' , 'name' , 'age' ) views.py from django.shortcuts import get_object_or_404 from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentViewSet ( viewsets . ViewSet ): def list ( self , request ): queryset = Student . objects . all () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , pk = None ): queryset = Student . objects . all () user = get_object_or_404 ( queryset , pk = pk ) serializer = StudentSerializer ( user ) return Response ( serializer . data ) GenericViewSet Just like \"ViewSet\", It also does not provide the implementation of actions. We ca use the attributes like permission_classes, authentication_classes The only difference between ViewSet and GenericViewSet is that it provides generic methods like get_object and get_queryset . Example: views.py from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentGenericViewSet ( viewsets . GenericViewSet ): def get_queryset ( self ): queryset = Student . objects . all () return queryset def get_object ( self ): queryset = self . get_queryset () obj = queryset . get ( pk = self . kwargs [ 'pk' ]) return obj def list ( self , request ): queryset = self . get_queryset () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , ** kwargs ): obj = self . get_object () serializer = StudentSerializer ( obj ) return Response ( serializer . data ) ModelViewSet It provides all the actions by default (i.e .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy()). Most of the times we use this because it provides the generic functionality so, we simply need to override the attributes like queryset , serializer_class , permission_classes and authentication_classes . If we any conditional logic then we can override methods like get_object , get_queryset , get_permission_classes , etc. Example: views.py from rest_framework import viewsets from .models import Student from .serializers import StudentSerializer class StudentModelViewSet ( viewsets . ModelViewSet ): queryset = Student . objects . all () serializer_class = StudentSerializer So, our viewsets are ready to go. But, we have not configured the urls. Yes, lets do this with Django Rest \"Routers\". urls.py from rest_framework.routers import DefaultRouter from . import views router = DefaultRouter () router . register ( 'student-viewset' , views . StudentViewSet , basename = 'student_vs' ) router . register ( 'student-generic-viewset' , views . StudentGenericViewSet , basename = 'student_gvs' ) router . register ( 'student-model-viewset' , views . StudentModelViewSet , basename = 'student_mvs' ) urlpatterns = router . urls # print(urlpatterns) StudentViewSet Urls '^student-viewset/$' '^student-viewset/(?P<pk>[^/.]+)/$' StudentGenericViewSet Urls '^student-generic-viewset/$' '^student-generic-viewset/(?P<pk>[^/.]+)/$' Student*ModelViewSet* Urls '^student-model-viewset/$' '^student-model-viewset/(?P<pk>[^/.]+)/$' For \" StudentViewSet \" and \" StudentGenericViewset \" we have implemeted two actions (i.e list and retrieve) only. so, we can only retrieve the resources. But, where as in \" StudentModelViewset \" we have inherited the \" ModelViewSet \" so it also provides functionalities like create update and partial update in addition to list and retrieve. so, try it on your own. You can find the sample project on github . I will write more about *\"Django REST Routers\"*in the next article.","title":"Advantages of ViewSets"},{"location":"blog/why-tuple-is-faster-than-list-in-python-22/","text":"Why Tuple Is Faster Than List In Python ? \u00b6 In python we have two types of objects. 1. Mutable, 2. Immutable. In python lists **comes under mutable objects and **tuples comes under immutable objects. Tuples are stored in a single block of memory. Tuples are immutable so, It doesn't require extra space to store new objects. Lists are allocated in two blocks: the fixed one with all the Python object information and a variable sized block for the data. It is the reason creating a tuple is faster than List. It also explains the slight difference in indexing speed is faster than lists, because in tuples for indexing it follows fewer pointers. Advantages using tuples: \u00b6 Tuples is that they use less memory where lists use more memory We can use tuples in a dictionary as a key but it's not possible with lists We can access element with an index in both tuples and lists Disadvantages of tuples \u00b6 We cannot add an element to tuple but we can add element to list. We can't sort a tuple but in a list we can sort by calling \"list.sort()\" method. We can't remove an element in tuple but in list we can remove element We can't replace an element in tuple but you can in a list Reference: https://docs.python.org/2/library/functions.html#tuple","title":"Why Tuple Is Faster Than List In Python ?"},{"location":"blog/why-tuple-is-faster-than-list-in-python-22/#why-tuple-is-faster-than-list-in-python","text":"In python we have two types of objects. 1. Mutable, 2. Immutable. In python lists **comes under mutable objects and **tuples comes under immutable objects. Tuples are stored in a single block of memory. Tuples are immutable so, It doesn't require extra space to store new objects. Lists are allocated in two blocks: the fixed one with all the Python object information and a variable sized block for the data. It is the reason creating a tuple is faster than List. It also explains the slight difference in indexing speed is faster than lists, because in tuples for indexing it follows fewer pointers.","title":"Why Tuple Is Faster Than List In Python ?"},{"location":"blog/why-tuple-is-faster-than-list-in-python-22/#advantages-using-tuples","text":"Tuples is that they use less memory where lists use more memory We can use tuples in a dictionary as a key but it's not possible with lists We can access element with an index in both tuples and lists","title":"Advantages using tuples:"},{"location":"blog/why-tuple-is-faster-than-list-in-python-22/#disadvantages-of-tuples","text":"We cannot add an element to tuple but we can add element to list. We can't sort a tuple but in a list we can sort by calling \"list.sort()\" method. We can't remove an element in tuple but in list we can remove element We can't replace an element in tuple but you can in a list Reference: https://docs.python.org/2/library/functions.html#tuple","title":"Disadvantages of tuples"},{"location":"blog/working-with-arrays-in-python/","text":"Working with arrays in python \u00b6 array is one of the sequence types in the python. Python arrays behave mostly same like lists except array only stores the homogeneous data type(i.e same data type either integer, string, etc). Defining a python array \u00b6 To define the python array we have define the type of the data Let's define the array of type numbers from array import array numbers = array ( 'i' , [ 1 , 2 , 3 , 4 , 5 ]) print ( numbers ) # output: array('i', [1, 2, 3, 4, 5]) Avalable types in arrays \u00b6 We have the following types available for arrays in python Type code C Type Python Type Minimum size in bytes 'b' signed char int 1 'B' unsigned char int 1 'u' Py_UNICODE Unicode character 2 'h' signed short int 2 'H' unsigned short int 2 'i' signed int int 2 'I' unsigned int int 2 'l' signed long int 4 'L' unsigned long int 4 'q' signed long long int 8 'Q' unsigned long long int 8 'f' float float 4 'd' double float 8 why to arrays instead lists in python? \u00b6 We should use it when you need to expose a C array to an extension or a system call (for example, ioctl or fctnl ). Arrays are more efficient than lists for some uses. If you need to allocate an array that you know will not change, then arrays can be faster and use less memory. On the other hand, part of the reason why lists eat up more memory than arrays is because python will allocate a few extra elements when all allocated elements get used. This means that appending items to lists is faster. So if you plan on adding items, a list is the way to go. methods of python arrays \u00b6 Most of the arrays methods are similar to the python lists. append : To add the elements in the end of an array. insert : To add the elements at an index position. count : Return the number of occurrences of x in the array. extend : Append items from iterable to the end of the array index : Return the smallest i such that i is the index of the first occurrence of x in the array. pop : Removes the item with the index i from the array and returns it. remove : Remove the first occurrence of x from the array. reverse : Reverse the order of the items in the array. tolist : Convert the array to an ordinary list with the same items. Reference: https://docs.python.org/3/library/array.html","title":"Working with arrays in python"},{"location":"blog/working-with-arrays-in-python/#working-with-arrays-in-python","text":"array is one of the sequence types in the python. Python arrays behave mostly same like lists except array only stores the homogeneous data type(i.e same data type either integer, string, etc).","title":"Working with arrays in python"},{"location":"blog/working-with-arrays-in-python/#defining-a-python-array","text":"To define the python array we have define the type of the data Let's define the array of type numbers from array import array numbers = array ( 'i' , [ 1 , 2 , 3 , 4 , 5 ]) print ( numbers ) # output: array('i', [1, 2, 3, 4, 5])","title":"Defining a python array"},{"location":"blog/working-with-arrays-in-python/#avalable-types-in-arrays","text":"We have the following types available for arrays in python Type code C Type Python Type Minimum size in bytes 'b' signed char int 1 'B' unsigned char int 1 'u' Py_UNICODE Unicode character 2 'h' signed short int 2 'H' unsigned short int 2 'i' signed int int 2 'I' unsigned int int 2 'l' signed long int 4 'L' unsigned long int 4 'q' signed long long int 8 'Q' unsigned long long int 8 'f' float float 4 'd' double float 8","title":"Avalable types in arrays"},{"location":"blog/working-with-arrays-in-python/#why-to-arrays-instead-lists-in-python","text":"We should use it when you need to expose a C array to an extension or a system call (for example, ioctl or fctnl ). Arrays are more efficient than lists for some uses. If you need to allocate an array that you know will not change, then arrays can be faster and use less memory. On the other hand, part of the reason why lists eat up more memory than arrays is because python will allocate a few extra elements when all allocated elements get used. This means that appending items to lists is faster. So if you plan on adding items, a list is the way to go.","title":"why to arrays instead lists in python?"},{"location":"blog/working-with-arrays-in-python/#methods-of-python-arrays","text":"Most of the arrays methods are similar to the python lists. append : To add the elements in the end of an array. insert : To add the elements at an index position. count : Return the number of occurrences of x in the array. extend : Append items from iterable to the end of the array index : Return the smallest i such that i is the index of the first occurrence of x in the array. pop : Removes the item with the index i from the array and returns it. remove : Remove the first occurrence of x from the array. reverse : Reverse the order of the items in the array. tolist : Convert the array to an ordinary list with the same items. Reference: https://docs.python.org/3/library/array.html","title":"methods of python arrays"},{"location":"blog/working-with-enum-in-python/","text":"Working with enum in python \u00b6 An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over. The enum module is used for creating enumerations in Python. Enumerations are created with the class keyword or with the functional API. There are specific derived enumerations enum.IntEnum enum.IntFlag enum.Flag Python \"enum\" Example \u00b6 Lets create simple enum for colors from enum import Enum class Color ( Enum ): RED = 1 GREEN = 2 BLUE = 3 print ( Color . RED ) # iterate and print all colors for color in Color : print ( color ) Ref: https://docs.python.org/dev/library/enum.html","title":"Working with enum in python"},{"location":"blog/working-with-enum-in-python/#working-with-enum-in-python","text":"An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over. The enum module is used for creating enumerations in Python. Enumerations are created with the class keyword or with the functional API. There are specific derived enumerations enum.IntEnum enum.IntFlag enum.Flag","title":"Working with enum in python"},{"location":"blog/working-with-enum-in-python/#python-enum-example","text":"Lets create simple enum for colors from enum import Enum class Color ( Enum ): RED = 1 GREEN = 2 BLUE = 3 print ( Color . RED ) # iterate and print all colors for color in Color : print ( color ) Ref: https://docs.python.org/dev/library/enum.html","title":"Python \"enum\" Example"},{"location":"blog/working-with-select_related-in-django-89/","text":"Working With Select_Related In Django \u00b6 select_related is a queryset method in Django which returns new queryset result for a Django Model. select_related is more helpful in foreign-key relationships. It is useful when we are going to use those foreign-key relationship data later in our code. select_related is a preformance booster, which caches the result for the foreign-key relationships, so that django ORM do not need to query again to get the data for the foreign-key relationships. How select_related works? \u00b6 select_related creates a single complex query using joins on related models and retrives the data at once and caches it for later use, So foreign-key relationships won't require database queries. Example Use Case: \u00b6 lets consider below models class ClassRoom ( models . Model ): name = models . CharField ( max_length = 100 ) def __str__ ( self ): return self . name class Student ( models . Model ): name = models . CharField ( max_length = 100 ) class_room = models . ForeignKey ( ClassRoom , on_delete = models . CASCADE ) def __str__ ( self ): return self . name let's consider below queries query1 = Student . objects . all () for student in query1 : print ( student . name ) print ( student . class_room . name ) # queries the database for relational data query2 = Student . objects . all () . select_related () for student in query2 : print ( student . name ) print ( student . class_room . name ) # no database query In above code when we use the query1 it generates the SQL code like below SELECT \"myapp_student\" . \"id\" , \"myapp_student\" . \"name\" , \"myapp_student\" . \"class_room_id\" FROM \"myapp_student\" In above code when we use the query2 it generates the complex SQL code like below SELECT \"myapp_student\" . \"id\" , \"myapp_student\" . \"name\" , \"myapp_student\" . \"class_room_id\" , \"myapp_classroom\" . \"id\" , \"myapp_classroom\" . \"name\" FROM \"myapp_student\" INNER JOIN \"myapp_classroom\" ON ( \"myapp_student\" . \"class_room_id\" = \"myapp_classroom\" . \"id\" ) In the query2 django is joining the foreign key relationships so, when foreign key data is required then django ORM will not hit the database. query1 results in 1 + number of records queries to the database where as in query2 it results in only 1 database query. So, It's recommended to use the select_related when we use foreign key related data.","title":"Working With Select_Related In Django"},{"location":"blog/working-with-select_related-in-django-89/#working-with-select_related-in-django","text":"select_related is a queryset method in Django which returns new queryset result for a Django Model. select_related is more helpful in foreign-key relationships. It is useful when we are going to use those foreign-key relationship data later in our code. select_related is a preformance booster, which caches the result for the foreign-key relationships, so that django ORM do not need to query again to get the data for the foreign-key relationships.","title":"Working With Select_Related In Django"},{"location":"blog/working-with-select_related-in-django-89/#how-select_related-works","text":"select_related creates a single complex query using joins on related models and retrives the data at once and caches it for later use, So foreign-key relationships won't require database queries.","title":"How select_related works?"},{"location":"blog/working-with-select_related-in-django-89/#example-use-case","text":"lets consider below models class ClassRoom ( models . Model ): name = models . CharField ( max_length = 100 ) def __str__ ( self ): return self . name class Student ( models . Model ): name = models . CharField ( max_length = 100 ) class_room = models . ForeignKey ( ClassRoom , on_delete = models . CASCADE ) def __str__ ( self ): return self . name let's consider below queries query1 = Student . objects . all () for student in query1 : print ( student . name ) print ( student . class_room . name ) # queries the database for relational data query2 = Student . objects . all () . select_related () for student in query2 : print ( student . name ) print ( student . class_room . name ) # no database query In above code when we use the query1 it generates the SQL code like below SELECT \"myapp_student\" . \"id\" , \"myapp_student\" . \"name\" , \"myapp_student\" . \"class_room_id\" FROM \"myapp_student\" In above code when we use the query2 it generates the complex SQL code like below SELECT \"myapp_student\" . \"id\" , \"myapp_student\" . \"name\" , \"myapp_student\" . \"class_room_id\" , \"myapp_classroom\" . \"id\" , \"myapp_classroom\" . \"name\" FROM \"myapp_student\" INNER JOIN \"myapp_classroom\" ON ( \"myapp_student\" . \"class_room_id\" = \"myapp_classroom\" . \"id\" ) In the query2 django is joining the foreign key relationships so, when foreign key data is required then django ORM will not hit the database. query1 results in 1 + number of records queries to the database where as in query2 it results in only 1 database query. So, It's recommended to use the select_related when we use foreign key related data.","title":"Example Use Case:"},{"location":"blog/working-with-supervisor-on-ubuntu-76/","text":"Working With Supervisor On Ubuntu \u00b6 In most of the ubuntu virtual private servers it is often case that we will have to run several small programs continuously. The most traditional way to do it is to write a init script in for the program that we want to run continuously. But it is a time consuming process to manage it. Supervisor is a process manager which manages the long running programs by providing an interface which is used to monitor and manage the state of the long running programs. Supervisor installation on Ubuntu \u00b6 To install the supervisor on ubuntu we need run the below command in terminal sudo apt-get install supervisor After completing the successful installation of supervisor it should automatically starts working. To know the supervisor status run the below command(status can be active or inactive) sudo service supervisor status To start the inactive supervisor then run the below command sudo service supervisor start To stop the running supervisor then run the below command sudo service supervisor stop To restart the supervisor and all the programs that it manages then run the below command sudo service supervisor restart We can find the supervisor logs in /var/log/supervisor/supervisord.log Supervisor comes with the command supervisorctl which allows us to manage the added programs to the supervisor. Add a program to Supervisor \u00b6 The program configuration files for Supervisor programs are found in the/etc/supervisor/conf.ddirectory. Let's see the configuration syntax of process to add [ program:<program_name> ] environment = KEY = \"val\" ,KEY2 = \"val2\" command = < command to run the program ex: /usr/bin/local/myscript.sh> autostart = true autorestart = true stderr_logfile = <error log file location ex: /var/log/myscript_err.log> stdout_logfile = <error log file location ex: /var/log/myscript_out.log> From above syntax we can understand that supervisor manages the program with name and if \"autostart=true\" then it will run the program autmatically when supervisor updates the configurations. If \"autorestart=true\" then the program/process will automatically restarts if program/process exit's due to some reason. We can see program/process standard output in the log file that we specified in \"stdout_logfile\". We can see programs/process standard error output in the log file that we specified in \"stderr_logfile\". We can define the environment variable using \"environment\" in supervisor these environment variables can be used inside the program. Once the configuration file is created in the directory /etc/supervisor/conf.dthen we need to tell the supervisor to check for the new programs. we can do it with below command. It is also used to check for updates in the existed configirations and also it will check the syntax of the configuration files. sudo supervisorctl reread After, we need to update the configurations. We can do it with the below command. sudo supervisorctl update Manage the supervisor programs with supervisorctl \u00b6 To see the available programs that supervisor manages we need to run the below command sudo supervisorctl To start the supervisor program run the below command sudo supervisorctl start <program1> <program2> To stop the supervisor program run the below command sudo supervisorctl stop <program1> <program2> To restart the supervisor program run the below command sudo supervisorctl restart <program1> <program2> To restart all programs at once then run the below command sudo supervisorctl restart all To stop all programs at once then run the below command sudo supervisorctl stop all In web development supervisor is mostly used wsgi processes like uWSGI, gunicorn, etc. Reference: http://supervisord.org/","title":"Working With Supervisor On Ubuntu"},{"location":"blog/working-with-supervisor-on-ubuntu-76/#working-with-supervisor-on-ubuntu","text":"In most of the ubuntu virtual private servers it is often case that we will have to run several small programs continuously. The most traditional way to do it is to write a init script in for the program that we want to run continuously. But it is a time consuming process to manage it. Supervisor is a process manager which manages the long running programs by providing an interface which is used to monitor and manage the state of the long running programs.","title":"Working With Supervisor On Ubuntu"},{"location":"blog/working-with-supervisor-on-ubuntu-76/#supervisor-installation-on-ubuntu","text":"To install the supervisor on ubuntu we need run the below command in terminal sudo apt-get install supervisor After completing the successful installation of supervisor it should automatically starts working. To know the supervisor status run the below command(status can be active or inactive) sudo service supervisor status To start the inactive supervisor then run the below command sudo service supervisor start To stop the running supervisor then run the below command sudo service supervisor stop To restart the supervisor and all the programs that it manages then run the below command sudo service supervisor restart We can find the supervisor logs in /var/log/supervisor/supervisord.log Supervisor comes with the command supervisorctl which allows us to manage the added programs to the supervisor.","title":"Supervisor installation on Ubuntu"},{"location":"blog/working-with-supervisor-on-ubuntu-76/#add-a-program-to-supervisor","text":"The program configuration files for Supervisor programs are found in the/etc/supervisor/conf.ddirectory. Let's see the configuration syntax of process to add [ program:<program_name> ] environment = KEY = \"val\" ,KEY2 = \"val2\" command = < command to run the program ex: /usr/bin/local/myscript.sh> autostart = true autorestart = true stderr_logfile = <error log file location ex: /var/log/myscript_err.log> stdout_logfile = <error log file location ex: /var/log/myscript_out.log> From above syntax we can understand that supervisor manages the program with name and if \"autostart=true\" then it will run the program autmatically when supervisor updates the configurations. If \"autorestart=true\" then the program/process will automatically restarts if program/process exit's due to some reason. We can see program/process standard output in the log file that we specified in \"stdout_logfile\". We can see programs/process standard error output in the log file that we specified in \"stderr_logfile\". We can define the environment variable using \"environment\" in supervisor these environment variables can be used inside the program. Once the configuration file is created in the directory /etc/supervisor/conf.dthen we need to tell the supervisor to check for the new programs. we can do it with below command. It is also used to check for updates in the existed configirations and also it will check the syntax of the configuration files. sudo supervisorctl reread After, we need to update the configurations. We can do it with the below command. sudo supervisorctl update","title":"Add a program to Supervisor"},{"location":"blog/working-with-supervisor-on-ubuntu-76/#manage-the-supervisor-programs-with-supervisorctl","text":"To see the available programs that supervisor manages we need to run the below command sudo supervisorctl To start the supervisor program run the below command sudo supervisorctl start <program1> <program2> To stop the supervisor program run the below command sudo supervisorctl stop <program1> <program2> To restart the supervisor program run the below command sudo supervisorctl restart <program1> <program2> To restart all programs at once then run the below command sudo supervisorctl restart all To stop all programs at once then run the below command sudo supervisorctl stop all In web development supervisor is mostly used wsgi processes like uWSGI, gunicorn, etc. Reference: http://supervisord.org/","title":"Manage the supervisor programs with supervisorctl"},{"location":"blog/working-with-vim-editor-in-ubuntu-11/","text":"Working With Vim Editor In Ubuntu \u00b6 Let's start working with vim editor on ubuntu. vim is a light weight and powerful text editor used with the command line. It is very useful for system administrators. when deploying the application on the server normal GUI based text editors will not work. Because, GUI is absent on the deployment servers. We also have nano editor but it' doesn't have much features. vim has many features that make things easy. working with vim editor \u00b6 Install vim on ubuntu sudo apt-get install vim Open a file with vim vim <file \\_ name> Close an opened file To close the opened file just type \" :q \" to close the if you didn't make any changes. To close the file after making some changes witout saving the then type \" :q! \". To close the file with saving the changes then type \" :x \" Save the opened file without closing it To do it you have to type \" :w \". It will write all the changes to the file. Display numbers in vim After opening the file in vim editor just type \" :set number \" Moving pointer/cursor we can use either arrow keys to move the cursor or use keys \"h\" to go left, \"j\" to go down, \"k\" to go up, \"l\" to go right. Search for a word search for a word we use regex. To search forward type / forward search press 'SHIFT' key with * key backward search press 'SHIFT' key with # key Highlight searched term To highlight the search terms we need to type \" :set hls \". To un-highlight then type \" :set nohls \". Replace a pattern/word in vim :[range][substitute]/{match_pattern}/{string}/[flags] [count] Flags **[c]**Confirm each substitution. [g] Replace all occurrences in the line. [i] Ignore case for the pattern. Cut-and-paste or copy-and-paste Position the cursor at the beginning of the text you want to cut/copy. Press v to select visible text , or V to select complete lines, or Ctrl-v or Ctrl-q to select a block. Move the cursor to the end of the text to be cut/copied. While selecting text, you can perform searches and other advanced movement. To cut line/text press d (delete) and to press y (yank) to copy. Now, move the cursor to the location where you want to paste. To press afer the cursor then press p and to paste before the cursor press P . Inserting the text into Vim To insert the text first we need to python \" i \" then it will change into insertion mode. After completing the insertion press Esc to get back to normal. Using multiple windows in vim press :e filename - edit another file press :split filename - split window and load another file press ctrl-w up arrow - move cursor up a window press ctrl-w ctrl-w - move cursor to another window (cycle) press ctrl-w_ - maximize current window press ctrl-w= - make all equal size 10 press ctrl-w+ - increase window size by 10 lines press :vsplit file - vertical split press :sview file - same as split, but readonly press :hide - close current window press :only - keep only this window open press :ls - show current buffers press :b 2 - open buffer #2 in this window word & line completion press ctrl-n, ctrl-p - next/previous word completion press ctrl-x ctrl-l (ctrl-n/p) - line completion press :set dictionary=/usr/share/dict/words, ctrl-x ctrl-k - dictionary completion","title":"Working With Vim Editor In Ubuntu"},{"location":"blog/working-with-vim-editor-in-ubuntu-11/#working-with-vim-editor-in-ubuntu","text":"Let's start working with vim editor on ubuntu. vim is a light weight and powerful text editor used with the command line. It is very useful for system administrators. when deploying the application on the server normal GUI based text editors will not work. Because, GUI is absent on the deployment servers. We also have nano editor but it' doesn't have much features. vim has many features that make things easy.","title":"Working With Vim Editor In Ubuntu"},{"location":"blog/working-with-vim-editor-in-ubuntu-11/#working-with-vim-editor","text":"Install vim on ubuntu sudo apt-get install vim Open a file with vim vim <file \\_ name> Close an opened file To close the opened file just type \" :q \" to close the if you didn't make any changes. To close the file after making some changes witout saving the then type \" :q! \". To close the file with saving the changes then type \" :x \" Save the opened file without closing it To do it you have to type \" :w \". It will write all the changes to the file. Display numbers in vim After opening the file in vim editor just type \" :set number \" Moving pointer/cursor we can use either arrow keys to move the cursor or use keys \"h\" to go left, \"j\" to go down, \"k\" to go up, \"l\" to go right. Search for a word search for a word we use regex. To search forward type / forward search press 'SHIFT' key with * key backward search press 'SHIFT' key with # key Highlight searched term To highlight the search terms we need to type \" :set hls \". To un-highlight then type \" :set nohls \". Replace a pattern/word in vim :[range][substitute]/{match_pattern}/{string}/[flags] [count] Flags **[c]**Confirm each substitution. [g] Replace all occurrences in the line. [i] Ignore case for the pattern. Cut-and-paste or copy-and-paste Position the cursor at the beginning of the text you want to cut/copy. Press v to select visible text , or V to select complete lines, or Ctrl-v or Ctrl-q to select a block. Move the cursor to the end of the text to be cut/copied. While selecting text, you can perform searches and other advanced movement. To cut line/text press d (delete) and to press y (yank) to copy. Now, move the cursor to the location where you want to paste. To press afer the cursor then press p and to paste before the cursor press P . Inserting the text into Vim To insert the text first we need to python \" i \" then it will change into insertion mode. After completing the insertion press Esc to get back to normal. Using multiple windows in vim press :e filename - edit another file press :split filename - split window and load another file press ctrl-w up arrow - move cursor up a window press ctrl-w ctrl-w - move cursor to another window (cycle) press ctrl-w_ - maximize current window press ctrl-w= - make all equal size 10 press ctrl-w+ - increase window size by 10 lines press :vsplit file - vertical split press :sview file - same as split, but readonly press :hide - close current window press :only - keep only this window open press :ls - show current buffers press :b 2 - open buffer #2 in this window word & line completion press ctrl-n, ctrl-p - next/previous word completion press ctrl-x ctrl-l (ctrl-n/p) - line completion press :set dictionary=/usr/share/dict/words, ctrl-x ctrl-k - dictionary completion","title":"working with vim editor"},{"location":"blog/working-with-xls-and-xlsx-files-in-python-13/","text":"Working With Xls And Xlsx Files In Python \u00b6 Let's start working with xls and xlsx files in python. We can read data from xls or xlsx files using python programming and we can also write to xls or xlsx files using python programming. We do this by using the python package \"openpyxl\". The package \"openpyxl\" can be found in Python Package Index. So, we can easily install it with python pip . I recommend you to use python virtualenv . Steps to work with xls and xlsx files in python: \u00b6 Create a virtualenv virtualenv -p python3 env Activate the virtualenv source env/bin/activate Install the \"openpyxl\" python package in virtualenv pip install openpyxl Reading data from xls and xlsx files in python using openpyxl \u00b6 from openpyxl import load_workbook workbook = load_workbook ( '/path/to/file.xlsx' ) # get all worksheets all_sheets = workbook . get_sheet_names () first_sheet = all_sheets [ 0 ] # get a worksheet by its name worksheet = workbook . get_sheet_by_name ( first_sheet ) # print all rows in a worksheet for row in worksheet . iter_rows (): print ( row ) # all the values in a row for cell in row : print ( cell ) # get cell value print ( cell . value ) # get cell with row number and column number worksheet . cell ( row = 1 , column = 2 ) . value In above code we have loaded the xlsx file using the function \"load_workbook\" . It takes the file path and returns the workbook. we can get all sheet names using method \"get_sheet_names\". We can get the worksheet by its name by using the function \"get_sheet_by_name\". If we want we can iterate throught all sheets using \"for loop\". In above code we have worked on only a single sheet of the xlsx file. In general xlsx sheets contains rows and columns. To get all the rows in the sheet we can use the method \"iter_rows\" on the worksheet object. To get column of a row we can iterate through \"for loop\" and get the cell like above code. To get the value of the cell with the attribute \"value\". Writing data to xls and xlsx files in python using openpyxl \u00b6 from openpyxl import Workbook workbook = Workbook () # create xls workbook sheet workbook . create_sheet ( index = 0 , title = 'Sheet1' ) workbook . create_sheet ( index = 0 , title = 'Sheet2' ) # remove xls workbook sheet workbook . remove ( workbook [ 'Sheet2' ]) # get active work sheet work_sheet = workbook . active data = [ [ 'Naveen' , 'M' , 'Software Engineer' ], [ 'David' , 'N' , 'Designer' ], [ 'Shera' , 'H' , 'Web Developer' ] ] rows = 3 cols = 3 # iterate to set data for row_num in range ( 0 , rows ): for col_num in range ( 0 , cols ): work_sheet . cell ( row = row_num + 1 , column = col_num + 1 ) . value = data [ row_num ][ col_num ] # save data to xls file workbook . save ( 'output.xlsx' ) We can create the workbook with class \"Workbook\". Create a sheet using the method \"create_sheet\". After creating the sheet take the active work sheet and then retrieve the cell with it's row and column values and set the value. After save the work book just like shown in the above code. I've just showed how we can read and write the data from and to the xls or xlsx files. It's just the basics of the \"openpyxl\". We can do more with it. For example we can add images to xls file, we can merge the two or more cells and more. All these information is well documented in the \" openpyxl \". References: https://openpyxl.readthedocs.io/en/stable/","title":"Working With Xls And Xlsx Files In Python"},{"location":"blog/working-with-xls-and-xlsx-files-in-python-13/#working-with-xls-and-xlsx-files-in-python","text":"Let's start working with xls and xlsx files in python. We can read data from xls or xlsx files using python programming and we can also write to xls or xlsx files using python programming. We do this by using the python package \"openpyxl\". The package \"openpyxl\" can be found in Python Package Index. So, we can easily install it with python pip . I recommend you to use python virtualenv .","title":"Working With Xls And Xlsx Files In Python"},{"location":"blog/working-with-xls-and-xlsx-files-in-python-13/#steps-to-work-with-xls-and-xlsx-files-in-python","text":"Create a virtualenv virtualenv -p python3 env Activate the virtualenv source env/bin/activate Install the \"openpyxl\" python package in virtualenv pip install openpyxl","title":"Steps to work with xls and xlsx files in python:"},{"location":"blog/working-with-xls-and-xlsx-files-in-python-13/#reading-data-from-xls-and-xlsx-files-in-python-using-openpyxl","text":"from openpyxl import load_workbook workbook = load_workbook ( '/path/to/file.xlsx' ) # get all worksheets all_sheets = workbook . get_sheet_names () first_sheet = all_sheets [ 0 ] # get a worksheet by its name worksheet = workbook . get_sheet_by_name ( first_sheet ) # print all rows in a worksheet for row in worksheet . iter_rows (): print ( row ) # all the values in a row for cell in row : print ( cell ) # get cell value print ( cell . value ) # get cell with row number and column number worksheet . cell ( row = 1 , column = 2 ) . value In above code we have loaded the xlsx file using the function \"load_workbook\" . It takes the file path and returns the workbook. we can get all sheet names using method \"get_sheet_names\". We can get the worksheet by its name by using the function \"get_sheet_by_name\". If we want we can iterate throught all sheets using \"for loop\". In above code we have worked on only a single sheet of the xlsx file. In general xlsx sheets contains rows and columns. To get all the rows in the sheet we can use the method \"iter_rows\" on the worksheet object. To get column of a row we can iterate through \"for loop\" and get the cell like above code. To get the value of the cell with the attribute \"value\".","title":"Reading data from xls and xlsx files in python using openpyxl"},{"location":"blog/working-with-xls-and-xlsx-files-in-python-13/#writing-data-to-xls-and-xlsx-files-in-python-using-openpyxl","text":"from openpyxl import Workbook workbook = Workbook () # create xls workbook sheet workbook . create_sheet ( index = 0 , title = 'Sheet1' ) workbook . create_sheet ( index = 0 , title = 'Sheet2' ) # remove xls workbook sheet workbook . remove ( workbook [ 'Sheet2' ]) # get active work sheet work_sheet = workbook . active data = [ [ 'Naveen' , 'M' , 'Software Engineer' ], [ 'David' , 'N' , 'Designer' ], [ 'Shera' , 'H' , 'Web Developer' ] ] rows = 3 cols = 3 # iterate to set data for row_num in range ( 0 , rows ): for col_num in range ( 0 , cols ): work_sheet . cell ( row = row_num + 1 , column = col_num + 1 ) . value = data [ row_num ][ col_num ] # save data to xls file workbook . save ( 'output.xlsx' ) We can create the workbook with class \"Workbook\". Create a sheet using the method \"create_sheet\". After creating the sheet take the active work sheet and then retrieve the cell with it's row and column values and set the value. After save the work book just like shown in the above code. I've just showed how we can read and write the data from and to the xls or xlsx files. It's just the basics of the \"openpyxl\". We can do more with it. For example we can add images to xls file, we can merge the two or more cells and more. All these information is well documented in the \" openpyxl \". References: https://openpyxl.readthedocs.io/en/stable/","title":"Writing data to xls and xlsx files in python using openpyxl"},{"location":"blog/serverless/custom-docker-containers-aws-lambda/","text":"Why to use custom docker images in AWS lambda ? \u00b6 AWS lambda provides runtimes for programming languages like python , java , ruby , etc. Let's see list of runtimes that AWS lambda currently supports. Python runtimes python3.9 python3.8 python3.7 python3.6 Node.js runtimes nodejs16.x nodejs14.x nodejs12.x Ruby runtimes ruby2.7 Java runtimes java11 java8.al2 java8 Go runtimes go1.x .NET runtimes dotnet6 dotnetcore3.1 If we want a runtime that requires both python and java programming languages then we will need to use the custom runtime for aws lambda function . Because AWS currently didn't have a support for that. Pre-requisites \u00b6 Docker Serverless using custom runtime docker container with AWS lambda & serverless framework \u00b6 we will be using serverless framework to deploy our aws lambda function which uses custom docker container. Let's say we have a usecase that we want to extract the tables from PDF using tabula-py To do that we need a python and java development environments as tabula-py is a wrapper java-tabula. Let's create severless configuration and Dockerfile to solve above problem. Directory structure \u00b6 . \u251c\u2500\u2500 pdf-table-extract \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 requirements.txt \u2514\u2500\u2500 serverless.yml Let's define these files serverless.yml service: custom-service provider: name: aws ecr: # In this section you can define images that will be built locally and uploaded to ECR images: extract_pdf_tables: path: ./pdf-table-extract functions: pdf_tables_to_json: image: name: extract_pdf_tables pdf-table-extract/Dockerfile FROM public.ecr.aws/lambda/python:3.9-x86_64 RUN yum install -y java-17-amazon-corretto COPY requirements.txt ${ LAMBDA_TASK_ROOT } /requirements.txt RUN pip3 install -r ${ LAMBDA_TASK_ROOT } /requirements.txt COPY . ${ LAMBDA_TASK_ROOT } CMD [ \"main.lambda_handler\" ] pdf-table-extract/requirements.txt certifi == 2022 .5.18.1 charset-normalizer == 2 .0.12 distro == 1 .7.0 idna == 3 .3 numpy == 1 .22.4 pandas == 1 .4.2 python-dateutil == 2 .8.2 pytz == 2022 .1 requests == 2 .27.1 six == 1 .16.0 tabula-py == 2 .3.0 urllib3 == 1 .26.9 pdf-table-extract/main.py import tabula def lambda_handler ( event , context ): cols = [ \"col1\" , \"col2\" ] url = \"https://github.com/tabulapdf/tabula-java/raw/master/src/test/resources/technology/tabula/arabic.pdf\" pdf_df = tabula . read_pdf ( url ) df = pdf_df [ 0 ] df . columns = cols df . fillna ( '' , inplace = True ) return { \"data\" : df . to_dict ( \"records\" )} if __name__ == \"__main__\" : print ( lambda_handler ({}, {})) Now, Let's deploy it to aws lambda with below commands. sls deploy It will deploy the lambda function pdf_tables_to_json to AWS cloud. To verify it login to your aws console and goto lambda functions and search for the function pdf_tables_to_json and test it. Note: It will throw an error if your computer did not have the docker and serverless installed References: \u00b6 https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html https://www.serverless.com/blog/container-support-for-lambda https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/serverless-framework/extract-pdftables","title":"Serverless Framework Custom Docker Containers For AWS Lambda"},{"location":"blog/serverless/custom-docker-containers-aws-lambda/#why-to-use-custom-docker-images-in-aws-lambda","text":"AWS lambda provides runtimes for programming languages like python , java , ruby , etc. Let's see list of runtimes that AWS lambda currently supports. Python runtimes python3.9 python3.8 python3.7 python3.6 Node.js runtimes nodejs16.x nodejs14.x nodejs12.x Ruby runtimes ruby2.7 Java runtimes java11 java8.al2 java8 Go runtimes go1.x .NET runtimes dotnet6 dotnetcore3.1 If we want a runtime that requires both python and java programming languages then we will need to use the custom runtime for aws lambda function . Because AWS currently didn't have a support for that.","title":"Why to use custom docker images in AWS lambda ?"},{"location":"blog/serverless/custom-docker-containers-aws-lambda/#pre-requisites","text":"Docker Serverless","title":"Pre-requisites"},{"location":"blog/serverless/custom-docker-containers-aws-lambda/#using-custom-runtime-docker-container-with-aws-lambda-serverless-framework","text":"we will be using serverless framework to deploy our aws lambda function which uses custom docker container. Let's say we have a usecase that we want to extract the tables from PDF using tabula-py To do that we need a python and java development environments as tabula-py is a wrapper java-tabula. Let's create severless configuration and Dockerfile to solve above problem.","title":"using custom runtime docker container with AWS lambda &amp; serverless framework"},{"location":"blog/serverless/custom-docker-containers-aws-lambda/#directory-structure","text":". \u251c\u2500\u2500 pdf-table-extract \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 requirements.txt \u2514\u2500\u2500 serverless.yml Let's define these files serverless.yml service: custom-service provider: name: aws ecr: # In this section you can define images that will be built locally and uploaded to ECR images: extract_pdf_tables: path: ./pdf-table-extract functions: pdf_tables_to_json: image: name: extract_pdf_tables pdf-table-extract/Dockerfile FROM public.ecr.aws/lambda/python:3.9-x86_64 RUN yum install -y java-17-amazon-corretto COPY requirements.txt ${ LAMBDA_TASK_ROOT } /requirements.txt RUN pip3 install -r ${ LAMBDA_TASK_ROOT } /requirements.txt COPY . ${ LAMBDA_TASK_ROOT } CMD [ \"main.lambda_handler\" ] pdf-table-extract/requirements.txt certifi == 2022 .5.18.1 charset-normalizer == 2 .0.12 distro == 1 .7.0 idna == 3 .3 numpy == 1 .22.4 pandas == 1 .4.2 python-dateutil == 2 .8.2 pytz == 2022 .1 requests == 2 .27.1 six == 1 .16.0 tabula-py == 2 .3.0 urllib3 == 1 .26.9 pdf-table-extract/main.py import tabula def lambda_handler ( event , context ): cols = [ \"col1\" , \"col2\" ] url = \"https://github.com/tabulapdf/tabula-java/raw/master/src/test/resources/technology/tabula/arabic.pdf\" pdf_df = tabula . read_pdf ( url ) df = pdf_df [ 0 ] df . columns = cols df . fillna ( '' , inplace = True ) return { \"data\" : df . to_dict ( \"records\" )} if __name__ == \"__main__\" : print ( lambda_handler ({}, {})) Now, Let's deploy it to aws lambda with below commands. sls deploy It will deploy the lambda function pdf_tables_to_json to AWS cloud. To verify it login to your aws console and goto lambda functions and search for the function pdf_tables_to_json and test it. Note: It will throw an error if your computer did not have the docker and serverless installed","title":"Directory structure"},{"location":"blog/serverless/custom-docker-containers-aws-lambda/#references","text":"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html https://www.serverless.com/blog/container-support-for-lambda https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/serverless-framework/extract-pdftables","title":"References:"},{"location":"course/design-patterns/","text":"Design Patterns \u00b6 Why design patterns? \u00b6 A design pattern provides a general reusable solution for the common problems that occur in software design. The pattern typically shows relationships and interactions between classes or objects. The idea is to speed up the development process by providing well-tested, proven development/design paradigms. Design patterns are programming language independent strategies for solving a common problem. That means a design pattern represents an idea, not a particular implementation. By using design patterns, you can make your code more flexible, reusable, and maintainable. Types of design patterns \u00b6 Creational Design Patterns Structural Design Patterns Behavioral Design Patterns Creational Design Patterns \u00b6 Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code. Types of creational design patterns \u00b6 Factory Method Abstract Factory Builder Prototype Singleton Structural design patterns \u00b6 Types of structural design patterns \u00b6 Adapter Bridge Composite Facade Proxy Decorator Flyweight Behavioral design patterns \u00b6 Types of behavioral design patterns \u00b6 Chain of Responsibility Command Iterator Mediator Memento Observer State Strategy Template Method Visitor","title":"Design Patterns"},{"location":"course/design-patterns/#design-patterns","text":"","title":"Design Patterns"},{"location":"course/design-patterns/#why-design-patterns","text":"A design pattern provides a general reusable solution for the common problems that occur in software design. The pattern typically shows relationships and interactions between classes or objects. The idea is to speed up the development process by providing well-tested, proven development/design paradigms. Design patterns are programming language independent strategies for solving a common problem. That means a design pattern represents an idea, not a particular implementation. By using design patterns, you can make your code more flexible, reusable, and maintainable.","title":"Why design patterns?"},{"location":"course/design-patterns/#types-of-design-patterns","text":"Creational Design Patterns Structural Design Patterns Behavioral Design Patterns","title":"Types of design patterns"},{"location":"course/design-patterns/#creational-design-patterns","text":"Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.","title":"Creational Design Patterns"},{"location":"course/design-patterns/#types-of-creational-design-patterns","text":"Factory Method Abstract Factory Builder Prototype Singleton","title":"Types of creational design patterns"},{"location":"course/design-patterns/#structural-design-patterns","text":"","title":"Structural design patterns"},{"location":"course/design-patterns/#types-of-structural-design-patterns","text":"Adapter Bridge Composite Facade Proxy Decorator Flyweight","title":"Types of structural design patterns"},{"location":"course/design-patterns/#behavioral-design-patterns","text":"","title":"Behavioral design patterns"},{"location":"course/design-patterns/#types-of-behavioral-design-patterns","text":"Chain of Responsibility Command Iterator Mediator Memento Observer State Strategy Template Method Visitor","title":"Types of behavioral design patterns"},{"location":"course/design-patterns/abstract-factory/","text":"Abstract Factory \u00b6 The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes. We can also call it as factory of factories Classes in abstract factory pattern \u00b6 AbstractFactory - declares a interface for operations that create abstract products. ConcreteFactory - implements operations to create concrete products. AbstractProduct - declares an interface for a type of product objects. Product - defines a product to be created by the corresponding ConcreteFactory; it implements the AbstractProduct interface. Client - uses the interfaces declared by the AbstractFactory and AbstractProduct classes. When to abstract factory? \u00b6 The problems solved by abstract factory are similar to those solved by the factory method pattern, but with greater abstraction in the types of objects that need to be created. Therefore, in the case of abstract factory, it is required to work with several families of products related to each other rather than in a set of products. The family of objects with which the client must work is not known a priori. Rather, this knowledge depends directly on the interaction of another user with the system (end user or system). In the event that it is necessary to extend the internal components (the number of families and objects that are created) without having to have the code coupled, but rather have interfaces and abstractions that allow to easily extend with factories and specific products. Advantages \u00b6 Compatibility between products created by the same factory class is guaranteed. Clean code because the open-closed principle is guaranteed since new product families can be introduced without breaking the existing code. Cleaner code because the single responsibility principle (SRP) is respected since the responsibility of creating the concrete product is transferred to the concrete creator class instead of the client class having this responsibility. Disadvantages \u00b6 However, the main drawback of the abstract factory pattern, like most design patterns, is that there is an increase in complexity in the code and an increase in the number of classes required for the code. However, this disadvantage is well known when applying design patterns for it is the price to pay for gaining abstraction in the code. Example use cases of abstract factory \u00b6 use case: produce different types of mobiles \u00b6 Let's assume we have a manufacturing factory which creates mobile phones like Oneplus , Sony , iphone and we want to apply the abstract factory pattern to this case. We need a abstract factory class. from abc import ABC , abstractmethod # abstract product class AbstractMobile ( ABC ): @abstractmethod def getBrand ( self ): pass # product class Iphone ( AbstractMobile ): def getBrand ( self ): return \"Iphone\" # product class OnePlus ( AbstractMobile ): def getBrand ( self ): return \"OnePlus\" # product class Sony ( AbstractMobile ): def getBrand ( self ): return \"Sony\" # abstract factory class AbstractMobileFactory ( ABC ): @abstractmethod def getMobile ( self , name ): \"\"\" get mobile\"\"\" # product factory class AndroidMobileFactory ( AbstractMobileFactory ): def getMobile ( self , name ): if ( name == \"OnePlus\" ): return OnePlus () elif ( name == \"Sony\" ): return Sony () # product factory class IphoneMobileFactory ( AbstractMobileFactory ): def getMobile ( self ): return Iphone () # factory producer class FactoryProducer : @staticmethod def getFactory ( os_type ): if ( os_type == \"android\" ): return AndroidMobileFactory () elif ( os_type == \"ios\" ): return IphoneMobileFactory () # client if __name__ == \"__main__\" : android_factory = FactoryProducer . getFactory ( 'android' ) one_plus_mobile = android_factory . getMobile ( 'OnePlus' ) print ( one_plus_mobile . getBrand ()) one_plus_mobile = android_factory . getMobile ( 'Sony' ) print ( one_plus_mobile . getBrand ()) ios_factory = FactoryProducer . getFactory ( 'ios' ) iphone_mobile = ios_factory . getMobile () print ( one_plus_mobile . getBrand ()) From the above code AbstractMobileFactory is abstract factory AbstractMobile is abstract product FactoryProducer is abstract product factory __name__ == \"__main__\" is the client","title":"Abstract Factory"},{"location":"course/design-patterns/abstract-factory/#abstract-factory","text":"The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes. We can also call it as factory of factories","title":"Abstract Factory"},{"location":"course/design-patterns/abstract-factory/#classes-in-abstract-factory-pattern","text":"AbstractFactory - declares a interface for operations that create abstract products. ConcreteFactory - implements operations to create concrete products. AbstractProduct - declares an interface for a type of product objects. Product - defines a product to be created by the corresponding ConcreteFactory; it implements the AbstractProduct interface. Client - uses the interfaces declared by the AbstractFactory and AbstractProduct classes.","title":"Classes in abstract factory pattern"},{"location":"course/design-patterns/abstract-factory/#when-to-abstract-factory","text":"The problems solved by abstract factory are similar to those solved by the factory method pattern, but with greater abstraction in the types of objects that need to be created. Therefore, in the case of abstract factory, it is required to work with several families of products related to each other rather than in a set of products. The family of objects with which the client must work is not known a priori. Rather, this knowledge depends directly on the interaction of another user with the system (end user or system). In the event that it is necessary to extend the internal components (the number of families and objects that are created) without having to have the code coupled, but rather have interfaces and abstractions that allow to easily extend with factories and specific products.","title":"When to abstract factory?"},{"location":"course/design-patterns/abstract-factory/#advantages","text":"Compatibility between products created by the same factory class is guaranteed. Clean code because the open-closed principle is guaranteed since new product families can be introduced without breaking the existing code. Cleaner code because the single responsibility principle (SRP) is respected since the responsibility of creating the concrete product is transferred to the concrete creator class instead of the client class having this responsibility.","title":"Advantages"},{"location":"course/design-patterns/abstract-factory/#disadvantages","text":"However, the main drawback of the abstract factory pattern, like most design patterns, is that there is an increase in complexity in the code and an increase in the number of classes required for the code. However, this disadvantage is well known when applying design patterns for it is the price to pay for gaining abstraction in the code.","title":"Disadvantages"},{"location":"course/design-patterns/abstract-factory/#example-use-cases-of-abstract-factory","text":"","title":"Example use cases of abstract factory"},{"location":"course/design-patterns/abstract-factory/#use-case-produce-different-types-of-mobiles","text":"Let's assume we have a manufacturing factory which creates mobile phones like Oneplus , Sony , iphone and we want to apply the abstract factory pattern to this case. We need a abstract factory class. from abc import ABC , abstractmethod # abstract product class AbstractMobile ( ABC ): @abstractmethod def getBrand ( self ): pass # product class Iphone ( AbstractMobile ): def getBrand ( self ): return \"Iphone\" # product class OnePlus ( AbstractMobile ): def getBrand ( self ): return \"OnePlus\" # product class Sony ( AbstractMobile ): def getBrand ( self ): return \"Sony\" # abstract factory class AbstractMobileFactory ( ABC ): @abstractmethod def getMobile ( self , name ): \"\"\" get mobile\"\"\" # product factory class AndroidMobileFactory ( AbstractMobileFactory ): def getMobile ( self , name ): if ( name == \"OnePlus\" ): return OnePlus () elif ( name == \"Sony\" ): return Sony () # product factory class IphoneMobileFactory ( AbstractMobileFactory ): def getMobile ( self ): return Iphone () # factory producer class FactoryProducer : @staticmethod def getFactory ( os_type ): if ( os_type == \"android\" ): return AndroidMobileFactory () elif ( os_type == \"ios\" ): return IphoneMobileFactory () # client if __name__ == \"__main__\" : android_factory = FactoryProducer . getFactory ( 'android' ) one_plus_mobile = android_factory . getMobile ( 'OnePlus' ) print ( one_plus_mobile . getBrand ()) one_plus_mobile = android_factory . getMobile ( 'Sony' ) print ( one_plus_mobile . getBrand ()) ios_factory = FactoryProducer . getFactory ( 'ios' ) iphone_mobile = ios_factory . getMobile () print ( one_plus_mobile . getBrand ()) From the above code AbstractMobileFactory is abstract factory AbstractMobile is abstract product FactoryProducer is abstract product factory __name__ == \"__main__\" is the client","title":"use case: produce different types of mobiles"},{"location":"course/design-patterns/adapter/","text":"Adapter \u00b6 The Adapter design pattern converts the interface of a class into another interface clients expect. It's a structural design pattern Use Cases of adapter pattern \u00b6 Convert an interface of an object to a different form Like power socket adapter for US and EU Refactoring of a large application Working with legacy code / database Example implementation of adapter pattern \u00b6 Let's we have two address classes VendorAddress and CustomerAddress as below. from abc import ABC class AbsAddress ( ABC ): line : str city : str country : str pin : str class VendorAddress : def __init__ ( self , line1 , line2 , line3 , city , country , pin ): self . line1 = line1 self . line2 = line2 self . line3 = line3 self . city = city self . country = country self . pin = pin class CustomerAddress ( AbsAddress ): def __init__ ( self , line , city , country , pin ): self . line = line self . city = city self . country = country self . pin = pin But, the client only knows details about the abstract class. so, client implemented the below code. def print_address ( address ): print ( f ' { address . line } , { address . city } , { address . country } , { address . pin } ' ) If we pass VendorAddress address to it then it will throw an error. so, we need an adapter which mimics the abstract class AbsAddress . let's write the class VendorAddressAdapter class VendorAddressAdapter : def __init__ ( self , vendor_address ): self . line = f ' { vendor_address . line1 } , { vendor_address . line2 } , { vendor_address . line3 } ' self . city = vendor_address . city self . country = vendor_address . country self . pin = vendor_address . pin If we create adapter objects and pass it to the client funciton it will work. Let's put all components together from abc import ABC class AbsAddress ( ABC ): line : str city : str country : str pin : str class VendorAddress : def __init__ ( self , line1 , line2 , line3 , city , country , pin ): self . line1 = line1 self . line2 = line2 self . line3 = line3 self . city = city self . country = country self . pin = pin class CustomerAddress ( AbsAddress ): def __init__ ( self , line , city , country , pin ): self . line = line self . city = city self . country = country self . pin = pin class VendorAddressAdapter : def __init__ ( self , vendor_address ): self . line = f ' { vendor_address . line1 } , { vendor_address . line2 } , { vendor_address . line3 } ' self . city = vendor_address . city self . country = vendor_address . country self . pin = vendor_address . pin # client def print_address ( address ): print ( f ' { address . line } , { address . city } , { address . country } , { address . pin } ' ) if __name__ == '__main__' : address1 = CustomerAddress ( \"101/HG\" , \"Goldberg\" , \"Sambala\" , 99099090 ) address2 = VendorAddress ( \"105\" , \"HG\" , \"Hydro\" , \"Mercury\" , \"Gondwana\" , 88088080 ) address2_adapt = VendorAddressAdapter ( address2 ) for address in [ address1 , address2_adapt ]: print_address ( address ) In the future, if we get more classes like this then we don't need to change the client implementation. we can have an adapter to solve it. References: \u00b6 https://en.wikipedia.org/wiki/Adapter_pattern https://python.astrotech.io/design-patterns/structural/adapter.html","title":"Adapter"},{"location":"course/design-patterns/adapter/#adapter","text":"The Adapter design pattern converts the interface of a class into another interface clients expect. It's a structural design pattern","title":"Adapter"},{"location":"course/design-patterns/adapter/#use-cases-of-adapter-pattern","text":"Convert an interface of an object to a different form Like power socket adapter for US and EU Refactoring of a large application Working with legacy code / database","title":"Use Cases of adapter pattern"},{"location":"course/design-patterns/adapter/#example-implementation-of-adapter-pattern","text":"Let's we have two address classes VendorAddress and CustomerAddress as below. from abc import ABC class AbsAddress ( ABC ): line : str city : str country : str pin : str class VendorAddress : def __init__ ( self , line1 , line2 , line3 , city , country , pin ): self . line1 = line1 self . line2 = line2 self . line3 = line3 self . city = city self . country = country self . pin = pin class CustomerAddress ( AbsAddress ): def __init__ ( self , line , city , country , pin ): self . line = line self . city = city self . country = country self . pin = pin But, the client only knows details about the abstract class. so, client implemented the below code. def print_address ( address ): print ( f ' { address . line } , { address . city } , { address . country } , { address . pin } ' ) If we pass VendorAddress address to it then it will throw an error. so, we need an adapter which mimics the abstract class AbsAddress . let's write the class VendorAddressAdapter class VendorAddressAdapter : def __init__ ( self , vendor_address ): self . line = f ' { vendor_address . line1 } , { vendor_address . line2 } , { vendor_address . line3 } ' self . city = vendor_address . city self . country = vendor_address . country self . pin = vendor_address . pin If we create adapter objects and pass it to the client funciton it will work. Let's put all components together from abc import ABC class AbsAddress ( ABC ): line : str city : str country : str pin : str class VendorAddress : def __init__ ( self , line1 , line2 , line3 , city , country , pin ): self . line1 = line1 self . line2 = line2 self . line3 = line3 self . city = city self . country = country self . pin = pin class CustomerAddress ( AbsAddress ): def __init__ ( self , line , city , country , pin ): self . line = line self . city = city self . country = country self . pin = pin class VendorAddressAdapter : def __init__ ( self , vendor_address ): self . line = f ' { vendor_address . line1 } , { vendor_address . line2 } , { vendor_address . line3 } ' self . city = vendor_address . city self . country = vendor_address . country self . pin = vendor_address . pin # client def print_address ( address ): print ( f ' { address . line } , { address . city } , { address . country } , { address . pin } ' ) if __name__ == '__main__' : address1 = CustomerAddress ( \"101/HG\" , \"Goldberg\" , \"Sambala\" , 99099090 ) address2 = VendorAddress ( \"105\" , \"HG\" , \"Hydro\" , \"Mercury\" , \"Gondwana\" , 88088080 ) address2_adapt = VendorAddressAdapter ( address2 ) for address in [ address1 , address2_adapt ]: print_address ( address ) In the future, if we get more classes like this then we don't need to change the client implementation. we can have an adapter to solve it.","title":"Example implementation of adapter pattern"},{"location":"course/design-patterns/adapter/#references","text":"https://en.wikipedia.org/wiki/Adapter_pattern https://python.astrotech.io/design-patterns/structural/adapter.html","title":"References:"},{"location":"course/design-patterns/bridge/","text":"Bridge \u00b6 The Bridge design pattern allows you to separate the abstraction from the implementation It is a structural design pattern. This is a design mechanism that encapsulates an implementation class inside of an interface class. The bridge pattern allows the Abstraction and the Implementation to be developed independently and the client code can access only the Abstraction part without being concerned about the Implementation part. It increases the loose coupling between class abstraction and it\u2019s implementation. It uses composition over the inheritance. Example of bridge pattern \u00b6 Let's consider the simple example of shapes Circle and Square . from abc import ABC , abstractmethod class Shape ( ABC ): @abstractmethod def display ( self ): pass class Square ( Shape ): def display ( self ): print ( \"square\" ) class Circle ( Shape ): def display ( self ): print ( \"circle\" ) If we want to create colored Circle and Square then we need onemore class Color . If we use inheritance then we end up creating multiple subclasses. By using composition we can reduce the number of classes and improve the code maintainability. Let's write the color classes from abc import ABC , abstractmethod class Color ( ABC ): @abstractmethod def get_color ( self ): pass class Red ( Color ): def get_color ( self ): print ( \"Color Red\" ) class Blue ( Color ): def get_color ( self ): print ( \"Color Blue\" ) Now, let update our abstract class Shape to accept the color as argument and abstract it. class Shape ( ABC ): def __init__ ( self , color : Color ): self . color = color def get_color ( self ): self . color . get_color () @abstractmethod def display ( self ): pass As, we exposed methods get_color and display to the client on class Shape . so, client will only use these methods. Let's see the client implementation color = Blue () blue_square = Square ( color ) blue_square . display () blue_square . get_color () # output # square # Color Blue You can find full code at github References: \u00b6 https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/structural_design_patterns/bridge.py https://refactoring.guru/design-patterns/bridge","title":"Bridge"},{"location":"course/design-patterns/bridge/#bridge","text":"The Bridge design pattern allows you to separate the abstraction from the implementation It is a structural design pattern. This is a design mechanism that encapsulates an implementation class inside of an interface class. The bridge pattern allows the Abstraction and the Implementation to be developed independently and the client code can access only the Abstraction part without being concerned about the Implementation part. It increases the loose coupling between class abstraction and it\u2019s implementation. It uses composition over the inheritance.","title":"Bridge"},{"location":"course/design-patterns/bridge/#example-of-bridge-pattern","text":"Let's consider the simple example of shapes Circle and Square . from abc import ABC , abstractmethod class Shape ( ABC ): @abstractmethod def display ( self ): pass class Square ( Shape ): def display ( self ): print ( \"square\" ) class Circle ( Shape ): def display ( self ): print ( \"circle\" ) If we want to create colored Circle and Square then we need onemore class Color . If we use inheritance then we end up creating multiple subclasses. By using composition we can reduce the number of classes and improve the code maintainability. Let's write the color classes from abc import ABC , abstractmethod class Color ( ABC ): @abstractmethod def get_color ( self ): pass class Red ( Color ): def get_color ( self ): print ( \"Color Red\" ) class Blue ( Color ): def get_color ( self ): print ( \"Color Blue\" ) Now, let update our abstract class Shape to accept the color as argument and abstract it. class Shape ( ABC ): def __init__ ( self , color : Color ): self . color = color def get_color ( self ): self . color . get_color () @abstractmethod def display ( self ): pass As, we exposed methods get_color and display to the client on class Shape . so, client will only use these methods. Let's see the client implementation color = Blue () blue_square = Square ( color ) blue_square . display () blue_square . get_color () # output # square # Color Blue You can find full code at github","title":"Example of bridge pattern"},{"location":"course/design-patterns/bridge/#references","text":"https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/structural_design_patterns/bridge.py https://refactoring.guru/design-patterns/bridge","title":"References:"},{"location":"course/design-patterns/builder/","text":"Builder \u00b6 Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code. Seperates the construction of an object from it's representation Encapsulates object construction Multi step construction process Implementations can vary Client only sees the abstraction Product : \u00b6 It's used by the Concrete Builder class. It contains the attributes and functionalities of the class. Builder : \u00b6 It's abstract class which contains the methods that will be implemented by the Concrete Builder . Concrete Builder : \u00b6 It implements the methods defined in the abstrct Builder class and it uses the objects of class Product . Director : \u00b6 It takes the Concrete Builder object and it's method construct() performs the step by step operations and returns the object to assemble the product parts. Client : \u00b6 It uses the classes Director and Builder and their methods to get the required output. Builder pattern implementation \u00b6 Let's consider the scenario of building a house. To build the house we need to build basement, walls, windows, roof. we need the following steps build basement build walls build windows buils doors build roof step1: Let's write the code for the product class House class House : basement = None walls = None windows = None doors = None roof = None def get_info ( self ): print ( f \"basement: { self . basement } \" ) print ( f \"walls: { self . walls } \" ) print ( f \"windows: { self . windows } \" ) print ( f \"doors: { self . doors } \" ) print ( f \"roof: { self . roof } \\n \" ) step2: Let's create the abstract builder class AbsHouseBuilder which contains the required methods to build the house. from abc import ABC , abstractmethod class AbsHouseBuilder ( ABC ): house = None @abstractmethod def build_basement ( self ): pass @abstractmethod def build_walls ( self ): pass @abstractmethod def build_windows ( self ): pass @abstractmethod def build_doors ( self ): pass @abstractmethod def build_roof ( self ): pass step3: Let's create the concrete builder class SimpleHouseBuilder which implements the abstract methods defined in the class AbsHouseBuilder . class SimpleHouseBuilder ( AbsHouseBuilder ): def __init__ ( self ): self . house = House () def build_basement ( self ): self . house . basement = \"rock solid basement\" def build_walls ( self ): self . house . walls = \"4 sand brick walls\" def build_windows ( self ): self . house . windows = \"2 wooden windows\" def build_doors ( self ): self . house . doors = \"2 wooden doors\" def build_roof ( self ): self . house . roof = \"Gable roof\" def get_house ( self ): return self . house step4: Let's create a director class HouseDirector which will call the builder methods in a specific order to build the product i.e simple house. class HouseDirector : def __init__ ( self , builder ): self . builder = builder def construct ( self ): self . builder . build_basement () self . builder . build_walls () self . builder . build_windows () self . builder . build_doors () self . builder . build_roof () return self . builder . get_house () step5: Let's use the defined classes HouseDirector and SimpleHouseBuilder to create the simple house. if __name__ == '__main__' : builder = SimpleHouseBuilder () director = HouseDirector ( builder ) house = director . construct () house . get_info () Once, we combine all the above and execute it then it will give us the below output basement: rock solid basement walls: 4 sand brick walls windows: 2 wooden windows doors: 2 wooden doors roof: Gable roof Now, let's say if we want to build a Igloo house then we just need to write IglooHouseBuilder and implement the respective methods and reuse the existing code. class IglooHouseBuilder ( AbsHouseBuilder ): def __init__ ( self ): self . house = House () def build_basement ( self ): self . house . basement = \"Ice basement\" def build_walls ( self ): self . house . walls = \"round wall\" def build_windows ( self ): self . house . windows = \"no windows\" def build_doors ( self ): self . house . doors = \"1 wooden door\" def build_roof ( self ): self . house . roof = \"Ice roof\" def get_house ( self ): return self . house Now, let's update the client code to use the both builders classes if __name__ == '__main__' : builders = [ SimpleHouseBuilder (), IglooHouseBuilder ()] for builder in builders : director = HouseDirector ( builder ) house = director . construct () house . get_info () It gives the below output basement: rock solid basement walls: 4 sand brick walls windows: 2 wooden windows doors: 2 wooden doors roof: Gable roof basement: Ice basement walls: round wall windows: no windows doors: 1 wooden door roof: Ice roof References: \u00b6 https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/creational_design_patterns/builder.py https://python.astrotech.io/design-patterns/creational/builder.html","title":"Builder"},{"location":"course/design-patterns/builder/#builder","text":"Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code. Seperates the construction of an object from it's representation Encapsulates object construction Multi step construction process Implementations can vary Client only sees the abstraction","title":"Builder"},{"location":"course/design-patterns/builder/#product","text":"It's used by the Concrete Builder class. It contains the attributes and functionalities of the class.","title":"Product:"},{"location":"course/design-patterns/builder/#builder_1","text":"It's abstract class which contains the methods that will be implemented by the Concrete Builder .","title":"Builder:"},{"location":"course/design-patterns/builder/#concrete-builder","text":"It implements the methods defined in the abstrct Builder class and it uses the objects of class Product .","title":"Concrete Builder:"},{"location":"course/design-patterns/builder/#director","text":"It takes the Concrete Builder object and it's method construct() performs the step by step operations and returns the object to assemble the product parts.","title":"Director:"},{"location":"course/design-patterns/builder/#client","text":"It uses the classes Director and Builder and their methods to get the required output.","title":"Client:"},{"location":"course/design-patterns/builder/#builder-pattern-implementation","text":"Let's consider the scenario of building a house. To build the house we need to build basement, walls, windows, roof. we need the following steps build basement build walls build windows buils doors build roof step1: Let's write the code for the product class House class House : basement = None walls = None windows = None doors = None roof = None def get_info ( self ): print ( f \"basement: { self . basement } \" ) print ( f \"walls: { self . walls } \" ) print ( f \"windows: { self . windows } \" ) print ( f \"doors: { self . doors } \" ) print ( f \"roof: { self . roof } \\n \" ) step2: Let's create the abstract builder class AbsHouseBuilder which contains the required methods to build the house. from abc import ABC , abstractmethod class AbsHouseBuilder ( ABC ): house = None @abstractmethod def build_basement ( self ): pass @abstractmethod def build_walls ( self ): pass @abstractmethod def build_windows ( self ): pass @abstractmethod def build_doors ( self ): pass @abstractmethod def build_roof ( self ): pass step3: Let's create the concrete builder class SimpleHouseBuilder which implements the abstract methods defined in the class AbsHouseBuilder . class SimpleHouseBuilder ( AbsHouseBuilder ): def __init__ ( self ): self . house = House () def build_basement ( self ): self . house . basement = \"rock solid basement\" def build_walls ( self ): self . house . walls = \"4 sand brick walls\" def build_windows ( self ): self . house . windows = \"2 wooden windows\" def build_doors ( self ): self . house . doors = \"2 wooden doors\" def build_roof ( self ): self . house . roof = \"Gable roof\" def get_house ( self ): return self . house step4: Let's create a director class HouseDirector which will call the builder methods in a specific order to build the product i.e simple house. class HouseDirector : def __init__ ( self , builder ): self . builder = builder def construct ( self ): self . builder . build_basement () self . builder . build_walls () self . builder . build_windows () self . builder . build_doors () self . builder . build_roof () return self . builder . get_house () step5: Let's use the defined classes HouseDirector and SimpleHouseBuilder to create the simple house. if __name__ == '__main__' : builder = SimpleHouseBuilder () director = HouseDirector ( builder ) house = director . construct () house . get_info () Once, we combine all the above and execute it then it will give us the below output basement: rock solid basement walls: 4 sand brick walls windows: 2 wooden windows doors: 2 wooden doors roof: Gable roof Now, let's say if we want to build a Igloo house then we just need to write IglooHouseBuilder and implement the respective methods and reuse the existing code. class IglooHouseBuilder ( AbsHouseBuilder ): def __init__ ( self ): self . house = House () def build_basement ( self ): self . house . basement = \"Ice basement\" def build_walls ( self ): self . house . walls = \"round wall\" def build_windows ( self ): self . house . windows = \"no windows\" def build_doors ( self ): self . house . doors = \"1 wooden door\" def build_roof ( self ): self . house . roof = \"Ice roof\" def get_house ( self ): return self . house Now, let's update the client code to use the both builders classes if __name__ == '__main__' : builders = [ SimpleHouseBuilder (), IglooHouseBuilder ()] for builder in builders : director = HouseDirector ( builder ) house = director . construct () house . get_info () It gives the below output basement: rock solid basement walls: 4 sand brick walls windows: 2 wooden windows doors: 2 wooden doors roof: Gable roof basement: Ice basement walls: round wall windows: no windows doors: 1 wooden door roof: Ice roof","title":"Builder pattern implementation"},{"location":"course/design-patterns/builder/#references","text":"https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/creational_design_patterns/builder.py https://python.astrotech.io/design-patterns/creational/builder.html","title":"References:"},{"location":"course/design-patterns/composite/","text":"Composite \u00b6 Allows us to represent individual entities(leaves) and groups of leaves as the same. Is a structural design pattern that lets you compose objects into a changeable tree structure. Is great if you need the option of swapping hierarchical relationships around. Allows you to add/remove components to the hierarchy. Provides flexibility of structure Terminology \u00b6 Component Interface : The interface that all leaves and composites should implement. Leaf : A single object that can exist inside or outside a composite. Composite : A collection of leaves and/or other composites. Composite pattern example \u00b6 Let's say we want to represent the departments hierarchy . The departments are Accounting , Developement and Management . Management is the parent for Accounting and Development . Let's write the abstract class or an interface for the department. from abc import ABC , abstractmethod class BaseDepartment ( ABC ): @abstractmethod def __init__ ( self , num_of_employees ): pass @abstractmethod def print_department ( self ): pass As we have defined the abstract department, let's create the classes for Accounting and Development departments. class Accounting ( BaseDepartment ): def __init__ ( self , num_of_employees ): self . num_of_employees = num_of_employees def print_department ( self ): print ( f \"Accounting employees: { self . num_of_employees } \" ) class Development ( BaseDepartment ): def __init__ ( self , num_of_employees ): self . num_of_employees = num_of_employees def print_department ( self ): print ( f \"Development employees: { self . num_of_employees } \" ) Now, let's create the parent department Management . It will have child departments. class Management ( BaseDepartment ): def __init__ ( self , num_of_employees ): self . num_of_employees = num_of_employees self . childs = [] def print_department ( self ): print ( f \"Management base employees: { self . num_of_employees } \" ) total_emp_count = self . num_of_employees for child in self . childs : total_emp_count += child . num_of_employees child . print_department () print ( f 'Total employees: { total_emp_count } ' ) def add_child_dept ( self , dept ): self . childs . append ( dept ) Let's write the client class and use above defined classes. acc_dept = Accounting ( 200 ) dev_dept = Development ( 500 ) management_dept = Management ( 50 ) management_dept . add ( acc_dept ) management_dept . add ( dev_dept ) # print dept management_dept . print_department () Once we run the above code it will give below output. Management base employees: 50 Accounting employees: 200 Development employees: 500 Total employees: 750 In the above code Accounting and Development classes are leaf classes and Management is the composite class. References: \u00b6 https://refactoring.guru/design-patterns/composite https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/structural_design_patterns/composite.py","title":"Composite"},{"location":"course/design-patterns/composite/#composite","text":"Allows us to represent individual entities(leaves) and groups of leaves as the same. Is a structural design pattern that lets you compose objects into a changeable tree structure. Is great if you need the option of swapping hierarchical relationships around. Allows you to add/remove components to the hierarchy. Provides flexibility of structure","title":"Composite"},{"location":"course/design-patterns/composite/#terminology","text":"Component Interface : The interface that all leaves and composites should implement. Leaf : A single object that can exist inside or outside a composite. Composite : A collection of leaves and/or other composites.","title":"Terminology"},{"location":"course/design-patterns/composite/#composite-pattern-example","text":"Let's say we want to represent the departments hierarchy . The departments are Accounting , Developement and Management . Management is the parent for Accounting and Development . Let's write the abstract class or an interface for the department. from abc import ABC , abstractmethod class BaseDepartment ( ABC ): @abstractmethod def __init__ ( self , num_of_employees ): pass @abstractmethod def print_department ( self ): pass As we have defined the abstract department, let's create the classes for Accounting and Development departments. class Accounting ( BaseDepartment ): def __init__ ( self , num_of_employees ): self . num_of_employees = num_of_employees def print_department ( self ): print ( f \"Accounting employees: { self . num_of_employees } \" ) class Development ( BaseDepartment ): def __init__ ( self , num_of_employees ): self . num_of_employees = num_of_employees def print_department ( self ): print ( f \"Development employees: { self . num_of_employees } \" ) Now, let's create the parent department Management . It will have child departments. class Management ( BaseDepartment ): def __init__ ( self , num_of_employees ): self . num_of_employees = num_of_employees self . childs = [] def print_department ( self ): print ( f \"Management base employees: { self . num_of_employees } \" ) total_emp_count = self . num_of_employees for child in self . childs : total_emp_count += child . num_of_employees child . print_department () print ( f 'Total employees: { total_emp_count } ' ) def add_child_dept ( self , dept ): self . childs . append ( dept ) Let's write the client class and use above defined classes. acc_dept = Accounting ( 200 ) dev_dept = Development ( 500 ) management_dept = Management ( 50 ) management_dept . add ( acc_dept ) management_dept . add ( dev_dept ) # print dept management_dept . print_department () Once we run the above code it will give below output. Management base employees: 50 Accounting employees: 200 Development employees: 500 Total employees: 750 In the above code Accounting and Development classes are leaf classes and Management is the composite class.","title":"Composite pattern example"},{"location":"course/design-patterns/composite/#references","text":"https://refactoring.guru/design-patterns/composite https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/structural_design_patterns/composite.py","title":"References:"},{"location":"course/design-patterns/facade/","text":"Facade \u00b6 Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. Vocabulary: \u00b6 Client: makes calls to the facade for particular services Facade: serves the client by making calls to subsystems for specific services Subsystem: implements the services called on by the facade Advantages \u00b6 Isolation : We can easily isolate our code from the complexity of a subsystem. Testing Process : Using Facade Method makes the process of testing comparatively easy since it has convenient methods for common testing tasks. Loose Coupling : Availability of loose coupling between the clients and the Subsystems. Disadvantages \u00b6 Changes in Methods : As we know that in Facade method, subsequent methods are attached to Facade layer and any change in subsequent method may brings change in Facade layer which is not favorable. Costly process : It is not cheap to establish the Facade method in out application for the system\u2019s reliability. Violation of rules : There is always the fear of violation of the construction of the facade layer. Python implementation of facade patterm \u00b6 Let's consider the customer care center. customers calls the customer care center and gets the account information and delivery package information. Let's define the classes AccountInfo , DeliveryInfo , CustomerRepresentative # service classes class AccountInfo : def get_account_info ( self , acc_id ): # get account id info = { \"account_id\" : \"AC123\" , \"name\" : \"Anji\" } return info class DeliveryInfo : def get_package_info ( self , package_id ): info = { \"name\" : \"Cricket KIT\" , \"address\" : \"Hyderabad, Telangana, India\" } return info # facade class class CustomerRepresentative : def __init__ ( self ): self . account = AccountInfo () self . delivery = DeliveryInfo () def get_info ( self , acc_id , package_id ): acc = self . account . get_account_info ( acc_id ) pckg = self . delivery . get_package_info ( package_id ) print ( \"account:\" , acc ) print ( \"package:\" , pckg ) if __name__ == '__main__' : represntative = CustomerRepresentative () represntative . get_info ( \"AC123\" , \"PG5577\" ) When we run above code it gives the below output account: {'account_id': 'AC123', 'name': 'Anji'} package: {'name': 'Cricket KIT', 'address': 'Hyderabad, Telangana, India'} References: \u00b6 https://cs.uwaterloo.ca/~m2nagapp/courses/CS446/1181/Arch_Design_Activity/Facade.pdf","title":"Facade"},{"location":"course/design-patterns/facade/#facade","text":"Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system.","title":"Facade"},{"location":"course/design-patterns/facade/#vocabulary","text":"Client: makes calls to the facade for particular services Facade: serves the client by making calls to subsystems for specific services Subsystem: implements the services called on by the facade","title":"Vocabulary:"},{"location":"course/design-patterns/facade/#advantages","text":"Isolation : We can easily isolate our code from the complexity of a subsystem. Testing Process : Using Facade Method makes the process of testing comparatively easy since it has convenient methods for common testing tasks. Loose Coupling : Availability of loose coupling between the clients and the Subsystems.","title":"Advantages"},{"location":"course/design-patterns/facade/#disadvantages","text":"Changes in Methods : As we know that in Facade method, subsequent methods are attached to Facade layer and any change in subsequent method may brings change in Facade layer which is not favorable. Costly process : It is not cheap to establish the Facade method in out application for the system\u2019s reliability. Violation of rules : There is always the fear of violation of the construction of the facade layer.","title":"Disadvantages"},{"location":"course/design-patterns/facade/#python-implementation-of-facade-patterm","text":"Let's consider the customer care center. customers calls the customer care center and gets the account information and delivery package information. Let's define the classes AccountInfo , DeliveryInfo , CustomerRepresentative # service classes class AccountInfo : def get_account_info ( self , acc_id ): # get account id info = { \"account_id\" : \"AC123\" , \"name\" : \"Anji\" } return info class DeliveryInfo : def get_package_info ( self , package_id ): info = { \"name\" : \"Cricket KIT\" , \"address\" : \"Hyderabad, Telangana, India\" } return info # facade class class CustomerRepresentative : def __init__ ( self ): self . account = AccountInfo () self . delivery = DeliveryInfo () def get_info ( self , acc_id , package_id ): acc = self . account . get_account_info ( acc_id ) pckg = self . delivery . get_package_info ( package_id ) print ( \"account:\" , acc ) print ( \"package:\" , pckg ) if __name__ == '__main__' : represntative = CustomerRepresentative () represntative . get_info ( \"AC123\" , \"PG5577\" ) When we run above code it gives the below output account: {'account_id': 'AC123', 'name': 'Anji'} package: {'name': 'Cricket KIT', 'address': 'Hyderabad, Telangana, India'}","title":"Python implementation of facade patterm"},{"location":"course/design-patterns/facade/#references","text":"https://cs.uwaterloo.ca/~m2nagapp/courses/CS446/1181/Arch_Design_Activity/Facade.pdf","title":"References:"},{"location":"course/design-patterns/factory-method/","text":"Factory Method \u00b6 The factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. Defines an interface for creating an instance of an object but lets the class which implements the interface decide which class to instantiate. Example use cases of Factory Method \u00b6 use case: ordering a pizza from a pizza store \u00b6 Let's say we have a pizza shop and we want to order the pizza. When we order the pizza, the pizza shop will need to do the following functionalities. 1. prepare it 2. bake it 3. cut it 4. box it In this scenario, we can define classes PizzaStore , Pizza . The class PizzaStore will acts as a client which will talk to the class Pizza which contains the methods prepare , bake , cut and box . Let's dive into the code. # service class Pizza : def prepare ( self ): \"\"\" prepare the pizza \"\"\" def bake ( self ): \"\"\" bake the pizza \"\"\" def cut ( self ): \"\"\" cut the baked pizza into a required shape \"\"\" def box ( self ): \"\"\" move the pizza into the box \"\"\" # client class PizzaStore : def order_pizza ( self ): \"\"\" order and get pizza \"\"\" pizza = Pizza () pizza . prepare () pizza . bake () pizza . cut () pizza . box () return pizza if __name__ == '__main__' : store = PizzaStore () store . order_pizza () Above code will work for only one type of pizza. If we have multiple pizza type classes then we need to have a Factory to decide the class to be used for the client request. If we don't use the Factory then client needs to handle the logic with the pizza type classes which is not recommended. Let's the see the code without the Factory pattern. from abc import ABC , abstractmethod class Pizza ( ABC ): @abstractmethod def prepare ( self ): \"\"\" prepare the pizza \"\"\" @abstractmethod def bake ( self ): \"\"\" bake the pizza \"\"\" @abstractmethod def cut ( self ): \"\"\" cut the baked pizza into a required shape \"\"\" @abstractmethod def box ( self ): \"\"\" move the pizza into the box \"\"\" class PizzaMixin : pizza_type = \"\" def prepare ( self ): \"\"\" prepare the pizza \"\"\" print ( f \"prepare { self . pizza_type } pizza\" ) def bake ( self ): \"\"\" bake the pizza \"\"\" print ( f \"bake { self . pizza_type } pizza\" ) def cut ( self ): \"\"\" cut the baked pizza into a required shape \"\"\" print ( f \"cut { self . pizza_type } pizza\" ) def box ( self ): \"\"\" move the pizza into the box \"\"\" print ( f \"box { self . pizza_type } pizza\" ) class CheesePizza ( PizzaMixin , Pizza ): pizza_type = \"cheese\" class VegPizza ( PizzaMixin , Pizza ): pizza_type = \"veg\" # client class PizzaStore : def order_pizza ( self , pizza_type ): \"\"\" order and get pizza \"\"\" # logic to decide the pizza class pizza = None if ( pizza_type == \"cheese\" ): pizza = CheesePizza () elif ( pizza_type == \"veg\" ): pizza = VegPizza () if pizza is None : raise Exception ( \"Invalid pizza type\" ) # we can have more types of pizza classes # end pizza . prepare () pizza . bake () pizza . cut () pizza . box () return pizza if __name__ == '__main__' : store = PizzaStore () store . order_pizza ( \"cheese\" ) In the above code we can see that the client class PizzaStore need to know the details of the classes CheesePizza , VegPizza . If we want to add a new pizza type then we need to modify the client class code. By using the factory pattern we can avoid it. Let's implement the Factory pattern by seperating the pizza type logic pizza = None if ( pizza_type == \"cheese\" ): pizza = CheesePizza () elif ( pizza_type == \"veg\" ): pizza = VegPizza () Let's create a factory class and move logic. class PizzaFactory : def create_pizza ( self , pizza_type ): pizza = None if ( pizza_type == \"cheese\" ): pizza = CheesePizza () elif ( pizza_type == \"veg\" ): pizza = VegPizza () if pizza is None : raise Exception ( \"Invalid pizza type\" ) return pizza Now, we need to rework on the class PizzaStore so that it will use the factory. class PizzaStore : def order_pizza ( self , pizza_type ): \"\"\" order and get pizza \"\"\" factory = PizzaFactory () pizza = factory . create_pizza ( pizza_type ) pizza . prepare () pizza . bake () pizza . cut () pizza . box () return pizza If you see the class PizzaStore it's clean and if we add a new pizza type also it will work without changing the code. You can find the complete code at github https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/creational_design_patterns/factory_method.py","title":"Factory Method"},{"location":"course/design-patterns/factory-method/#factory-method","text":"The factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. Defines an interface for creating an instance of an object but lets the class which implements the interface decide which class to instantiate.","title":"Factory Method"},{"location":"course/design-patterns/factory-method/#example-use-cases-of-factory-method","text":"","title":"Example use cases of Factory Method"},{"location":"course/design-patterns/factory-method/#use-case-ordering-a-pizza-from-a-pizza-store","text":"Let's say we have a pizza shop and we want to order the pizza. When we order the pizza, the pizza shop will need to do the following functionalities. 1. prepare it 2. bake it 3. cut it 4. box it In this scenario, we can define classes PizzaStore , Pizza . The class PizzaStore will acts as a client which will talk to the class Pizza which contains the methods prepare , bake , cut and box . Let's dive into the code. # service class Pizza : def prepare ( self ): \"\"\" prepare the pizza \"\"\" def bake ( self ): \"\"\" bake the pizza \"\"\" def cut ( self ): \"\"\" cut the baked pizza into a required shape \"\"\" def box ( self ): \"\"\" move the pizza into the box \"\"\" # client class PizzaStore : def order_pizza ( self ): \"\"\" order and get pizza \"\"\" pizza = Pizza () pizza . prepare () pizza . bake () pizza . cut () pizza . box () return pizza if __name__ == '__main__' : store = PizzaStore () store . order_pizza () Above code will work for only one type of pizza. If we have multiple pizza type classes then we need to have a Factory to decide the class to be used for the client request. If we don't use the Factory then client needs to handle the logic with the pizza type classes which is not recommended. Let's the see the code without the Factory pattern. from abc import ABC , abstractmethod class Pizza ( ABC ): @abstractmethod def prepare ( self ): \"\"\" prepare the pizza \"\"\" @abstractmethod def bake ( self ): \"\"\" bake the pizza \"\"\" @abstractmethod def cut ( self ): \"\"\" cut the baked pizza into a required shape \"\"\" @abstractmethod def box ( self ): \"\"\" move the pizza into the box \"\"\" class PizzaMixin : pizza_type = \"\" def prepare ( self ): \"\"\" prepare the pizza \"\"\" print ( f \"prepare { self . pizza_type } pizza\" ) def bake ( self ): \"\"\" bake the pizza \"\"\" print ( f \"bake { self . pizza_type } pizza\" ) def cut ( self ): \"\"\" cut the baked pizza into a required shape \"\"\" print ( f \"cut { self . pizza_type } pizza\" ) def box ( self ): \"\"\" move the pizza into the box \"\"\" print ( f \"box { self . pizza_type } pizza\" ) class CheesePizza ( PizzaMixin , Pizza ): pizza_type = \"cheese\" class VegPizza ( PizzaMixin , Pizza ): pizza_type = \"veg\" # client class PizzaStore : def order_pizza ( self , pizza_type ): \"\"\" order and get pizza \"\"\" # logic to decide the pizza class pizza = None if ( pizza_type == \"cheese\" ): pizza = CheesePizza () elif ( pizza_type == \"veg\" ): pizza = VegPizza () if pizza is None : raise Exception ( \"Invalid pizza type\" ) # we can have more types of pizza classes # end pizza . prepare () pizza . bake () pizza . cut () pizza . box () return pizza if __name__ == '__main__' : store = PizzaStore () store . order_pizza ( \"cheese\" ) In the above code we can see that the client class PizzaStore need to know the details of the classes CheesePizza , VegPizza . If we want to add a new pizza type then we need to modify the client class code. By using the factory pattern we can avoid it. Let's implement the Factory pattern by seperating the pizza type logic pizza = None if ( pizza_type == \"cheese\" ): pizza = CheesePizza () elif ( pizza_type == \"veg\" ): pizza = VegPizza () Let's create a factory class and move logic. class PizzaFactory : def create_pizza ( self , pizza_type ): pizza = None if ( pizza_type == \"cheese\" ): pizza = CheesePizza () elif ( pizza_type == \"veg\" ): pizza = VegPizza () if pizza is None : raise Exception ( \"Invalid pizza type\" ) return pizza Now, we need to rework on the class PizzaStore so that it will use the factory. class PizzaStore : def order_pizza ( self , pizza_type ): \"\"\" order and get pizza \"\"\" factory = PizzaFactory () pizza = factory . create_pizza ( pizza_type ) pizza . prepare () pizza . bake () pizza . cut () pizza . box () return pizza If you see the class PizzaStore it's clean and if we add a new pizza type also it will work without changing the code. You can find the complete code at github https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/creational_design_patterns/factory_method.py","title":"use case: ordering a pizza from a pizza store"},{"location":"course/design-patterns/prototype/","text":"Prototype \u00b6 prototypes design pattern allows you to create objects by cloning an existing object instead of creating a new object from scratch. This pattern is used when the process of object creation is costly when cloning, the newly copied object contains the same characteristics as its source object. After cloning, we can change the values of the new object\u2019s properties as required Advantages of Prototype Pattern \u00b6 By cloning, it cut down the resource consumption of object creation. Clients can get new objects, without knowing which type it belongs to. It allows you to add or remove objects at runtime. It reduces the need for sub-classing. When to use Prototype Pattern? \u00b6 When the process of making an object is expensive or takes a long time. When the client application must be unaware of the creation of an object. When you need to keep the number of classes in your application to a minimum level. When the classes are instantiated at runtime. implementation of Prototype pattern \u00b6 Let's take a simple scenario Shape and apply the prototype pattern from abc import ABC from copy import deepcopy class Shape ( ABC ): def clone ( self ): return deepcopy ( self ) class Circle ( Shape ): def __init__ ( self , radius ): self . radius = radius def area ( self ): return 3.14 * self . radius ** 2 # client if __name__ == '__main__' : c1 = Circle ( 10 ) c1_copy = c1 . clone () print ( id ( c1 ) == id ( c1_copy )) # False In python, we have copy and deepcopy methods in the module copy which are used to copy the object. References: \u00b6 https://docs.python.org/3/library/copy.html https://en.wikipedia.org/wiki/Prototype_pattern","title":"Prototype"},{"location":"course/design-patterns/prototype/#prototype","text":"prototypes design pattern allows you to create objects by cloning an existing object instead of creating a new object from scratch. This pattern is used when the process of object creation is costly when cloning, the newly copied object contains the same characteristics as its source object. After cloning, we can change the values of the new object\u2019s properties as required","title":"Prototype"},{"location":"course/design-patterns/prototype/#advantages-of-prototype-pattern","text":"By cloning, it cut down the resource consumption of object creation. Clients can get new objects, without knowing which type it belongs to. It allows you to add or remove objects at runtime. It reduces the need for sub-classing.","title":"Advantages of Prototype Pattern"},{"location":"course/design-patterns/prototype/#when-to-use-prototype-pattern","text":"When the process of making an object is expensive or takes a long time. When the client application must be unaware of the creation of an object. When you need to keep the number of classes in your application to a minimum level. When the classes are instantiated at runtime.","title":"When to use Prototype Pattern?"},{"location":"course/design-patterns/prototype/#implementation-of-prototype-pattern","text":"Let's take a simple scenario Shape and apply the prototype pattern from abc import ABC from copy import deepcopy class Shape ( ABC ): def clone ( self ): return deepcopy ( self ) class Circle ( Shape ): def __init__ ( self , radius ): self . radius = radius def area ( self ): return 3.14 * self . radius ** 2 # client if __name__ == '__main__' : c1 = Circle ( 10 ) c1_copy = c1 . clone () print ( id ( c1 ) == id ( c1_copy )) # False In python, we have copy and deepcopy methods in the module copy which are used to copy the object.","title":"implementation of Prototype pattern"},{"location":"course/design-patterns/prototype/#references","text":"https://docs.python.org/3/library/copy.html https://en.wikipedia.org/wiki/Prototype_pattern","title":"References:"},{"location":"course/design-patterns/proxy/","text":"Proxy \u00b6 A proxy, in its most general form, is a class functioning as an interface to something else. Vocavulary \u00b6 Subject Interface : Relays requests made to the proxy. The client does not know whether they are calling a proxy or the real subject as the subject interface (a form of API layer) will handle the request. Real Subject : The real subject is where the core logic of the design pattern resides. The proxy can abstract a variety of fundamental security checks or cache commonly used requests, however, the subject must be in charge of most of the real functionality. Proxy : Design pattern; wrapper that encapsulates access to the resource Request : The function call made by the client, expecting some form of action in return from the subject. This request is sent to the interface which forwards it to the proxy. The proxy can then decide how the request should be completed. Client : Component that requests data or action to be performed Advantages \u00b6 Increases modularity and encapsulation Disadvantages \u00b6 Extra developer bandwidth is required as new changes must be made in the proxy concurrently with the real object. Implementation of Proxy pattern \u00b6 use case : let's say we have a car that needs to be driven by a driver who is minimum of 18 years old. To solve this problem, we can have the following classes Car abstract class Car class CarProxy from abc import ABC , abstractmethod class CarAbs ( ABC ): @abstractmethod def drive ( self , driver_name ): pass class Car ( CarAbs ): def drive ( self , driver_name ): print ( f \" { driver_name } is driving the car.\" ) class CarProxy ( ABC ): def __init__ ( self , driver_name , age ): self . driver_name = driver_name self . age = age def drive ( self ): if ( self . age < 18 ): print ( \"Sorry, the driver is too young to drive.\" ) return car = Car () return car . drive ( self . driver_name ) if __name__ == '__main__' : car = CarProxy ( \"Anji\" , 20 ) car . drive () car = CarProxy ( \"Surya\" , 17 ) car . drive () In the above code we have a CarProxy class which checks the drivers age and calls the actual Car class. CarProxy is a proxy class for Car . Reference: \u00b6 https://cs.uwaterloo.ca/~m2nagapp/courses/CS446/1195/Arch_Design_Activity/Proxy.pdf https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/structural_design_patterns/proxy.py","title":"Proxy"},{"location":"course/design-patterns/proxy/#proxy","text":"A proxy, in its most general form, is a class functioning as an interface to something else.","title":"Proxy"},{"location":"course/design-patterns/proxy/#vocavulary","text":"Subject Interface : Relays requests made to the proxy. The client does not know whether they are calling a proxy or the real subject as the subject interface (a form of API layer) will handle the request. Real Subject : The real subject is where the core logic of the design pattern resides. The proxy can abstract a variety of fundamental security checks or cache commonly used requests, however, the subject must be in charge of most of the real functionality. Proxy : Design pattern; wrapper that encapsulates access to the resource Request : The function call made by the client, expecting some form of action in return from the subject. This request is sent to the interface which forwards it to the proxy. The proxy can then decide how the request should be completed. Client : Component that requests data or action to be performed","title":"Vocavulary"},{"location":"course/design-patterns/proxy/#advantages","text":"Increases modularity and encapsulation","title":"Advantages"},{"location":"course/design-patterns/proxy/#disadvantages","text":"Extra developer bandwidth is required as new changes must be made in the proxy concurrently with the real object.","title":"Disadvantages"},{"location":"course/design-patterns/proxy/#implementation-of-proxy-pattern","text":"use case : let's say we have a car that needs to be driven by a driver who is minimum of 18 years old. To solve this problem, we can have the following classes Car abstract class Car class CarProxy from abc import ABC , abstractmethod class CarAbs ( ABC ): @abstractmethod def drive ( self , driver_name ): pass class Car ( CarAbs ): def drive ( self , driver_name ): print ( f \" { driver_name } is driving the car.\" ) class CarProxy ( ABC ): def __init__ ( self , driver_name , age ): self . driver_name = driver_name self . age = age def drive ( self ): if ( self . age < 18 ): print ( \"Sorry, the driver is too young to drive.\" ) return car = Car () return car . drive ( self . driver_name ) if __name__ == '__main__' : car = CarProxy ( \"Anji\" , 20 ) car . drive () car = CarProxy ( \"Surya\" , 17 ) car . drive () In the above code we have a CarProxy class which checks the drivers age and calls the actual Car class. CarProxy is a proxy class for Car .","title":"Implementation of Proxy pattern"},{"location":"course/design-patterns/proxy/#reference","text":"https://cs.uwaterloo.ca/~m2nagapp/courses/CS446/1195/Arch_Design_Activity/Proxy.pdf https://github.com/AnjaneyuluBatta505/learnbatta/blob/master/python/design_patterns/structural_design_patterns/proxy.py","title":"Reference:"},{"location":"course/design-patterns/singleton/","text":"Singleton \u00b6 The singleton pattern is a software design pattern that restricts the instantiation of a class to one \"single\" instance. This is useful when exactly one object is needed to coordinate actions across the system. Common use cases of singleton pattern \u00b6 Configuration Settings Logging Caching and thread pool Database connections Example implementation of singleton pattern \u00b6 Let's implement the database connection with singleton pattern class DB : __connection = None @classmethod def connect ( cls ): if not cls . __connection : print ( 'Establishing connection...' ) cls . __connection = ... return cls . __connection if __name__ == '__main__' : connection1 = DB . connect () connection2 = DB . connect () In the above code, we have called DB.connect() twice. but, it will be create only one database connection. References: \u00b6 https://en.wikipedia.org/wiki/Singleton_pattern","title":"Singleton"},{"location":"course/design-patterns/singleton/#singleton","text":"The singleton pattern is a software design pattern that restricts the instantiation of a class to one \"single\" instance. This is useful when exactly one object is needed to coordinate actions across the system.","title":"Singleton"},{"location":"course/design-patterns/singleton/#common-use-cases-of-singleton-pattern","text":"Configuration Settings Logging Caching and thread pool Database connections","title":"Common use cases of singleton pattern"},{"location":"course/design-patterns/singleton/#example-implementation-of-singleton-pattern","text":"Let's implement the database connection with singleton pattern class DB : __connection = None @classmethod def connect ( cls ): if not cls . __connection : print ( 'Establishing connection...' ) cls . __connection = ... return cls . __connection if __name__ == '__main__' : connection1 = DB . connect () connection2 = DB . connect () In the above code, we have called DB.connect() twice. but, it will be create only one database connection.","title":"Example implementation of singleton pattern"},{"location":"course/design-patterns/singleton/#references","text":"https://en.wikipedia.org/wiki/Singleton_pattern","title":"References:"},{"location":"course/django/","text":"Why Django ? \u00b6 Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. With Django, you can take Web applications from concept to launch in a matter of hours. Django takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Fully loaded. \u00b6 Django includes dozens of extras you can use to handle common Web development tasks. Django takes care of user authentication, content administration, site maps, RSS feeds, and many more tasks \u2014 right out of the box. Ridiculously fast. \u00b6 Django was designed to help developers take applications from concept to completion as quickly as possible. Reassuringly secure \u00b6 Django takes security seriously and helps developers avoid many common security mistakes. Exceedingly scalable \u00b6 Some of the busiest sites on the Web leverage Django\u2019s ability to quickly and flexibly scale. Incredibly versatile. \u00b6 Companies, organizations and governments have used Django to build all sorts of things \u2014 from content management systems to social networks to scientific computing platforms. why to choose Django? \u00b6 Write less code do more It uses MVC or MTV architecture Open source web framework Tons of packages available to use Great Community Support Suits for projects of any size Used and trusted by world best companies Perfect for time based projects Highly Scalable Built-in ORM(Object Relational Mapper) Support Multiple Language Support Built-in Frameworks for Sitemaps, RSS, Caching, etc. websites developed using Django \u00b6 Disqus Bitbucket Instagram Mozilla Pinterest NASA The Onion Eventbrite References: \u00b6 https://www.djangoproject.com","title":"Introduction"},{"location":"course/django/#why-django","text":"Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. With Django, you can take Web applications from concept to launch in a matter of hours. Django takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source.","title":"Why Django ?"},{"location":"course/django/#fully-loaded","text":"Django includes dozens of extras you can use to handle common Web development tasks. Django takes care of user authentication, content administration, site maps, RSS feeds, and many more tasks \u2014 right out of the box.","title":"Fully loaded."},{"location":"course/django/#ridiculously-fast","text":"Django was designed to help developers take applications from concept to completion as quickly as possible.","title":"Ridiculously fast."},{"location":"course/django/#reassuringly-secure","text":"Django takes security seriously and helps developers avoid many common security mistakes.","title":"Reassuringly secure"},{"location":"course/django/#exceedingly-scalable","text":"Some of the busiest sites on the Web leverage Django\u2019s ability to quickly and flexibly scale.","title":"Exceedingly scalable"},{"location":"course/django/#incredibly-versatile","text":"Companies, organizations and governments have used Django to build all sorts of things \u2014 from content management systems to social networks to scientific computing platforms.","title":"Incredibly versatile."},{"location":"course/django/#why-to-choose-django","text":"Write less code do more It uses MVC or MTV architecture Open source web framework Tons of packages available to use Great Community Support Suits for projects of any size Used and trusted by world best companies Perfect for time based projects Highly Scalable Built-in ORM(Object Relational Mapper) Support Multiple Language Support Built-in Frameworks for Sitemaps, RSS, Caching, etc.","title":"why to choose Django?"},{"location":"course/django/#websites-developed-using-django","text":"Disqus Bitbucket Instagram Mozilla Pinterest NASA The Onion Eventbrite","title":"websites developed using Django"},{"location":"course/django/#references","text":"https://www.djangoproject.com","title":"References:"},{"location":"course/django/create-app/","text":"Prerequisites \u00b6 Create django project what is an app? \u00b6 An app is a module in django project which represents a part of the overall project. Let's say we are developing an e-commerce application then we devide project into apps like cart , payments , etc. create an app \u00b6 After creating the project the directory structure looks like below. . \u251c\u2500\u2500 db . sqlite3 \u251c\u2500\u2500 manage . py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 asgi . py \u251c\u2500\u2500 settings . py \u251c\u2500\u2500 urls . py \u2514\u2500\u2500 wsgi . py Run the command python manage.py startapp my_app to create the django app . Now, the project structure looks like below. . \u251c\u2500\u2500 db . sqlite3 \u251c\u2500\u2500 manage . py \u251c\u2500\u2500 my_app \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u251c\u2500\u2500 admin . py \u2502 \u251c\u2500\u2500 apps . py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__ . py \u2502 \u251c\u2500\u2500 models . py \u2502 \u251c\u2500\u2500 tests . py \u2502 \u2514\u2500\u2500 views . py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 asgi . py \u251c\u2500\u2500 settings . py \u251c\u2500\u2500 urls . py \u2514\u2500\u2500 wsgi . py django app structure \u00b6 . \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 admin.py \u251c\u2500\u2500 apps.py \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 tests.py \u2514\u2500\u2500 views.py __init__.py - It specifies the current directory as a python package apps.py - It's the django app configuration file. It contains app name and other config. models.py - It contains the ORM models, which represents the database tables. migrations/ - It contains the django database migration files to update the database changes. admin.py - Django comes with a powerful admin module. This file used to add the app models to admin. tests.py - It contains the django unit tests. add my_app to django project \u00b6 open the project settings file my_project/settings.py and update the INSTALLED_APPS as below. # ... INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , # add your app 'my_app' , ] # ... References: \u00b6 https://docs.djangoproject.com/en/dev/intro/tutorial01/","title":"Create django app"},{"location":"course/django/create-app/#prerequisites","text":"Create django project","title":"Prerequisites"},{"location":"course/django/create-app/#what-is-an-app","text":"An app is a module in django project which represents a part of the overall project. Let's say we are developing an e-commerce application then we devide project into apps like cart , payments , etc.","title":"what is an app?"},{"location":"course/django/create-app/#create-an-app","text":"After creating the project the directory structure looks like below. . \u251c\u2500\u2500 db . sqlite3 \u251c\u2500\u2500 manage . py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 asgi . py \u251c\u2500\u2500 settings . py \u251c\u2500\u2500 urls . py \u2514\u2500\u2500 wsgi . py Run the command python manage.py startapp my_app to create the django app . Now, the project structure looks like below. . \u251c\u2500\u2500 db . sqlite3 \u251c\u2500\u2500 manage . py \u251c\u2500\u2500 my_app \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u251c\u2500\u2500 admin . py \u2502 \u251c\u2500\u2500 apps . py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__ . py \u2502 \u251c\u2500\u2500 models . py \u2502 \u251c\u2500\u2500 tests . py \u2502 \u2514\u2500\u2500 views . py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 asgi . py \u251c\u2500\u2500 settings . py \u251c\u2500\u2500 urls . py \u2514\u2500\u2500 wsgi . py","title":"create an app"},{"location":"course/django/create-app/#django-app-structure","text":". \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 admin.py \u251c\u2500\u2500 apps.py \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 tests.py \u2514\u2500\u2500 views.py __init__.py - It specifies the current directory as a python package apps.py - It's the django app configuration file. It contains app name and other config. models.py - It contains the ORM models, which represents the database tables. migrations/ - It contains the django database migration files to update the database changes. admin.py - Django comes with a powerful admin module. This file used to add the app models to admin. tests.py - It contains the django unit tests.","title":"django app structure"},{"location":"course/django/create-app/#add-my_app-to-django-project","text":"open the project settings file my_project/settings.py and update the INSTALLED_APPS as below. # ... INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , # add your app 'my_app' , ] # ...","title":"add my_app to django project"},{"location":"course/django/create-app/#references","text":"https://docs.djangoproject.com/en/dev/intro/tutorial01/","title":"References:"},{"location":"course/django/create-view/","text":"Prerequisites \u00b6 Django Models Django form view Django ModelForm \u00b6 Django ModelForm is an advanced version of django Form . ModelForm is associated with a django model. Model form can generate auto form fields using form meta class Can also define additional form fields. Let's look at the code for model and model form. my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" my_app/forms.py from django import forms from my_app.models import Contact class ContactModelForm ( forms . ModelForm ): class Meta : model = Contact fields = [ 'first_name' , 'last_name' , 'email' ] form Meta class attributes model : defines model name fields : form fields to include Form template \u00b6 the template looks like below. templates/form_template.html < form action = \"\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_table }} < input type = \"submit\" value = \"submit\" /> </ form > Django Create View \u00b6 function based createview \u00b6 use function based create view for simple functionality. we will use contact model form for form validation. Let's look at the create view code below. from django.http import HttpResponse from django.shortcuts import render from my_app.forms import ContactModelForm def fbv_create_view ( request ): if request . method . lower () == \"post\" : form = ContactModelForm ( request . POST ) if form . is_valid (): instance = form . save () return HttpResponse ( f \"contact saved: { instance } \" ) else : form = ContactModelForm () context = { 'form' : form } return render ( request , 'form_template.html' , context ) class based createview \u00b6 Django comes with generic view CreateView It handles the requests GET and POST When a POST request is recieved then django generic view calls two methods form_valid and form_invalid after validating the requested data. CreateView also has other methods like get_context_data , get_initial , etc. For current functionality we just need to override form_valid method. Let's look at the code below. from django.http import HttpResponse from django.views.generic.edit import CreateView from my_app.forms import ContactModelForm class CBVCreateView ( CreateView ): form_class = ContactModelForm template_name = 'form_template.html' def form_valid ( self , form ): instance = form . save () return HttpResponse ( f \"contact saved: { instance } \" ) configure urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_create_view' , views . fbv_create_view , name = 'fbv_create_view' ), path ( 'cbv_create_view' , views . CBVCreateView . as_view (), name = 'cbv_create_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_create_view to see the function based create view Access the url http://localhost:8000/my_app/cbv_create_view to see the class based create view Open above mentioned urls and fill in the contact info and submit the form to save the contact info to the database. References \u00b6 https://docs.djangoproject.com/en/dev/topics/forms/modelforms/ https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/CreateView/","title":"Django create view"},{"location":"course/django/create-view/#prerequisites","text":"Django Models Django form view","title":"Prerequisites"},{"location":"course/django/create-view/#django-modelform","text":"Django ModelForm is an advanced version of django Form . ModelForm is associated with a django model. Model form can generate auto form fields using form meta class Can also define additional form fields. Let's look at the code for model and model form. my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" my_app/forms.py from django import forms from my_app.models import Contact class ContactModelForm ( forms . ModelForm ): class Meta : model = Contact fields = [ 'first_name' , 'last_name' , 'email' ] form Meta class attributes model : defines model name fields : form fields to include","title":"Django ModelForm"},{"location":"course/django/create-view/#form-template","text":"the template looks like below. templates/form_template.html < form action = \"\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_table }} < input type = \"submit\" value = \"submit\" /> </ form >","title":"Form template"},{"location":"course/django/create-view/#django-create-view","text":"","title":"Django Create View"},{"location":"course/django/create-view/#function-based-createview","text":"use function based create view for simple functionality. we will use contact model form for form validation. Let's look at the create view code below. from django.http import HttpResponse from django.shortcuts import render from my_app.forms import ContactModelForm def fbv_create_view ( request ): if request . method . lower () == \"post\" : form = ContactModelForm ( request . POST ) if form . is_valid (): instance = form . save () return HttpResponse ( f \"contact saved: { instance } \" ) else : form = ContactModelForm () context = { 'form' : form } return render ( request , 'form_template.html' , context )","title":"function based createview"},{"location":"course/django/create-view/#class-based-createview","text":"Django comes with generic view CreateView It handles the requests GET and POST When a POST request is recieved then django generic view calls two methods form_valid and form_invalid after validating the requested data. CreateView also has other methods like get_context_data , get_initial , etc. For current functionality we just need to override form_valid method. Let's look at the code below. from django.http import HttpResponse from django.views.generic.edit import CreateView from my_app.forms import ContactModelForm class CBVCreateView ( CreateView ): form_class = ContactModelForm template_name = 'form_template.html' def form_valid ( self , form ): instance = form . save () return HttpResponse ( f \"contact saved: { instance } \" )","title":"class based createview"},{"location":"course/django/create-view/#configure-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_create_view' , views . fbv_create_view , name = 'fbv_create_view' ), path ( 'cbv_create_view' , views . CBVCreateView . as_view (), name = 'cbv_create_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_create_view to see the function based create view Access the url http://localhost:8000/my_app/cbv_create_view to see the class based create view Open above mentioned urls and fill in the contact info and submit the form to save the contact info to the database.","title":"configure urls"},{"location":"course/django/create-view/#references","text":"https://docs.djangoproject.com/en/dev/topics/forms/modelforms/ https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/CreateView/","title":"References"},{"location":"course/django/delete-data/","text":"Prerequisites \u00b6 Django Models Django Insert Data Django Retrieve Data Django shell \u00b6 Run the command python manage.py shell open the django shell. Django Model - Contact \u00b6 We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" Add few records to database \u00b6 from my_app.models import Contact contacts = [ { \"first_name\" : \"Anji\" , \"last_name\" : \"K\" , \"email\" : \"anji@example.com\" }, { \"first_name\" : \"Jessi\" , \"last_name\" : \"M\" , \"email\" : \"jsessi@example.com\" }, { \"first_name\" : \"Jessi\" , \"last_name\" : \"L\" , \"email\" : \"jsessil@example.com\" }, ] objects = [ Contact ( ** d ) for d in contacts ] results = Contact . objects . bulk_create ( objects ) delete a single record - delete() \u00b6 use delete() method on the model object to delete it. from my_app.models import Contact obj = Contact . objects . get ( first_name = \"Anji\" ) obj . delete () Check the database if the record deleted or not. delete multiple records - delete() \u00b6 use delete() method on the django queryset. from my_app.models import Contact queryset = Contact . objects . filter ( first_name = \"Jessi\" ) queryset . delete () Check the database if the record deleted or not. References \u00b6 https://docs.djangoproject.com/en/dev/topics/db/queries/","title":"Django delete data"},{"location":"course/django/delete-data/#prerequisites","text":"Django Models Django Insert Data Django Retrieve Data","title":"Prerequisites"},{"location":"course/django/delete-data/#django-shell","text":"Run the command python manage.py shell open the django shell.","title":"Django shell"},{"location":"course/django/delete-data/#django-model-contact","text":"We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"Django Model - Contact"},{"location":"course/django/delete-data/#add-few-records-to-database","text":"from my_app.models import Contact contacts = [ { \"first_name\" : \"Anji\" , \"last_name\" : \"K\" , \"email\" : \"anji@example.com\" }, { \"first_name\" : \"Jessi\" , \"last_name\" : \"M\" , \"email\" : \"jsessi@example.com\" }, { \"first_name\" : \"Jessi\" , \"last_name\" : \"L\" , \"email\" : \"jsessil@example.com\" }, ] objects = [ Contact ( ** d ) for d in contacts ] results = Contact . objects . bulk_create ( objects )","title":"Add few records to database"},{"location":"course/django/delete-data/#delete-a-single-record-delete","text":"use delete() method on the model object to delete it. from my_app.models import Contact obj = Contact . objects . get ( first_name = \"Anji\" ) obj . delete () Check the database if the record deleted or not.","title":"delete a single record - delete()"},{"location":"course/django/delete-data/#delete-multiple-records-delete","text":"use delete() method on the django queryset. from my_app.models import Contact queryset = Contact . objects . filter ( first_name = \"Jessi\" ) queryset . delete () Check the database if the record deleted or not.","title":"delete multiple records - delete()"},{"location":"course/django/delete-data/#references","text":"https://docs.djangoproject.com/en/dev/topics/db/queries/","title":"References"},{"location":"course/django/delete-view/","text":"Prerequisites \u00b6 Django Models Django Retrieve Data Django Delete Data Django Delete View \u00b6 Django delete view used to delete a record from the database through user interaction. It identifies the object based on the primary key. function based delete view \u00b6 Look at the code below from django.http import HttpResponse from django.shortcuts import render , get_object_or_404 from my_app.models import Contact def fbv_delete_view ( request , pk ): obj = get_object_or_404 ( Contact , id = pk ) if request . method . lower () == 'post' : obj . delete () return HttpResponse ( 'Delete success' ) context = { 'object' : obj } return render ( request , 'delete_template.html' , context ) For GET request, it shows info about the deleted object. Once user confirms the delete with POST request then it deletes the object and returns the response. class based delete view \u00b6 Django provides the generic view DeleteView to delete object. Look at the code below. from django.http import HttpResponse from django.views.generic.edit import DeleteView from my_app.models import Contact class CBVDeleteView ( DeleteView ): pk_url_kwarg = 'pk' queryset = Contact . objects . all () template_name = 'delete_template.html' def form_valid ( self , form ): self . object = self . get_object () self . object . delete () return HttpResponse ( 'Delete success' ) It works same as the function based delete view implemented above. pk_url_kwarg - to identify the object or the record Attributes queryset or model or method get_object() is required to get the object. configure urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_delete_view/<int:pk>' , views . fbv_delete_view , name = 'fbv_delete_view' ), path ( 'cbv_delete_view/<int:pk>' , views . CBVDeleteView . as_view (), name = 'cbv_delete_view' ), # ... ] Open url http://127.0.0.1:8000/my_app/fbv_delete_view/1 to delete the object using function based delete view. Open url http://127.0.0.1:8000/my_app/cbv_delete_view/1 to delete the object using class based delete view. Replace the 1 with any id in the contact table. It throws 404 status code if id does not exist in the table. References \u00b6 https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/DeleteView/","title":"Django delete view"},{"location":"course/django/delete-view/#prerequisites","text":"Django Models Django Retrieve Data Django Delete Data","title":"Prerequisites"},{"location":"course/django/delete-view/#django-delete-view","text":"Django delete view used to delete a record from the database through user interaction. It identifies the object based on the primary key.","title":"Django Delete View"},{"location":"course/django/delete-view/#function-based-delete-view","text":"Look at the code below from django.http import HttpResponse from django.shortcuts import render , get_object_or_404 from my_app.models import Contact def fbv_delete_view ( request , pk ): obj = get_object_or_404 ( Contact , id = pk ) if request . method . lower () == 'post' : obj . delete () return HttpResponse ( 'Delete success' ) context = { 'object' : obj } return render ( request , 'delete_template.html' , context ) For GET request, it shows info about the deleted object. Once user confirms the delete with POST request then it deletes the object and returns the response.","title":"function based delete view"},{"location":"course/django/delete-view/#class-based-delete-view","text":"Django provides the generic view DeleteView to delete object. Look at the code below. from django.http import HttpResponse from django.views.generic.edit import DeleteView from my_app.models import Contact class CBVDeleteView ( DeleteView ): pk_url_kwarg = 'pk' queryset = Contact . objects . all () template_name = 'delete_template.html' def form_valid ( self , form ): self . object = self . get_object () self . object . delete () return HttpResponse ( 'Delete success' ) It works same as the function based delete view implemented above. pk_url_kwarg - to identify the object or the record Attributes queryset or model or method get_object() is required to get the object.","title":"class based delete view"},{"location":"course/django/delete-view/#configure-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_delete_view/<int:pk>' , views . fbv_delete_view , name = 'fbv_delete_view' ), path ( 'cbv_delete_view/<int:pk>' , views . CBVDeleteView . as_view (), name = 'cbv_delete_view' ), # ... ] Open url http://127.0.0.1:8000/my_app/fbv_delete_view/1 to delete the object using function based delete view. Open url http://127.0.0.1:8000/my_app/cbv_delete_view/1 to delete the object using class based delete view. Replace the 1 with any id in the contact table. It throws 404 status code if id does not exist in the table.","title":"configure urls"},{"location":"course/django/delete-view/#references","text":"https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/DeleteView/","title":"References"},{"location":"course/django/detail-view/","text":"Prerequisites \u00b6 Django template view Django Retrieve Data Django detail view \u00b6 Django detail view shows the single object information to the user. It fetches the object from the database using primary key or an equivalent. Let's write a view for contact detail view page. contact model \u00b6 my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" function based detail view \u00b6 It's useful when we have a functionality with simple requirements. Look at the code below. from django.http import Http404 from django.shortcuts import render from my_app.models import Contact def fbv_detail_view ( request , pk ): try : obj = Contact . objects . get ( id = pk ) except Contact . DoesNotExist : raise Http404 context = { \"object\" : obj } return render ( request , 'detail_template.html' , context ) Detail view function takes two parameters request and pk request is an instance of HttpRequest class, which contains the request info pk is a url keyword argument used query the database to get the object. class based detail view \u00b6 Django provides generic class DetailView We can inherit the DetailView and provide the required attibutes and/or methods to make it work. Only use if it fits your use case. Let's look at the code below. from django.views.generic.detail import DetailView from my_app.models import Contact class CBVListView ( DetailView ): template_name = 'detail_template.html' pk_url_kwarg = 'pk' queryset = Contact . objects . all () In the above code pk_url_kwarg is used as a primary key in the query. Either we need to provider queryset attribute or get_queryset() or get_object() methods. There are other attributes and methods available to override based on the functionality. We can find more info at ccbv It sends the context {\"object\": <Model object>} to the template. detail_template.html \u00b6 Let's look at the code for the template < div > < p > Name: {{ object.first_name }} </ p > < p > Email: {{ object.email }} </ p > </ div > Template receives the context and reders the template. configure urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_detail_view/<int:pk>' , views . fbv_detail_view , name = 'fbv_detail_view' ), path ( 'cbv_detail_view/<int:pk>' , views . CBVDetailView . as_view (), name = 'cbv_detail_view' ), # ... ] Open url http://127.0.0.1:8000/my_app/fbv_detail_view/1 to see the response for function based detail view Open url http://127.0.0.1:8000/my_app/cbv_detail_view/1 to see the response for class based detail view Replace the 1 with any id in the contact table. It throws 404 status code if id does not exist in the table. References \u00b6 https://ccbv.co.uk/projects/Django/4.1/django.views.generic.detail/DetailView/ https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/#detailview","title":"Django detail view"},{"location":"course/django/detail-view/#prerequisites","text":"Django template view Django Retrieve Data","title":"Prerequisites"},{"location":"course/django/detail-view/#django-detail-view","text":"Django detail view shows the single object information to the user. It fetches the object from the database using primary key or an equivalent. Let's write a view for contact detail view page.","title":"Django detail view"},{"location":"course/django/detail-view/#contact-model","text":"my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"contact model"},{"location":"course/django/detail-view/#function-based-detail-view","text":"It's useful when we have a functionality with simple requirements. Look at the code below. from django.http import Http404 from django.shortcuts import render from my_app.models import Contact def fbv_detail_view ( request , pk ): try : obj = Contact . objects . get ( id = pk ) except Contact . DoesNotExist : raise Http404 context = { \"object\" : obj } return render ( request , 'detail_template.html' , context ) Detail view function takes two parameters request and pk request is an instance of HttpRequest class, which contains the request info pk is a url keyword argument used query the database to get the object.","title":"function based detail view"},{"location":"course/django/detail-view/#class-based-detail-view","text":"Django provides generic class DetailView We can inherit the DetailView and provide the required attibutes and/or methods to make it work. Only use if it fits your use case. Let's look at the code below. from django.views.generic.detail import DetailView from my_app.models import Contact class CBVListView ( DetailView ): template_name = 'detail_template.html' pk_url_kwarg = 'pk' queryset = Contact . objects . all () In the above code pk_url_kwarg is used as a primary key in the query. Either we need to provider queryset attribute or get_queryset() or get_object() methods. There are other attributes and methods available to override based on the functionality. We can find more info at ccbv It sends the context {\"object\": <Model object>} to the template.","title":"class based detail view"},{"location":"course/django/detail-view/#detail_templatehtml","text":"Let's look at the code for the template < div > < p > Name: {{ object.first_name }} </ p > < p > Email: {{ object.email }} </ p > </ div > Template receives the context and reders the template.","title":"detail_template.html"},{"location":"course/django/detail-view/#configure-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_detail_view/<int:pk>' , views . fbv_detail_view , name = 'fbv_detail_view' ), path ( 'cbv_detail_view/<int:pk>' , views . CBVDetailView . as_view (), name = 'cbv_detail_view' ), # ... ] Open url http://127.0.0.1:8000/my_app/fbv_detail_view/1 to see the response for function based detail view Open url http://127.0.0.1:8000/my_app/cbv_detail_view/1 to see the response for class based detail view Replace the 1 with any id in the contact table. It throws 404 status code if id does not exist in the table.","title":"configure urls"},{"location":"course/django/detail-view/#references","text":"https://ccbv.co.uk/projects/Django/4.1/django.views.generic.detail/DetailView/ https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/#detailview","title":"References"},{"location":"course/django/django-built-in-template-tags/","text":"django built-in template tags \u00b6 Django built in template tags are very useful in data manipulation, conditional data rendering and templates re-usability with template inheritance. We should follow smart ways to make our development life ease and consistent. While working with django templates we can make use of django built-in template tags render the templates in smart way and reuse the templates wherever required. Django Built-in Template Tags \u00b6 We have many built-in template tags in django but let's discuss most used django built-in template tags. if...else...endif for...endfor block and extends include url django template tag \"if...else...endif\" \u00b6 It's the most frequently used template tag in django templates. Let's see how we can use it. {% if marks > 80 %} Grade A {% elif var2 > 70 %} Grade B {% else %} Grade C {% endif %} use case: Show student grade based on the django template tag for...endfor \u00b6 It's useful when we want to iterate the same content. Let's see how we can use it {% for product in products_list %} < div class = \"product\" > < p > Product: {{product.name}} </ p > < p > Cost: {{product.cost}} </ p > </ div > {% endfor %} use case: To show list of products in a e-commerse website django template tags \"block\" and \"extends\" \u00b6 It's most used built-in template tag in django templates. If we see websites like Amazon and Flipcart then we can find that header and footer is constant and the only content changes from page to page. I this kinds of scenarios we use blocks and template inheritance like below. We create a \"base.html\" template which as the code for the header and footer of the website and content which can be changed. File: base.html < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > {% block content %} {% endblock %} </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > In the above django template we have created a \"content\" block and it can be used in two templates \"contact_us.html\" and \"about_us.html\". Let's see how to implement it. File: contact_us.html {% extends \"base.html\" %} {% block content %} < p > Contact me for more details :D </ p > {% endblock %} Now, the actual rendered page looks like below. < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > < p > Contact me for more details :D </ p > </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > we follow the same logic for \"about_us.html\" just like \"contact_us.html\". So, The conclusion is we write less code and make use if effectively to reach our goal. Points to remember: \"extends\" should be in the beginning of the document otherwise it will throw us an error. django \"include\" template tag \u00b6 include is super cool template tag can be used in django template tags. It's useful when we need a part of the html code in different pages then we ue it. use case: Let's take a blog application, we show latest blog posts in the home page and list all other blog posts in another page. but, we use the disign sample same for both of the places. In that scenario django include template tag is useful. Let's implement it. File: blog_article.html < div class = \"blog-article\" > < h1 > {{ article.title }} </ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > File: home.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in latest_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %} File: blog_list.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in all_blog_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %} django url template tag \u00b6 It's useful when we generate a dynamic url based on some parameters use case: Generate blog post deail url based on blog post id like below File: blog_article.html < div class = \"blog-article\" > < h1 >< a href = \"{% url 'blog_post_detail' article.id %}\" > {{ article.title }} </ a ></ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > That's it folks. We can check out more django template tags in the official documentation. Reference: docs.djangoproject.com/en/3.0/ref/templates/builtins/#built-in-template-tags-and-filters","title":"django built in template tags"},{"location":"course/django/django-built-in-template-tags/#django-built-in-template-tags","text":"Django built in template tags are very useful in data manipulation, conditional data rendering and templates re-usability with template inheritance. We should follow smart ways to make our development life ease and consistent. While working with django templates we can make use of django built-in template tags render the templates in smart way and reuse the templates wherever required.","title":"django built-in template tags"},{"location":"course/django/django-built-in-template-tags/#django-built-in-template-tags_1","text":"We have many built-in template tags in django but let's discuss most used django built-in template tags. if...else...endif for...endfor block and extends include url","title":"Django Built-in Template Tags"},{"location":"course/django/django-built-in-template-tags/#django-template-tag-ifelseendif","text":"It's the most frequently used template tag in django templates. Let's see how we can use it. {% if marks > 80 %} Grade A {% elif var2 > 70 %} Grade B {% else %} Grade C {% endif %} use case: Show student grade based on the","title":"django template tag \"if...else...endif\""},{"location":"course/django/django-built-in-template-tags/#django-template-tag-forendfor","text":"It's useful when we want to iterate the same content. Let's see how we can use it {% for product in products_list %} < div class = \"product\" > < p > Product: {{product.name}} </ p > < p > Cost: {{product.cost}} </ p > </ div > {% endfor %} use case: To show list of products in a e-commerse website","title":"django template tag for...endfor"},{"location":"course/django/django-built-in-template-tags/#django-template-tags-block-and-extends","text":"It's most used built-in template tag in django templates. If we see websites like Amazon and Flipcart then we can find that header and footer is constant and the only content changes from page to page. I this kinds of scenarios we use blocks and template inheritance like below. We create a \"base.html\" template which as the code for the header and footer of the website and content which can be changed. File: base.html < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > {% block content %} {% endblock %} </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > In the above django template we have created a \"content\" block and it can be used in two templates \"contact_us.html\" and \"about_us.html\". Let's see how to implement it. File: contact_us.html {% extends \"base.html\" %} {% block content %} < p > Contact me for more details :D </ p > {% endblock %} Now, the actual rendered page looks like below. < html > < body > < header > < ul > < a > Home </ a > < a > Contact Us </ a > < a > About Us </ a > </ ul > </ header > < div class = \"content\" > < p > Contact me for more details :D </ p > </ div > < footer > < a > FaQ </ a > </ footer > </ body > </ html > we follow the same logic for \"about_us.html\" just like \"contact_us.html\". So, The conclusion is we write less code and make use if effectively to reach our goal. Points to remember: \"extends\" should be in the beginning of the document otherwise it will throw us an error.","title":"django template tags \"block\" and \"extends\""},{"location":"course/django/django-built-in-template-tags/#django-include-template-tag","text":"include is super cool template tag can be used in django template tags. It's useful when we need a part of the html code in different pages then we ue it. use case: Let's take a blog application, we show latest blog posts in the home page and list all other blog posts in another page. but, we use the disign sample same for both of the places. In that scenario django include template tag is useful. Let's implement it. File: blog_article.html < div class = \"blog-article\" > < h1 > {{ article.title }} </ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > File: home.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in latest_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %} File: blog_list.html {% extends \"base.html\" %} {% block content %} <!-- some data before --> {% for article in all_blog_articles %} {% include \"blog_article.html\" with article=article %} {% endfor %} {% endblock %}","title":"django \"include\" template tag"},{"location":"course/django/django-built-in-template-tags/#django-url-template-tag","text":"It's useful when we generate a dynamic url based on some parameters use case: Generate blog post deail url based on blog post id like below File: blog_article.html < div class = \"blog-article\" > < h1 >< a href = \"{% url 'blog_post_detail' article.id %}\" > {{ article.title }} </ a ></ h1 > < p class = \"desc\" > {{ article.description }} </ p > </ div > That's it folks. We can check out more django template tags in the official documentation. Reference: docs.djangoproject.com/en/3.0/ref/templates/builtins/#built-in-template-tags-and-filters","title":"django url template tag"},{"location":"course/django/django-class-based-generic-views/","text":"django class based generic views \u00b6 In web application development, it's possible to have a repeated patterns again and again. so, Django comes with solution. The solution is generic class based views. Advantanges of generic class based views \u00b6 Django\u2019s generic views were developed to ease that pain. Generic views abstracted the common functionality so, we can write less code and get the functionality done quickly. We can inherit the generic views and extend the functionality so that we can speed up the development. Code will be clean and well organized Disadvantages of generic class based views \u00b6 It looks some what difficult when compare to function based views because of the abstraction of the functionality provided by the class based views. It will be difficult to understand the code when you didn't know OOP's concepts atleast the inheritance concept. Generic views \u00b6 We have the following views provided by django View TemplateView FormView CreateView DetailView ListView UpdateView DeleteView Note: Django also provides other class based views but these are used frequently. Base class - View \u00b6 It's the base class for all generic views. We need to implement the HTTP request methods as_view is the class method which returns the view. Let's see an example view to return simple HTTP response views.py from django.views.generic import View from django.http import HttpResponse class SimpleView ( View ): def get ( self , request ): return HttpResponse ( \"Hello\" ) urls.py from django.urls import path from .views import SimpleView urlpatterns = [ path ( \"simple-view/\" , SimpleView . as_view (), name = \"simple\" ) ] Generic TemplateView \u00b6 It's used to render the template with context It inherits the base class View We just need to provide the template path to render the template with attribute teamplate_name . We can pass the context to template by method get_context_data Let's see an example to terms page terms.html < html > < body > < h1 > Hello, {{user}} </ h1 > </ body > </ html > views.py from django.views.generic import TemplateView class TermsView ( TemplateView ): template_name = \"terms.html\" def get_context_data ( self , * args , ** kwargs ): context = { \"user\" : \"Anji\" } return context urls.py from django.urls import path from .views import TermsView urlpatterns = [ path ( \"terms/\" , TermsView . as_view (), name = \"terms\" ) ] Generic FormView \u00b6 It's used to collect the input from the user. we need to inherit the FormView to the current view to implement it. It takes attributes form_class , template_name and success_url form_valid method is to write our business logic. It's called when form is valid. Let's see an example forms.py from django import forms class CityForm ( forms . Form ): name = forms . CharField () description = forms . CharField ( widget = forms . Textarea ) city_form.html < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > views.py from django.views.generic.edit import FormView from .forms import CityForm class CityFormView ( FormView ): form_class = CityForm template_name = \"city_form.html\" success_url = \"/thanks/\" def form_valid ( self , form ): # our business logic here return super () . form_valid ( form ) urls.py from django.urls import path from .views import CityFormView urlpatterns = [ path ( \"terms/\" , CityFormView . as_view (), name = \"city_form\" ) ] Generic CreateView \u00b6 It's used to create an instance of a table in the database. Organization of code related to specific HTTP methods (GET, POST, etc.) can be addressed by separate methods instead of conditional branching. usecase: Let's write a code to add the city details to the city table. models.py from django.db import models class City ( models . Model ): title = models . CharField ( max_length = 200 ) description = models . TextField () def __str__ ( self ): return self . title city_form.html < form method = \"POST\" enctype = \"multipart/form-data\" > <!-- Security token --> {% csrf_token %} <!-- Using the formset --> {{ form.as_p }} < input type = \"submit\" value = \"Submit\" > </ form > views.py from django.views.generic.edit import CreateView from .models import City class CityCreateView ( CreateView ): model = City fields = [ 'title' , 'description' ] template_name = \"city_form.html\" urls.py from django.urls import path from .views import CityView urlpatterns = [ path ( 'city' , CityCreateView . as_view (), name = \"city-create\" ), ] Like, above we can write create functionality with very minimal code. This is how django class based views comes in to handy. Generic DetailView \u00b6 It's used to retrive the instance from the database and show the info to the user. It requires minimal effort to implement it with generic CBV(i.e class based views) views. Let's use the same model City from CreateView example. It sends model instance as object to template context It uses pk url kwarg to find the correct model instance in the database table. Let's see an example implementation city_detail.html < h1 > {{ object.title }} </ h1 > < p > {{ object.description }} </ p > views.py from django.views.generic.detail import DetailView from .models import City class CityDetailView ( DetailView ): model = City template_name = \"city_detail.html\" urls.py from django.urls import path from .views import CityDetailView urlpatterns = [ path ( 'city/<pk>/' , CityDetailView . as_view (), name = \"city-detail\" ), ] It's that simple to implement the django generic detail view. Generic ListView \u00b6 It's used to list/show all objects/rows in the database table to user. It comes with pagination as it's difficult to handle large data. It sends all objects or paginated objects to template context with name object_list Let's see an example city_list.html < ul > <!-- Iterate over object_list --> {% for object in object_list %} <!-- Display Objects --> < li > {{ object.title }} </ li > < li > {{ object.description }} </ li > < hr /> <!-- If objet_list is empty --> {% empty %} < li > No objects yet. </ li > {% endfor %} </ ul > views.py from django.views.generic.list import ListView from .models import City class CityListView ( ListView ): model = City urls.py from django.urls import path from .views import CityListView urlpatterns = [ path ( 'all-cities/' , CityListView . as_view (), name = \"city-list\" ), ] It's that simple to implement the generic class based listview in django. Generic UpdateView \u00b6 It's used to update the existing object/row in the database table. It automatically generates the form from the model and sends to the template context It can be accessed with name form in the template It identifies the object with url kwarg pk Let's see an example city_update.html < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > views.py from django.views.generic.edit import UpdateView from .models import City class CityUpdateView ( UpdateView ): model = City fields = [ \"title\" , \"description\" ] success_url = \"/\" urls.py from django.urls import path from .views import CityUpdateView urlpatterns = [ path ( 'city/<pk>/update' , CityUpdateView . as_view (), name = \"city-update\" ), ] That's how we implement the update view with class based UpdateView in django. Generic DeleteView \u00b6 It's used to remove/delete an instance from the database table. DeleteView identifies the correct instance with the url kwarg pk Let's see an example city_delete.html < form method = \"post\" > {% csrf_token %} < p > Are you sure you want to delete \"{{ object }}\"? </ p > < input type = \"submit\" value = \"Confirm\" > </ form > views.py from django.views.generic.edit import DeleteView from .models import City class CityDeleteView ( DeleteView ): model = City success_url = \"/\" urls.py from django.urls import path from .views import CityDeleteView urlpatterns = [ path ( 'city/<pk>/delete/' , CityDeleteView . as_view (), name = \"city-delete\" ), ] We have seen simple examples to use class based views in django. Create a djano app and try it out. Reference: https://docs.djangoproject.com/en/3.2/topics/class-based-views/generic-display/","title":"django class based generic views"},{"location":"course/django/django-class-based-generic-views/#django-class-based-generic-views","text":"In web application development, it's possible to have a repeated patterns again and again. so, Django comes with solution. The solution is generic class based views.","title":"django class based generic views"},{"location":"course/django/django-class-based-generic-views/#advantanges-of-generic-class-based-views","text":"Django\u2019s generic views were developed to ease that pain. Generic views abstracted the common functionality so, we can write less code and get the functionality done quickly. We can inherit the generic views and extend the functionality so that we can speed up the development. Code will be clean and well organized","title":"Advantanges of generic class based views"},{"location":"course/django/django-class-based-generic-views/#disadvantages-of-generic-class-based-views","text":"It looks some what difficult when compare to function based views because of the abstraction of the functionality provided by the class based views. It will be difficult to understand the code when you didn't know OOP's concepts atleast the inheritance concept.","title":"Disadvantages of generic class based views"},{"location":"course/django/django-class-based-generic-views/#generic-views","text":"We have the following views provided by django View TemplateView FormView CreateView DetailView ListView UpdateView DeleteView Note: Django also provides other class based views but these are used frequently.","title":"Generic views"},{"location":"course/django/django-class-based-generic-views/#base-class-view","text":"It's the base class for all generic views. We need to implement the HTTP request methods as_view is the class method which returns the view. Let's see an example view to return simple HTTP response views.py from django.views.generic import View from django.http import HttpResponse class SimpleView ( View ): def get ( self , request ): return HttpResponse ( \"Hello\" ) urls.py from django.urls import path from .views import SimpleView urlpatterns = [ path ( \"simple-view/\" , SimpleView . as_view (), name = \"simple\" ) ]","title":"Base class - View"},{"location":"course/django/django-class-based-generic-views/#generic-templateview","text":"It's used to render the template with context It inherits the base class View We just need to provide the template path to render the template with attribute teamplate_name . We can pass the context to template by method get_context_data Let's see an example to terms page terms.html < html > < body > < h1 > Hello, {{user}} </ h1 > </ body > </ html > views.py from django.views.generic import TemplateView class TermsView ( TemplateView ): template_name = \"terms.html\" def get_context_data ( self , * args , ** kwargs ): context = { \"user\" : \"Anji\" } return context urls.py from django.urls import path from .views import TermsView urlpatterns = [ path ( \"terms/\" , TermsView . as_view (), name = \"terms\" ) ]","title":"Generic TemplateView"},{"location":"course/django/django-class-based-generic-views/#generic-formview","text":"It's used to collect the input from the user. we need to inherit the FormView to the current view to implement it. It takes attributes form_class , template_name and success_url form_valid method is to write our business logic. It's called when form is valid. Let's see an example forms.py from django import forms class CityForm ( forms . Form ): name = forms . CharField () description = forms . CharField ( widget = forms . Textarea ) city_form.html < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > views.py from django.views.generic.edit import FormView from .forms import CityForm class CityFormView ( FormView ): form_class = CityForm template_name = \"city_form.html\" success_url = \"/thanks/\" def form_valid ( self , form ): # our business logic here return super () . form_valid ( form ) urls.py from django.urls import path from .views import CityFormView urlpatterns = [ path ( \"terms/\" , CityFormView . as_view (), name = \"city_form\" ) ]","title":"Generic FormView"},{"location":"course/django/django-class-based-generic-views/#generic-createview","text":"It's used to create an instance of a table in the database. Organization of code related to specific HTTP methods (GET, POST, etc.) can be addressed by separate methods instead of conditional branching. usecase: Let's write a code to add the city details to the city table. models.py from django.db import models class City ( models . Model ): title = models . CharField ( max_length = 200 ) description = models . TextField () def __str__ ( self ): return self . title city_form.html < form method = \"POST\" enctype = \"multipart/form-data\" > <!-- Security token --> {% csrf_token %} <!-- Using the formset --> {{ form.as_p }} < input type = \"submit\" value = \"Submit\" > </ form > views.py from django.views.generic.edit import CreateView from .models import City class CityCreateView ( CreateView ): model = City fields = [ 'title' , 'description' ] template_name = \"city_form.html\" urls.py from django.urls import path from .views import CityView urlpatterns = [ path ( 'city' , CityCreateView . as_view (), name = \"city-create\" ), ] Like, above we can write create functionality with very minimal code. This is how django class based views comes in to handy.","title":"Generic CreateView"},{"location":"course/django/django-class-based-generic-views/#generic-detailview","text":"It's used to retrive the instance from the database and show the info to the user. It requires minimal effort to implement it with generic CBV(i.e class based views) views. Let's use the same model City from CreateView example. It sends model instance as object to template context It uses pk url kwarg to find the correct model instance in the database table. Let's see an example implementation city_detail.html < h1 > {{ object.title }} </ h1 > < p > {{ object.description }} </ p > views.py from django.views.generic.detail import DetailView from .models import City class CityDetailView ( DetailView ): model = City template_name = \"city_detail.html\" urls.py from django.urls import path from .views import CityDetailView urlpatterns = [ path ( 'city/<pk>/' , CityDetailView . as_view (), name = \"city-detail\" ), ] It's that simple to implement the django generic detail view.","title":"Generic DetailView"},{"location":"course/django/django-class-based-generic-views/#generic-listview","text":"It's used to list/show all objects/rows in the database table to user. It comes with pagination as it's difficult to handle large data. It sends all objects or paginated objects to template context with name object_list Let's see an example city_list.html < ul > <!-- Iterate over object_list --> {% for object in object_list %} <!-- Display Objects --> < li > {{ object.title }} </ li > < li > {{ object.description }} </ li > < hr /> <!-- If objet_list is empty --> {% empty %} < li > No objects yet. </ li > {% endfor %} </ ul > views.py from django.views.generic.list import ListView from .models import City class CityListView ( ListView ): model = City urls.py from django.urls import path from .views import CityListView urlpatterns = [ path ( 'all-cities/' , CityListView . as_view (), name = \"city-list\" ), ] It's that simple to implement the generic class based listview in django.","title":"Generic ListView"},{"location":"course/django/django-class-based-generic-views/#generic-updateview","text":"It's used to update the existing object/row in the database table. It automatically generates the form from the model and sends to the template context It can be accessed with name form in the template It identifies the object with url kwarg pk Let's see an example city_update.html < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > views.py from django.views.generic.edit import UpdateView from .models import City class CityUpdateView ( UpdateView ): model = City fields = [ \"title\" , \"description\" ] success_url = \"/\" urls.py from django.urls import path from .views import CityUpdateView urlpatterns = [ path ( 'city/<pk>/update' , CityUpdateView . as_view (), name = \"city-update\" ), ] That's how we implement the update view with class based UpdateView in django.","title":"Generic UpdateView"},{"location":"course/django/django-class-based-generic-views/#generic-deleteview","text":"It's used to remove/delete an instance from the database table. DeleteView identifies the correct instance with the url kwarg pk Let's see an example city_delete.html < form method = \"post\" > {% csrf_token %} < p > Are you sure you want to delete \"{{ object }}\"? </ p > < input type = \"submit\" value = \"Confirm\" > </ form > views.py from django.views.generic.edit import DeleteView from .models import City class CityDeleteView ( DeleteView ): model = City success_url = \"/\" urls.py from django.urls import path from .views import CityDeleteView urlpatterns = [ path ( 'city/<pk>/delete/' , CityDeleteView . as_view (), name = \"city-delete\" ), ] We have seen simple examples to use class based views in django. Create a djano app and try it out. Reference: https://docs.djangoproject.com/en/3.2/topics/class-based-views/generic-display/","title":"Generic DeleteView"},{"location":"course/django/django-create-table-from-model/","text":"django create table from model \u00b6 Django made creating the tables in the database very simple with its built-in ORM. To create table in the database with django is to create a django model with all required fields and then create migrations and apply them. Let's jump-in learn how to create database table with django model. Creating database table with django model \u00b6 from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () With the above code we are creating the table named \" person \" with fields \" first_name \", \" last_name \" and \" address \". The equivallent \" SQL \" for above django model is CREATE TABLE < app name > _person ( id int , first_name varchar ( 100 ), last_name varchar ( 100 ), address text , ); As we know django comes with ORM( Object Relational Mapper ) so, we do not need to write SQL queries to deal with the database. We write database queries in django and django ORM converts all these queries into equivalent SQL and performs the query on the database and returns the results. In the above code we have imported the \" models \" module which contains the functionality related to database(i.e ORM). \" models.Model \" is a base class for all model classes in django application. Each model class represents a database table. Create migrations for above django model \u00b6 To create migrations for the django application we have to run the below command. python manage.py makemigrations <app name> above command will create migrations for the model in the directory \" migrations \" under the application directory. Apply migrations to create table in the database \u00b6 To create table in the database for our django application we have to apply above created models using below command python manage.py migrate <app name> After running above command it creates the table in the database. To write django models we need to know the different fields provided by django to use correct field for the table. That's it folks it's pretty easy to create django model.","title":"django create table from model"},{"location":"course/django/django-create-table-from-model/#django-create-table-from-model","text":"Django made creating the tables in the database very simple with its built-in ORM. To create table in the database with django is to create a django model with all required fields and then create migrations and apply them. Let's jump-in learn how to create database table with django model.","title":"django create table from model"},{"location":"course/django/django-create-table-from-model/#creating-database-table-with-django-model","text":"from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () With the above code we are creating the table named \" person \" with fields \" first_name \", \" last_name \" and \" address \". The equivallent \" SQL \" for above django model is CREATE TABLE < app name > _person ( id int , first_name varchar ( 100 ), last_name varchar ( 100 ), address text , ); As we know django comes with ORM( Object Relational Mapper ) so, we do not need to write SQL queries to deal with the database. We write database queries in django and django ORM converts all these queries into equivalent SQL and performs the query on the database and returns the results. In the above code we have imported the \" models \" module which contains the functionality related to database(i.e ORM). \" models.Model \" is a base class for all model classes in django application. Each model class represents a database table.","title":"Creating database table with django model"},{"location":"course/django/django-create-table-from-model/#create-migrations-for-above-django-model","text":"To create migrations for the django application we have to run the below command. python manage.py makemigrations <app name> above command will create migrations for the model in the directory \" migrations \" under the application directory.","title":"Create migrations for above django model"},{"location":"course/django/django-create-table-from-model/#apply-migrations-to-create-table-in-the-database","text":"To create table in the database for our django application we have to apply above created models using below command python manage.py migrate <app name> After running above command it creates the table in the database. To write django models we need to know the different fields provided by django to use correct field for the table. That's it folks it's pretty easy to create django model.","title":"Apply migrations to create table in the database"},{"location":"course/django/django-create-view/","text":"Django CreateView \u00b6 Django comes with a reusable class based views and CreateView is one of them. It's similar to the FormView and on top of the FormView it added a extra functionality to store the form data into the database table. It's a view for displaying a form, and rendering a template response and create the data into database table. When to use CreateView? \u00b6 When we have requirement of validating and storing the information into the database table It allows us to quickly implement the requirement It takes few lines of code to implement it. UML diagram for CreateView \u00b6 Above is the UML diagram for CreateView . It inherits the classes BaseCreateView , ModelFormMixin , FormMixin , TemplateResponseMixin , ProcessFormView , ContextMixin , View , etc. we can check the code for CreateView at github. It comes with request methods GET and POST . GET method will render the form with context POST method will post the data to the server and renders the form again if has any errors otherwise it will save data into the database and redirect it to the success_url mentiond in the CreateView . can override get_context_data to send extra context to the template. can override get_form_class for conditional rendering of form can override get_success_url for conditional successful redirect. can override form_valid and form_invalid whenever required. Usage of CreateView in django \u00b6 Let's consider a library website where we keep the track of the books. If a new books comes in the the admin needs to add it to the database. so, let's implement this scenario with CreateView models.py from django.db import models class Book ( models . Model ): title = models . CharField ( max_length = 200 ) description = models . TextField () def __str__ ( self ): return self . title views.py from django.views.generic.edit import CreateView from .models import Book class BookCreateView ( CreateView ): model = Book fields = [ 'title' , 'description' ] template_name = \"book_create.html\" success_url = \"/thank-you/\" urls.py from django.urls import path from .views import BookCreateView urlpatterns = [ path ( 'books/create/' , BookCreateView . as_view ()), ] book_create.html < form method = \"POST\" enctype = \"multipart/form-data\" > <!-- Security token --> {% csrf_token %} <!-- Using the form --> {{ form.as_p }} <!-- submit button --> < input type = \"submit\" value = \"Submit\" > </ form > Create a django app and use the above blocks of code to implements the CreateView in django. Once you done that you can access localhost:8000/books/create/ and create a book then check the database for an entry. It's that simple folks to use django class based CreateView References: https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView https://github.com/django/django/blob/main/django/views/generic/edit.py#L175","title":"Django CreateView"},{"location":"course/django/django-create-view/#django-createview","text":"Django comes with a reusable class based views and CreateView is one of them. It's similar to the FormView and on top of the FormView it added a extra functionality to store the form data into the database table. It's a view for displaying a form, and rendering a template response and create the data into database table.","title":"Django CreateView"},{"location":"course/django/django-create-view/#when-to-use-createview","text":"When we have requirement of validating and storing the information into the database table It allows us to quickly implement the requirement It takes few lines of code to implement it.","title":"When to use CreateView?"},{"location":"course/django/django-create-view/#uml-diagram-for-createview","text":"Above is the UML diagram for CreateView . It inherits the classes BaseCreateView , ModelFormMixin , FormMixin , TemplateResponseMixin , ProcessFormView , ContextMixin , View , etc. we can check the code for CreateView at github. It comes with request methods GET and POST . GET method will render the form with context POST method will post the data to the server and renders the form again if has any errors otherwise it will save data into the database and redirect it to the success_url mentiond in the CreateView . can override get_context_data to send extra context to the template. can override get_form_class for conditional rendering of form can override get_success_url for conditional successful redirect. can override form_valid and form_invalid whenever required.","title":"UML diagram for CreateView"},{"location":"course/django/django-create-view/#usage-of-createview-in-django","text":"Let's consider a library website where we keep the track of the books. If a new books comes in the the admin needs to add it to the database. so, let's implement this scenario with CreateView models.py from django.db import models class Book ( models . Model ): title = models . CharField ( max_length = 200 ) description = models . TextField () def __str__ ( self ): return self . title views.py from django.views.generic.edit import CreateView from .models import Book class BookCreateView ( CreateView ): model = Book fields = [ 'title' , 'description' ] template_name = \"book_create.html\" success_url = \"/thank-you/\" urls.py from django.urls import path from .views import BookCreateView urlpatterns = [ path ( 'books/create/' , BookCreateView . as_view ()), ] book_create.html < form method = \"POST\" enctype = \"multipart/form-data\" > <!-- Security token --> {% csrf_token %} <!-- Using the form --> {{ form.as_p }} <!-- submit button --> < input type = \"submit\" value = \"Submit\" > </ form > Create a django app and use the above blocks of code to implements the CreateView in django. Once you done that you can access localhost:8000/books/create/ and create a book then check the database for an entry. It's that simple folks to use django class based CreateView References: https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView https://github.com/django/django/blob/main/django/views/generic/edit.py#L175","title":"Usage of CreateView in django"},{"location":"course/django/django-database-connectivity/","text":"django database connectivity \u00b6 Django supports various relational databases like SQLite, mySQL, PostgreSQL, Oracle. Django is completely designed for Relational Databases so it does not support non-relational databases like mongoDB directly. But we can use non-relational databases using third party packages. Let's get started with connecting databases to django application. All django project configurations can be found in the \"settings.py\" file. We configure the database settings in a variable \" DATABASES \" it's a simple dictionary which holds the configurations of the database. When we create a new django project it comes with SQLite database configurations. In order to other databases we have to configure the settings based on the database type like MySQL, PostgreSQL, etc. The \" DATABASES \" setting must configure a \"default\" database. We can use multiple databases with django. Connecting \"SQLite\" with django \u00b6 SQLite is a simple file based database and not recommended in the production environment. Let's see it's database configurations DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : 'database_name' } } Connecting \"MySQL\" with django \u00b6 DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } } Connecting \"PostgreSQL\" with django \u00b6 DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.postgresql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } } Let's see the details of above configuration. ENGINE : The database backed to use. NAME :It's the name of the database. USER : It's the name of the database user. PASSWORD : It's the password for the database user. HOST : It's the IP address of the database server. PORT : It's the port number for the database server.","title":"django database connectivity"},{"location":"course/django/django-database-connectivity/#django-database-connectivity","text":"Django supports various relational databases like SQLite, mySQL, PostgreSQL, Oracle. Django is completely designed for Relational Databases so it does not support non-relational databases like mongoDB directly. But we can use non-relational databases using third party packages. Let's get started with connecting databases to django application. All django project configurations can be found in the \"settings.py\" file. We configure the database settings in a variable \" DATABASES \" it's a simple dictionary which holds the configurations of the database. When we create a new django project it comes with SQLite database configurations. In order to other databases we have to configure the settings based on the database type like MySQL, PostgreSQL, etc. The \" DATABASES \" setting must configure a \"default\" database. We can use multiple databases with django.","title":"django database connectivity"},{"location":"course/django/django-database-connectivity/#connecting-sqlite-with-django","text":"SQLite is a simple file based database and not recommended in the production environment. Let's see it's database configurations DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : 'database_name' } }","title":"Connecting \"SQLite\" with django"},{"location":"course/django/django-database-connectivity/#connecting-mysql-with-django","text":"DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } }","title":"Connecting \"MySQL\" with django"},{"location":"course/django/django-database-connectivity/#connecting-postgresql-with-django","text":"DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.postgresql' , 'NAME' : 'database_name' , 'USER' : 'database_user' , 'PASSWORD' : 'secret' , 'HOST' : '127.0.0.1' , 'PORT' : '5432' , } } Let's see the details of above configuration. ENGINE : The database backed to use. NAME :It's the name of the database. USER : It's the name of the database user. PASSWORD : It's the password for the database user. HOST : It's the IP address of the database server. PORT : It's the port number for the database server.","title":"Connecting \"PostgreSQL\" with django"},{"location":"course/django/django-delete-view/","text":"Django DeleteView \u00b6 Why Django DeleteView? \u00b6 It's required to implement the delete a given resource from the database. Django generic DeleteView provides the functionality to display a confirmation page and deletes the object On GET request it displays the confirmation page On POST request it deletes the request resource. After deleting the resource it redirects the page to the success_url quick use of Django DeleteView \u00b6 usecase: Delete a product from the product table. myapp/models.py from django.db import models class Product ( models . Model ): name = models . CharField ( max_length = 100 ) description = models . TextField () class Meta : db_table = 'product' def __str__ ( self ): return f ' { self . name } ' Create object and get the id \u00b6 Let's open the django shell with command python manage.py shell execute below code to create product instance and get the id. from app.models import Product obj = Product . objects . create ( name = 'Quick python' , description = 'a python book' ) print ( obj . id ) # 1 myapp/views.py from django.urls import reverse_lazy from django.views.generic.edit import DeleteView from myapp.models import Product class ProductDeleteView ( DeleteView ): model = Product success_url = reverse_lazy ( 'product-list' ) templates/product_delete.html < form method = \"post\" > {% csrf_token %} < p > Are you sure you want to delete \"{{ object }}\"? </ p > {{ form }} < input type = \"submit\" value = \"Confirm\" > </ form > myapp/urls.py from django.contrib import admin from django.urls import path from . import views urlpatterns = [ path ( 'products/' , views . ProductListView . as_view (), name = 'product-list' ), path ( 'products/<pk>' , views . ProductDeleteView . as_view (), name = 'product-delete' ) ] Now, we are ready to test the generic DeleteView . Let's use the product id and delete it. To do that let's access the url http://localhost:8000/products/1 Note: replace 1 with actual id. Now, it will ask us to confirm the deletion. Once you click on the confirm, it will delete the object. Let's confirm that whether the object get deleted or not with below query. from myapp.models import Product obj = Product . objects . get ( id = 1 ) # DoesNotExist error The above query will throw an DoesNotExist error as it was deleted. You can find the sample project in github Reference: https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView https://github.com/django/django/blob/main/django/views/generic/edit.py https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django/django_generic_views","title":"Django DeleteView"},{"location":"course/django/django-delete-view/#django-deleteview","text":"","title":"Django DeleteView"},{"location":"course/django/django-delete-view/#why-django-deleteview","text":"It's required to implement the delete a given resource from the database. Django generic DeleteView provides the functionality to display a confirmation page and deletes the object On GET request it displays the confirmation page On POST request it deletes the request resource. After deleting the resource it redirects the page to the success_url","title":"Why Django DeleteView?"},{"location":"course/django/django-delete-view/#quick-use-of-django-deleteview","text":"usecase: Delete a product from the product table. myapp/models.py from django.db import models class Product ( models . Model ): name = models . CharField ( max_length = 100 ) description = models . TextField () class Meta : db_table = 'product' def __str__ ( self ): return f ' { self . name } '","title":"quick use of Django DeleteView"},{"location":"course/django/django-delete-view/#create-object-and-get-the-id","text":"Let's open the django shell with command python manage.py shell execute below code to create product instance and get the id. from app.models import Product obj = Product . objects . create ( name = 'Quick python' , description = 'a python book' ) print ( obj . id ) # 1 myapp/views.py from django.urls import reverse_lazy from django.views.generic.edit import DeleteView from myapp.models import Product class ProductDeleteView ( DeleteView ): model = Product success_url = reverse_lazy ( 'product-list' ) templates/product_delete.html < form method = \"post\" > {% csrf_token %} < p > Are you sure you want to delete \"{{ object }}\"? </ p > {{ form }} < input type = \"submit\" value = \"Confirm\" > </ form > myapp/urls.py from django.contrib import admin from django.urls import path from . import views urlpatterns = [ path ( 'products/' , views . ProductListView . as_view (), name = 'product-list' ), path ( 'products/<pk>' , views . ProductDeleteView . as_view (), name = 'product-delete' ) ] Now, we are ready to test the generic DeleteView . Let's use the product id and delete it. To do that let's access the url http://localhost:8000/products/1 Note: replace 1 with actual id. Now, it will ask us to confirm the deletion. Once you click on the confirm, it will delete the object. Let's confirm that whether the object get deleted or not with below query. from myapp.models import Product obj = Product . objects . get ( id = 1 ) # DoesNotExist error The above query will throw an DoesNotExist error as it was deleted. You can find the sample project in github Reference: https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView https://github.com/django/django/blob/main/django/views/generic/edit.py https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django/django_generic_views","title":"Create object and get the id"},{"location":"course/django/django-detail-view/","text":"Django DetailView \u00b6 Why django DetailView? \u00b6 Django detailview is most commonly used to present a single model instance data. It comes with in-built functionality like model instace query sending the required context to template template rendering As it inherits base classes BaseDetailView , SingleObjectTemplateResponseMixin , we can override the inherited methods as needed. most used DetailView attributes \u00b6 model: \u00b6 The model that this view will display data for. Specifying model = Foo is effectively the same as specifying queryset = Foo.objects.all() Use it if queryset needs to have all objects. queryset: \u00b6 A QuerySet that represents the objects. Use it if queryset needs some filtering which is not dynamic. Example: queryset = Foo.objects.filter(is_active=True) It's not recommended to use both model and queryset together pk_url_kwarg \u00b6 The name of the URLConf keyword argument that contains the primary key. By default, pk_url_kwarg is 'pk'. It will be used to lookup the object in the database. slug_url_kwarg: \u00b6 The name of the URLConf keyword argument that contains the slug. By default, slug_url_kwarg is 'slug'. query_pk_and_slug \u00b6 If True, causes get_object() to perform its lookup using both the primary key and the slug. Defaults to False. template_name \u00b6 The full name of a template to use as defined by a string. example: template_name=\"comments/comment_detail.html\" Most used DetailView methods \u00b6 get_object \u00b6 Returns the single object that this view will display. Can be overriden if object lookup requires additional attributes lookup along with pk get_context_data \u00b6 This method is responsible to pass the reqiured context to the template By default it pass object , view to template Can override this method to pass the extra context. Example implementation of DetailView \u00b6 Let's consider a e-commerce domain and we want to create a product detail page. app/models.py from django.db import models class Product ( models . Model ): title = models . CharField ( max_length = 100 ) description = models . TextField () app/urls.py from django.urls import path urlpatterns = [ path ( \"product/<pk:int>/\" ) ] app/views.py from django.views.generic.detail import DetailView from app.models import Product class ProductDetailView ( DetailView ): model = Product template_name = \"product/detail.html\" templates/product/detail.html Title: {{ object.title }} Decsription: {{ object.description }} If we want to send extra data to template then we can override the get_content_data method. Then, we can modify the detailview as below. from django.views.generic.detail import DetailView from app.models import Product class ProductDetailView ( DetailView ): model = Product template_name = \"product/detail.html\" def get_context_data ( self , * args , ** kwargs ): context = super () . get_context_data ( * args , ** kwargs ) # send extra data here context [ \"note\" ] = \"Django is awesome\" return context Then, in the template we can do like Title: {{ object.title }} Description: {{ object.description }} note: {{note}} Similarly, we can override other methods like get_object , get_queryset , etc. as needed. we can check all available methods in django github repo. References \u00b6 https://github.com/django/django/blob/main/django/views/generic/detail.py https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/","title":"Django DetailView"},{"location":"course/django/django-detail-view/#django-detailview","text":"","title":"Django DetailView"},{"location":"course/django/django-detail-view/#why-django-detailview","text":"Django detailview is most commonly used to present a single model instance data. It comes with in-built functionality like model instace query sending the required context to template template rendering As it inherits base classes BaseDetailView , SingleObjectTemplateResponseMixin , we can override the inherited methods as needed.","title":"Why django DetailView?"},{"location":"course/django/django-detail-view/#most-used-detailview-attributes","text":"","title":"most used DetailView attributes"},{"location":"course/django/django-detail-view/#model","text":"The model that this view will display data for. Specifying model = Foo is effectively the same as specifying queryset = Foo.objects.all() Use it if queryset needs to have all objects.","title":"model:"},{"location":"course/django/django-detail-view/#queryset","text":"A QuerySet that represents the objects. Use it if queryset needs some filtering which is not dynamic. Example: queryset = Foo.objects.filter(is_active=True) It's not recommended to use both model and queryset together","title":"queryset:"},{"location":"course/django/django-detail-view/#pk_url_kwarg","text":"The name of the URLConf keyword argument that contains the primary key. By default, pk_url_kwarg is 'pk'. It will be used to lookup the object in the database.","title":"pk_url_kwarg"},{"location":"course/django/django-detail-view/#slug_url_kwarg","text":"The name of the URLConf keyword argument that contains the slug. By default, slug_url_kwarg is 'slug'.","title":"slug_url_kwarg:"},{"location":"course/django/django-detail-view/#query_pk_and_slug","text":"If True, causes get_object() to perform its lookup using both the primary key and the slug. Defaults to False.","title":"query_pk_and_slug"},{"location":"course/django/django-detail-view/#template_name","text":"The full name of a template to use as defined by a string. example: template_name=\"comments/comment_detail.html\"","title":"template_name"},{"location":"course/django/django-detail-view/#most-used-detailview-methods","text":"","title":"Most used DetailView methods"},{"location":"course/django/django-detail-view/#get_object","text":"Returns the single object that this view will display. Can be overriden if object lookup requires additional attributes lookup along with pk","title":"get_object"},{"location":"course/django/django-detail-view/#get_context_data","text":"This method is responsible to pass the reqiured context to the template By default it pass object , view to template Can override this method to pass the extra context.","title":"get_context_data"},{"location":"course/django/django-detail-view/#example-implementation-of-detailview","text":"Let's consider a e-commerce domain and we want to create a product detail page. app/models.py from django.db import models class Product ( models . Model ): title = models . CharField ( max_length = 100 ) description = models . TextField () app/urls.py from django.urls import path urlpatterns = [ path ( \"product/<pk:int>/\" ) ] app/views.py from django.views.generic.detail import DetailView from app.models import Product class ProductDetailView ( DetailView ): model = Product template_name = \"product/detail.html\" templates/product/detail.html Title: {{ object.title }} Decsription: {{ object.description }} If we want to send extra data to template then we can override the get_content_data method. Then, we can modify the detailview as below. from django.views.generic.detail import DetailView from app.models import Product class ProductDetailView ( DetailView ): model = Product template_name = \"product/detail.html\" def get_context_data ( self , * args , ** kwargs ): context = super () . get_context_data ( * args , ** kwargs ) # send extra data here context [ \"note\" ] = \"Django is awesome\" return context Then, in the template we can do like Title: {{ object.title }} Description: {{ object.description }} note: {{note}} Similarly, we can override other methods like get_object , get_queryset , etc. as needed. we can check all available methods in django github repo.","title":"Example implementation of DetailView"},{"location":"course/django/django-detail-view/#references","text":"https://github.com/django/django/blob/main/django/views/generic/detail.py https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/","title":"References"},{"location":"course/django/django-form-view/","text":"django FormView \u00b6 Django comes with a reusable class based views and FormView is one of them. A view for displaying a form, and rendering a template response. When and Why to use FormView? \u00b6 it can be used when we a functionality to submit the forms it allows us to quickly render the page with a form with less code. we can render forms with conditionals also by overriding few methods in the FormView when we have requirement for a conditional rendering of form. UML diagram for FormView \u00b6 Above is the UML diagram for FormView . It inherits the classes BaseFormView , FormMixin , TemplateResponseMixin , ProcessFormView , ContextMixin , View . we can check the code for FormView at github. It comes with request methods GET and POST . GET method will render the form with context POST method will post the data to the server and renders the form again if has any errors otherwise it will redirect it to the success_url mentiond in the FormView . can override get_context_data to send extra context to the template. can override get_form_class for conditional rendering of form can override get_success_url for conditional successful redirect. can override form_valid and form_invalid whenever required. Usage of FormView in django \u00b6 Let's implement the contact us page with FormView . contact_us.html < html > < body > < h1 > Contact Us </ h1 > < form action = \"\" method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Submit\" /> </ form > > </ body > </ html > forms.py from django import forms class ContactForm ( forms . Form ): name = forms . CharField () message = forms . CharField ( widget = forms . Textarea ) def send_email ( self ): # send email using the self.cleaned_data dictionary pass views.py from myapp.forms import ContactForm from django.views.generic.edit import FormView class ContactView ( FormView ): template_name = 'contact_us.html' form_class = ContactForm success_url = '/thanks/' def form_valid ( self , form ): # This method is called when valid form data has been POSTed. # It should return an HttpResponse. form . send_email () return super ( ContactView , self ) . form_valid ( form ) It's that simple to implement form submission functionality with the help of FormView otherwise it will need to write our own code which will take more development time. By using django generic views we can rapidly reduce the development time. Read the django github repo code to understand more about the django generic views and what to override and when. Reference: https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-editing/#django.views.generic.edit.FormView https://github.com/django/django/blob/main/django/views/generic/edit.py#L156","title":"Django FormView"},{"location":"course/django/django-form-view/#django-formview","text":"Django comes with a reusable class based views and FormView is one of them. A view for displaying a form, and rendering a template response.","title":"django FormView"},{"location":"course/django/django-form-view/#when-and-why-to-use-formview","text":"it can be used when we a functionality to submit the forms it allows us to quickly render the page with a form with less code. we can render forms with conditionals also by overriding few methods in the FormView when we have requirement for a conditional rendering of form.","title":"When and Why to use FormView?"},{"location":"course/django/django-form-view/#uml-diagram-for-formview","text":"Above is the UML diagram for FormView . It inherits the classes BaseFormView , FormMixin , TemplateResponseMixin , ProcessFormView , ContextMixin , View . we can check the code for FormView at github. It comes with request methods GET and POST . GET method will render the form with context POST method will post the data to the server and renders the form again if has any errors otherwise it will redirect it to the success_url mentiond in the FormView . can override get_context_data to send extra context to the template. can override get_form_class for conditional rendering of form can override get_success_url for conditional successful redirect. can override form_valid and form_invalid whenever required.","title":"UML diagram for FormView"},{"location":"course/django/django-form-view/#usage-of-formview-in-django","text":"Let's implement the contact us page with FormView . contact_us.html < html > < body > < h1 > Contact Us </ h1 > < form action = \"\" method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Submit\" /> </ form > > </ body > </ html > forms.py from django import forms class ContactForm ( forms . Form ): name = forms . CharField () message = forms . CharField ( widget = forms . Textarea ) def send_email ( self ): # send email using the self.cleaned_data dictionary pass views.py from myapp.forms import ContactForm from django.views.generic.edit import FormView class ContactView ( FormView ): template_name = 'contact_us.html' form_class = ContactForm success_url = '/thanks/' def form_valid ( self , form ): # This method is called when valid form data has been POSTed. # It should return an HttpResponse. form . send_email () return super ( ContactView , self ) . form_valid ( form ) It's that simple to implement form submission functionality with the help of FormView otherwise it will need to write our own code which will take more development time. By using django generic views we can rapidly reduce the development time. Read the django github repo code to understand more about the django generic views and what to override and when. Reference: https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-editing/#django.views.generic.edit.FormView https://github.com/django/django/blob/main/django/views/generic/edit.py#L156","title":"Usage of FormView in django"},{"location":"course/django/django-forms-and-its-usage/","text":"django forms and it's usage \u00b6 Django forms are used to validate the information submitted by the user and send the error responses back to the user if any and allow valid information inserted into the database. In django we have two types of forms 1. Django Normal Forms 2. Django Model Forms Django Normal Forms \u00b6 Django forms used to generate the HTML form fields using the django form fields. we can find more information about the django form fields in the django forms official documentation . In the previous article \" django forms getting started \" we have seen how to use the django form in the django views. In this article we will learn how to use form fields to create the django forms and write custom validations for form fields. Most used django form fields \u00b6 CharField It generates a HTML input field of type text IntegerField It generates a HTML input field of type number It comes with integer validator(i.e it validates the users input whether it's integer or not) DateField It generates a HTML input field of type date It comes with date validator on user's input URLField It generates HTML input field of type text It comes with url validator on user's input EmailField It generates HTML input field of type email It validates users input whether it's a valid email or not FileField It generates HTML input field of type file ImageField It generates HTML input field of type file It validates users input whether it's a valid image or not ChoiceField It generates HTML select field with options It allows user to select a single option. MultipleChoiceField It generates HTML select field of type multiple select It allows user to select multiple options BooleanField It generates a HTML checkbox field CharField(widget=forms.Textarea) To generate the HTML textarea we have to pass widget type \"forms.Textarea\" Let's create a simple form to store user contacts in the database Django Normal Form Example \u00b6 Let's create a simple form to store user contacts in the database forms.py from django import forms class UserContactForm ( forms . Form ) first_name = forms . CharField () last_name = forms . CharField () phone = forms . IntegerField () def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data In above form we have added a phone number validation method that will check the value of field phone has length of ten or not and raises validation error if the input does not met the validation. We have added field level validation using clean_<field name> method. We can also make use of \"clean\" method\u200b\u200b for dependent fields. We can do awesome things with django forms . Django Model Forms \u00b6 We have seen how we can use the normal django forms . We can get the same functionality with a few lines of code with model forms just like below for UserContact model. It's just an example. models.py from django.db import models from django.contrib.auth.models import User class UserContact ( models . Model ): user = models . ForeignKey ( on_delete = models . CASCADE , User ) first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) phone = models . IntegerField () forms.py from django import forms from .models import UserContact class UserContactForm ( forms . ModelForm ) class Meta : model = UserContact fields = ( 'first_name' , 'last_name' , 'phone' ) def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data Like above we can reduce the code and still gets the same functionality and can get extra functionality like save method to save the objects directly into the database.","title":"django forms and it's usage"},{"location":"course/django/django-forms-and-its-usage/#django-forms-and-its-usage","text":"Django forms are used to validate the information submitted by the user and send the error responses back to the user if any and allow valid information inserted into the database. In django we have two types of forms 1. Django Normal Forms 2. Django Model Forms","title":"django forms and it's usage"},{"location":"course/django/django-forms-and-its-usage/#django-normal-forms","text":"Django forms used to generate the HTML form fields using the django form fields. we can find more information about the django form fields in the django forms official documentation . In the previous article \" django forms getting started \" we have seen how to use the django form in the django views. In this article we will learn how to use form fields to create the django forms and write custom validations for form fields.","title":"Django Normal Forms"},{"location":"course/django/django-forms-and-its-usage/#most-used-django-form-fields","text":"CharField It generates a HTML input field of type text IntegerField It generates a HTML input field of type number It comes with integer validator(i.e it validates the users input whether it's integer or not) DateField It generates a HTML input field of type date It comes with date validator on user's input URLField It generates HTML input field of type text It comes with url validator on user's input EmailField It generates HTML input field of type email It validates users input whether it's a valid email or not FileField It generates HTML input field of type file ImageField It generates HTML input field of type file It validates users input whether it's a valid image or not ChoiceField It generates HTML select field with options It allows user to select a single option. MultipleChoiceField It generates HTML select field of type multiple select It allows user to select multiple options BooleanField It generates a HTML checkbox field CharField(widget=forms.Textarea) To generate the HTML textarea we have to pass widget type \"forms.Textarea\" Let's create a simple form to store user contacts in the database","title":"Most used django form fields"},{"location":"course/django/django-forms-and-its-usage/#django-normal-form-example","text":"Let's create a simple form to store user contacts in the database forms.py from django import forms class UserContactForm ( forms . Form ) first_name = forms . CharField () last_name = forms . CharField () phone = forms . IntegerField () def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data In above form we have added a phone number validation method that will check the value of field phone has length of ten or not and raises validation error if the input does not met the validation. We have added field level validation using clean_<field name> method. We can also make use of \"clean\" method\u200b\u200b for dependent fields. We can do awesome things with django forms .","title":"Django Normal Form Example"},{"location":"course/django/django-forms-and-its-usage/#django-model-forms","text":"We have seen how we can use the normal django forms . We can get the same functionality with a few lines of code with model forms just like below for UserContact model. It's just an example. models.py from django.db import models from django.contrib.auth.models import User class UserContact ( models . Model ): user = models . ForeignKey ( on_delete = models . CASCADE , User ) first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) phone = models . IntegerField () forms.py from django import forms from .models import UserContact class UserContactForm ( forms . ModelForm ) class Meta : model = UserContact fields = ( 'first_name' , 'last_name' , 'phone' ) def clean_phone ( self ): phone = self . cleaned_data . get ( \"phone\" ) if len ( phone ) != 10 : raise forms . ValidationError ( \"Invalid phone number\" ) return phone def clean ( self ): first_name = self . cleaned_data . get ( \"first_name\" ) last_name = self . cleaned_data . get ( \"first_name\" ) # Custom Validation Logic # Here return self . cleaned_data Like above we can reduce the code and still gets the same functionality and can get extra functionality like save method to save the objects directly into the database.","title":"Django Model Forms"},{"location":"course/django/django-forms-getting-started/","text":"django forms getting started \u00b6 django forms are allow user to enter the data and send it to the server to use it further. django forms are powerful and generates the html form elements which simplifies developers life easy. Basics of HTML form \u00b6 Let's understand the basics of HTML form from below example. < form action = \"/contact-us/\" method = \"POST\" enctype = \"multipart/form-data\" > < label > First Name </ label > < input name = \"first_name\" value = \"\" /> < label > Last Name </ label > < input type = \"text\" name = \"last_name\" value = \"\" /> < label > Message </ label > < textarea name = \"message\" ></ textarea > < input type = \"submit\" value = \"Submit\" /> </ form > action : It specifies where to send the form-data when a form is submitted method : Type of request when the form is submitted enctype : encrypion type for the form data. \"multipart/form-data\" allows us to send the text and files data aswell. For more details on HTML forms visit https://www.w3schools.com/html/html_forms.asp Django Forms and it's usage \u00b6 In the above example we have written html code for the form. By using django forms we can simplify it with django form template tags like below. Let's write code to save the contact info the database. We will not be creating the django app from the scratch but we will write model and view and template and urls for the functionality. models.py from django.db import models class ContacIfo ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) message = models . TextField () def __str__ ( self ): return self . first_name forms.py from django import forms from .models import ContacIfo class ContactInfoForm ( forms . ModelForm ): class Meta : model = ContacIfo fields = ( 'first_name' , 'last_name' , 'message' ) views.py from .forms import ContactInfoForm from django.http import HttpResponse from django.shortcuts import render def create_contact_info ( request ): if request . method == 'POST' : form = ContactInfoForm ( request . POST ) if form . is_valid (): form . save () return HttpResponse ( \"Saved Contact info.\" ) else : form = ContactInfoForm () context = { 'form' : form } return render ( request , 'template.html' , context ) urls.py from django.urls import path from . import views urlpatterns = [ # .... path ( 'contact-info/' , views . create_contact_info , name = 'contact_info' ), # .... ] template.html < html > < title > Create Contact Info </ title > < body > < form action = \"{% url 'contact_info' %}\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{form}} < input type = \"submit\" value = \"Submit\" /> </ form > </ body > </ html > Above code is used to save the contact info on the database. Django forms are two types 1. Model forms (i.e \" forms.ModelForm \") and 2. Forms (i.e \" forms.Form \") \" forms.ModelForm \" more advantages over the \" forms.Form \" like we can save the object in the database directly using save method of \" forms.ModelForm \" but, it's not available for \" forms.Form \". \" {% csrf_token %} \" in template will create a csrfmiddleware token that used for security protection. It's must for POST requests but it's not needed for GET requests. Django forms comes with inbuilt validations on the form fields, \" is_valid() \" method is used to validate the correctness of the form data. It's just basic start for the django forms usage. Let's learn more about django forms in the next article. You can find the above project code at my github account \" django forms getting started \". Reference: https://docs.djangoproject.com/en/3.0/topics/forms/","title":"django forms getting started"},{"location":"course/django/django-forms-getting-started/#django-forms-getting-started","text":"django forms are allow user to enter the data and send it to the server to use it further. django forms are powerful and generates the html form elements which simplifies developers life easy.","title":"django forms getting started"},{"location":"course/django/django-forms-getting-started/#basics-of-html-form","text":"Let's understand the basics of HTML form from below example. < form action = \"/contact-us/\" method = \"POST\" enctype = \"multipart/form-data\" > < label > First Name </ label > < input name = \"first_name\" value = \"\" /> < label > Last Name </ label > < input type = \"text\" name = \"last_name\" value = \"\" /> < label > Message </ label > < textarea name = \"message\" ></ textarea > < input type = \"submit\" value = \"Submit\" /> </ form > action : It specifies where to send the form-data when a form is submitted method : Type of request when the form is submitted enctype : encrypion type for the form data. \"multipart/form-data\" allows us to send the text and files data aswell. For more details on HTML forms visit https://www.w3schools.com/html/html_forms.asp","title":"Basics of HTML form"},{"location":"course/django/django-forms-getting-started/#django-forms-and-its-usage","text":"In the above example we have written html code for the form. By using django forms we can simplify it with django form template tags like below. Let's write code to save the contact info the database. We will not be creating the django app from the scratch but we will write model and view and template and urls for the functionality. models.py from django.db import models class ContacIfo ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) message = models . TextField () def __str__ ( self ): return self . first_name forms.py from django import forms from .models import ContacIfo class ContactInfoForm ( forms . ModelForm ): class Meta : model = ContacIfo fields = ( 'first_name' , 'last_name' , 'message' ) views.py from .forms import ContactInfoForm from django.http import HttpResponse from django.shortcuts import render def create_contact_info ( request ): if request . method == 'POST' : form = ContactInfoForm ( request . POST ) if form . is_valid (): form . save () return HttpResponse ( \"Saved Contact info.\" ) else : form = ContactInfoForm () context = { 'form' : form } return render ( request , 'template.html' , context ) urls.py from django.urls import path from . import views urlpatterns = [ # .... path ( 'contact-info/' , views . create_contact_info , name = 'contact_info' ), # .... ] template.html < html > < title > Create Contact Info </ title > < body > < form action = \"{% url 'contact_info' %}\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{form}} < input type = \"submit\" value = \"Submit\" /> </ form > </ body > </ html > Above code is used to save the contact info on the database. Django forms are two types 1. Model forms (i.e \" forms.ModelForm \") and 2. Forms (i.e \" forms.Form \") \" forms.ModelForm \" more advantages over the \" forms.Form \" like we can save the object in the database directly using save method of \" forms.ModelForm \" but, it's not available for \" forms.Form \". \" {% csrf_token %} \" in template will create a csrfmiddleware token that used for security protection. It's must for POST requests but it's not needed for GET requests. Django forms comes with inbuilt validations on the form fields, \" is_valid() \" method is used to validate the correctness of the form data. It's just basic start for the django forms usage. Let's learn more about django forms in the next article. You can find the above project code at my github account \" django forms getting started \". Reference: https://docs.djangoproject.com/en/3.0/topics/forms/","title":"Django Forms and it's usage"},{"location":"course/django/django-generic-view/","text":"Django generic base view \u00b6 Django supports two types of views Function based views Class based views Function based views are recommended to use when we have less complexity in functionality. But, when we have complex functionality to be implemented then we need to use class based views. Because, class based views are nothing but python classes. It supports OOP's concepts like inheritance and method overloading and method overriding. We can split the complex functionality into classes and methods and combine them using OOP's concepts. Django provided with generic views for different use cases. The base class for all these generic views is View and all other generic classes inherits it's attributes and methods and extends the required functionalities. Base View \u00b6 Find the UML diagram for the base view class view http_method_names attribute used to restrict the http method requests if not required as_view method is the main entry point for a request-response process. http_method_not_allowed method used to raise request method not allowed error. dispatch method is called after as_view is called. It checks the request method GET , POST , etc. and sends routes the request to that specific method if it's implemented otherwise it will call http_method_not_allowed method to raise error method not allowed . Find the request flow in the below diagram Example implementation of base View \u00b6 Let's see an example use case which will render a contact form for GET request method and sends an email to user when user submits the form. template.html < form action = \"\" method = \"POST\" > {% csrf_token %} {{form.as_view()}} < input type = \"submit\" /> </ form > forms.py from django import forms class ContactForm ( forms . Form ): from_email = forms . EmailField ( required = True ) subject = forms . CharField ( required = True ) message = forms . CharField ( widget = forms . Textarea , required = True ) views.py from django.views.generic import View from django.core.mail import send_mail from django.http import HttpResponse from django.shortcuts import render from .forms import ContactForm class ContactView ( View ): def get ( self , request ): template_name = \"template.html\" context = { \"form\" : ContactForm () } return render ( request , template_name , context ) def post ( self , request ): form = ContactForm ( request . POST ) if form . is_valid (): from_email = form . cleaned_data . get ( \"from_email\" ) subject = form . cleaned_data . get ( \"subject\" ) message = form . cleaned_data . get ( \"message\" ) to_email = \"admin@example.com\" send_mail ( subject , message , from_email , [ to_email ]) return HttpResponse ( \"\" ) else : template_name = \"template.html\" context = { \"form\" : form } return render ( request , template_name , context ) urls.py from . import views urlpatterns = [ url ( 'contact/' , ContactView . as_view (), name = \"contact\" ), ] If you see the above we have seperated the functionality for get and post requests so that the methods get and post are responsible to handle the request based on request method. If we write same code with function based views we will need to implement multiple if and else conditions and it doesn't allow the easy navigation of the code to change something. The same can be implemented with FormView with a few lines of code as the view contains above implemented functionality in-built. Note: It's always recommended to use the class based views if we have complex functionality.","title":"Django generic base view"},{"location":"course/django/django-generic-view/#django-generic-base-view","text":"Django supports two types of views Function based views Class based views Function based views are recommended to use when we have less complexity in functionality. But, when we have complex functionality to be implemented then we need to use class based views. Because, class based views are nothing but python classes. It supports OOP's concepts like inheritance and method overloading and method overriding. We can split the complex functionality into classes and methods and combine them using OOP's concepts. Django provided with generic views for different use cases. The base class for all these generic views is View and all other generic classes inherits it's attributes and methods and extends the required functionalities.","title":"Django generic base view"},{"location":"course/django/django-generic-view/#base-view","text":"Find the UML diagram for the base view class view http_method_names attribute used to restrict the http method requests if not required as_view method is the main entry point for a request-response process. http_method_not_allowed method used to raise request method not allowed error. dispatch method is called after as_view is called. It checks the request method GET , POST , etc. and sends routes the request to that specific method if it's implemented otherwise it will call http_method_not_allowed method to raise error method not allowed . Find the request flow in the below diagram","title":"Base View"},{"location":"course/django/django-generic-view/#example-implementation-of-base-view","text":"Let's see an example use case which will render a contact form for GET request method and sends an email to user when user submits the form. template.html < form action = \"\" method = \"POST\" > {% csrf_token %} {{form.as_view()}} < input type = \"submit\" /> </ form > forms.py from django import forms class ContactForm ( forms . Form ): from_email = forms . EmailField ( required = True ) subject = forms . CharField ( required = True ) message = forms . CharField ( widget = forms . Textarea , required = True ) views.py from django.views.generic import View from django.core.mail import send_mail from django.http import HttpResponse from django.shortcuts import render from .forms import ContactForm class ContactView ( View ): def get ( self , request ): template_name = \"template.html\" context = { \"form\" : ContactForm () } return render ( request , template_name , context ) def post ( self , request ): form = ContactForm ( request . POST ) if form . is_valid (): from_email = form . cleaned_data . get ( \"from_email\" ) subject = form . cleaned_data . get ( \"subject\" ) message = form . cleaned_data . get ( \"message\" ) to_email = \"admin@example.com\" send_mail ( subject , message , from_email , [ to_email ]) return HttpResponse ( \"\" ) else : template_name = \"template.html\" context = { \"form\" : form } return render ( request , template_name , context ) urls.py from . import views urlpatterns = [ url ( 'contact/' , ContactView . as_view (), name = \"contact\" ), ] If you see the above we have seperated the functionality for get and post requests so that the methods get and post are responsible to handle the request based on request method. If we write same code with function based views we will need to implement multiple if and else conditions and it doesn't allow the easy navigation of the code to change something. The same can be implemented with FormView with a few lines of code as the view contains above implemented functionality in-built. Note: It's always recommended to use the class based views if we have complex functionality.","title":"Example implementation of base View"},{"location":"course/django/django-list-view/","text":"Django ListView \u00b6 When to use django ListView? \u00b6 It's generic django view designed for presenting the list of objects in a HTML page. It't allows us to re-use the built-in functionality provided by the list view. We can use the methods from the ListView to overload or override the default functionality to achieve the required functionality. Request flow in django ListView \u00b6 Let's implement django ListView \u00b6 use case: Let's consider the scenario of listing products and their information in a product listing page. models.py from django.db import models class Product ( models . Model ): name = models . CharField ( max_length = 100 ) description = models . TextField () class Meta : db_model = 'product' views.py from django.views.generic.list import ListView from .models import Product class ProductListView ( ListView ): model = Product template_name = 'product_list.html' urls.py from django.urls import path from .views import ProductListView urlpatterns = [ path ( 'products/' , ProductListView . as_view (), name = 'product-list' ), ] templates/product_list.html {% for product in object_list %} Title: {{product.title}} < br /> Description: {{product.description}} < br /> {% endfor %} Let's access the url http://localhost:8000/products to see the products. It's that simple to implement the listing of products in the list page. But, if we have more products, let's say 10,000 products are in the table then it's not a good solution to use the above code. Let's implement the pagination \u00b6 Now, we need to use the the pagination in the list view. Let's implement the pagination. views.py from django.views.generic.list import ListView from .models import Product class ProductListView ( ListView ): model = Product template_name = 'product_list.html' paginate_by = 10 Let's modify the template to show the pagination to the user. product_list.html {% for obj in object_list %} < li > Title: {{obj.title}} </ li > < li > Description: {{obj.description}} </ li > {% endfor %} {% if page_obj.has_previous %} < a href = \"?page=1\" > &laquo; first </ a > < a href = \"?page={{ page_obj.previous_page_number }}\" > previous </ a > {% endif %} Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}. {% if page_obj.has_next %} < a href = \"?page={{ page_obj.next_page_number }}\" > next </ a > < a href = \"?page={{ page_obj.paginator.num_pages }}\" > last &raquo; </ a > {% endif %} By default, django list view pass the context object_list , page_obj to the template. object_list - is a iterable object of model instances. page_obj - is a paginated object contains pagination info if paginated. Additional info \u00b6 Can override the methods like get_context_data , get , dispatch as required. Can use mixins and other helper function as needed to achieve the required feature. Reference: \u00b6 https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#listview https://docs.djangoproject.com/en/4.0/topics/pagination/#using-paginator-in-view","title":"Django ListView"},{"location":"course/django/django-list-view/#django-listview","text":"","title":"Django ListView"},{"location":"course/django/django-list-view/#when-to-use-django-listview","text":"It's generic django view designed for presenting the list of objects in a HTML page. It't allows us to re-use the built-in functionality provided by the list view. We can use the methods from the ListView to overload or override the default functionality to achieve the required functionality.","title":"When to use django ListView?"},{"location":"course/django/django-list-view/#request-flow-in-django-listview","text":"","title":"Request flow in django ListView"},{"location":"course/django/django-list-view/#lets-implement-django-listview","text":"use case: Let's consider the scenario of listing products and their information in a product listing page. models.py from django.db import models class Product ( models . Model ): name = models . CharField ( max_length = 100 ) description = models . TextField () class Meta : db_model = 'product' views.py from django.views.generic.list import ListView from .models import Product class ProductListView ( ListView ): model = Product template_name = 'product_list.html' urls.py from django.urls import path from .views import ProductListView urlpatterns = [ path ( 'products/' , ProductListView . as_view (), name = 'product-list' ), ] templates/product_list.html {% for product in object_list %} Title: {{product.title}} < br /> Description: {{product.description}} < br /> {% endfor %} Let's access the url http://localhost:8000/products to see the products. It's that simple to implement the listing of products in the list page. But, if we have more products, let's say 10,000 products are in the table then it's not a good solution to use the above code.","title":"Let's implement django ListView"},{"location":"course/django/django-list-view/#lets-implement-the-pagination","text":"Now, we need to use the the pagination in the list view. Let's implement the pagination. views.py from django.views.generic.list import ListView from .models import Product class ProductListView ( ListView ): model = Product template_name = 'product_list.html' paginate_by = 10 Let's modify the template to show the pagination to the user. product_list.html {% for obj in object_list %} < li > Title: {{obj.title}} </ li > < li > Description: {{obj.description}} </ li > {% endfor %} {% if page_obj.has_previous %} < a href = \"?page=1\" > &laquo; first </ a > < a href = \"?page={{ page_obj.previous_page_number }}\" > previous </ a > {% endif %} Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}. {% if page_obj.has_next %} < a href = \"?page={{ page_obj.next_page_number }}\" > next </ a > < a href = \"?page={{ page_obj.paginator.num_pages }}\" > last &raquo; </ a > {% endif %} By default, django list view pass the context object_list , page_obj to the template. object_list - is a iterable object of model instances. page_obj - is a paginated object contains pagination info if paginated.","title":"Let's implement the pagination"},{"location":"course/django/django-list-view/#additional-info","text":"Can override the methods like get_context_data , get , dispatch as required. Can use mixins and other helper function as needed to achieve the required feature.","title":"Additional info"},{"location":"course/django/django-list-view/#reference","text":"https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#listview https://docs.djangoproject.com/en/4.0/topics/pagination/#using-paginator-in-view","title":"Reference:"},{"location":"course/django/django-model-crud-operations/","text":"django model CRUD operations \u00b6 Let's do CRUD operations on django model . Let's write basic queries like insert, update and delete queries using django ORM. Let's look at the Django Model \u00b6 from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () Now, let's quickly perform basic CRUD operations using the django shell. To open django shell execute the below command. python manage . py shell Create or insert query in Django \u00b6 Django model has a default query manager which has the API to perform the queries. Let's create a \"Person\" object using below code. from .models import Person # query1 obj1 = Person ( first_name = \"Pradeep\" , last_name = \"K\" , address = \"Hyderabad\" ) obj1 . save () # query2 obj2 = Person . objects . create ( first_name = \"Anji\" , last_name = \"B\" , address = \"Warangal\" ) In the above code we have written queries to insert the data into the table using django ORM. If you observe the above code we have done it in two ways. In the first query we have create the person object then called the save method to save the object into the database table. In the second query we have used django ORM manager method \"create\" to insert the data into the database table. Whenver a object is created django will automatically assigns a primary key \"id\" to the record which is used to identify the record uniquely. Get or Retrieve query in Django \u00b6 Django query manager has the method \"get\" to retrieve the data from the database table. Let's see some code from .models import Person obj1 = Person . objects . create ( first_name = \"John\" , last_name = \"B\" , address = \"Hyd\" ) print ( obj . id ) # 1 obj2 = Person . objects . get ( id = 1 ) print ( obj2 . first_name ) # John In the above code we first created the record and printed it's \"id\" number. After that we have retrieved the record from the database using django model manger method \"get\" by passing id. We can also use the other parameters (i.e \" first_name\", \" last_name \", \" address \"). Update query in Django \u00b6 We can update a record the database table using the django model managers method \"save\" like below. Let's do some code from .models import Person obj1 = Person . objects . get ( id = 1 ) obj1 . first_name = \"Adam\" obj1 . save () To update the record the database table we need to retrieve the record first and make some changes to it and then call the \" save \" method on object. Delete query in Django \u00b6 To delete the object from the database django model manager provide a \" delete \" method to perform the delete operation. from .models import Person # query1 obj1 = Person . objects . get ( id = 1 ) obj1 . delete () # query2 Person . objects . filter ( id = 1 ) . delete () We can perform the delete operation in two ways like above code. Filter query in Django \u00b6 Django makes filtering of objects or records very easy using the model manager method \" filter \". Let's do some code from .models import Person # create queries Person . objects . create ( first_name = \"John Snow\" , last_name = \"D\" , address = \"Hyderabad\" ) Person . objects . create ( first_name = \"John Wind\" , last_name = \"D\" , address = \"Banglore\" ) Person . objects . create ( first_name = \"Carl Miller\" , last_name = \"R\" , address = \"Banglore\" ) # filter query obj_list = Person . objects . filter ( first_name__icontains = \"John\" ) print ( obj_list ) Above query filters the objects whose first name contains the word \"john\". Note: While doing the operations you can check the database table to confirm whether it's working or not. If you use postgreSQL database then you can use \" pgAdmin \" or if you use MySQL database then you can use \" MySQL Workbench \" for administration.","title":"django model CRUD operations"},{"location":"course/django/django-model-crud-operations/#django-model-crud-operations","text":"Let's do CRUD operations on django model . Let's write basic queries like insert, update and delete queries using django ORM.","title":"django model CRUD operations"},{"location":"course/django/django-model-crud-operations/#lets-look-at-the-django-model","text":"from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) address = models . TextField () Now, let's quickly perform basic CRUD operations using the django shell. To open django shell execute the below command. python manage . py shell","title":"Let's look at the Django Model"},{"location":"course/django/django-model-crud-operations/#create-or-insert-query-in-django","text":"Django model has a default query manager which has the API to perform the queries. Let's create a \"Person\" object using below code. from .models import Person # query1 obj1 = Person ( first_name = \"Pradeep\" , last_name = \"K\" , address = \"Hyderabad\" ) obj1 . save () # query2 obj2 = Person . objects . create ( first_name = \"Anji\" , last_name = \"B\" , address = \"Warangal\" ) In the above code we have written queries to insert the data into the table using django ORM. If you observe the above code we have done it in two ways. In the first query we have create the person object then called the save method to save the object into the database table. In the second query we have used django ORM manager method \"create\" to insert the data into the database table. Whenver a object is created django will automatically assigns a primary key \"id\" to the record which is used to identify the record uniquely.","title":"Create or insert query in Django"},{"location":"course/django/django-model-crud-operations/#get-or-retrieve-query-in-django","text":"Django query manager has the method \"get\" to retrieve the data from the database table. Let's see some code from .models import Person obj1 = Person . objects . create ( first_name = \"John\" , last_name = \"B\" , address = \"Hyd\" ) print ( obj . id ) # 1 obj2 = Person . objects . get ( id = 1 ) print ( obj2 . first_name ) # John In the above code we first created the record and printed it's \"id\" number. After that we have retrieved the record from the database using django model manger method \"get\" by passing id. We can also use the other parameters (i.e \" first_name\", \" last_name \", \" address \").","title":"Get or Retrieve query in Django"},{"location":"course/django/django-model-crud-operations/#update-query-in-django","text":"We can update a record the database table using the django model managers method \"save\" like below. Let's do some code from .models import Person obj1 = Person . objects . get ( id = 1 ) obj1 . first_name = \"Adam\" obj1 . save () To update the record the database table we need to retrieve the record first and make some changes to it and then call the \" save \" method on object.","title":"Update query in Django"},{"location":"course/django/django-model-crud-operations/#delete-query-in-django","text":"To delete the object from the database django model manager provide a \" delete \" method to perform the delete operation. from .models import Person # query1 obj1 = Person . objects . get ( id = 1 ) obj1 . delete () # query2 Person . objects . filter ( id = 1 ) . delete () We can perform the delete operation in two ways like above code.","title":"Delete query in Django"},{"location":"course/django/django-model-crud-operations/#filter-query-in-django","text":"Django makes filtering of objects or records very easy using the model manager method \" filter \". Let's do some code from .models import Person # create queries Person . objects . create ( first_name = \"John Snow\" , last_name = \"D\" , address = \"Hyderabad\" ) Person . objects . create ( first_name = \"John Wind\" , last_name = \"D\" , address = \"Banglore\" ) Person . objects . create ( first_name = \"Carl Miller\" , last_name = \"R\" , address = \"Banglore\" ) # filter query obj_list = Person . objects . filter ( first_name__icontains = \"John\" ) print ( obj_list ) Above query filters the objects whose first name contains the word \"john\". Note: While doing the operations you can check the database table to confirm whether it's working or not. If you use postgreSQL database then you can use \" pgAdmin \" or if you use MySQL database then you can use \" MySQL Workbench \" for administration.","title":"Filter query in Django"},{"location":"course/django/django-pass-data-from-view-to-template/","text":"django pass data from view to template \u00b6 In the last article we have seen how to configure the template settings in django. In this article we will talk about passing dynamic data to templates for rendering it. As we know django is a MVC framework. So, we separate business logic from presentational logic. We write business logic in views and we pass data to templates to present the data. The data that we pass from views to template is generally called as \"context\" data. Let's get started with an example. Django views, context data and template \u00b6 Let's write a simple view that takes user information such as first name, last name and address and renders it in the template. views.py from django.shortcuts import render def user_data ( request ): context = { \"first_name\" : \"Anjaneyulu\" , \"last_name\" : \"Batta\" , \"address\" : \"Hyderabad, India\" } template_name = \"user_template.html\" return render ( request , template_name , context ) user_template.html <html> <head> <title>User Information</title> </head> <body> <p>First Name: {{ first_name }} </p> <p>Last Name: {{ last_name }} </p> <p>Address: {{ address }} </p> </body> </html> \" render \" is the most used function in django. It combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text. It takes three arguments \" request \", \" template_name \" and \" context \" dictionary. In template we can access the context dict keys as names**or variables** and display them like \" {{ <variable/name>}} \". That's it folks just try out the above code and let me know if any comments.","title":"django pass data from view to template"},{"location":"course/django/django-pass-data-from-view-to-template/#django-pass-data-from-view-to-template","text":"In the last article we have seen how to configure the template settings in django. In this article we will talk about passing dynamic data to templates for rendering it. As we know django is a MVC framework. So, we separate business logic from presentational logic. We write business logic in views and we pass data to templates to present the data. The data that we pass from views to template is generally called as \"context\" data. Let's get started with an example.","title":"django pass data from view to template"},{"location":"course/django/django-pass-data-from-view-to-template/#django-views-context-data-and-template","text":"Let's write a simple view that takes user information such as first name, last name and address and renders it in the template. views.py from django.shortcuts import render def user_data ( request ): context = { \"first_name\" : \"Anjaneyulu\" , \"last_name\" : \"Batta\" , \"address\" : \"Hyderabad, India\" } template_name = \"user_template.html\" return render ( request , template_name , context ) user_template.html <html> <head> <title>User Information</title> </head> <body> <p>First Name: {{ first_name }} </p> <p>Last Name: {{ last_name }} </p> <p>Address: {{ address }} </p> </body> </html> \" render \" is the most used function in django. It combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text. It takes three arguments \" request \", \" template_name \" and \" context \" dictionary. In template we can access the context dict keys as names**or variables** and display them like \" {{ <variable/name>}} \". That's it folks just try out the above code and let me know if any comments.","title":"Django views, context data and template"},{"location":"course/django/django-static-files-usage/","text":"Django Static Files Usage \u00b6 Every website needs to serve the extra files such as images, CSS, JavaScript. The name \"static\" itself indicates that contents of files do not change. So, in django to work with static files we need to make some configurations in setttings.py file. Django provides app \" django.contrib.staticfiles \" to help us manage it. Configuring static files in settings.py \u00b6 Add \" django.contrib.staticfiles \" to \"INSTALLED_APPS\". INSTALLED_APPS = [ # ... 'django.contrib.staticfiles' , # ... ] Add \" STATIC_URL \" STATIC_URL = '/static/' Add \" STATICFILES_FINDERS \" to make sure template tag \"static\" can work in HTML templates. # ... STATICFILES_FINDERS = [ 'django.contrib.staticfiles.finders.FileSystemFinder' , 'django.contrib.staticfiles.finders.AppDirectoriesFinder' , ] # ... Add extra static directories using \" STATICFILES_DIRS \". In below example we added a directory \" static \" to static files finder which is located at the root level of our project. # ... STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ), ] # ... Add static root to root project urls.py to make available static files during development like below from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) Serving files uploaded by a user during development from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) That's it folks, let's meet in the next article. Check the below reference for more detail. Reference: https://docs.djangoproject.com/en/2.2/howto/static-files/#configuring-static-files","title":"Django Static Files Usage"},{"location":"course/django/django-static-files-usage/#django-static-files-usage","text":"Every website needs to serve the extra files such as images, CSS, JavaScript. The name \"static\" itself indicates that contents of files do not change. So, in django to work with static files we need to make some configurations in setttings.py file. Django provides app \" django.contrib.staticfiles \" to help us manage it.","title":"Django Static Files Usage"},{"location":"course/django/django-static-files-usage/#configuring-static-files-in-settingspy","text":"Add \" django.contrib.staticfiles \" to \"INSTALLED_APPS\". INSTALLED_APPS = [ # ... 'django.contrib.staticfiles' , # ... ] Add \" STATIC_URL \" STATIC_URL = '/static/' Add \" STATICFILES_FINDERS \" to make sure template tag \"static\" can work in HTML templates. # ... STATICFILES_FINDERS = [ 'django.contrib.staticfiles.finders.FileSystemFinder' , 'django.contrib.staticfiles.finders.AppDirectoriesFinder' , ] # ... Add extra static directories using \" STATICFILES_DIRS \". In below example we added a directory \" static \" to static files finder which is located at the root level of our project. # ... STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ), ] # ... Add static root to root project urls.py to make available static files during development like below from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) Serving files uploaded by a user during development from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) That's it folks, let's meet in the next article. Check the below reference for more detail. Reference: https://docs.djangoproject.com/en/2.2/howto/static-files/#configuring-static-files","title":"Configuring static files in settings.py"},{"location":"course/django/django-template-for-loop/","text":"Django Template For Loop \u00b6 Django provides a template tag \"for\" to provide the for loop functionality in django templates. You can find the \u201c for loop \u201d syntax below. {% for local_name in iterable_name %} {{ local_name }} {% endfor %} Let's talk about a real time use case, For example if you want to show all athletes data in a ordered list in HTML then using django for loop we can do as follows. views.py from django.shortcuts import render def athletes_list ( request ): context = { \"athletes\" : [ \"John Snow\" , \"Dean Winchester\" , \"Sam Winchester\" ]} return render ( request , \"template.html\" , context ) template.html < ol > {% for name in athletes %} < li > {{name}} </ li > {% endfor %} </ ol > output < ol > < li > John Snow </ li > < li > Dean Winchester </ li > < li > Sam Winchester </ li > </ ol > In the above example used list data structure with the for loop. In the same way we can also use other data types like tuple, set, dict, etc. Some times we may need to iterate the items in reverse order in this kinds of cases we \" reversed \" template.html < ol > {% for name in athletes reversed %} < li > {{name}} </ li > {% endfor %} </ ol > output: < ol > < li > Sam Winchester </ li > < li > John Snow </ li > < li > Dean Winchester </ li > </ ol > In some cases we may need to access index number of for loop then we can use \" forloop.counter \" like below template.html {% for name in athletes %} < p > {{forloop.counter}}. {{name}} </ p > {% endfor %} output: < p > 1. Sam Winchester </ p > < p > 2. John Snow </ p > < p > 3. Dean Winchester </ p > We can use nested for loops in django templates. The for loop sets a number of variables available within the loop: Variable Description forloop.counter The current iteration of the loop (1-indexed) forloop.counter0 The current iteration of the loop (0-indexed) forloop.revcounter The number of iterations from the end of the loop (1-indexed) forloop.revcounter0 The number of iterations from the end of the loop (0-indexed) forloop.first True if this is the first time through the loop forloop.last True if this is the last time through the loop forloop.parentloop For nested loops, this is the loop surrounding the current one Reference: https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#for","title":"Django Template For Loop"},{"location":"course/django/django-template-for-loop/#django-template-for-loop","text":"Django provides a template tag \"for\" to provide the for loop functionality in django templates. You can find the \u201c for loop \u201d syntax below. {% for local_name in iterable_name %} {{ local_name }} {% endfor %} Let's talk about a real time use case, For example if you want to show all athletes data in a ordered list in HTML then using django for loop we can do as follows. views.py from django.shortcuts import render def athletes_list ( request ): context = { \"athletes\" : [ \"John Snow\" , \"Dean Winchester\" , \"Sam Winchester\" ]} return render ( request , \"template.html\" , context ) template.html < ol > {% for name in athletes %} < li > {{name}} </ li > {% endfor %} </ ol > output < ol > < li > John Snow </ li > < li > Dean Winchester </ li > < li > Sam Winchester </ li > </ ol > In the above example used list data structure with the for loop. In the same way we can also use other data types like tuple, set, dict, etc. Some times we may need to iterate the items in reverse order in this kinds of cases we \" reversed \" template.html < ol > {% for name in athletes reversed %} < li > {{name}} </ li > {% endfor %} </ ol > output: < ol > < li > Sam Winchester </ li > < li > John Snow </ li > < li > Dean Winchester </ li > </ ol > In some cases we may need to access index number of for loop then we can use \" forloop.counter \" like below template.html {% for name in athletes %} < p > {{forloop.counter}}. {{name}} </ p > {% endfor %} output: < p > 1. Sam Winchester </ p > < p > 2. John Snow </ p > < p > 3. Dean Winchester </ p > We can use nested for loops in django templates. The for loop sets a number of variables available within the loop: Variable Description forloop.counter The current iteration of the loop (1-indexed) forloop.counter0 The current iteration of the loop (0-indexed) forloop.revcounter The number of iterations from the end of the loop (1-indexed) forloop.revcounter0 The number of iterations from the end of the loop (0-indexed) forloop.first True if this is the first time through the loop forloop.last True if this is the last time through the loop forloop.parentloop For nested loops, this is the loop surrounding the current one Reference: https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#for","title":"Django Template For Loop"},{"location":"course/django/django-template-using-if-elif-else/","text":"django template using if...elif...else \u00b6 We can use if...elif..else conditionals in django template. The only difference between python code and django template code is it's syntax. It's similar to python code. Django template \"if\" syntax: \u00b6 {% if < condition > %} {{ < variable > }} {% endif %} Django template \"if..else\" syntax: \u00b6 {% if < condition > %} {{ < variable1 > }} {% else %} {{ < variable2 > }} {% endif %} Django template \"if..elif..else\" syntax: \u00b6 {% if < condition1 > %} {{ < variable1 > }} {% elif < condition2 > %} {{ < variable2 > }} {% else %} {{ < variable3 > }} {% endif %} Notes on django template conditionals (if...elif...else) \u00b6 If you do not write syntax correctly then django will throw errors. Do not use object method calls using parenthesis (i.e \"()\") just use method name instead. We can write multiple if..elif..else conditionals. We can write any number of \"if...elif...else\" nested conditionals in django templates. We can use operators like \"and\", \"or\", \"in\", \"==\", \"<\", \">\", etc. Evaluation takes from left to right. Examples for django template if...elif...else conditionals \u00b6 {% if athlete_list %} Number of athletes: {{ athlete_list | length }} {% elif athlete_in_locker_room_list %} Athletes should be out of the locker room soon! {% else %} No athletes. {% endif %} {% if athlete_list and coach_list %} Both athletes and coaches are available. {% endif %} {% if not athlete_list %} There are no athletes. {% endif %} {% if athlete_list or coach_list %} There are some athletes or some coaches. {% endif %} {% if not athlete_list or coach_list %} There are no athletes or there are some coaches. {% endif %} {% if athlete_list and not coach_list %} There are some athletes and absolutely no coaches. {% endif %} That's it folks, you can try it on your own. Feel free to contact me if you have any queries.","title":"django template using if...elif...else"},{"location":"course/django/django-template-using-if-elif-else/#django-template-using-ifelifelse","text":"We can use if...elif..else conditionals in django template. The only difference between python code and django template code is it's syntax. It's similar to python code.","title":"django template using if...elif...else"},{"location":"course/django/django-template-using-if-elif-else/#django-template-if-syntax","text":"{% if < condition > %} {{ < variable > }} {% endif %}","title":"Django template \"if\" syntax:"},{"location":"course/django/django-template-using-if-elif-else/#django-template-ifelse-syntax","text":"{% if < condition > %} {{ < variable1 > }} {% else %} {{ < variable2 > }} {% endif %}","title":"Django template \"if..else\" syntax:"},{"location":"course/django/django-template-using-if-elif-else/#django-template-ifelifelse-syntax","text":"{% if < condition1 > %} {{ < variable1 > }} {% elif < condition2 > %} {{ < variable2 > }} {% else %} {{ < variable3 > }} {% endif %}","title":"Django template \"if..elif..else\" syntax:"},{"location":"course/django/django-template-using-if-elif-else/#notes-on-django-template-conditionals-ifelifelse","text":"If you do not write syntax correctly then django will throw errors. Do not use object method calls using parenthesis (i.e \"()\") just use method name instead. We can write multiple if..elif..else conditionals. We can write any number of \"if...elif...else\" nested conditionals in django templates. We can use operators like \"and\", \"or\", \"in\", \"==\", \"<\", \">\", etc. Evaluation takes from left to right.","title":"Notes on django template conditionals (if...elif...else)"},{"location":"course/django/django-template-using-if-elif-else/#examples-for-django-template-ifelifelse-conditionals","text":"{% if athlete_list %} Number of athletes: {{ athlete_list | length }} {% elif athlete_in_locker_room_list %} Athletes should be out of the locker room soon! {% else %} No athletes. {% endif %} {% if athlete_list and coach_list %} Both athletes and coaches are available. {% endif %} {% if not athlete_list %} There are no athletes. {% endif %} {% if athlete_list or coach_list %} There are some athletes or some coaches. {% endif %} {% if not athlete_list or coach_list %} There are no athletes or there are some coaches. {% endif %} {% if athlete_list and not coach_list %} There are some athletes and absolutely no coaches. {% endif %} That's it folks, you can try it on your own. Feel free to contact me if you have any queries.","title":"Examples for django template if...elif...else conditionals"},{"location":"course/django/django-template-view/","text":"django template view \u00b6 Django comes with a reusable class based views and TemplateView is one of them. For rendering a simple pages like static text or with a little context we use it. When to use TemplateView? \u00b6 when a rendering the static pages or pages with a little context Example use cases: About us page Terms and conditions UML diagram for TemplateView \u00b6 From above UML diagram we can see the see it's parent classes TemplateResponseMixin , ContextMixin and View and their respective methods. As the class TemplateView inheriting these classes it will aquire all properties and methods from these classes. So, we can override/overload the required methods based on our requirement. Methods execution order 1. dispatch() 2. get() 3. get_context_data() 4. render_to_response() Usage of TemplateView in django \u00b6 Let's see few examples to implement the about us page. about_us.html < html > < body > < h1 > About Us </ h1 > < p > It's about me. </ p > </ body > </ html > views.py from django.views.generic import TemplateView class AboutUs ( TemplateView ): template_view = \"about_us.html\" It's that simple to create about us page by using the generic TemplateView in django. sending extra context to TemplateView \u00b6 We can send extra context to the template by overriding the method get_context_data about_us.html < html > < body > < h1 > About Us </ h1 > < p > sample text </ p > < p > {{content}} </ p > </ body > </ html > views.py from django.views.generic import TemplateView class AboutUs ( TemplateView ): template_view = \"about_us.html\" def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"content\" ] = \"Hello Batta\" return context Like above code, we can pass the extra context to the template. It's that simple to use the django TemplateView . Ref: https://docs.djangoproject.com/en/3.2/ref/class-based-views/base/#templateview","title":"django template view"},{"location":"course/django/django-template-view/#django-template-view","text":"Django comes with a reusable class based views and TemplateView is one of them. For rendering a simple pages like static text or with a little context we use it.","title":"django template view"},{"location":"course/django/django-template-view/#when-to-use-templateview","text":"when a rendering the static pages or pages with a little context Example use cases: About us page Terms and conditions","title":"When to use TemplateView?"},{"location":"course/django/django-template-view/#uml-diagram-for-templateview","text":"From above UML diagram we can see the see it's parent classes TemplateResponseMixin , ContextMixin and View and their respective methods. As the class TemplateView inheriting these classes it will aquire all properties and methods from these classes. So, we can override/overload the required methods based on our requirement. Methods execution order 1. dispatch() 2. get() 3. get_context_data() 4. render_to_response()","title":"UML diagram for TemplateView"},{"location":"course/django/django-template-view/#usage-of-templateview-in-django","text":"Let's see few examples to implement the about us page. about_us.html < html > < body > < h1 > About Us </ h1 > < p > It's about me. </ p > </ body > </ html > views.py from django.views.generic import TemplateView class AboutUs ( TemplateView ): template_view = \"about_us.html\" It's that simple to create about us page by using the generic TemplateView in django.","title":"Usage of TemplateView in django"},{"location":"course/django/django-template-view/#sending-extra-context-to-templateview","text":"We can send extra context to the template by overriding the method get_context_data about_us.html < html > < body > < h1 > About Us </ h1 > < p > sample text </ p > < p > {{content}} </ p > </ body > </ html > views.py from django.views.generic import TemplateView class AboutUs ( TemplateView ): template_view = \"about_us.html\" def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"content\" ] = \"Hello Batta\" return context Like above code, we can pass the extra context to the template. It's that simple to use the django TemplateView . Ref: https://docs.djangoproject.com/en/3.2/ref/class-based-views/base/#templateview","title":"sending extra context to TemplateView"},{"location":"course/django/django-update-view/","text":"Django UpdateView \u00b6","title":"Django UpdateView"},{"location":"course/django/django-update-view/#django-updateview","text":"","title":"Django UpdateView"},{"location":"course/django/first-view/","text":"Prerequisites \u00b6 Create django app Django view \u00b6 Django view is a python function or a class that handles HTTP requests/responses. Django first view. \u00b6 open my_app/views.py and add the below code to it from django.http import HttpResponse def first_view ( request ): return HttpResponse ( \"<h1>Hurray!! My first django view</h1>\" ) Django view takes the request as parameter and returns the HTTP response. Django provides the HttpResponse class to create the HTTP response. Configure view to url dispatcher \u00b6 create a new file my_app/urls.py and below code to it. from django.urls import path from my_app import views urlpatterns = [ path ( '' , views . first_view , name = 'first_view' ), ] Django provides path function to map the requested url to the django view based on the request path. Django looks at urlpatterns variable to find the urls. Congifure app urls to project urls \u00b6 Previously, we configured the app urls to view. But, it won't work until we configure it with project urls. Project urls are the root urls where the django request recieved based on the url path and dispatched to respective django view. To configure the app urls to the project, open file my_project/urls.py and update it accordingly. from django.contrib import admin from django.urls import path , include urlpatterns = [ # include app urls path ( 'my_app/' , include ( 'my_app.urls' )), path ( 'admin/' , admin . site . urls ), ] Now, access http://localhost:8000/my_app/ in the browser to see the response Hurray!! My first django view References: \u00b6 https://docs.djangoproject.com/en/dev/intro/tutorial01/#write-your-first-view","title":"Django first view"},{"location":"course/django/first-view/#prerequisites","text":"Create django app","title":"Prerequisites"},{"location":"course/django/first-view/#django-view","text":"Django view is a python function or a class that handles HTTP requests/responses.","title":"Django view"},{"location":"course/django/first-view/#django-first-view","text":"open my_app/views.py and add the below code to it from django.http import HttpResponse def first_view ( request ): return HttpResponse ( \"<h1>Hurray!! My first django view</h1>\" ) Django view takes the request as parameter and returns the HTTP response. Django provides the HttpResponse class to create the HTTP response.","title":"Django first view."},{"location":"course/django/first-view/#configure-view-to-url-dispatcher","text":"create a new file my_app/urls.py and below code to it. from django.urls import path from my_app import views urlpatterns = [ path ( '' , views . first_view , name = 'first_view' ), ] Django provides path function to map the requested url to the django view based on the request path. Django looks at urlpatterns variable to find the urls.","title":"Configure view to url dispatcher"},{"location":"course/django/first-view/#congifure-app-urls-to-project-urls","text":"Previously, we configured the app urls to view. But, it won't work until we configure it with project urls. Project urls are the root urls where the django request recieved based on the url path and dispatched to respective django view. To configure the app urls to the project, open file my_project/urls.py and update it accordingly. from django.contrib import admin from django.urls import path , include urlpatterns = [ # include app urls path ( 'my_app/' , include ( 'my_app.urls' )), path ( 'admin/' , admin . site . urls ), ] Now, access http://localhost:8000/my_app/ in the browser to see the response Hurray!! My first django view","title":"Congifure app urls to project urls"},{"location":"course/django/first-view/#references","text":"https://docs.djangoproject.com/en/dev/intro/tutorial01/#write-your-first-view","title":"References:"},{"location":"course/django/form-view/","text":"Prerequisites \u00b6 HTML Forms Create django app Django first view Django templates ways to send information to server \u00b6 Can send the data in HTTP headers Can send the data in HTTP request params Can send the data in HTTP request body. What is a form? \u00b6 A form is used to send the information to the server GET and POST are the only HTTP methods to use when dealing with forms. Django forms \u00b6 Django provides a way to create the form fields in a pythonic way with/without form context Django forms validates the data when a data is submitted to the server. Django forms also helpful in rendering the error or validation messages if submitted data is not in the required format. django contact form \u00b6 Let's create a simple django contact form. Create a forms.py file in the django app my_app and add the below code. my_app/forms.py from django import forms class ContactForm ( forms . Form ): first_name = forms . CharField ( max_length = 10 ) last_name = forms . CharField ( max_length = 10 ) email = forms . EmailField ( max_length = 100 ) django form as HTML \u00b6 Can generate HTML from the above django form. Now, open django shell generate HTML from django form with below code. form = ContactForm () print ( form . as_div ()) It will generate below HTML < div > < label for = \"id_first_name\" > First name: </ label > < input type = \"text\" name = \"first_name\" maxlength = \"10\" required id = \"id_first_name\" > </ div > < div > < label for = \"id_last_name\" > Last name: </ label > < input type = \"text\" name = \"last_name\" maxlength = \"10\" required id = \"id_last_name\" > </ div > < div > < label for = \"id_email\" > Email: </ label > < input type = \"email\" name = \"email\" maxlength = \"10\" required id = \"id_email\" > </ div > we can use same HTML if the django template just like {{ form.as_div }} similarly, we can use other form methods like form.as_p() , form.as_ul() and form.as_table() we render the template with form fields for GET request. Django Form for data validation \u00b6 Django forms can be used to validate the form data as well. Look at the below code. data = {} form = ContactForm ( data ) print ( form . is_valid ()) # output: False print ( form . errors ) # output: <ul class=\"errorlist\"><li>first_name<ul class=\"errorlist\"><li>This field is required.</li></ul></li><li>last_name<ul class=\"errorlist\"><li>This field is required.</li></ul></li><li>email<ul class=\"errorlist\"><li>This field is required.</li></ul></li></ul> print ( form . errors . as_json ()) # output: {\"first_name\": [{\"message\": \"This field is required.\", \"code\": \"required\"}], \"last_name\": [{\"message\": \"This field is required.\", \"code\": \"required\"}], \"email\": [{\"message\": \"This field is required.\", \"code\": \"required\"}]} form.is_valid() method is used to check whether the form data is valid or not. form.errors , form.errors.as_json() are used for form errors. Let's use the valid data data = { \"email\" : \"john@example.com\" , \"first_name\" : \"John\" , \"last_name\" : \"Doe\" } form = ContactForm ( data ) print ( form . is_valid ()) # output: True print ( form . cleaned_data ) # output: {'first_name': 'John', 'last_name': 'Doe'} form.cleaned_data returns the validated data. Django form view \u00b6 function based form view \u00b6 we can use the forms with function based views for simple functionality. lets write a simple form view to get the contact information. we will be using the ContactForm mentioned in this article. look at the below code from django.http import HttpResponse from django.shortcuts import render from my_app.forms import ContactForm def my_form_view ( request ): if request . method . lower () == \"POST\" : form = ContactForm ( request . POST ) if form . is_valid (): data = form . cleaned_data print ( data ) return HttpResponse ( \"successfully submitted the form\" ) else : form = ContactForm () context = { \"form\" : form } return render ( request , 'form_template.html' , context ) form_template.html < form action = \"\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_table }} < input type = \"submit\" value = \"submit\" /> </ form > class based form view \u00b6 from django.http import HttpResponse from django.views.generic.edit import FormView from my_app.forms import ContactForm class MyFormView ( FormView ): template_name = 'form_template.html' form_class = ContactForm def form_valid ( self , form ): data = form . cleaned_data print ( data ) return HttpResponse ( \"successfully submitted the form\" ) FormView is generic class provided by django. It provides the generic functionality for form views. It comes with methods like form_valid and form_invalid to handle the requests. Only use it if your functionality matches with FormView implementation. configure urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_form_view' , views . my_form_view , name = 'fmy_form_view' ), path ( 'cbv_form_view' , views . MyFormView . as_view (), name = 'cmy_form_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_form_view to see the function based form view Access the url http://localhost:8000/my_app/cbv_form_view to see the class based form view Once open the form urls, fill out the form and submit the form if the form is valid then we can see the response \"successfully submitted the form\" otherise it shows the form with error messages. References \u00b6 https://docs.djangoproject.com/en/dev/topics/forms/ https://docs.djangoproject.com/en/dev/ref/forms/fields/ https://docs.djangoproject.com/en/dev/topics/class-based-views/generic-editing/","title":"Django form view"},{"location":"course/django/form-view/#prerequisites","text":"HTML Forms Create django app Django first view Django templates","title":"Prerequisites"},{"location":"course/django/form-view/#ways-to-send-information-to-server","text":"Can send the data in HTTP headers Can send the data in HTTP request params Can send the data in HTTP request body.","title":"ways to send information to server"},{"location":"course/django/form-view/#what-is-a-form","text":"A form is used to send the information to the server GET and POST are the only HTTP methods to use when dealing with forms.","title":"What is a form?"},{"location":"course/django/form-view/#django-forms","text":"Django provides a way to create the form fields in a pythonic way with/without form context Django forms validates the data when a data is submitted to the server. Django forms also helpful in rendering the error or validation messages if submitted data is not in the required format.","title":"Django forms"},{"location":"course/django/form-view/#django-contact-form","text":"Let's create a simple django contact form. Create a forms.py file in the django app my_app and add the below code. my_app/forms.py from django import forms class ContactForm ( forms . Form ): first_name = forms . CharField ( max_length = 10 ) last_name = forms . CharField ( max_length = 10 ) email = forms . EmailField ( max_length = 100 )","title":"django contact form"},{"location":"course/django/form-view/#django-form-as-html","text":"Can generate HTML from the above django form. Now, open django shell generate HTML from django form with below code. form = ContactForm () print ( form . as_div ()) It will generate below HTML < div > < label for = \"id_first_name\" > First name: </ label > < input type = \"text\" name = \"first_name\" maxlength = \"10\" required id = \"id_first_name\" > </ div > < div > < label for = \"id_last_name\" > Last name: </ label > < input type = \"text\" name = \"last_name\" maxlength = \"10\" required id = \"id_last_name\" > </ div > < div > < label for = \"id_email\" > Email: </ label > < input type = \"email\" name = \"email\" maxlength = \"10\" required id = \"id_email\" > </ div > we can use same HTML if the django template just like {{ form.as_div }} similarly, we can use other form methods like form.as_p() , form.as_ul() and form.as_table() we render the template with form fields for GET request.","title":"django form as HTML"},{"location":"course/django/form-view/#django-form-for-data-validation","text":"Django forms can be used to validate the form data as well. Look at the below code. data = {} form = ContactForm ( data ) print ( form . is_valid ()) # output: False print ( form . errors ) # output: <ul class=\"errorlist\"><li>first_name<ul class=\"errorlist\"><li>This field is required.</li></ul></li><li>last_name<ul class=\"errorlist\"><li>This field is required.</li></ul></li><li>email<ul class=\"errorlist\"><li>This field is required.</li></ul></li></ul> print ( form . errors . as_json ()) # output: {\"first_name\": [{\"message\": \"This field is required.\", \"code\": \"required\"}], \"last_name\": [{\"message\": \"This field is required.\", \"code\": \"required\"}], \"email\": [{\"message\": \"This field is required.\", \"code\": \"required\"}]} form.is_valid() method is used to check whether the form data is valid or not. form.errors , form.errors.as_json() are used for form errors. Let's use the valid data data = { \"email\" : \"john@example.com\" , \"first_name\" : \"John\" , \"last_name\" : \"Doe\" } form = ContactForm ( data ) print ( form . is_valid ()) # output: True print ( form . cleaned_data ) # output: {'first_name': 'John', 'last_name': 'Doe'} form.cleaned_data returns the validated data.","title":"Django Form for data validation"},{"location":"course/django/form-view/#django-form-view","text":"","title":"Django form view"},{"location":"course/django/form-view/#function-based-form-view","text":"we can use the forms with function based views for simple functionality. lets write a simple form view to get the contact information. we will be using the ContactForm mentioned in this article. look at the below code from django.http import HttpResponse from django.shortcuts import render from my_app.forms import ContactForm def my_form_view ( request ): if request . method . lower () == \"POST\" : form = ContactForm ( request . POST ) if form . is_valid (): data = form . cleaned_data print ( data ) return HttpResponse ( \"successfully submitted the form\" ) else : form = ContactForm () context = { \"form\" : form } return render ( request , 'form_template.html' , context ) form_template.html < form action = \"\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_table }} < input type = \"submit\" value = \"submit\" /> </ form >","title":"function based form view"},{"location":"course/django/form-view/#class-based-form-view","text":"from django.http import HttpResponse from django.views.generic.edit import FormView from my_app.forms import ContactForm class MyFormView ( FormView ): template_name = 'form_template.html' form_class = ContactForm def form_valid ( self , form ): data = form . cleaned_data print ( data ) return HttpResponse ( \"successfully submitted the form\" ) FormView is generic class provided by django. It provides the generic functionality for form views. It comes with methods like form_valid and form_invalid to handle the requests. Only use it if your functionality matches with FormView implementation.","title":"class based form view"},{"location":"course/django/form-view/#configure-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_form_view' , views . my_form_view , name = 'fmy_form_view' ), path ( 'cbv_form_view' , views . MyFormView . as_view (), name = 'cmy_form_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_form_view to see the function based form view Access the url http://localhost:8000/my_app/cbv_form_view to see the class based form view Once open the form urls, fill out the form and submit the form if the form is valid then we can see the response \"successfully submitted the form\" otherise it shows the form with error messages.","title":"configure urls"},{"location":"course/django/form-view/#references","text":"https://docs.djangoproject.com/en/dev/topics/forms/ https://docs.djangoproject.com/en/dev/ref/forms/fields/ https://docs.djangoproject.com/en/dev/topics/class-based-views/generic-editing/","title":"References"},{"location":"course/django/getting-started-with-django-first-app/","text":"Getting Started With Django First App \u00b6 Let's get started with our very first django application. I always recommend newbies to use the latest versions of django and python. Python2.X.X has no active support. We generally develop many projects on a single machine with different requirements(python packages). If we install python packages globally some projects may not work properly. To avoid it we should use virtual environments. Before we dive into our first django application I recommend you to read [\"setting up django development environment\"]/course/django/setting-up-django-development-environment/). Let's create the our first django application \u00b6 Steps to create a django application Create a directory named \"my_first_app\" and change directory into it. Now, install django package with pip . Create a virtual environement for python3 with command \"virtualenv -p python3 env3\" Create a django project named \"myproject\" and change the directory path to \"myproject\". Now, run the command \"python manage.py runserver 8000\". After, open the browser (I prefer mozilla or google chrome) and access \" https://localhost:8000 \" to see the success output. I've added reference code below(OS: Ubuntu) $ mkdir my_first_app $ cd my_first_app $ virtualenv -p python3 env3 $ source ./env3/bin/activate (env3)$ pip install django (env3)$ django-admin startproject myproject (env3)$ cd myproject (env3)$ python manage.py runserver 8000 Let's understand the django project structure \u00b6 After above steps our project structure looks like below myfirst_app \u2514\u2500\u2500 myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Our project execution starts from \"management.py\" for development server which is a python dev server. In production we replace the python dev server with servers like \"Nginx\", \"Apache2\", etc. Whenever a request comes to the server that is sent to WSGI application which we can see it in file \"myptoject/wsgi.py\" Django WSGI application uses settings in \"myproject/settings.py\" . \"settings.py\" files contains settings like URL Routing point, Database, Template directories, Static directories and more which we will learn about all these settings in coming articles. As Django is a MVC (MTV) framework it is divided into 3 parts 1.Model(Databases & ORM), 2.View(Business Logic) and 3.Template(User Presentation). Whenever a request comes in first it is passed to url router and then to view. View renders the template(HTML) and returns the response. For more details see \"Django Request Response Lifecycle\" . Let's write our First Django View \u00b6 If we see our project settings, we can find that our url setting is configured to \"myproject/urls.py\" (ROOT_URLCONF = 'myproject.urls'). In \"urls.py\" file we create url configurations in which are used by django to route the url paths to respected views. In django, we devide complex web applicaiton into simple apps which provides us quick navigation to the project. Let's write a simple view that returns plain text \"Hello World\". Before that let's create an app named \"myapp\". To create app run the command \"python manage.py startapp myapp\". After the command executed our project structure looks like below. myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Let's take a small introduction of django applicaiton structure. \u00b6 admin.py: Django comes with built in admin panel. This file contains the configurations for built-in admin panel. apps.py: We already know django can have multiple apps and each app can have it's specific configurations. This file contains the app configurations. __init__.py : This file used to represent the directory \"myapp\" as a python package. migrations/: Whenever we make database related changes all those changes are recorded in the form of migrations and stored in this directory. models.py: A model is a equivalent representation of relational database table. It contains the database tables in the form of django models. tests.py: Django comes with unit tests. we write django unit tests in this file. views.py: Views are mapped to urls which will return HttpResponse. This file contains the app related views. Let's write our very first django app view \u00b6 we will write a view that will return \"Hello World\" as a response. open file **\"myapp/views.py\"**and add below code to it. from django.http import HttpResponse def hello ( request ): data = \"Hello World\" return HttpResponse ( data ) Every django view takes request as a first parameter and returns the HttpResponse. Above view will return response \"hello world\" * Now, we have to map the view to urls. To do it, open file \"myproject/urls.py\" edit it as below. from django.contrib import admin from django.urls import path from myapp.views import hello urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'hello/' , hello , name = \"hello\" ) ] We have imported our view \"hello\" from myapp/views.py and mapped it to url \"hello/\" using django \"path\" utility. Now, access https://localhost:8000 you will get 404 page. Because we have updated our myproject/urls.py The page also says that it only contains 2 patters 1. admin/ 2. hello/ . Access http://localhost:8000/hello/ to see our very first view response Hello World . It's only returned plain text. Now, it's time to return some HTML response. Let's change our view hello ( myapp/views.py ) to below code from django.http import HttpResponse def hello ( request ): data = \"\"\" <html> <title>Hello World</title> <body> <h1>Hello World</h1> </body> </html> \"\"\" return HttpResponse ( data ) If we access the page http://localhost:8000/hello/ we can see the HTML response which contains text \"Hello World\" inside a \"h1\" tag. We can add more views to our our very first django application. In the above view we have written all the HTML code inside the view. It's not a good practice. I've shown it just to make you understand how the view works. For live projects we maintain the project structure. The project structure divided into django code (views, urls, tests, forms, models and other utilities), templates(HTML files) and static files(CSS, JavaScript, Images, Videos, etc). In the next article, We will see how to use templates and static files.","title":"Getting Started With Django First App"},{"location":"course/django/getting-started-with-django-first-app/#getting-started-with-django-first-app","text":"Let's get started with our very first django application. I always recommend newbies to use the latest versions of django and python. Python2.X.X has no active support. We generally develop many projects on a single machine with different requirements(python packages). If we install python packages globally some projects may not work properly. To avoid it we should use virtual environments. Before we dive into our first django application I recommend you to read [\"setting up django development environment\"]/course/django/setting-up-django-development-environment/).","title":"Getting Started With Django First App"},{"location":"course/django/getting-started-with-django-first-app/#lets-create-the-our-first-django-application","text":"Steps to create a django application Create a directory named \"my_first_app\" and change directory into it. Now, install django package with pip . Create a virtual environement for python3 with command \"virtualenv -p python3 env3\" Create a django project named \"myproject\" and change the directory path to \"myproject\". Now, run the command \"python manage.py runserver 8000\". After, open the browser (I prefer mozilla or google chrome) and access \" https://localhost:8000 \" to see the success output. I've added reference code below(OS: Ubuntu) $ mkdir my_first_app $ cd my_first_app $ virtualenv -p python3 env3 $ source ./env3/bin/activate (env3)$ pip install django (env3)$ django-admin startproject myproject (env3)$ cd myproject (env3)$ python manage.py runserver 8000","title":"Let's create the our first django application"},{"location":"course/django/getting-started-with-django-first-app/#lets-understand-the-django-project-structure","text":"After above steps our project structure looks like below myfirst_app \u2514\u2500\u2500 myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Our project execution starts from \"management.py\" for development server which is a python dev server. In production we replace the python dev server with servers like \"Nginx\", \"Apache2\", etc. Whenever a request comes to the server that is sent to WSGI application which we can see it in file \"myptoject/wsgi.py\" Django WSGI application uses settings in \"myproject/settings.py\" . \"settings.py\" files contains settings like URL Routing point, Database, Template directories, Static directories and more which we will learn about all these settings in coming articles. As Django is a MVC (MTV) framework it is divided into 3 parts 1.Model(Databases & ORM), 2.View(Business Logic) and 3.Template(User Presentation). Whenever a request comes in first it is passed to url router and then to view. View renders the template(HTML) and returns the response. For more details see \"Django Request Response Lifecycle\" .","title":"Let's understand the django project structure"},{"location":"course/django/getting-started-with-django-first-app/#lets-write-our-first-django-view","text":"If we see our project settings, we can find that our url setting is configured to \"myproject/urls.py\" (ROOT_URLCONF = 'myproject.urls'). In \"urls.py\" file we create url configurations in which are used by django to route the url paths to respected views. In django, we devide complex web applicaiton into simple apps which provides us quick navigation to the project. Let's write a simple view that returns plain text \"Hello World\". Before that let's create an app named \"myapp\". To create app run the command \"python manage.py startapp myapp\". After the command executed our project structure looks like below. myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 myproject \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py","title":"Let's write our First Django View"},{"location":"course/django/getting-started-with-django-first-app/#lets-take-a-small-introduction-of-django-applicaiton-structure","text":"admin.py: Django comes with built in admin panel. This file contains the configurations for built-in admin panel. apps.py: We already know django can have multiple apps and each app can have it's specific configurations. This file contains the app configurations. __init__.py : This file used to represent the directory \"myapp\" as a python package. migrations/: Whenever we make database related changes all those changes are recorded in the form of migrations and stored in this directory. models.py: A model is a equivalent representation of relational database table. It contains the database tables in the form of django models. tests.py: Django comes with unit tests. we write django unit tests in this file. views.py: Views are mapped to urls which will return HttpResponse. This file contains the app related views.","title":"Let's take a small introduction of django applicaiton structure."},{"location":"course/django/getting-started-with-django-first-app/#lets-write-our-very-first-django-app-view","text":"we will write a view that will return \"Hello World\" as a response. open file **\"myapp/views.py\"**and add below code to it. from django.http import HttpResponse def hello ( request ): data = \"Hello World\" return HttpResponse ( data ) Every django view takes request as a first parameter and returns the HttpResponse. Above view will return response \"hello world\" * Now, we have to map the view to urls. To do it, open file \"myproject/urls.py\" edit it as below. from django.contrib import admin from django.urls import path from myapp.views import hello urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'hello/' , hello , name = \"hello\" ) ] We have imported our view \"hello\" from myapp/views.py and mapped it to url \"hello/\" using django \"path\" utility. Now, access https://localhost:8000 you will get 404 page. Because we have updated our myproject/urls.py The page also says that it only contains 2 patters 1. admin/ 2. hello/ . Access http://localhost:8000/hello/ to see our very first view response Hello World . It's only returned plain text. Now, it's time to return some HTML response. Let's change our view hello ( myapp/views.py ) to below code from django.http import HttpResponse def hello ( request ): data = \"\"\" <html> <title>Hello World</title> <body> <h1>Hello World</h1> </body> </html> \"\"\" return HttpResponse ( data ) If we access the page http://localhost:8000/hello/ we can see the HTML response which contains text \"Hello World\" inside a \"h1\" tag. We can add more views to our our very first django application. In the above view we have written all the HTML code inside the view. It's not a good practice. I've shown it just to make you understand how the view works. For live projects we maintain the project structure. The project structure divided into django code (views, urls, tests, forms, models and other utilities), templates(HTML files) and static files(CSS, JavaScript, Images, Videos, etc). In the next article, We will see how to use templates and static files.","title":"Let's write our very first django app view"},{"location":"course/django/how-to-use-templates-in-django/","text":"How To Use Templates In Django \u00b6 Django is a web framework so, It needs to maintain the code in such a way that it should be easy to navigate and easy to read and maintain. As we already know the Django framework is a MVC, we do not write the HTML code in the views.py instead we write it in a template. In django web framework we generate dynamic HTTP response. While generating the dynamic HTML content we use a special syntax called \"django template syntax\" . It will make the process easy for us. Before using the templates in our django project we need to configure some settings. Let's use templates in django by configuring template settings. Django Template Settings Configuration: \u00b6 myproject/settings.py # ..... TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ 'templates' ,], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] # ..... project structure myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 myproject \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates \u2514\u2500\u2500 home.html myapp/views.py from django.shortcuts import render def home ( request ): return render ( request , 'home.html' ) myproject/urls.py from django.urls import path from myapp import views urlpatterns = [ path ( '' , views . home , name = 'home' ), ] templates/home.html < html > < title > Hello World </ title > < body > < h1 > Hello World </ h1 > </ body > </ html > Open settings.py file, you can find \"TEMPLATE\" setting. It contains list of settings for templates. Every template setting is dictionary object. It contains settings like BACKEND , DIRS, APP_DIRS, OPTIONS. In Django we render the template using the the function*\"render\" to generate the dynamic HTML content. The *\"render\" function takes 3 parameters request, template_name and a context(a dictionary of keys and values which will be used inside the template). Before rendering the template Django looks for the template using its name. It searches for the template using its in \"DIRS\" setting for external templates. So, in the above code we have added \"templates\" directory. After adding the directory our project structure looks like above. When Django looks for the template It will find it in \"templates\" direcory that we have added. Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello World\". We have simply rendered a static html. But, what we discussed is we generate a dynamic response using django web framework. Let's see how we can generate a dynamic response in Django. Let's change the views.py and home.html as follows myapp/views.py from django.shortcuts import render def home ( request ): context = { 'name' : 'Anjaneyulu Batta' } return render ( request , 'home.html' , context ) templates/home.html < html > < title > Hello {{ name }} </ title > < body > < h1 > Hello {{ name }} </ h1 > </ body > </ html > Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello Anjaneyulu Batta\". In the view we have passed the context dictionary and accessed the value with key name in the template using the django template syntax \"{{ name }}\". In this way we can make use of django templates. Reference: https://docs.djangoproject.com/en/dev/topics/templates/","title":"How To Use Templates In Django"},{"location":"course/django/how-to-use-templates-in-django/#how-to-use-templates-in-django","text":"Django is a web framework so, It needs to maintain the code in such a way that it should be easy to navigate and easy to read and maintain. As we already know the Django framework is a MVC, we do not write the HTML code in the views.py instead we write it in a template. In django web framework we generate dynamic HTTP response. While generating the dynamic HTML content we use a special syntax called \"django template syntax\" . It will make the process easy for us. Before using the templates in our django project we need to configure some settings. Let's use templates in django by configuring template settings.","title":"How To Use Templates In Django"},{"location":"course/django/how-to-use-templates-in-django/#django-template-settings-configuration","text":"myproject/settings.py # ..... TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [ 'templates' ,], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] # ..... project structure myproject \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 myapp \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 myproject \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates \u2514\u2500\u2500 home.html myapp/views.py from django.shortcuts import render def home ( request ): return render ( request , 'home.html' ) myproject/urls.py from django.urls import path from myapp import views urlpatterns = [ path ( '' , views . home , name = 'home' ), ] templates/home.html < html > < title > Hello World </ title > < body > < h1 > Hello World </ h1 > </ body > </ html > Open settings.py file, you can find \"TEMPLATE\" setting. It contains list of settings for templates. Every template setting is dictionary object. It contains settings like BACKEND , DIRS, APP_DIRS, OPTIONS. In Django we render the template using the the function*\"render\" to generate the dynamic HTML content. The *\"render\" function takes 3 parameters request, template_name and a context(a dictionary of keys and values which will be used inside the template). Before rendering the template Django looks for the template using its name. It searches for the template using its in \"DIRS\" setting for external templates. So, in the above code we have added \"templates\" directory. After adding the directory our project structure looks like above. When Django looks for the template It will find it in \"templates\" direcory that we have added. Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello World\". We have simply rendered a static html. But, what we discussed is we generate a dynamic response using django web framework. Let's see how we can generate a dynamic response in Django. Let's change the views.py and home.html as follows myapp/views.py from django.shortcuts import render def home ( request ): context = { 'name' : 'Anjaneyulu Batta' } return render ( request , 'home.html' , context ) templates/home.html < html > < title > Hello {{ name }} </ title > < body > < h1 > Hello {{ name }} </ h1 > </ body > </ html > Now, access the url localhost:8000 in your browser you can see the HTTP response \"Hello Anjaneyulu Batta\". In the view we have passed the context dictionary and accessed the value with key name in the template using the django template syntax \"{{ name }}\". In this way we can make use of django templates. Reference: https://docs.djangoproject.com/en/dev/topics/templates/","title":"Django Template Settings Configuration:"},{"location":"course/django/http-protocol/","text":"what is HTTP? \u00b6 HTTP stands for HyperText Transfer Protocol. The HTTP protocol can be used to transfer the data in the form of plain text, hypertext, audio, video, etc on the internet. features of HTTP \u00b6 HTTP is connectionless The HTTP client, i.e., a browser initiates an HTTP request and after a request is made, the client waits for the response. Server processes the request and returns the response. Once response is recieved then HTTP client disconnects the connection. HTTP is media independent The client has to specify the media type in the request Then server will understand the media request and processes it. HTTP is stateless The server and client are aware of each other only during a current request. Afterwards, both of them forget about each other. HTTP Request \u00b6 It has two parts HTTP request headers and HTTP request body HTTP request headers \u00b6 The request looks something like below http://127.0.0.1/login/ POST /login/ HTTP/1.1 Host: 127 .0.0.1 User-Agent: Mozilla/5.0 ( Windows NT 6 .1 ; WOW64 ; rv:18.0 ) Gecko/20100101 Firefox/18.0 Accept: text/html,application/xhtml+xml,application/xml ; q = 0 .9,*/* ; q = 0 .8 Accept-Language: en-US,en ; q = 0 .5 Accept-Encoding: gzip, deflate DNT: 1 Referer: http://127.0.0.1/login/ Cookie: passx = 87e8af376bc9d9bfec2c7c0193e6af70 ; PHPSESSID = l9hk7mfh0ppqecg8gialak6gt5 Connection: keep-alive Content-Type: multipart/form-data HTTP request body \u00b6 HTTP Message Body is the data bytes transmitted in an HTTP transaction message immediately following the headers if there are any. HTTP response: \u00b6 It also has two parts HTTP response headers and HTTP response body HTTP response headers \u00b6 200 OK Access-Control-Allow-Origin: * Connection: Keep-Alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Date: Mon, 18 Jul 2016 16:06:00 GMT Etag: \"c561c68d0ba92bbeb8b0f612a9199f722e3a621a\" Keep-Alive: timeout=5, max=997 Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT HTTP response body \u00b6 The last part of a response is the body. Not all responses have one: responses with a status code that sufficiently answers the request without the need for corresponding payload (like 201 Created or 204 No Content) usually don't. HTTP status codes \u00b6 Informational responses (100 \u2013 199) Successful responses (200 \u2013 299) Redirection messages (300 \u2013 399) Client error responses (400 \u2013 499) Server error responses (500 \u2013 599) Status code Meaning 1xx Informational 100 Continue 101 Switching protocols 102 Processing 103 Early Hints 2xx Succesful 200 OK 201 Created 202 Accepted 203 Non-Authoritative Information 204 No Content 205 Reset Content 206 Partial Content 207 Multi-Status 208 Already Reported 226 IM Used 3xx Redirection 300 Multiple Choices 301 Moved Permanently 302 Found (Previously \"Moved Temporarily\") 303 See Other 304 Not Modified 305 Use Proxy 306 Switch Proxy 307 Temporary Redirect 308 Permanent Redirect 4xx Client Error 400 Bad Request 401 Unauthorized 402 Payment Required 403 Forbidden 404 Not Found 405 Method Not Allowed 406 Not Acceptable 407 Proxy Authentication Required 408 Request Timeout 409 Conflict 410 Gone 411 Length Required 412 Precondition Failed 413 Payload Too Large 414 URI Too Long 415 Unsupported Media Type 416 Range Not Satisfiable 417 Expectation Failed 418 I'm a Teapot 421 Misdirected Request 422 Unprocessable Entity 423 Locked 424 Failed Dependency 425 Too Early 426 Upgrade Required 428 Precondition Required 429 Too Many Requests 431 Request Header Fields Too Large 451 Unavailable For Legal Reasons 5xx Server Error 500 Internal Server Error 501 Not Implemented 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout 505 HTTP Version Not Supported 506 Variant Also Negotiates 507 Insufficient Storage 508 Loop Detected 510 Not Extended 511 Network Authentication Required References: \u00b6 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers https://developer.mozilla.org/en-US/docs/Web/HTTP/Status","title":"HTTP protocol"},{"location":"course/django/http-protocol/#what-is-http","text":"HTTP stands for HyperText Transfer Protocol. The HTTP protocol can be used to transfer the data in the form of plain text, hypertext, audio, video, etc on the internet.","title":"what is HTTP?"},{"location":"course/django/http-protocol/#features-of-http","text":"HTTP is connectionless The HTTP client, i.e., a browser initiates an HTTP request and after a request is made, the client waits for the response. Server processes the request and returns the response. Once response is recieved then HTTP client disconnects the connection. HTTP is media independent The client has to specify the media type in the request Then server will understand the media request and processes it. HTTP is stateless The server and client are aware of each other only during a current request. Afterwards, both of them forget about each other.","title":"features of HTTP"},{"location":"course/django/http-protocol/#http-request","text":"It has two parts HTTP request headers and HTTP request body","title":"HTTP Request"},{"location":"course/django/http-protocol/#http-request-headers","text":"The request looks something like below http://127.0.0.1/login/ POST /login/ HTTP/1.1 Host: 127 .0.0.1 User-Agent: Mozilla/5.0 ( Windows NT 6 .1 ; WOW64 ; rv:18.0 ) Gecko/20100101 Firefox/18.0 Accept: text/html,application/xhtml+xml,application/xml ; q = 0 .9,*/* ; q = 0 .8 Accept-Language: en-US,en ; q = 0 .5 Accept-Encoding: gzip, deflate DNT: 1 Referer: http://127.0.0.1/login/ Cookie: passx = 87e8af376bc9d9bfec2c7c0193e6af70 ; PHPSESSID = l9hk7mfh0ppqecg8gialak6gt5 Connection: keep-alive Content-Type: multipart/form-data","title":"HTTP request headers"},{"location":"course/django/http-protocol/#http-request-body","text":"HTTP Message Body is the data bytes transmitted in an HTTP transaction message immediately following the headers if there are any.","title":"HTTP request body"},{"location":"course/django/http-protocol/#http-response","text":"It also has two parts HTTP response headers and HTTP response body","title":"HTTP response:"},{"location":"course/django/http-protocol/#http-response-headers","text":"200 OK Access-Control-Allow-Origin: * Connection: Keep-Alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Date: Mon, 18 Jul 2016 16:06:00 GMT Etag: \"c561c68d0ba92bbeb8b0f612a9199f722e3a621a\" Keep-Alive: timeout=5, max=997 Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT","title":"HTTP response headers"},{"location":"course/django/http-protocol/#http-response-body","text":"The last part of a response is the body. Not all responses have one: responses with a status code that sufficiently answers the request without the need for corresponding payload (like 201 Created or 204 No Content) usually don't.","title":"HTTP response body"},{"location":"course/django/http-protocol/#http-status-codes","text":"Informational responses (100 \u2013 199) Successful responses (200 \u2013 299) Redirection messages (300 \u2013 399) Client error responses (400 \u2013 499) Server error responses (500 \u2013 599) Status code Meaning 1xx Informational 100 Continue 101 Switching protocols 102 Processing 103 Early Hints 2xx Succesful 200 OK 201 Created 202 Accepted 203 Non-Authoritative Information 204 No Content 205 Reset Content 206 Partial Content 207 Multi-Status 208 Already Reported 226 IM Used 3xx Redirection 300 Multiple Choices 301 Moved Permanently 302 Found (Previously \"Moved Temporarily\") 303 See Other 304 Not Modified 305 Use Proxy 306 Switch Proxy 307 Temporary Redirect 308 Permanent Redirect 4xx Client Error 400 Bad Request 401 Unauthorized 402 Payment Required 403 Forbidden 404 Not Found 405 Method Not Allowed 406 Not Acceptable 407 Proxy Authentication Required 408 Request Timeout 409 Conflict 410 Gone 411 Length Required 412 Precondition Failed 413 Payload Too Large 414 URI Too Long 415 Unsupported Media Type 416 Range Not Satisfiable 417 Expectation Failed 418 I'm a Teapot 421 Misdirected Request 422 Unprocessable Entity 423 Locked 424 Failed Dependency 425 Too Early 426 Upgrade Required 428 Precondition Required 429 Too Many Requests 431 Request Header Fields Too Large 451 Unavailable For Legal Reasons 5xx Server Error 500 Internal Server Error 501 Not Implemented 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout 505 HTTP Version Not Supported 506 Variant Also Negotiates 507 Insufficient Storage 508 Loop Detected 510 Not Extended 511 Network Authentication Required","title":"HTTP status codes"},{"location":"course/django/http-protocol/#references","text":"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers https://developer.mozilla.org/en-US/docs/Web/HTTP/Status","title":"References:"},{"location":"course/django/insert-data/","text":"Prerequisites \u00b6 Django Models Django shell \u00b6 Run the command python manage.py shell open the django shell. Write django ORM queries to insert data into the database table. Django Model - Contact \u00b6 We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" insert data using - create() \u00b6 Open django shell and import the Contact model` write the below query to insert the data from my_app.models import Contact john = Contact . objects . create ( first_name = \"John\" , last_name = \"D\" , email = \"john@example.com\" ) print ( john ) # output: <Contact: Contact object (1)> print ( john . id ) # output: 1 create() method make executes a insert query and insert the data into the database. insert data using - save() \u00b6 To use the save() method we need to create the object instance first. from my_app.models import Contact krish = Contact ( first_name = \"Krish\" , last_name = \"C\" , email = \"krish@example.com\" ) print ( krish ) # output: <Contact: Contact object (None)> print ( krish . id ) # output: None # call .save() to insert it into the database. krish . save () print ( krish ) # output: <Contact: Contact object (2)> print ( krish . id ) # output: 2 Data inserted only if we call save() on the object otherwise it won't be inserted into the database. insert data using - get_or_create() \u00b6 get_or_create() is used to retrieve the record if exists otherwise it inserts the record into the database. It makes two database queries to if object does not exists in the database. from my_app.models import Contact irish , created = Contact . objects . get_or_create ( first_name = \"Irish\" , last_name = \"W\" , email = \"irish@example.com\" ) print ( created ) # output: True print ( irish ) # output: Contact object (3) Above code, executes two queries SELECT and INSERT because the object does not exists in the database. Let's try the same code again. from my_app.models import Contact irish , created = Contact . objects . get_or_create ( first_name = \"Irish\" , last_name = \"W\" , email = \"irish@example.com\" ) print ( created ) # output: False print ( irish ) # output: Contact object (3) Above code only executes SELECT query. Because the object already exists bulk insert using - bulk_create() \u00b6 In some cases, we may need to insert the data in bulk. In such cases, most of the people use create() method inside the loop. It will result in multiple database queries which takes more execution time. The best way to do it is to use bulk_create() Let's see how we can do that in the below code. from my_app.models import Contact contacts = [ Contact ( first_name = \"Berry\" , last_name = \"Allen\" , email = \"berry@example.com\" ), Contact ( first_name = \"Harrison\" , last_name = \"Wells\" , email = \"harrison@example.com\" ), Contact ( first_name = \"Oliver\" , last_name = \"Queen\" , email = \"oliver@example.com\" ), ] # use bulk_create() method to do bulk insert results = Contact . object . bulk_create ( contacts ) print ( results ) # output: # [<Contact: Contact object (4)>, # <Contact: Contact object (5)>, # <Contact: Contact object (6)>] References \u00b6 https://docs.djangoproject.com/en/dev/topics/db/queries/","title":"Django insert data"},{"location":"course/django/insert-data/#prerequisites","text":"Django Models","title":"Prerequisites"},{"location":"course/django/insert-data/#django-shell","text":"Run the command python manage.py shell open the django shell. Write django ORM queries to insert data into the database table.","title":"Django shell"},{"location":"course/django/insert-data/#django-model-contact","text":"We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"Django Model - Contact"},{"location":"course/django/insert-data/#insert-data-using-create","text":"Open django shell and import the Contact model` write the below query to insert the data from my_app.models import Contact john = Contact . objects . create ( first_name = \"John\" , last_name = \"D\" , email = \"john@example.com\" ) print ( john ) # output: <Contact: Contact object (1)> print ( john . id ) # output: 1 create() method make executes a insert query and insert the data into the database.","title":"insert data using - create()"},{"location":"course/django/insert-data/#insert-data-using-save","text":"To use the save() method we need to create the object instance first. from my_app.models import Contact krish = Contact ( first_name = \"Krish\" , last_name = \"C\" , email = \"krish@example.com\" ) print ( krish ) # output: <Contact: Contact object (None)> print ( krish . id ) # output: None # call .save() to insert it into the database. krish . save () print ( krish ) # output: <Contact: Contact object (2)> print ( krish . id ) # output: 2 Data inserted only if we call save() on the object otherwise it won't be inserted into the database.","title":"insert data using - save()"},{"location":"course/django/insert-data/#insert-data-using-get_or_create","text":"get_or_create() is used to retrieve the record if exists otherwise it inserts the record into the database. It makes two database queries to if object does not exists in the database. from my_app.models import Contact irish , created = Contact . objects . get_or_create ( first_name = \"Irish\" , last_name = \"W\" , email = \"irish@example.com\" ) print ( created ) # output: True print ( irish ) # output: Contact object (3) Above code, executes two queries SELECT and INSERT because the object does not exists in the database. Let's try the same code again. from my_app.models import Contact irish , created = Contact . objects . get_or_create ( first_name = \"Irish\" , last_name = \"W\" , email = \"irish@example.com\" ) print ( created ) # output: False print ( irish ) # output: Contact object (3) Above code only executes SELECT query. Because the object already exists","title":"insert data using - get_or_create()"},{"location":"course/django/insert-data/#bulk-insert-using-bulk_create","text":"In some cases, we may need to insert the data in bulk. In such cases, most of the people use create() method inside the loop. It will result in multiple database queries which takes more execution time. The best way to do it is to use bulk_create() Let's see how we can do that in the below code. from my_app.models import Contact contacts = [ Contact ( first_name = \"Berry\" , last_name = \"Allen\" , email = \"berry@example.com\" ), Contact ( first_name = \"Harrison\" , last_name = \"Wells\" , email = \"harrison@example.com\" ), Contact ( first_name = \"Oliver\" , last_name = \"Queen\" , email = \"oliver@example.com\" ), ] # use bulk_create() method to do bulk insert results = Contact . object . bulk_create ( contacts ) print ( results ) # output: # [<Contact: Contact object (4)>, # <Contact: Contact object (5)>, # <Contact: Contact object (6)>]","title":"bulk insert using - bulk_create()"},{"location":"course/django/insert-data/#references","text":"https://docs.djangoproject.com/en/dev/topics/db/queries/","title":"References"},{"location":"course/django/list-view/","text":"Prerequisites \u00b6 Django Models Django Retrieve Data Django list view \u00b6 List view is used to show the list data to the user. For example: Show list of contacts to the user. django contact Model \u00b6 my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" django list view template \u00b6 tempaltes/list_template.html Below template recieves the contacts from the context and renders the info. < h1 > Contacts </ h1 > {% for contact in contacts %} < div > < p >< strong > Name: </ strong > {{ contact.first_name }} </ p > < p >< strong > Email: </ strong > {{ contact.email }} </ p > </ div > {% endfor %} function based list view \u00b6 It's easy to write and use. If we have complex functionality then go for generic ListView Let's look at the code my_app/views.py from django.shortcuts import render from my_app.models import Contact def fbv_list_view ( request ): contacts = Contact . objects . all () context = { 'contacts' : contacts } return render ( request , 'list_template.html' , context ) class based list view \u00b6 Django provides generic ListView for list functionality. We can modify it as needed. Let's look at the code below. from django.views.generic.list import ListView from my_app.models import Contact class CBVListView ( ListView ): template_name = 'list_template.html' context_object_name = 'contacts' queryset = Contact . objects . all () It either requires attribute queryset or method get_queryset to return the query results. We can have pagination by using attribute paginate_by In template we can access the query results either with context_object_name value or with name object_list configure the urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_list_view' , views . fbv_list_view , name = 'fbv_list_view' ), path ( 'cbv_list_view' , views . CBVListView . as_view (), name = 'cbv_list_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_list_view to see the function based list view Access the url http://localhost:8000/my_app/cbv_list_view to see the class based list view References \u00b6 https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/#listview https://ccbv.co.uk/projects/Django/4.1/django.views.generic.list/ListView/","title":"Django list view"},{"location":"course/django/list-view/#prerequisites","text":"Django Models Django Retrieve Data","title":"Prerequisites"},{"location":"course/django/list-view/#django-list-view","text":"List view is used to show the list data to the user. For example: Show list of contacts to the user.","title":"Django list view"},{"location":"course/django/list-view/#django-contact-model","text":"my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"django contact Model"},{"location":"course/django/list-view/#django-list-view-template","text":"tempaltes/list_template.html Below template recieves the contacts from the context and renders the info. < h1 > Contacts </ h1 > {% for contact in contacts %} < div > < p >< strong > Name: </ strong > {{ contact.first_name }} </ p > < p >< strong > Email: </ strong > {{ contact.email }} </ p > </ div > {% endfor %}","title":"django list view template"},{"location":"course/django/list-view/#function-based-list-view","text":"It's easy to write and use. If we have complex functionality then go for generic ListView Let's look at the code my_app/views.py from django.shortcuts import render from my_app.models import Contact def fbv_list_view ( request ): contacts = Contact . objects . all () context = { 'contacts' : contacts } return render ( request , 'list_template.html' , context )","title":"function based list view"},{"location":"course/django/list-view/#class-based-list-view","text":"Django provides generic ListView for list functionality. We can modify it as needed. Let's look at the code below. from django.views.generic.list import ListView from my_app.models import Contact class CBVListView ( ListView ): template_name = 'list_template.html' context_object_name = 'contacts' queryset = Contact . objects . all () It either requires attribute queryset or method get_queryset to return the query results. We can have pagination by using attribute paginate_by In template we can access the query results either with context_object_name value or with name object_list","title":"class based list view"},{"location":"course/django/list-view/#configure-the-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_list_view' , views . fbv_list_view , name = 'fbv_list_view' ), path ( 'cbv_list_view' , views . CBVListView . as_view (), name = 'cbv_list_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_list_view to see the function based list view Access the url http://localhost:8000/my_app/cbv_list_view to see the class based list view","title":"configure the urls"},{"location":"course/django/list-view/#references","text":"https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/#listview https://ccbv.co.uk/projects/Django/4.1/django.views.generic.list/ListView/","title":"References"},{"location":"course/django/models/","text":"Prerequisites \u00b6 Django create app Django first view Django Model \u00b6 A Django model is a ORM representation of database table. Model communicates with the database and returns the data in the form of python objects. Create django model - Contact \u00b6 use the code from Django create app open the file my_app/models.py and update the code as below. my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" Create model migrations \u00b6 To create database migrations for the table run command python manage.py makemigrations my_app -n \"contact_table\" where my_app is the app name. It will create the migration file my_app/migrations/0001_contact_table.py . The migration file looks like below. my_app/migrations/0001_contact_table.py from django.db import migrations , models class Migration ( migrations . Migration ): initial = True dependencies = [] operations = [ migrations . CreateModel ( name = \"Contact\" , fields = [ ( \"id\" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = \"ID\" , ), ), ( \"first_name\" , models . CharField ( max_length = 30 )), ( \"last_name\" , models . CharField ( max_length = 30 )), ( \"email\" , models . EmailField ( max_length = 255 )), ( \"phone\" , models . CharField ( max_length = 10 , null = True )), ], options = { \"db_table\" : \"contact\" , }, ), ] By default, django create a primary key with column id and which is auto incremented, unless we specify a foreign key. Get SQL from django migration \u00b6 Django management command also provides a way to see the SQL before applying the migration. To see the SQL of the migration, run command python manage.py sqlmigrate my_app 0001_contact_table where my_app is app name and 0001_contact_table is migration name. Once we run the command it shows the SQL as below. BEGIN ; -- -- Create model Contact -- CREATE TABLE \"contact\" ( \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT , \"first_name\" varchar ( 30 ) NOT NULL , \"last_name\" varchar ( 30 ) NOT NULL , \"email\" varchar ( 255 ) NOT NULL , \"phone\" varchar ( 10 ) NULL ); COMMIT ; Check for unapplied migrations \u00b6 When we run the development server with command python manage.py runserver django displays the unapplied migrations like in the below image. The other way is to use the command python manage.py showmigrations . It will show the apps and their migrations if applied it will check the box otherwise shows the unchecked box to the migration name. Apply unapplied migrations \u00b6 To apply all migrations at once just run command python manage.py migrate To apply a migrations related a sinle app then run command python manage.py migrate my_app To apply a specific migration of an app then run command python manage.py migrate my_app 0001_contact_table For now, just apply all migrations at once. Note: my_app -> app name, 0001_contact_table is migration name Check if table is created \u00b6 By default, the django is configured to use sqlite3 database. Install the free sqlite db viewer from https://sqlitebrowser.org/dl/ Open the db.sqlite3 file with sqlite db viewer then you will be able see something like below image. Can also be checked from django shell Run the command python manage.py shell Import the model from my_app.models import Contact Create a contact Contact.objects.create(first_name=\"John\", last_name=\"D\", email=\"john@example.com\") It will create contact in the database. References: \u00b6 https://docs.djangoproject.com/en/dev/topics/db/models/ https://docs.djangoproject.com/en/dev/ref/django-admin/#makemigrations","title":"Django models"},{"location":"course/django/models/#prerequisites","text":"Django create app Django first view","title":"Prerequisites"},{"location":"course/django/models/#django-model","text":"A Django model is a ORM representation of database table. Model communicates with the database and returns the data in the form of python objects.","title":"Django Model"},{"location":"course/django/models/#create-django-model-contact","text":"use the code from Django create app open the file my_app/models.py and update the code as below. my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"Create django model - Contact"},{"location":"course/django/models/#create-model-migrations","text":"To create database migrations for the table run command python manage.py makemigrations my_app -n \"contact_table\" where my_app is the app name. It will create the migration file my_app/migrations/0001_contact_table.py . The migration file looks like below. my_app/migrations/0001_contact_table.py from django.db import migrations , models class Migration ( migrations . Migration ): initial = True dependencies = [] operations = [ migrations . CreateModel ( name = \"Contact\" , fields = [ ( \"id\" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = \"ID\" , ), ), ( \"first_name\" , models . CharField ( max_length = 30 )), ( \"last_name\" , models . CharField ( max_length = 30 )), ( \"email\" , models . EmailField ( max_length = 255 )), ( \"phone\" , models . CharField ( max_length = 10 , null = True )), ], options = { \"db_table\" : \"contact\" , }, ), ] By default, django create a primary key with column id and which is auto incremented, unless we specify a foreign key.","title":"Create model migrations"},{"location":"course/django/models/#get-sql-from-django-migration","text":"Django management command also provides a way to see the SQL before applying the migration. To see the SQL of the migration, run command python manage.py sqlmigrate my_app 0001_contact_table where my_app is app name and 0001_contact_table is migration name. Once we run the command it shows the SQL as below. BEGIN ; -- -- Create model Contact -- CREATE TABLE \"contact\" ( \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT , \"first_name\" varchar ( 30 ) NOT NULL , \"last_name\" varchar ( 30 ) NOT NULL , \"email\" varchar ( 255 ) NOT NULL , \"phone\" varchar ( 10 ) NULL ); COMMIT ;","title":"Get SQL from django migration"},{"location":"course/django/models/#check-for-unapplied-migrations","text":"When we run the development server with command python manage.py runserver django displays the unapplied migrations like in the below image. The other way is to use the command python manage.py showmigrations . It will show the apps and their migrations if applied it will check the box otherwise shows the unchecked box to the migration name.","title":"Check for unapplied migrations"},{"location":"course/django/models/#apply-unapplied-migrations","text":"To apply all migrations at once just run command python manage.py migrate To apply a migrations related a sinle app then run command python manage.py migrate my_app To apply a specific migration of an app then run command python manage.py migrate my_app 0001_contact_table For now, just apply all migrations at once. Note: my_app -> app name, 0001_contact_table is migration name","title":"Apply unapplied migrations"},{"location":"course/django/models/#check-if-table-is-created","text":"By default, the django is configured to use sqlite3 database. Install the free sqlite db viewer from https://sqlitebrowser.org/dl/ Open the db.sqlite3 file with sqlite db viewer then you will be able see something like below image. Can also be checked from django shell Run the command python manage.py shell Import the model from my_app.models import Contact Create a contact Contact.objects.create(first_name=\"John\", last_name=\"D\", email=\"john@example.com\") It will create contact in the database.","title":"Check if table is created"},{"location":"course/django/models/#references","text":"https://docs.djangoproject.com/en/dev/topics/db/models/ https://docs.djangoproject.com/en/dev/ref/django-admin/#makemigrations","title":"References:"},{"location":"course/django/mtv-architecture/","text":"Django implements the MTV architecture to sperate the presentation, business and database layers to improve the code readability and maintainability. what is MVC architecture? \u00b6 MVC - Model View Controller It is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes a separation between the software's business logic and display. This \"separation of concerns\" provides for a better division of labor and improved maintenance. parts of the MVC \u00b6 Model : Manages data and business logic. View : Handles layout and display. Controller : Routes commands to the model and view parts. Model \u00b6 The model component stores data and its related logic. It represents data that is being transferred between controller components or any other related business logic. It manipulates data and sends back to the database or uses it to render the same data. Example: Database queries, core app logic View \u00b6 A View is that part of the application that represents the presentation of data. Views are created by the data collected from the model data. A view requests the model to give information so that it presents the output presentation to the user. The view also represents the data from charts, diagrams, and tables. Example: HTML rendering based on the model data Controller \u00b6 The Controller is that part of the application that handles the user interaction. Example: Routing the urls, processing request Django - MTV \u00b6 Django also follows the MVC pattern but it just used different terminology. M - Model T - Template (i.e View) V - View (i.e Controller)","title":"MTV architecture"},{"location":"course/django/mtv-architecture/#what-is-mvc-architecture","text":"MVC - Model View Controller It is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes a separation between the software's business logic and display. This \"separation of concerns\" provides for a better division of labor and improved maintenance.","title":"what is MVC architecture?"},{"location":"course/django/mtv-architecture/#parts-of-the-mvc","text":"Model : Manages data and business logic. View : Handles layout and display. Controller : Routes commands to the model and view parts.","title":"parts of the MVC"},{"location":"course/django/mtv-architecture/#model","text":"The model component stores data and its related logic. It represents data that is being transferred between controller components or any other related business logic. It manipulates data and sends back to the database or uses it to render the same data. Example: Database queries, core app logic","title":"Model"},{"location":"course/django/mtv-architecture/#view","text":"A View is that part of the application that represents the presentation of data. Views are created by the data collected from the model data. A view requests the model to give information so that it presents the output presentation to the user. The view also represents the data from charts, diagrams, and tables. Example: HTML rendering based on the model data","title":"View"},{"location":"course/django/mtv-architecture/#controller","text":"The Controller is that part of the application that handles the user interaction. Example: Routing the urls, processing request","title":"Controller"},{"location":"course/django/mtv-architecture/#django-mtv","text":"Django also follows the MVC pattern but it just used different terminology. M - Model T - Template (i.e View) V - View (i.e Controller)","title":"Django - MTV"},{"location":"course/django/project-structure/","text":"pre-requisites \u00b6 Setup dev environment Create django project \u00b6 Run the below command to create new django project django-admin startproject my_project The project structure looks like below. . \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py project structure - details \u00b6 manage.py used to execute management commands. Try python manage.py --help to see available commands. my_project/ - contains project config files __init__.py - python package initializer asgi.py - Asynchronous Server Gateway Interface settings.py - It contains the project configuration urls.py - root url config of the django app wsgi.py - Web Server Gateway Interface","title":"Project structure"},{"location":"course/django/project-structure/#pre-requisites","text":"Setup dev environment","title":"pre-requisites"},{"location":"course/django/project-structure/#create-django-project","text":"Run the below command to create new django project django-admin startproject my_project The project structure looks like below. . \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py","title":"Create django project"},{"location":"course/django/project-structure/#project-structure-details","text":"manage.py used to execute management commands. Try python manage.py --help to see available commands. my_project/ - contains project config files __init__.py - python package initializer asgi.py - Asynchronous Server Gateway Interface settings.py - It contains the project configuration urls.py - root url config of the django app wsgi.py - Web Server Gateway Interface","title":"project structure - details"},{"location":"course/django/request-response-lifecycle/","text":"Let's start understanding the request-response lifecycle of a Django application. Every web application uses HTTP/HTTPS protocol. In HTTP/HTTPS protocol client sends a request to the server and server sends the response back to the client. It's the basic principle of HTTP protocol. While setting up the django application in the server we need a webserver and wsgi server. Webserver helps us in serving static files/content. If we did not use the webserver to serve static files then it has to served by WSGI server which results in more number of requests to the server. So, gradually it slow down the application performance. Web server balances the requests load on the server. So, it's highly recommended to use the webserver. A client can be defined as a piece of software which can send a request by following the HTTP/HTTPS protocol. In general we consider client as a Web Browser. While deploying the django application on the server we use one of the combinations of a \"Nginx, uWSGI and Django\" or \"Nginx, gunicorn and Django\" or \"Apache, mod_wsgi and Nginx\". As of now, we will discuss the deployment process but we discuss about request-response lifecycle of Django application. We will be discussing on when a request comes in how it can be processed and how the response will be created and sent back to the client. When a client sends a request to the server it first passed to the webserver. Webserver contains the configuration rules to dispatch the request to the WSGI server or served by itself. WSGI server pass the request to the Django application. Django has the following layers in dealing with request-response lifecycle of a Django application. Layers of Django Application \u00b6 Request Middlewares URL Router or URL Dispatcher Views Context Processors Template Renderers Response Middlewares Request Middlewares \u00b6 Whenever the request comes in, it is handled by the Request middlewares. We can have multiple middlewares. we can find it in project settings(settings.py). Django request middlewares follows the order while processing the request. Suppose if we have request middlewares in the order A , B , C then the request first processed by the middleware A and then B and then C . Django comes up with bunch of default middlewares. We can also write our own or custom middlewares. URL Dispatcher \u00b6 After request processed by the middlewares it will be submitted to the URL Router or URL dispatcher. URL Router will take the request from the request middleware and it takes the URL Path from the request . Based on the url path URL router will tries to match the request path with the available URL patterns. These URL patterns are in the form of regular expressions. After matching the URL path with available URL patterns the request will be submitted to the View which is associated with the URL. Views \u00b6 Views processes the business logic using request and request data(data sent in GET, POST, etc). After processing the request in the view the request is sent context processors Context Processors \u00b6 Request context processors adds the additional context data as defined. The context used by renderers to render the template to generate the HTTP response. Template Renderers \u00b6 Template renderers uses the context generates the response. The response content can be xml , html , json , etc. Response Middlewares \u00b6 Again the request will send back to the Response middlewares to process it. Response middlewares will process the request and adds or modifies the header information/body information before sending it back to the client(i.e Browser). Client or Browser recieves the response and shows it to the user. References: \u00b6 https://docs.djangoproject.com/en/dev/topics/http/middleware/ https://docs.djangoproject.com/en/dev/ref/request-response/","title":"Request response lifecycle"},{"location":"course/django/request-response-lifecycle/#layers-of-django-application","text":"Request Middlewares URL Router or URL Dispatcher Views Context Processors Template Renderers Response Middlewares","title":"Layers of Django Application"},{"location":"course/django/request-response-lifecycle/#request-middlewares","text":"Whenever the request comes in, it is handled by the Request middlewares. We can have multiple middlewares. we can find it in project settings(settings.py). Django request middlewares follows the order while processing the request. Suppose if we have request middlewares in the order A , B , C then the request first processed by the middleware A and then B and then C . Django comes up with bunch of default middlewares. We can also write our own or custom middlewares.","title":"Request Middlewares"},{"location":"course/django/request-response-lifecycle/#url-dispatcher","text":"After request processed by the middlewares it will be submitted to the URL Router or URL dispatcher. URL Router will take the request from the request middleware and it takes the URL Path from the request . Based on the url path URL router will tries to match the request path with the available URL patterns. These URL patterns are in the form of regular expressions. After matching the URL path with available URL patterns the request will be submitted to the View which is associated with the URL.","title":"URL Dispatcher"},{"location":"course/django/request-response-lifecycle/#views","text":"Views processes the business logic using request and request data(data sent in GET, POST, etc). After processing the request in the view the request is sent context processors","title":"Views"},{"location":"course/django/request-response-lifecycle/#context-processors","text":"Request context processors adds the additional context data as defined. The context used by renderers to render the template to generate the HTTP response.","title":"Context Processors"},{"location":"course/django/request-response-lifecycle/#template-renderers","text":"Template renderers uses the context generates the response. The response content can be xml , html , json , etc.","title":"Template Renderers"},{"location":"course/django/request-response-lifecycle/#response-middlewares","text":"Again the request will send back to the Response middlewares to process it. Response middlewares will process the request and adds or modifies the header information/body information before sending it back to the client(i.e Browser). Client or Browser recieves the response and shows it to the user.","title":"Response Middlewares"},{"location":"course/django/request-response-lifecycle/#references","text":"https://docs.djangoproject.com/en/dev/topics/http/middleware/ https://docs.djangoproject.com/en/dev/ref/request-response/","title":"References:"},{"location":"course/django/retrieve-data/","text":"Prerequisites \u00b6 Django Models Django Insert Data Django shell \u00b6 Run the command python manage.py shell open the django shell. Write django ORM queries to insert data into the database table. Django Model - Contact \u00b6 We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" insert the data \u00b6 Let's insert some data which will help in understanding the retrieve queries. from my_app.models import Contact contacts = [ { \"first_name\" : \"Johan\" , \"last_name\" : \"K\" , \"email\" : \"johan@example.com\" }, { \"first_name\" : \"Johanan\" , \"last_name\" : \"M\" , \"email\" : \"johanan@example.com\" }, { \"first_name\" : \"Joharr\" , \"last_name\" : \"K\" , \"email\" : \"joharr@example.com\" }, { \"first_name\" : \"Mani\" , \"last_name\" : \"M\" , \"email\" : \"mani@example.com\" }, { \"first_name\" : \"Rich\" , \"last_name\" : \"B\" , \"email\" : \"rich@example.com\" }, { \"first_name\" : \"Ammulu\" , \"last_name\" : \"D\" , \"email\" : \"ammulu@example.com\" }, ] objects = [ Contact ( ** d ) for d in contacts ] results = Contact . objects . bulk_create ( objects ) Retrieve all records - all() \u00b6 use method all() on django ORM. Look at the below query from my_app.models import Contact contacts = Contact . objects . all () print ( contacts ) # output: <QuerySet [<Contact: Contact object (1)>, <Contact: Contact object (2)>, <Contact: Contact object (3)>, <Contact: Contact object (4)>, <Contact: Contact object (5)>, <Contact: Contact object (6)>, <Contact: Contact object (7)>, <Contact: Contact object (8)>, <Contact: Contact object (9)>, <Contact: Contact object (10)>, <Contact: Contact object (11)>, <Contact: Contact object (12)>]> To get SQL from the django orm query just use query attribute like below. from my_app.models import Contact contacts = Contact . objects . all () print ( contacts . query ) Above code outputs below SQL SELECT \"contact\" . \"id\" , \"contact\" . \"first_name\" , \"contact\" . \"last_name\" , \"contact\" . \"email\" , \"contact\" . \"phone\" FROM \"contact\" Retrieve only one record - get() \u00b6 use get() method on django ORM to get only one record. Let's retrieve the record whose email is mani@example.com from my_app.models import Contact mani = Contact . objects . get ( email = 'mani@example.com' ) print ( mani ) # output: Contact object (10) Above, ORM query is equivalent to the below SQL SELECT \"contact\" . \"id\" , \"contact\" . \"first_name\" , \"contact\" . \"last_name\" , \"contact\" . \"email\" , \"contact\" . \"phone\" FROM \"contact\" WHERE email = 'mani@example.com' Retrieve matching records - filter() \u00b6 Filter records whose name starts with \"Johan\" from my_app.models import Contact contacts = Contact . objects . filter ( first_name__startswith = 'Johan' ) print ( contacts ) # output: <QuerySet [<Contact: Contact object (7)>, <Contact: Contact object (8)>]> Count matching records - count() \u00b6 use count() method to count the matching records. from my_app.models import Contact count = Contact . objects . filter ( first_name__startswith = 'Johan' ) . count () print ( count ) # output: 2 Iterate through ORM records \u00b6 we can loop through the retrieved query results. These also called as queryset results. from my_app.models import Contact contacts = Contact . objects . filter ( first_name__startswith = 'Johan' ) for contact in contacts : print ( contact . email ) # output: # johan@example.com # johanan@example.com Note: Django queries are very powerfull. We can do more by writing less code. References \u00b6 https://docs.djangoproject.com/en/dev/topics/db/queries/","title":"Django retrieve data"},{"location":"course/django/retrieve-data/#prerequisites","text":"Django Models Django Insert Data","title":"Prerequisites"},{"location":"course/django/retrieve-data/#django-shell","text":"Run the command python manage.py shell open the django shell. Write django ORM queries to insert data into the database table.","title":"Django shell"},{"location":"course/django/retrieve-data/#django-model-contact","text":"We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"Django Model - Contact"},{"location":"course/django/retrieve-data/#insert-the-data","text":"Let's insert some data which will help in understanding the retrieve queries. from my_app.models import Contact contacts = [ { \"first_name\" : \"Johan\" , \"last_name\" : \"K\" , \"email\" : \"johan@example.com\" }, { \"first_name\" : \"Johanan\" , \"last_name\" : \"M\" , \"email\" : \"johanan@example.com\" }, { \"first_name\" : \"Joharr\" , \"last_name\" : \"K\" , \"email\" : \"joharr@example.com\" }, { \"first_name\" : \"Mani\" , \"last_name\" : \"M\" , \"email\" : \"mani@example.com\" }, { \"first_name\" : \"Rich\" , \"last_name\" : \"B\" , \"email\" : \"rich@example.com\" }, { \"first_name\" : \"Ammulu\" , \"last_name\" : \"D\" , \"email\" : \"ammulu@example.com\" }, ] objects = [ Contact ( ** d ) for d in contacts ] results = Contact . objects . bulk_create ( objects )","title":"insert the data"},{"location":"course/django/retrieve-data/#retrieve-all-records-all","text":"use method all() on django ORM. Look at the below query from my_app.models import Contact contacts = Contact . objects . all () print ( contacts ) # output: <QuerySet [<Contact: Contact object (1)>, <Contact: Contact object (2)>, <Contact: Contact object (3)>, <Contact: Contact object (4)>, <Contact: Contact object (5)>, <Contact: Contact object (6)>, <Contact: Contact object (7)>, <Contact: Contact object (8)>, <Contact: Contact object (9)>, <Contact: Contact object (10)>, <Contact: Contact object (11)>, <Contact: Contact object (12)>]> To get SQL from the django orm query just use query attribute like below. from my_app.models import Contact contacts = Contact . objects . all () print ( contacts . query ) Above code outputs below SQL SELECT \"contact\" . \"id\" , \"contact\" . \"first_name\" , \"contact\" . \"last_name\" , \"contact\" . \"email\" , \"contact\" . \"phone\" FROM \"contact\"","title":"Retrieve all records - all()"},{"location":"course/django/retrieve-data/#retrieve-only-one-record-get","text":"use get() method on django ORM to get only one record. Let's retrieve the record whose email is mani@example.com from my_app.models import Contact mani = Contact . objects . get ( email = 'mani@example.com' ) print ( mani ) # output: Contact object (10) Above, ORM query is equivalent to the below SQL SELECT \"contact\" . \"id\" , \"contact\" . \"first_name\" , \"contact\" . \"last_name\" , \"contact\" . \"email\" , \"contact\" . \"phone\" FROM \"contact\" WHERE email = 'mani@example.com'","title":"Retrieve only one record - get()"},{"location":"course/django/retrieve-data/#retrieve-matching-records-filter","text":"Filter records whose name starts with \"Johan\" from my_app.models import Contact contacts = Contact . objects . filter ( first_name__startswith = 'Johan' ) print ( contacts ) # output: <QuerySet [<Contact: Contact object (7)>, <Contact: Contact object (8)>]>","title":"Retrieve matching records - filter()"},{"location":"course/django/retrieve-data/#count-matching-records-count","text":"use count() method to count the matching records. from my_app.models import Contact count = Contact . objects . filter ( first_name__startswith = 'Johan' ) . count () print ( count ) # output: 2","title":"Count matching records - count()"},{"location":"course/django/retrieve-data/#iterate-through-orm-records","text":"we can loop through the retrieved query results. These also called as queryset results. from my_app.models import Contact contacts = Contact . objects . filter ( first_name__startswith = 'Johan' ) for contact in contacts : print ( contact . email ) # output: # johan@example.com # johanan@example.com Note: Django queries are very powerfull. We can do more by writing less code.","title":"Iterate through ORM records"},{"location":"course/django/retrieve-data/#references","text":"https://docs.djangoproject.com/en/dev/topics/db/queries/","title":"References"},{"location":"course/django/setup-dev-environment/","text":"prerequisites \u00b6 Python pip install pipenv \u00b6 pipenv is the new officially recommended packaging tool for Python pipenv uses files Pipfile and Pipfile.lock for managing the application dependencies. it works similar to bundler, composer, npm, cargo, yarn, etc. install pipenv with below command pip install --user pipenv pipenv install - python \u00b6 create a directory with name \"django_tutorial\" with command mkdir django_tutorial change directory to cd django_tutorial install the latest or required python version with below command pipenv install -- python 3.10 above command will creates two files Pipfile - Pipfiles contain information for the dependencies of the project Pipfile.lock - declares all dependencies (and sub-dependencies) of the project .venv/ - virtualenv for the project activate pipenv \u00b6 activate the virtualenv with command pipenv shell install django package \u00b6 To install django just run command pipenv install django Specify the django version if required After the command execution, it updates the Pipfile with django package dependency. create django project \u00b6 Run the command django-admin startproject my_project It creates the django project and the current directory looks like below. . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u2514\u2500\u2500 my_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py run development server \u00b6 Change directory with command cd my_project run the development server with command python manage.py runserver Open the web browser i.e chrome and access page http://127.0.0.1:8000/ to see the below screen.","title":"Setup dev environment"},{"location":"course/django/setup-dev-environment/#prerequisites","text":"Python pip","title":"prerequisites"},{"location":"course/django/setup-dev-environment/#install-pipenv","text":"pipenv is the new officially recommended packaging tool for Python pipenv uses files Pipfile and Pipfile.lock for managing the application dependencies. it works similar to bundler, composer, npm, cargo, yarn, etc. install pipenv with below command pip install --user pipenv","title":"install pipenv"},{"location":"course/django/setup-dev-environment/#pipenv-install-python","text":"create a directory with name \"django_tutorial\" with command mkdir django_tutorial change directory to cd django_tutorial install the latest or required python version with below command pipenv install -- python 3.10 above command will creates two files Pipfile - Pipfiles contain information for the dependencies of the project Pipfile.lock - declares all dependencies (and sub-dependencies) of the project .venv/ - virtualenv for the project","title":"pipenv install - python"},{"location":"course/django/setup-dev-environment/#activate-pipenv","text":"activate the virtualenv with command pipenv shell","title":"activate pipenv"},{"location":"course/django/setup-dev-environment/#install-django-package","text":"To install django just run command pipenv install django Specify the django version if required After the command execution, it updates the Pipfile with django package dependency.","title":"install django package"},{"location":"course/django/setup-dev-environment/#create-django-project","text":"Run the command django-admin startproject my_project It creates the django project and the current directory looks like below. . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u2514\u2500\u2500 my_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 my_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py","title":"create django project"},{"location":"course/django/setup-dev-environment/#run-development-server","text":"Change directory with command cd my_project run the development server with command python manage.py runserver Open the web browser i.e chrome and access page http://127.0.0.1:8000/ to see the below screen.","title":"run development server"},{"location":"course/django/template-view/","text":"Prerequisites \u00b6 Create django app Django first view Django templates template view \u00b6 It's simple view to display simple html page with/without using the context. we will be using the code from Create django app create a template templates/my_template.html we will be using the below template in the view templates/my_template.html <!DOCTYPE html> < html lang = \"en\" > < head > < title > {{ title }} </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\" ></ script > < script src = \"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > < div class = \"jumbotron text-center\" > < h1 > {{title}} </ h1 > < p > Resize this responsive page to see the effect! </ p > </ div > </ body > </ html > function based template view \u00b6 open my_app/views.py and add below code to it. my_app/views.py from django.shortcuts import render def my_template_view ( request ): context = { \"title\" : \"Simple template view\" } return render ( request , \"my_template.html\" , context ) class based template view \u00b6 Django comes with generic reusable views. Lets use TemplateVeiew from django.views.generic import TemplateView # ... class MyTemplateView ( TemplateView ): template_name = \"my_template.html\" def get_context_data ( self ): context = { \"title\" : \"Simple template view\" } return context configure urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_template_view' , views . my_template_view , name = 'my_template_view' ), path ( 'cbv_template_view' , views . MyTemplateView . as_view (), name = 'my_template_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_template_view to see the function based template view Access the url http://localhost:8000/my_app/cbv_template_view to see the class based template view","title":"Django template view"},{"location":"course/django/template-view/#prerequisites","text":"Create django app Django first view Django templates","title":"Prerequisites"},{"location":"course/django/template-view/#template-view","text":"It's simple view to display simple html page with/without using the context. we will be using the code from Create django app create a template templates/my_template.html we will be using the below template in the view templates/my_template.html <!DOCTYPE html> < html lang = \"en\" > < head > < title > {{ title }} </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\" ></ script > < script src = \"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > < div class = \"jumbotron text-center\" > < h1 > {{title}} </ h1 > < p > Resize this responsive page to see the effect! </ p > </ div > </ body > </ html >","title":"template view"},{"location":"course/django/template-view/#function-based-template-view","text":"open my_app/views.py and add below code to it. my_app/views.py from django.shortcuts import render def my_template_view ( request ): context = { \"title\" : \"Simple template view\" } return render ( request , \"my_template.html\" , context )","title":"function based template view"},{"location":"course/django/template-view/#class-based-template-view","text":"Django comes with generic reusable views. Lets use TemplateVeiew from django.views.generic import TemplateView # ... class MyTemplateView ( TemplateView ): template_name = \"my_template.html\" def get_context_data ( self ): context = { \"title\" : \"Simple template view\" } return context","title":"class based template view"},{"location":"course/django/template-view/#configure-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_template_view' , views . my_template_view , name = 'my_template_view' ), path ( 'cbv_template_view' , views . MyTemplateView . as_view (), name = 'my_template_view' ), # ... ] Access the url http://localhost:8000/my_app/fbv_template_view to see the function based template view Access the url http://localhost:8000/my_app/cbv_template_view to see the class based template view","title":"configure urls"},{"location":"course/django/templates/","text":"Prerequisites \u00b6 Django first view Django template \u00b6 Django template is a text document or a Python string marked-up using the Django template language. Django separates the views and templates for better readability and maintainability views : responsible for handling the request and generating the context for the template templates : templates uses the context generated by the views and creates the HTTP response Configure template directory \u00b6 Create a directory named templates at project level. The project structure should look like below. . \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 my_app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 my_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates open file my_project/settings.py and update the TEMPLATES setting as below. # ..... TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , # include template directories here 'DIRS' : [ 'templates' ,], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] # ..... use template in django view \u00b6 Create the template file templates/index.html in the project root directory. Let's use the code from Django first view and modify it as below. my_app/views.py from django.shortcuts import render def first_view ( request ): template = \"index.html\" context = { \"title\" : \"Introduction\" , \"name\" : \"Shiva\" , \"profession\" : \"Software Developer\" , \"country\" : \"India\" } return render ( request , template , context ) render is function provided by django which takes the request , template , context and returns the HTTP response. Let's look at the template code. tempaltes/index.html < html > < head > < title > {{ title }} </ title > </ head > < body > < table > < tbody > < tr > < td > Name </ td >< td > {{ name }} </ td > </ tr > < tr > < td > Profession </ td >< td > {{ profession }} </ td > </ tr > < tr > < td > Country </ td >< td > {{ country }} </ td > </ tr > </ tbody > </ table > </ body > </ html > Now, access the url http://localhost:8000/my_app/ to see the response. Django has a template syntax to work with the templates. References: \u00b6 https://docs.djangoproject.com/en/dev/intro/tutorial03/#write-views-that-actually-do-something https://docs.djangoproject.com/en/dev/topics/templates/","title":"Django templates"},{"location":"course/django/templates/#prerequisites","text":"Django first view","title":"Prerequisites"},{"location":"course/django/templates/#django-template","text":"Django template is a text document or a Python string marked-up using the Django template language. Django separates the views and templates for better readability and maintainability views : responsible for handling the request and generating the context for the template templates : templates uses the context generated by the views and creates the HTTP response","title":"Django template"},{"location":"course/django/templates/#configure-template-directory","text":"Create a directory named templates at project level. The project structure should look like below. . \u251c\u2500\u2500 db.sqlite3 \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 my_app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 my_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates open file my_project/settings.py and update the TEMPLATES setting as below. # ..... TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , # include template directories here 'DIRS' : [ 'templates' ,], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] # .....","title":"Configure template directory"},{"location":"course/django/templates/#use-template-in-django-view","text":"Create the template file templates/index.html in the project root directory. Let's use the code from Django first view and modify it as below. my_app/views.py from django.shortcuts import render def first_view ( request ): template = \"index.html\" context = { \"title\" : \"Introduction\" , \"name\" : \"Shiva\" , \"profession\" : \"Software Developer\" , \"country\" : \"India\" } return render ( request , template , context ) render is function provided by django which takes the request , template , context and returns the HTTP response. Let's look at the template code. tempaltes/index.html < html > < head > < title > {{ title }} </ title > </ head > < body > < table > < tbody > < tr > < td > Name </ td >< td > {{ name }} </ td > </ tr > < tr > < td > Profession </ td >< td > {{ profession }} </ td > </ tr > < tr > < td > Country </ td >< td > {{ country }} </ td > </ tr > </ tbody > </ table > </ body > </ html > Now, access the url http://localhost:8000/my_app/ to see the response. Django has a template syntax to work with the templates.","title":"use template in django view"},{"location":"course/django/templates/#references","text":"https://docs.djangoproject.com/en/dev/intro/tutorial03/#write-views-that-actually-do-something https://docs.djangoproject.com/en/dev/topics/templates/","title":"References:"},{"location":"course/django/update-data/","text":"Prerequisites \u00b6 Django Models Django Insert Data Django Retrieve Data Django shell \u00b6 Run the command python manage.py shell open the django shell. Django Model - Contact \u00b6 We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" Add few records to database \u00b6 from my_app.models import Contact contacts = [ { \"first_name\" : \"Johan\" , \"last_name\" : \"K\" , \"email\" : \"johan@example.com\" }, { \"first_name\" : \"Johanan\" , \"last_name\" : \"M\" , \"email\" : \"johanan@example.com\" }, { \"first_name\" : \"Joharr\" , \"last_name\" : \"K\" , \"email\" : \"joharr@example.com\" }, { \"first_name\" : \"Mani\" , \"last_name\" : \"M\" , \"email\" : \"mani@example.com\" }, ] objects = [ Contact ( ** d ) for d in contacts ] results = Contact . objects . bulk_create ( objects ) update single record - save() \u00b6 Retrieve the record and make some changes to the fields and call save() method to udpated the record. Let's look at an example. from my_app.models import Contact obj = Contact . objects . get ( email = 'johan@example.com' ) obj . first_name = \"Jerry\" obj . save () update multiple records - bulk_update() \u00b6 Retrive individual records and update at once. use bulk_update() method to update it. from my_app.models import Contact obj1 = Contact . objects . get ( email = 'johan@example.com' ) obj1 . first_name = \"Jerry\" obj2 = Contact . objects . get ( email = 'mani@example.com' ) obj2 . first_name = \"Bingo\" updated_count = Contact . objects . bulk_update ([ obj1 , obj2 ], [ 'first_name' ]) print ( updated_count ) # output: 2 update multiple records - update() \u00b6 Update multiple records without retrieving using update() from my_app.models import Contact update_count = Contact . objects . filter ( email = 'mani@example.com' ) . update ( last_name = \"MD\" ) print ( updated_count ) # output: 2 References \u00b6 https://docs.djangoproject.com/en/dev/ref/models/querysets/","title":"Django update data"},{"location":"course/django/update-data/#prerequisites","text":"Django Models Django Insert Data Django Retrieve Data","title":"Prerequisites"},{"location":"course/django/update-data/#django-shell","text":"Run the command python manage.py shell open the django shell.","title":"Django shell"},{"location":"course/django/update-data/#django-model-contact","text":"We will be using model Contact from Django Models . my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"Django Model - Contact"},{"location":"course/django/update-data/#add-few-records-to-database","text":"from my_app.models import Contact contacts = [ { \"first_name\" : \"Johan\" , \"last_name\" : \"K\" , \"email\" : \"johan@example.com\" }, { \"first_name\" : \"Johanan\" , \"last_name\" : \"M\" , \"email\" : \"johanan@example.com\" }, { \"first_name\" : \"Joharr\" , \"last_name\" : \"K\" , \"email\" : \"joharr@example.com\" }, { \"first_name\" : \"Mani\" , \"last_name\" : \"M\" , \"email\" : \"mani@example.com\" }, ] objects = [ Contact ( ** d ) for d in contacts ] results = Contact . objects . bulk_create ( objects )","title":"Add few records to database"},{"location":"course/django/update-data/#update-single-record-save","text":"Retrieve the record and make some changes to the fields and call save() method to udpated the record. Let's look at an example. from my_app.models import Contact obj = Contact . objects . get ( email = 'johan@example.com' ) obj . first_name = \"Jerry\" obj . save ()","title":"update single record - save()"},{"location":"course/django/update-data/#update-multiple-records-bulk_update","text":"Retrive individual records and update at once. use bulk_update() method to update it. from my_app.models import Contact obj1 = Contact . objects . get ( email = 'johan@example.com' ) obj1 . first_name = \"Jerry\" obj2 = Contact . objects . get ( email = 'mani@example.com' ) obj2 . first_name = \"Bingo\" updated_count = Contact . objects . bulk_update ([ obj1 , obj2 ], [ 'first_name' ]) print ( updated_count ) # output: 2","title":"update multiple records - bulk_update()"},{"location":"course/django/update-data/#update-multiple-records-update","text":"Update multiple records without retrieving using update() from my_app.models import Contact update_count = Contact . objects . filter ( email = 'mani@example.com' ) . update ( last_name = \"MD\" ) print ( updated_count ) # output: 2","title":"update multiple records - update()"},{"location":"course/django/update-data/#references","text":"https://docs.djangoproject.com/en/dev/ref/models/querysets/","title":"References"},{"location":"course/django/update-view/","text":"Prerequisites \u00b6 Django Retrieve Data Django Update Data Django template view Django Update View \u00b6 Django update view is used to update a single record of the database table. It shows an editable form to the user with the current row data. User can make the changes to the form and on submit it then it will save the data to the database table. Contact Model \u00b6 my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\" form template \u00b6 templates/form_template.py < form action = \"\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_table }} < input type = \"submit\" value = \"submit\" /> </ form > function based update view \u00b6 It's simple function handles both GET and POST requests GET - displays the form to the user. POST - recieves the user submitted info Let's looke at code below. from django.http import HttpResponse from django.shortcuts import render , get_object_or_404 from my_app.models import Contact from my_app.forms import ContactModelForm def fbv_update_view ( request , pk ): obj = get_object_or_404 ( Contact , id = pk ) if request . method . lower () == 'post' : form = ContactModelForm ( request . POST , instance = obj ) if form . is_valid (): form . save () return HttpResponse ( \"<h1>Updated</h1>\" ) else : form = ContactModelForm ( instance = obj ) context = { 'form' : form } return render ( request , 'form_template.html' , context ) get_object_or_404 gets the object from the db if found otherwise throws HTTP 404 error. For GET request render the html template with form ContactModelForm(instance=obj) loads the initial data For POST request validates the form ContactModelForm(request.POST, instance=obj) save the form if it's valid otherwise renders the form template with errors. class based update view \u00b6 Django provides a generic view UpdateView to update the table row. from django.http import HttpResponse from django.views.generic.edit import UpdateView from my_app.models import Contact from my_app.forms import ContactModelForm class CBVUpdateView ( UpdateView ): form_class = ContactModelForm template_name = 'form_template.html' pk_url_kwarg = 'pk' model = Contact def form_valid ( self , form ): form . save () return HttpResponse ( \"<h1>Updated</h1>\" ) Django provides the generic view class UpdateView . It contains the inbuilt funcitonality which we implemented in the function based view. In order to work with UpdateView we need to provider attributes form_class , template_name , pk_url_kwarg and model or methods get_object() or get_queryset() template_name - used to render the template pk_url_kwarg - used to identify the object in the database model or get_object() or get_queryset() - used to get the object using pk_url_kwarg configure the urls \u00b6 open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_update_view/<int:pk>' , views . fbv_update_view , name = 'fbv_update_view' ), path ( 'cbv_update_view/<int:pk>' , views . CBVUpdateView . as_view (), name = 'cbv_update_view' ), # ... ] Open url http://127.0.0.1:8000/my_app/fbv_update_view/1 to update the object using function based update view. Open url http://127.0.0.1:8000/my_app/cbv_update_view/1 to update the object using class based update view. Replace the 1 with any id in the contact table. It throws 404 status code if id does not exist in the table. References \u00b6 https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-editing/#django.views.generic.edit.UpdateView https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/UpdateView/","title":"Django update view"},{"location":"course/django/update-view/#prerequisites","text":"Django Retrieve Data Django Update Data Django template view","title":"Prerequisites"},{"location":"course/django/update-view/#django-update-view","text":"Django update view is used to update a single record of the database table. It shows an editable form to the user with the current row data. User can make the changes to the form and on submit it then it will save the data to the database table.","title":"Django Update View"},{"location":"course/django/update-view/#contact-model","text":"my_app/models.py from django.db import models class Contact ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) email = models . EmailField ( max_length = 255 ) phone = models . CharField ( max_length = 10 , null = True ) class Meta : db_table = \"contact\"","title":"Contact Model"},{"location":"course/django/update-view/#form-template","text":"templates/form_template.py < form action = \"\" method = \"POST\" enctype = \"multipart/form-data\" > {% csrf_token %} {{ form.as_table }} < input type = \"submit\" value = \"submit\" /> </ form >","title":"form template"},{"location":"course/django/update-view/#function-based-update-view","text":"It's simple function handles both GET and POST requests GET - displays the form to the user. POST - recieves the user submitted info Let's looke at code below. from django.http import HttpResponse from django.shortcuts import render , get_object_or_404 from my_app.models import Contact from my_app.forms import ContactModelForm def fbv_update_view ( request , pk ): obj = get_object_or_404 ( Contact , id = pk ) if request . method . lower () == 'post' : form = ContactModelForm ( request . POST , instance = obj ) if form . is_valid (): form . save () return HttpResponse ( \"<h1>Updated</h1>\" ) else : form = ContactModelForm ( instance = obj ) context = { 'form' : form } return render ( request , 'form_template.html' , context ) get_object_or_404 gets the object from the db if found otherwise throws HTTP 404 error. For GET request render the html template with form ContactModelForm(instance=obj) loads the initial data For POST request validates the form ContactModelForm(request.POST, instance=obj) save the form if it's valid otherwise renders the form template with errors.","title":"function based update view"},{"location":"course/django/update-view/#class-based-update-view","text":"Django provides a generic view UpdateView to update the table row. from django.http import HttpResponse from django.views.generic.edit import UpdateView from my_app.models import Contact from my_app.forms import ContactModelForm class CBVUpdateView ( UpdateView ): form_class = ContactModelForm template_name = 'form_template.html' pk_url_kwarg = 'pk' model = Contact def form_valid ( self , form ): form . save () return HttpResponse ( \"<h1>Updated</h1>\" ) Django provides the generic view class UpdateView . It contains the inbuilt funcitonality which we implemented in the function based view. In order to work with UpdateView we need to provider attributes form_class , template_name , pk_url_kwarg and model or methods get_object() or get_queryset() template_name - used to render the template pk_url_kwarg - used to identify the object in the database model or get_object() or get_queryset() - used to get the object using pk_url_kwarg","title":"class based update view"},{"location":"course/django/update-view/#configure-the-urls","text":"open my_app/urls.py and add below code to it. from django.urls import path from my_app import views urlpatterns = [ # ... path ( 'fbv_update_view/<int:pk>' , views . fbv_update_view , name = 'fbv_update_view' ), path ( 'cbv_update_view/<int:pk>' , views . CBVUpdateView . as_view (), name = 'cbv_update_view' ), # ... ] Open url http://127.0.0.1:8000/my_app/fbv_update_view/1 to update the object using function based update view. Open url http://127.0.0.1:8000/my_app/cbv_update_view/1 to update the object using class based update view. Replace the 1 with any id in the contact table. It throws 404 status code if id does not exist in the table.","title":"configure the urls"},{"location":"course/django/update-view/#references","text":"https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-editing/#django.views.generic.edit.UpdateView https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/UpdateView/","title":"References"},{"location":"course/django-rest-framework/","text":"Django REST Framework \u00b6 Why to use Django REST framework ? \u00b6 The Web browsable API is a huge usability win for your developers. Authentication policies including packages for OAuth1a and OAuth2 . Serialization that supports both ORM and non-ORM data sources. Customizable all the way down - just use regular function-based views if you don't need the more powerful features . Extensive documentation, and great community support . Used and trusted by internationally recognized companies including Mozilla , Red Hat , Heroku , and Eventbrite .","title":"Django REST Framework"},{"location":"course/django-rest-framework/#django-rest-framework","text":"","title":"Django REST Framework"},{"location":"course/django-rest-framework/#why-to-use-django-rest-framework","text":"The Web browsable API is a huge usability win for your developers. Authentication policies including packages for OAuth1a and OAuth2 . Serialization that supports both ORM and non-ORM data sources. Customizable all the way down - just use regular function-based views if you don't need the more powerful features . Extensive documentation, and great community support . Used and trusted by internationally recognized companies including Mozilla , Red Hat , Heroku , and Eventbrite .","title":"Why to use Django REST framework ?"},{"location":"course/django-rest-framework/advanced-class-based-views-django-rest-framework/","text":"Advanced Class Based Views In Django Rest Framework \u00b6 Django Rest Framework is super awesome to create an web API very quickly. It provides generic views to implement the common functionality. In the previous section we have discussed about class based views in Django REST . Django REST class based views allows us to create an api endpoint with a single request method type i.e one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", etc. But, advanced generic classbased views allows us to implement the more than a single request method. It means we can implement more than a one functionality in a single api endpoint, like create and list, retrieve and update, retrieve destroy and retrieve, update and destroy. Let's see advanced class based views in Django REST ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView Usage of ListCreateAPIView in DRF: It allows \"GET\", \"POST\" request methods only. \"GET\" request method is is to list all available model instances and \"POST\" request method is to create an instance in the model. It is combination of \"ListAPIView\", \"CreateAPIView\". It is recommended to use when you need both list and create functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list-create/' , views . MovieListCreateView . as_view (), name = 'movie_list_create' ), ] views.py from rest_framework.generics import ListCreateAPIView from .serializers import * class MovieListCreateView ( ListCreateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, send a \"GET\" request to the url \"/movie-list-create/\" (i.e it will be changed based on your url path) then you will see output something like below with HTTP Status code of 200. [ { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] Send a \"POST\" request to the same api endpoint or url with below JSON data { \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, we can see the ouput something like below with HTTP status code 201 { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Usage of RetrieveUpdateAPIView in DRF: It allows \"GET\", \"PUT\" and \"PATCH\" request methods only. \"GET\" request method is to retrieve the specific existing model instancec/resource. \"PUT\" and \"PATCH\" request methods are used to update the existing specific resource. If you want to complete update the existing model instance/resource then use \"PUT\" request method otherwise use \"PATCH\" request method. \"PATCH\" request method is used to update some parts of the existing specific resource. For all these request methods we need to send primary key equivalent url keyword argument in the the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need both retrieve and update functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/retrieve-update/' , views . MovieRetrieveUpdateView . as_view (), name = 'movie_retrieve_update' ), ] views.py from rest_framework.generics import RetrieveUpdateAPIView from .serializers import * class MovieRetrieveUpdateView ( RetrieveUpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, we are ready to test our API. Send a \"GET\" request to url \"/movie/3/retrieve-update/\" then you will see output something like below with HTTP status code 200. Note: \"3\" is primary key of object in the url if may be different for you. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's test \"PUT\" request method to completely update the object/resource. To do that send \"PUT\" request to the same url with below JSON data. { \"title\" : \"Bahubali The Conclusion Updates\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's do partial update to the same resource by sending the \"PATCH\" request to it with below JSON data to the same url. { \"title\" : \"Bahubali The Conclusion\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Usage of RetrieveDestroyAPIView in DRF: \u00b6 it allows \"GET\" and \"DELETE\" request methods only all other methods will result in HTTP status code of 405. \"GET\" request method is to retrieve the existing specific model instance/resource and \"DELETE\" request method is to destroy the existing specific model instance/resource. In both these request types we need to send primary key equivalent url keyword argument in the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need retrieve and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveDestroyView . as_view (), name = 'movie_retrieve_destroy' ), ] views.py from rest_framework.generics import RetrieveDestroyAPIView from .serializers import * class MovieRetrieveDestroyView ( RetrieveDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now it's time to test the above code. In \"RetrieveUpdateAPIView\" we have already seen how to send a GET request so you can simply use the same procedure to test it. To delete the object/resource then send \"DELETE\" request to url \"/movie/3/retrieve-destroy/\" then it will response with status code 204 - No content. Now check the Movie with pk=\"3\" (note: it may be different for you) in the database you will not find it. Because it was deleted in last request. Usage of RetrieveUpdateDestroyAPIView in DRF: \u00b6 It allows 4 requests, \"GET\", \"PUT\", \"PATCH\" and \"DELETE\". It is recommended to use when you need retrieve, update and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveUpdateDestroyView . as_view (), name = 'movie_retrieve_update_destroy' ), ] views.py from rest_framework.generics import RetrieveUpdateDestroyAPIView from .serializers import * class MovieRetrieveUpdateDestroyView ( RetrieveUpdateDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer For testing you can use same procedures that I have mentioned for other api classes above. Please let me know if you have any questions in the below comments. You can find all this code in my github repository ( https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews ).","title":"Advanced class based views in Django Rest Framework"},{"location":"course/django-rest-framework/advanced-class-based-views-django-rest-framework/#advanced-class-based-views-in-django-rest-framework","text":"Django Rest Framework is super awesome to create an web API very quickly. It provides generic views to implement the common functionality. In the previous section we have discussed about class based views in Django REST . Django REST class based views allows us to create an api endpoint with a single request method type i.e one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", etc. But, advanced generic classbased views allows us to implement the more than a single request method. It means we can implement more than a one functionality in a single api endpoint, like create and list, retrieve and update, retrieve destroy and retrieve, update and destroy. Let's see advanced class based views in Django REST ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView Usage of ListCreateAPIView in DRF: It allows \"GET\", \"POST\" request methods only. \"GET\" request method is is to list all available model instances and \"POST\" request method is to create an instance in the model. It is combination of \"ListAPIView\", \"CreateAPIView\". It is recommended to use when you need both list and create functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list-create/' , views . MovieListCreateView . as_view (), name = 'movie_list_create' ), ] views.py from rest_framework.generics import ListCreateAPIView from .serializers import * class MovieListCreateView ( ListCreateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, send a \"GET\" request to the url \"/movie-list-create/\" (i.e it will be changed based on your url path) then you will see output something like below with HTTP Status code of 200. [ { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] Send a \"POST\" request to the same api endpoint or url with below JSON data { \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, we can see the ouput something like below with HTTP status code 201 { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Usage of RetrieveUpdateAPIView in DRF: It allows \"GET\", \"PUT\" and \"PATCH\" request methods only. \"GET\" request method is to retrieve the specific existing model instancec/resource. \"PUT\" and \"PATCH\" request methods are used to update the existing specific resource. If you want to complete update the existing model instance/resource then use \"PUT\" request method otherwise use \"PATCH\" request method. \"PATCH\" request method is used to update some parts of the existing specific resource. For all these request methods we need to send primary key equivalent url keyword argument in the the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need both retrieve and update functionalities in a single API endpoint. Let's do some code to know how to implement it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/retrieve-update/' , views . MovieRetrieveUpdateView . as_view (), name = 'movie_retrieve_update' ), ] views.py from rest_framework.generics import RetrieveUpdateAPIView from .serializers import * class MovieRetrieveUpdateView ( RetrieveUpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, we are ready to test our API. Send a \"GET\" request to url \"/movie/3/retrieve-update/\" then you will see output something like below with HTTP status code 200. Note: \"3\" is primary key of object in the url if may be different for you. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's test \"PUT\" request method to completely update the object/resource. To do that send \"PUT\" request to the same url with below JSON data. { \"title\" : \"Bahubali The Conclusion Updates\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } Let's do partial update to the same resource by sending the \"PATCH\" request to it with below JSON data to the same url. { \"title\" : \"Bahubali The Conclusion\" } Now, you can see output something like below with HTTP status code 200. { \"id\" : 3 , \"title\" : \"Bahubali The Conclusion\" , \"released_on\" : \"2017-04-28\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" }","title":"Advanced Class Based Views In Django Rest Framework"},{"location":"course/django-rest-framework/advanced-class-based-views-django-rest-framework/#usage-of-retrievedestroyapiview-in-drf","text":"it allows \"GET\" and \"DELETE\" request methods only all other methods will result in HTTP status code of 405. \"GET\" request method is to retrieve the existing specific model instance/resource and \"DELETE\" request method is to destroy the existing specific model instance/resource. In both these request types we need to send primary key equivalent url keyword argument in the request so that server can uniquely identify the model instance/resource. The url keyword argument mostly sent as a part of the url. It is recommended to use when you need retrieve and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveDestroyView . as_view (), name = 'movie_retrieve_destroy' ), ] views.py from rest_framework.generics import RetrieveDestroyAPIView from .serializers import * class MovieRetrieveDestroyView ( RetrieveDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now it's time to test the above code. In \"RetrieveUpdateAPIView\" we have already seen how to send a GET request so you can simply use the same procedure to test it. To delete the object/resource then send \"DELETE\" request to url \"/movie/3/retrieve-destroy/\" then it will response with status code 204 - No content. Now check the Movie with pk=\"3\" (note: it may be different for you) in the database you will not find it. Because it was deleted in last request.","title":"Usage of RetrieveDestroyAPIView in DRF:"},{"location":"course/django-rest-framework/advanced-class-based-views-django-rest-framework/#usage-of-retrieveupdatedestroyapiview-in-drf","text":"It allows 4 requests, \"GET\", \"PUT\", \"PATCH\" and \"DELETE\". It is recommended to use when you need retrieve, update and delete functionalities in a single API endpoint. Let's do some code to know how to use it. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie//retrieve-destroy/' , views . MovieRetrieveUpdateDestroyView . as_view (), name = 'movie_retrieve_update_destroy' ), ] views.py from rest_framework.generics import RetrieveUpdateDestroyAPIView from .serializers import * class MovieRetrieveUpdateDestroyView ( RetrieveUpdateDestroyAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer For testing you can use same procedures that I have mentioned for other api classes above. Please let me know if you have any questions in the below comments. You can find all this code in my github repository ( https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews ).","title":"Usage of RetrieveUpdateDestroyAPIView in DRF:"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/","text":"Authentication In Django Rest Framework \u00b6 In previous articles we have developed an open API i.e any user (Authenticated and Un-authenticated) can access the API resource. If we want to want to know the information who is accessing the API then we have to authenticate the user. Authentication means the process or action of verifying the identity of a user. REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes. In Django REST framework do not restrict the user access to the API resource. If we want to restrict the user access to the API then we have use permissions and throttling classes. We can discuss about it in coming articles. Authentication Flow in DRF \u00b6 Whenever any request comes to Django Rest API view first it passed to method def dispatch(self, request, *args, **kwargs), it will take the list of all available authentication classes from the view attribute \"authentication_classes\" and it takes one class at a time from the \"authentication_classes\" and tries to authenticate the user with the authentication class if the class is able to authenticate the user then it will assign the property \"user\" to the \"request\" object. So, we can access the user like \"request.user\" to get the user in the view. If all of the authentication classes failed to authenticate the user then an \"AnonymousUser\" object is assigned to \"request.user\" . If one of authentication classes is able to authenticate the user then all other authentication classes will be skipped or will not processed further. Default Authentication Classes provided by DRF \u00b6 By default Django REST Framework provides two authentication classes. Below two classes are used to authenticate the user unless we override \"authentication_classes\" in the API view. rest_framework.authentication.BasicAuthentication rest_framework.authentication.SessionAuthentication Gobally configuring the authentication scheme in settings.py \u00b6 We can override the default authentication classes provided by DRF in settings.py with the below configuration. We can also use our custom authentication classes and configure like below. REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.BasicAuthentication' , 'rest_framework.authentication.SessionAuthentication' , # 'myapp.authentication.CustomAuthentication', ) } In above code we have configured authentication globally(i.e throughout the app). We can also set authentication scheme per view or per viewset basis. How to override the global authentication classes in Views or Viewsets ? \u00b6 We can override the default authentication classes in views, But View must be subclass of \"APIView\". I personally do not recommend using function based views because, it internally uses classbased views code and we have to write more code. so, I recommend avoid using the function based views. To override the authentication classes in views we have to set the attribute \"authentication_classes\". It takes the iterable datatype. Please checkout the example code below. from rest_framework.authentication import BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class AuthExampleAPIView ( APIView ): authentication_classes = ( BasicAuthentication , ) def get ( self , request , format = None ): content = { 'user' : str ( request . user ) } return Response ( content ) Setting Up Token Authentication in Django REST Framework \u00b6 In addition to \"BasicAuthentication\", \"SessionAuthentication\" DRF also provides another authentication scheme called TokenAuthenticaction. You may get question, why we need token authentication ? The general concept behind a token-based authentication system is simple. Allow users to enter their username and password in order to obtain a token which allows them to fetch a specific resource - without using their username and password. To use token based authentication in Dango REST Framework we need to do the following configurations. settings.py INSTALLED_APPS = ( 'rest_framework' , 'rest_framework.authtoken' , 'myapp' , ) REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.TokenAuthentication' , ) } urls.py from rest_framework.authtoken.views import ObtainAuthToken from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), path ( 'api/token-auth/' , ObtainAuthToken , name = 'auth_token' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated class ProtectedAPIView ( APIView ): permission_classes = ( IsAuthenticated ,) def get ( self , request ): data = { 'message' : 'I am proteted' } return Response ( data ) How to get auth token ? \u00b6 To get auth token we have to send a \"POST\" request to the api endpoint \"/api/token-auth/\" with user credentials. Let's see an exmaple request below. I prefer using postman to test the apis but, let's use python requests to test the above api endpoints. import requests params = { \"username\" : \"admin\" , \"password\" : \"secret\" } headers = { \"content-type\" : \"application/json\" } r = requests . post ( \"https://localhost:8000/api/token-auth/\" , params , headers ) print ( r . json ()) # Output: {\"token\": \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\"} How to use obtained auth token ? \u00b6 Let's use the above obtained token to access protected resource. Let's see an example request below. import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"I am protected\"} To learn better is to practice what you have learnt. So, try all the above code and let me know if you get any doubts in the below comments. References: https://www.django-rest-framework.org/api-guide/authentication/","title":"Authentication in Django Rest Framework"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#authentication-in-django-rest-framework","text":"In previous articles we have developed an open API i.e any user (Authenticated and Un-authenticated) can access the API resource. If we want to want to know the information who is accessing the API then we have to authenticate the user. Authentication means the process or action of verifying the identity of a user. REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes. In Django REST framework do not restrict the user access to the API resource. If we want to restrict the user access to the API then we have use permissions and throttling classes. We can discuss about it in coming articles.","title":"Authentication In Django Rest Framework"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#authentication-flow-in-drf","text":"Whenever any request comes to Django Rest API view first it passed to method def dispatch(self, request, *args, **kwargs), it will take the list of all available authentication classes from the view attribute \"authentication_classes\" and it takes one class at a time from the \"authentication_classes\" and tries to authenticate the user with the authentication class if the class is able to authenticate the user then it will assign the property \"user\" to the \"request\" object. So, we can access the user like \"request.user\" to get the user in the view. If all of the authentication classes failed to authenticate the user then an \"AnonymousUser\" object is assigned to \"request.user\" . If one of authentication classes is able to authenticate the user then all other authentication classes will be skipped or will not processed further.","title":"Authentication Flow in DRF"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#default-authentication-classes-provided-by-drf","text":"By default Django REST Framework provides two authentication classes. Below two classes are used to authenticate the user unless we override \"authentication_classes\" in the API view. rest_framework.authentication.BasicAuthentication rest_framework.authentication.SessionAuthentication","title":"Default Authentication Classes provided by DRF"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#gobally-configuring-the-authentication-scheme-in-settingspy","text":"We can override the default authentication classes provided by DRF in settings.py with the below configuration. We can also use our custom authentication classes and configure like below. REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.BasicAuthentication' , 'rest_framework.authentication.SessionAuthentication' , # 'myapp.authentication.CustomAuthentication', ) } In above code we have configured authentication globally(i.e throughout the app). We can also set authentication scheme per view or per viewset basis.","title":"Gobally configuring the authentication scheme in settings.py"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#how-to-override-the-global-authentication-classes-in-views-or-viewsets","text":"We can override the default authentication classes in views, But View must be subclass of \"APIView\". I personally do not recommend using function based views because, it internally uses classbased views code and we have to write more code. so, I recommend avoid using the function based views. To override the authentication classes in views we have to set the attribute \"authentication_classes\". It takes the iterable datatype. Please checkout the example code below. from rest_framework.authentication import BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class AuthExampleAPIView ( APIView ): authentication_classes = ( BasicAuthentication , ) def get ( self , request , format = None ): content = { 'user' : str ( request . user ) } return Response ( content )","title":"How to override the global authentication classes in Views or Viewsets ?"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#setting-up-token-authentication-in-django-rest-framework","text":"In addition to \"BasicAuthentication\", \"SessionAuthentication\" DRF also provides another authentication scheme called TokenAuthenticaction. You may get question, why we need token authentication ? The general concept behind a token-based authentication system is simple. Allow users to enter their username and password in order to obtain a token which allows them to fetch a specific resource - without using their username and password. To use token based authentication in Dango REST Framework we need to do the following configurations. settings.py INSTALLED_APPS = ( 'rest_framework' , 'rest_framework.authtoken' , 'myapp' , ) REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES' : ( 'rest_framework.authentication.TokenAuthentication' , ) } urls.py from rest_framework.authtoken.views import ObtainAuthToken from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), path ( 'api/token-auth/' , ObtainAuthToken , name = 'auth_token' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated class ProtectedAPIView ( APIView ): permission_classes = ( IsAuthenticated ,) def get ( self , request ): data = { 'message' : 'I am proteted' } return Response ( data )","title":"Setting Up Token Authentication in Django REST Framework"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#how-to-get-auth-token","text":"To get auth token we have to send a \"POST\" request to the api endpoint \"/api/token-auth/\" with user credentials. Let's see an exmaple request below. I prefer using postman to test the apis but, let's use python requests to test the above api endpoints. import requests params = { \"username\" : \"admin\" , \"password\" : \"secret\" } headers = { \"content-type\" : \"application/json\" } r = requests . post ( \"https://localhost:8000/api/token-auth/\" , params , headers ) print ( r . json ()) # Output: {\"token\": \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\"}","title":"How to get auth token ?"},{"location":"course/django-rest-framework/authentication-in-django-rest-framework/#how-to-use-obtained-auth-token","text":"Let's use the above obtained token to access protected resource. Let's see an example request below. import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"I am protected\"} To learn better is to practice what you have learnt. So, try all the above code and let me know if you get any doubts in the below comments. References: https://www.django-rest-framework.org/api-guide/authentication/","title":"How to use obtained auth token ?"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/","text":"Class Based Views In Django Rest Framework \u00b6 Django Rest Framework supports both function and class based views. I personally prefer class based views upon function-based views. Because most of the common functionality was already implemented in the the class based views. so, why to write it again we can simply use it. It's always a better approach to keep our code DRY . In DRF we have a class titled \"APIView\". It is the base class for all other generic API classes in django rest framework. It can be imported from \"from rest_framework.views import APIView\". Let's start with a simple API view. Simple Hello world API View \u00b6 urls.py from django.urls import path from . import views url_patterns = [ path ( 'api/hello-world/' , views . HelloWorldAPIView . as_view (), name = 'hello_world' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloWorldAPIView ( APIView ): def get ( self , request , format = None ): return Response ( data = { \"message\" : \"Hello World\" }, status = 200 ) You can find source code of above hello world api app at github repo . Now, how to test the API endpoint \"/api/hello-world/\"?. Before testing it let's install POSTMAN API APP (i.e used to test api endpoints). Please visit the url https://www.getpostman.com/downloads/ to download it. In above example we have seen a simple API returns {\"message\": \"hello world\"} (i.e JSON). Generic views in Django REST Framework \u00b6 Writing rest api's can be monotonous, because we repeat certain patterns again and again. No developer wants to copy-paste/re-write the same code again and they may get boredom at the view level. Django REST Framework\u2019s generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code. So, it's better to use generic API views when requirement matches with existing functionality of generic views. Django REST Framework provides the below generic views Class Based API Views CreateAPIView ListAPIView RetrieveAPIView DestroyAPIView UpdateAPIView Extended Class Based API Views ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView Let's play with Generic or Class Based API Views \u00b6 CreateAPIView \u00b6 A generic api view provided by the DRF to create data(i.e model instance) in a given model. It is useful when there is a requirement to insert data into model through API endpoint. Let's do some code now. Let's write a simple api that can create a movie record in the database. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-create/' , views . MovieCreateView . as_view (), name = 'movie_create' ), ] models.py from django.db import models class Movie ( models . Model ): title = models . CharField ( max_length = 250 ) released_on = models . DateField () genre = models . CharField ( max_length = 250 ) director = models . CharField ( max_length = 250 ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from .models import * class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = '__all__' views.py from rest_framework.generics import CreateAPIView from .serializers import * class MovieCreateView ( CreateAPIView ): serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"POST\" request to our api url \"/api/movie-create/\". Initially send an empty post request to it. It will ask for required fields.This is just for checking. Now, send a request with valid data like below { \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } And now, we can see the response like below with a http status code 201. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ListAPIView \u00b6 A generic api view provided by the DRF to list all data(i.e all model instances) in a given model. It is useful when there is a requirement to retrieve all data from model through API endpoint. To add pagination to the results then add the following configuration to \"settings.py\" REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS' : 'rest_framework.pagination.LimitOffsetPagination' , 'PAGE_SIZE' : 100 } Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list/' , views . MovieListView . as_view (), name = 'movie_list' ), ] views.py from rest_framework.generics import ListAPIView from .serializers import * class MovieListView ( ListAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer from rest_framework.generics import ListAPIView from .serializers import * class MovieListView(ListAPIView): queryset = Movie.objects.all() serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie-list/\". Now, we get response like below with status code 200. [ { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] This is a quick example to start with django rest \"ListAPIView\". It only allows us to send \"GET\" reuest if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405. RetrieveAPIView \u00b6 A generic api view provided by the DRF to retrieve a specific data from a given model (example: retrieve a unique user from users table). It is useful when there is a requirement to retrieve a specific data instance through API endpoint. In above generic list api view, we have retrieved all the available objects/rows in the model/table. What if we need a specific object from the model? Let's do some code now to know it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/detail/' , views . MovieRetrieveView . as_view (), name = 'movie_retrieve' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieRetrieveView ( RetrieveAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest client (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie/1/detail/\". Now, we get response like below with status code 200. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } It only allows us to send \"GET\" request if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405. DestroyAPIView \u00b6 A generic api view provided by the DRF to delete a specific data (example: delete a specific user from users table) from a given model. It is useful when there is a requirement to delete a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/delete/' , views . MovieDestroyView . as_view (), name = 'movie_delete' ), ] views.py from rest_framework.generics import DestroyAPIView from .serializers import * class MovieDestroyView ( DestroyAPIView ): queryset = Movie . objects . all () \"DestroyAPIView\" only accepts request method \"DELETE\". To delete any specific object we have to provide \"pk_urlkwarg\" in url. Let's send a \"DELETE\" request to url \"/api/movie/2/delete/\" in this url \"2\" is a primary key of resource. When you send a request it will return response of status code \"204\". If object is not found then we will recieve 404 status code. UpdateAPIView \u00b6 A generic api view provided by the DRF to update a specific data (example: update a specific user from users table) from a given model. It is useful when there is a requirement to update a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/update/' , views . MovieUpdateView . as_view (), name = 'movie_update' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieUpdateView ( UpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"PATCH\" request to our api url \"/api/movie/1/update/\" with below data to update. { \"title\" : \"Bahubali the beginning\" , } Now, we will get response like below. { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } \"UpdateAPIView\" only accepts request type \"PATCH\" to update the resource if other request type is submitted then it will return status code of 405. Like \"RetrieveAPIView\" and \"DestroyAPIView\" it also requires \" pk_urlkwarg \" in url. All above written code is tested and you can find the code in my github repository https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews Please let me know your thoughts in below comments.","title":"Class based views in Django Rest Framework"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#class-based-views-in-django-rest-framework","text":"Django Rest Framework supports both function and class based views. I personally prefer class based views upon function-based views. Because most of the common functionality was already implemented in the the class based views. so, why to write it again we can simply use it. It's always a better approach to keep our code DRY . In DRF we have a class titled \"APIView\". It is the base class for all other generic API classes in django rest framework. It can be imported from \"from rest_framework.views import APIView\". Let's start with a simple API view.","title":"Class Based Views In Django Rest Framework"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#simple-hello-world-api-view","text":"urls.py from django.urls import path from . import views url_patterns = [ path ( 'api/hello-world/' , views . HelloWorldAPIView . as_view (), name = 'hello_world' ), ] views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloWorldAPIView ( APIView ): def get ( self , request , format = None ): return Response ( data = { \"message\" : \"Hello World\" }, status = 200 ) You can find source code of above hello world api app at github repo . Now, how to test the API endpoint \"/api/hello-world/\"?. Before testing it let's install POSTMAN API APP (i.e used to test api endpoints). Please visit the url https://www.getpostman.com/downloads/ to download it. In above example we have seen a simple API returns {\"message\": \"hello world\"} (i.e JSON).","title":"Simple Hello world API View"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#generic-views-in-django-rest-framework","text":"Writing rest api's can be monotonous, because we repeat certain patterns again and again. No developer wants to copy-paste/re-write the same code again and they may get boredom at the view level. Django REST Framework\u2019s generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code. So, it's better to use generic API views when requirement matches with existing functionality of generic views. Django REST Framework provides the below generic views Class Based API Views CreateAPIView ListAPIView RetrieveAPIView DestroyAPIView UpdateAPIView Extended Class Based API Views ListCreateAPIView RetrieveUpdateAPIView RetrieveDestroyAPIView RetrieveUpdateDestroyAPIView","title":"Generic views in Django REST Framework"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#lets-play-with-generic-or-class-based-api-views","text":"","title":"Let's play with Generic or Class Based API Views"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#createapiview","text":"A generic api view provided by the DRF to create data(i.e model instance) in a given model. It is useful when there is a requirement to insert data into model through API endpoint. Let's do some code now. Let's write a simple api that can create a movie record in the database. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-create/' , views . MovieCreateView . as_view (), name = 'movie_create' ), ] models.py from django.db import models class Movie ( models . Model ): title = models . CharField ( max_length = 250 ) released_on = models . DateField () genre = models . CharField ( max_length = 250 ) director = models . CharField ( max_length = 250 ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from .models import * class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = '__all__' views.py from rest_framework.generics import CreateAPIView from .serializers import * class MovieCreateView ( CreateAPIView ): serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"POST\" request to our api url \"/api/movie-create/\". Initially send an empty post request to it. It will ask for required fields.This is just for checking. Now, send a request with valid data like below { \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } And now, we can see the response like below with a http status code 201. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" }","title":"CreateAPIView"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#listapiview","text":"A generic api view provided by the DRF to list all data(i.e all model instances) in a given model. It is useful when there is a requirement to retrieve all data from model through API endpoint. To add pagination to the results then add the following configuration to \"settings.py\" REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS' : 'rest_framework.pagination.LimitOffsetPagination' , 'PAGE_SIZE' : 100 } Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie-list/' , views . MovieListView . as_view (), name = 'movie_list' ), ] views.py from rest_framework.generics import ListAPIView from .serializers import * class MovieListView ( ListAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer from rest_framework.generics import ListAPIView from .serializers import * class MovieListView(ListAPIView): queryset = Movie.objects.all() serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie-list/\". Now, we get response like below with status code 200. [ { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } ] This is a quick example to start with django rest \"ListAPIView\". It only allows us to send \"GET\" reuest if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405.","title":"ListAPIView"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#retrieveapiview","text":"A generic api view provided by the DRF to retrieve a specific data from a given model (example: retrieve a unique user from users table). It is useful when there is a requirement to retrieve a specific data instance through API endpoint. In above generic list api view, we have retrieved all the available objects/rows in the model/table. What if we need a specific object from the model? Let's do some code now to know it urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/detail/' , views . MovieRetrieveView . as_view (), name = 'movie_retrieve' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieRetrieveView ( RetrieveAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest client (I personally prefer \" postman \") and send a \"GET\" request to our api url \"/api/movie/1/detail/\". Now, we get response like below with status code 200. { \"id\" : 1 , \"title\" : \"Bahubali\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } It only allows us to send \"GET\" request if we send other requests like POST, PUT, DELETE then it will give us error message with status code 405.","title":"RetrieveAPIView"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#destroyapiview","text":"A generic api view provided by the DRF to delete a specific data (example: delete a specific user from users table) from a given model. It is useful when there is a requirement to delete a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/delete/' , views . MovieDestroyView . as_view (), name = 'movie_delete' ), ] views.py from rest_framework.generics import DestroyAPIView from .serializers import * class MovieDestroyView ( DestroyAPIView ): queryset = Movie . objects . all () \"DestroyAPIView\" only accepts request method \"DELETE\". To delete any specific object we have to provide \"pk_urlkwarg\" in url. Let's send a \"DELETE\" request to url \"/api/movie/2/delete/\" in this url \"2\" is a primary key of resource. When you send a request it will return response of status code \"204\". If object is not found then we will recieve 404 status code.","title":"DestroyAPIView"},{"location":"course/django-rest-framework/class-based-views-in-django-rest-framework/#updateapiview","text":"A generic api view provided by the DRF to update a specific data (example: update a specific user from users table) from a given model. It is useful when there is a requirement to update a specific data instance through API endpoint. Let's do some code now. urls.py from django.urls import path from . import views urlpatterns = [ path ( 'movie/<int:pk>/update/' , views . MovieUpdateView . as_view (), name = 'movie_update' ), ] views.py from rest_framework.generics import RetrieveAPIView from .serializers import * class MovieUpdateView ( UpdateAPIView ): queryset = Movie . objects . all () serializer_class = MovieSerializer Now, open any api rest cient (I personally prefer \" postman \") and send a \"PATCH\" request to our api url \"/api/movie/1/update/\" with below data to update. { \"title\" : \"Bahubali the beginning\" , } Now, we will get response like below. { \"id\" : 1 , \"title\" : \"Bahubali The Beginning\" , \"released_on\" : \"2015-07-10\" , \"genre\" : \"fiction\" , \"director\" : \"SS Rajamouli\" } \"UpdateAPIView\" only accepts request type \"PATCH\" to update the resource if other request type is submitted then it will return status code of 405. Like \"RetrieveAPIView\" and \"DestroyAPIView\" it also requires \" pk_urlkwarg \" in url. All above written code is tested and you can find the code in my github repository https://github.com/AnjaneyuluBatta505/learnbatta/tree/master/django-rest-framework/classbasedviews Please let me know your thoughts in below comments.","title":"UpdateAPIView"},{"location":"course/django-rest-framework/getting-started-with-django-rest-framework/","text":"Getting Started With Django Rest Framework \u00b6 Before we get started with django rest framework we need to have the basic knowledge of python, django and how to work with RESTful API's. Django Rest Framework was developed by Tom Christe. It is one of the worlds leading API development frameworks. Django REST Framework is a open-source software and it is used by worlds best companies including Mozilla , Red Hat , Eventbrite , Heroku , and more . Why to use Django REST framework ? \u00b6 It comes with Web browsable API and it makes developers life simple. It has support for authentication policies including packages for OAuth1a and OAuth2. It supports serialization on both ORM and non-ORM data sources. We can just use regular function-based views if we don't need the more powerful features like generic views and viewsets. It has a great community support in sites like stackoverflow, quora, etc. It is trusted by world's recognised companies like Mozilla, Red Hat, Heroku, and Eventbrite. It is supported by both python2 and python3 Note: I suggest you to use the latest versions of softwares, because it comes with new features and less bugs. Installation of Django REST Framework \u00b6 It is dependent on django framework though it is automatically installed with django rest framework pip install django pip install djangorestframework Now, let's create and django application named \"myproject\". If you need help then read article \"getting started with django first app\" . Steps to configure the django rest framework \u00b6 Add 'rest_framework' to INSTALLED_APPS in our project settings. INSTALLED_APPS = [ # ... 'rest_framework' , # ... ] * If you want to use the browsable api and login and logout functionality of Django Rest Framework then add the blo code in project urls.py . urlpatterns = [ # ... path ( 'api-auth/' , include ( 'rest_framework.urls' )), # ... ] We have completed the configuration of django rest framework in our django project. To confirm it run the django development server and the in your local browser access url \"localhost:8000/api-auth/login/\" to see the Django REST Framework login page. Let's write our first API endoint using Django REST Framework \u00b6 Let's write the simple hello message api endpoint. Create the view named \"HelloAPIView\" and add below code to it. views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloAPIView ( APIView ): def get ( self , request ): data = { 'message' : 'Hello World' , } return Response ( data ) Now, we are ready with our first api view let's configure the view in the urls.py. # urls.py from django.urls import path from . import views urlpatterns = [ # ... path ( 'api/hello/' , views . HelloAPIView . as_view (), name = \"api_hello\" ), # ... ] Now, access the url in your browser \"localhost:800/api/hello/\" to see the output of our first rest API endpoint. Do not forget to run the app/project development server. We have setup our first Django REST API application. We will learn more in the upcoming articles. References: http://www.django-rest-framework.org/","title":"Getting started with Django Rest Framework"},{"location":"course/django-rest-framework/getting-started-with-django-rest-framework/#getting-started-with-django-rest-framework","text":"Before we get started with django rest framework we need to have the basic knowledge of python, django and how to work with RESTful API's. Django Rest Framework was developed by Tom Christe. It is one of the worlds leading API development frameworks. Django REST Framework is a open-source software and it is used by worlds best companies including Mozilla , Red Hat , Eventbrite , Heroku , and more .","title":"Getting Started With Django Rest Framework"},{"location":"course/django-rest-framework/getting-started-with-django-rest-framework/#why-to-use-django-rest-framework","text":"It comes with Web browsable API and it makes developers life simple. It has support for authentication policies including packages for OAuth1a and OAuth2. It supports serialization on both ORM and non-ORM data sources. We can just use regular function-based views if we don't need the more powerful features like generic views and viewsets. It has a great community support in sites like stackoverflow, quora, etc. It is trusted by world's recognised companies like Mozilla, Red Hat, Heroku, and Eventbrite. It is supported by both python2 and python3 Note: I suggest you to use the latest versions of softwares, because it comes with new features and less bugs.","title":"Why to use Django REST framework ?"},{"location":"course/django-rest-framework/getting-started-with-django-rest-framework/#installation-of-django-rest-framework","text":"It is dependent on django framework though it is automatically installed with django rest framework pip install django pip install djangorestframework Now, let's create and django application named \"myproject\". If you need help then read article \"getting started with django first app\" .","title":"Installation of Django REST Framework"},{"location":"course/django-rest-framework/getting-started-with-django-rest-framework/#steps-to-configure-the-django-rest-framework","text":"Add 'rest_framework' to INSTALLED_APPS in our project settings. INSTALLED_APPS = [ # ... 'rest_framework' , # ... ] * If you want to use the browsable api and login and logout functionality of Django Rest Framework then add the blo code in project urls.py . urlpatterns = [ # ... path ( 'api-auth/' , include ( 'rest_framework.urls' )), # ... ] We have completed the configuration of django rest framework in our django project. To confirm it run the django development server and the in your local browser access url \"localhost:8000/api-auth/login/\" to see the Django REST Framework login page.","title":"Steps to configure the django rest framework"},{"location":"course/django-rest-framework/getting-started-with-django-rest-framework/#lets-write-our-first-api-endoint-using-django-rest-framework","text":"Let's write the simple hello message api endpoint. Create the view named \"HelloAPIView\" and add below code to it. views.py from rest_framework.views import APIView from rest_framework.response import Response class HelloAPIView ( APIView ): def get ( self , request ): data = { 'message' : 'Hello World' , } return Response ( data ) Now, we are ready with our first api view let's configure the view in the urls.py. # urls.py from django.urls import path from . import views urlpatterns = [ # ... path ( 'api/hello/' , views . HelloAPIView . as_view (), name = \"api_hello\" ), # ... ] Now, access the url in your browser \"localhost:800/api/hello/\" to see the output of our first rest API endpoint. Do not forget to run the app/project development server. We have setup our first Django REST API application. We will learn more in the upcoming articles. References: http://www.django-rest-framework.org/","title":"Let's write our first API endoint using Django REST Framework"},{"location":"course/django-rest-framework/introduction-to-restful-apis/","text":"Introduction To Restful Apis \u00b6 REST(Representational state transfer) is a one of the architectural(designed with some specific rules and regulations) ways to transfer the data by using the HTTP protocol. In this article we will learn what are the restful api's and why we use it.we'll understand api request format and request methods in REST api's and it's usage. Why we use REST API's ? \u00b6 It is mostly used with client server based applications. It's mostly used for Mobile application development(Android, iOS, etc), Client side web application development(ReactJS, AngularJS, BackBoneJS, etc). It transfers the data in the form of objects. The object is in the form of JSON. JSON usually is a better fit for data and parses much faster. REST follows a client server architecture . We use REST API's when there is a need of communication between multiple applications which were developed with different technologies(multiple programming languages like C, python, java, VB.NET, etc.) We can speed up the process by using cache mechanism in REST API's. Understanding Request Format: \u00b6 Before talking about the request methods first we need to understand the components of request. Every HTTP request is composed of two parts 1. Request Header and 2. Request Body. Request Header: \u00b6 Request Method: It contains the request methods like GET, POST, PUT, PATCH, DELETE, etc. Request URI: It contains the information of domain and path. Example: https://learnbatta.com/blog/ In the above example domain = \"learnbatta.com\" and path = \"/blog/\" HTTP Headers: These are in the form of key and value. Find some of headers below Accept: text/plain Accept-Charset: utf-8 Accept-Encoding: gzip, deflate Accept-Language: en-US Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== Authorization: Token GfsgzxJUbjpvcGVuIHNlc2FtZQ== Referer: https://learnbatta.com/ In Django REST Framework we frequently use \"Authorization\" header for authentication. Request Body: \u00b6 When we want to pass the data to the server securely then we use request body to send the data in request. Request body is mostly used by POST, PUT, PATCH Request methods. Note: In GET request method we pass the data in the url. Example Request Format: Host learnbatta.com User-Agent Mozilla/5.0 (X11; Ubuntu; Linux) Gecko/20100101 Firefox/56.0 Accept text/html,application/xhtml+xm\u2026plication/xml;q=0.9, / ;q=0.8 Accept-Language en-US,en;q=0.5 Accept-Encoding gzip, deflate, br Connection keep-alive Upgrade-Insecure-Requests 1 Method GET Body Request methods in REST API's and it's usage: \u00b6 GET \u00b6 We use get method to retrieve the information of a specific resource. Resource will not be modified in the GET api request. We can retrieve a single resource or multiple resources with pagination and filters by using GET api request. Expected HTTP status code to the successful request is 200. If requested resource was not found then we should return HTTP status code of 404. If the GET request is not formed correctly as per api documentation then we supposed to return the error response with status code of 400. Example urls for GET request http://www.testdomain.com/users?offset=20&page=5 http://www.testdomain.com/users/1/detail POST \u00b6 We use \"POST\" method to create the resource information in the database. If resource successfully created then API should respond with HTTP status code of 201. We need to validate the data before creating the resource information into the database. If the request data is not valid the server should return the errors data along with HTTP status code of 400. POST method neither safe nor idempotent. Two identical POST requests may result in data duplication(i.e same data but different resource id's ). PUT \u00b6 In general, we use request method \"PUT\" to updated the resource information in the database. Resource will be modified upon successful completion of the request. For successful \"PUT\" request API should respond with HTTP status code of 200. It needs a resource Id to identify the correct resource to update. PATCH \u00b6 We use request method \"PATCH\" to update the resource partially. If resource successfully created then API should respond with HTTP status code of 200. If resource is not found then API should respond with HTTP status code of 404. It needs a resource Id to identify the correct resource to update it partially. DELETE \u00b6 The request method name itself represents that \"DELETE\" is used to delete the resource on the server database. When the resource \"DELETE\" request is processed successfully then it should return HTTP status code of 200. If the resource is not found then API should return a HTTP status code of 404. It needs a resource Id to identify the correct resource to delete it. Summary of HTTP Methods for RESTful APIs \u00b6 REQUEST METHOD OPERATION HTTP Status Code POST Create 201 (Created) or 400 (Bad Request) GET Read 200 (OK) or 404 (Not Found) or 400 (Bad Request) PUT Update/Replace 200 (OK) or 404 (Not Found) or 400 (Bad Request) PATCH Partial Update/Modify 200 (OK) or 404 (Not Found) or 400 (Bad Request) DELETE Delete 200 (OK) or 404 (Not Found) or 400 (Bad Request) References: https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html https://en.wikipedia.org/wiki/List_of_HTTP_header_fields http://www.django-rest-framework.org/api-guide/authentication/","title":"Introduction to RESTful api's"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#introduction-to-restful-apis","text":"REST(Representational state transfer) is a one of the architectural(designed with some specific rules and regulations) ways to transfer the data by using the HTTP protocol. In this article we will learn what are the restful api's and why we use it.we'll understand api request format and request methods in REST api's and it's usage.","title":"Introduction To Restful Apis"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#why-we-use-rest-apis","text":"It is mostly used with client server based applications. It's mostly used for Mobile application development(Android, iOS, etc), Client side web application development(ReactJS, AngularJS, BackBoneJS, etc). It transfers the data in the form of objects. The object is in the form of JSON. JSON usually is a better fit for data and parses much faster. REST follows a client server architecture . We use REST API's when there is a need of communication between multiple applications which were developed with different technologies(multiple programming languages like C, python, java, VB.NET, etc.) We can speed up the process by using cache mechanism in REST API's.","title":"Why we use REST API's ?"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#understanding-request-format","text":"Before talking about the request methods first we need to understand the components of request. Every HTTP request is composed of two parts 1. Request Header and 2. Request Body.","title":"Understanding Request Format:"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#request-header","text":"Request Method: It contains the request methods like GET, POST, PUT, PATCH, DELETE, etc. Request URI: It contains the information of domain and path. Example: https://learnbatta.com/blog/ In the above example domain = \"learnbatta.com\" and path = \"/blog/\" HTTP Headers: These are in the form of key and value. Find some of headers below Accept: text/plain Accept-Charset: utf-8 Accept-Encoding: gzip, deflate Accept-Language: en-US Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== Authorization: Token GfsgzxJUbjpvcGVuIHNlc2FtZQ== Referer: https://learnbatta.com/ In Django REST Framework we frequently use \"Authorization\" header for authentication.","title":"Request Header:"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#request-body","text":"When we want to pass the data to the server securely then we use request body to send the data in request. Request body is mostly used by POST, PUT, PATCH Request methods. Note: In GET request method we pass the data in the url. Example Request Format: Host learnbatta.com User-Agent Mozilla/5.0 (X11; Ubuntu; Linux) Gecko/20100101 Firefox/56.0 Accept text/html,application/xhtml+xm\u2026plication/xml;q=0.9, / ;q=0.8 Accept-Language en-US,en;q=0.5 Accept-Encoding gzip, deflate, br Connection keep-alive Upgrade-Insecure-Requests 1 Method GET Body","title":"Request Body:"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#request-methods-in-rest-apis-and-its-usage","text":"","title":"Request methods in REST API's and it's usage:"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#get","text":"We use get method to retrieve the information of a specific resource. Resource will not be modified in the GET api request. We can retrieve a single resource or multiple resources with pagination and filters by using GET api request. Expected HTTP status code to the successful request is 200. If requested resource was not found then we should return HTTP status code of 404. If the GET request is not formed correctly as per api documentation then we supposed to return the error response with status code of 400. Example urls for GET request http://www.testdomain.com/users?offset=20&page=5 http://www.testdomain.com/users/1/detail","title":"GET"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#post","text":"We use \"POST\" method to create the resource information in the database. If resource successfully created then API should respond with HTTP status code of 201. We need to validate the data before creating the resource information into the database. If the request data is not valid the server should return the errors data along with HTTP status code of 400. POST method neither safe nor idempotent. Two identical POST requests may result in data duplication(i.e same data but different resource id's ).","title":"POST"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#put","text":"In general, we use request method \"PUT\" to updated the resource information in the database. Resource will be modified upon successful completion of the request. For successful \"PUT\" request API should respond with HTTP status code of 200. It needs a resource Id to identify the correct resource to update.","title":"PUT"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#patch","text":"We use request method \"PATCH\" to update the resource partially. If resource successfully created then API should respond with HTTP status code of 200. If resource is not found then API should respond with HTTP status code of 404. It needs a resource Id to identify the correct resource to update it partially.","title":"PATCH"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#delete","text":"The request method name itself represents that \"DELETE\" is used to delete the resource on the server database. When the resource \"DELETE\" request is processed successfully then it should return HTTP status code of 200. If the resource is not found then API should return a HTTP status code of 404. It needs a resource Id to identify the correct resource to delete it.","title":"DELETE"},{"location":"course/django-rest-framework/introduction-to-restful-apis/#summary-of-http-methods-for-restful-apis","text":"REQUEST METHOD OPERATION HTTP Status Code POST Create 201 (Created) or 400 (Bad Request) GET Read 200 (OK) or 404 (Not Found) or 400 (Bad Request) PUT Update/Replace 200 (OK) or 404 (Not Found) or 400 (Bad Request) PATCH Partial Update/Modify 200 (OK) or 404 (Not Found) or 400 (Bad Request) DELETE Delete 200 (OK) or 404 (Not Found) or 400 (Bad Request) References: https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html https://en.wikipedia.org/wiki/List_of_HTTP_header_fields http://www.django-rest-framework.org/api-guide/authentication/","title":"Summary of HTTP Methods for RESTful APIs"},{"location":"course/django-rest-framework/model-serializers-in-django-rest-framework/","text":"Model Serializers In Django Rest Framework \u00b6 Model serializers in django rest framework are very similar to the django model forms. By using the model serializers we can reduce the effort of writing the more code for serializers. Model serializers are the shortcuts that allow us to automatically create a serializer with fields that associated with the resective model. Model serializer class is same as normal serializer class with some extra abilities Model serializer class will automatically generate a set of fields for us, based on the model. IModel serializer class will automatically generate validators for the serializer, such as max_length, unique_together validators, etc. Model serializer class includes default implementations of .create() and .update() Creating a django rest framework Model serializer class For all model serializers we use \"ModelSerializer\" class as a base class. It provides the common functionality like fields, validators, etc. automatically. Let's see an example for model serializer. models.py from django.db import models from django.core.validators import MaxValueValidator , MinValueValidator class Movie ( models . Model ): title = models . CharField ( max_length = 100 , unique = True ) rating = models . FloatField ( validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )], ) director = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from app.models import Movie class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = ( 'id' , 'title' , 'rating' , 'director' ) # exclude = ('rating',) By default all the fields we have mentioned in the above model serializer class will be mapped to a corresponding serializer fields. In the above serializer we have added all the field names in the meta class \"fields\" attribute. we can also do this like fields = '__all__' . If can also specify the fields that we required instead of all fields. We also have the another attribute exclude which will allow us to add all fields to the serializer except one or two fields. Working with django rest framework model serializers \u00b6 Let's play with the above serializer that we have created on django shell. django shell - data serialization from app.models import Movie from app.serializer import MovieSerializer instance = Movie . objects . create ( title = 'Bahubali' , rating = 8.6 , director = 'Rajamouli' ) serializer = MovieSerializer ( instance ) print ( serializer . data ) # output: {'id': 2, 'title': 'Bahubali', 'rating': 8.6, 'director': 'Rajamouli'} In the above code we have created the movie model object and serialized it using model serializer django shell - data validation with serializer from app.models import Movie from app.serializer import MovieSerializer # validate the serilizer data data = { 'title' : '' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # output: {'title': ['This field is required.']} data = { 'title' : 'Avatar' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) # validate the serilizer data print ( serializer . is_valid ()) # output: True In the above code we have first given the invalid data to the model serializer and the we validated the correctness of the data using is_valid serializer method and then we have printed the errors using the serializer attribute errors. In order to use the attribute errors first we need to call method is_valid otherwise it will raise errors. django shell - save valid data into database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 9 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) serializer . is_valid () # output: True new_obj = serializer . save () print ( new_obj . id , new_obj . title ) # output: 3 Avatar In the above code we have given valid data to the serializer and then we have called the is_valid method after that we saved the data to database using the serializer method save. Before calling the method save first we should call is_valid method otherwise it will raises the errors. django shell - update data in the database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 10 } instance = Movie . objects . get ( id = 3 ) serializer = MovieSerializer ( instance , data = data ) serializer . is_valid () instance = serializer . save () print ( instance . rating ) # output: 10 In the above code we have given rating as 10 previously it's value is 9. In the above while initializing the serializer we have provided instance and data to the serializer because when we save the serializer it will updated the given data in the given instance otherwise it will create a new object. References: https://www.django-rest-framework.org/api-guide/serializers/","title":"Model serializers in Django Rest Framework"},{"location":"course/django-rest-framework/model-serializers-in-django-rest-framework/#model-serializers-in-django-rest-framework","text":"Model serializers in django rest framework are very similar to the django model forms. By using the model serializers we can reduce the effort of writing the more code for serializers. Model serializers are the shortcuts that allow us to automatically create a serializer with fields that associated with the resective model. Model serializer class is same as normal serializer class with some extra abilities Model serializer class will automatically generate a set of fields for us, based on the model. IModel serializer class will automatically generate validators for the serializer, such as max_length, unique_together validators, etc. Model serializer class includes default implementations of .create() and .update() Creating a django rest framework Model serializer class For all model serializers we use \"ModelSerializer\" class as a base class. It provides the common functionality like fields, validators, etc. automatically. Let's see an example for model serializer. models.py from django.db import models from django.core.validators import MaxValueValidator , MinValueValidator class Movie ( models . Model ): title = models . CharField ( max_length = 100 , unique = True ) rating = models . FloatField ( validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )], ) director = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return self . title serializers.py from rest_framework import serializers from app.models import Movie class MovieSerializer ( serializers . ModelSerializer ): class Meta : model = Movie fields = ( 'id' , 'title' , 'rating' , 'director' ) # exclude = ('rating',) By default all the fields we have mentioned in the above model serializer class will be mapped to a corresponding serializer fields. In the above serializer we have added all the field names in the meta class \"fields\" attribute. we can also do this like fields = '__all__' . If can also specify the fields that we required instead of all fields. We also have the another attribute exclude which will allow us to add all fields to the serializer except one or two fields.","title":"Model Serializers In Django Rest Framework"},{"location":"course/django-rest-framework/model-serializers-in-django-rest-framework/#working-with-django-rest-framework-model-serializers","text":"Let's play with the above serializer that we have created on django shell. django shell - data serialization from app.models import Movie from app.serializer import MovieSerializer instance = Movie . objects . create ( title = 'Bahubali' , rating = 8.6 , director = 'Rajamouli' ) serializer = MovieSerializer ( instance ) print ( serializer . data ) # output: {'id': 2, 'title': 'Bahubali', 'rating': 8.6, 'director': 'Rajamouli'} In the above code we have created the movie model object and serialized it using model serializer django shell - data validation with serializer from app.models import Movie from app.serializer import MovieSerializer # validate the serilizer data data = { 'title' : '' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # output: {'title': ['This field is required.']} data = { 'title' : 'Avatar' , 'rating' : 10 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) # validate the serilizer data print ( serializer . is_valid ()) # output: True In the above code we have first given the invalid data to the model serializer and the we validated the correctness of the data using is_valid serializer method and then we have printed the errors using the serializer attribute errors. In order to use the attribute errors first we need to call method is_valid otherwise it will raise errors. django shell - save valid data into database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 9 , 'director' : 'James Cameron' } serializer = MovieSerializer ( data = data ) serializer . is_valid () # output: True new_obj = serializer . save () print ( new_obj . id , new_obj . title ) # output: 3 Avatar In the above code we have given valid data to the serializer and then we have called the is_valid method after that we saved the data to database using the serializer method save. Before calling the method save first we should call is_valid method otherwise it will raises the errors. django shell - update data in the database using model serializer from app.models import Movie from app.serializer import MovieSerializer data = { 'title' : 'Avatar' , 'rating' : 10 } instance = Movie . objects . get ( id = 3 ) serializer = MovieSerializer ( instance , data = data ) serializer . is_valid () instance = serializer . save () print ( instance . rating ) # output: 10 In the above code we have given rating as 10 previously it's value is 9. In the above while initializing the serializer we have provided instance and data to the serializer because when we save the serializer it will updated the given data in the given instance otherwise it will create a new object. References: https://www.django-rest-framework.org/api-guide/serializers/","title":"Working with django rest framework model serializers"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/","text":"Parsers In Django Rest Framework \u00b6 Parsers in Django REST are used to parse the content of incoming HTTP request. In HTTP request we receive the data as a string format. Parsers will parse the HTTP contents in to python data types based on the Content-Type header received in the HTTP request. Django REST Framework provides a number of built-in parsers which parses different types of contents like \"application/json\", \"multipart/form-data\", \"application/xml\", etc., based on the Content-Type header received in the HTTP request. Parser Classes in Django REST: \u00b6 JSONParser \u00b6 It parses the incoming request JSON content into python content type dict. It is used if \"Content-Type\" is set to \"application/json\". FormParser \u00b6 It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"application/x-www-form-urlencoded\". MultiPartParser \u00b6 It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"multipart/form-data\". request.data will be a QueryDict containing all the form parameters. request.files will be a QueryDict containing all the form files. FormParser and MultiPartParser together used for full support of HTML form data. FileUploadParser \u00b6 It is used to parse a single file sent in HTTP request. It expects a url keyword argument \"filename\". If it's not provided then we should provide the filename in the Content-Disposition HTTP header. For example Content-Disposition: attachment; filename=upload.jpg. request.file is used to access the contents of uploaded file. To work with XML data we have use third party library \" REST Framework XML \" . Configuring default parsers in Django REST: \u00b6 We configure the parsers in django settings.py . We configure the default parsers using DEFAULT_PARSER_CLASSES setting. Let's see some code below. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES' : ( 'rest_framework.parsers.JSONParser' , ) } How to override default parsers in views or viewsets ? \u00b6 If we do not specify parser classes in views or viewsets then it will use the default parsers classes defined in DEFAULT\\_PARSER\\_CLASSES in settings. Let's do some code. from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView ( APIView ): \"\"\" A view that can accept POST requests with JSON content. \"\"\" parser_classes = ( JSONParser ,) def post ( self , request , format = None ): return Response ({ 'received data' : request . data }) We override default parser classes views or viewsets using the attribute \"parser_classes\" . We can also specify multiple parsers. Reference: https://www.django-rest-framework.org/api-guide/parsers","title":"Parsers in Django Rest Framework"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#parsers-in-django-rest-framework","text":"Parsers in Django REST are used to parse the content of incoming HTTP request. In HTTP request we receive the data as a string format. Parsers will parse the HTTP contents in to python data types based on the Content-Type header received in the HTTP request. Django REST Framework provides a number of built-in parsers which parses different types of contents like \"application/json\", \"multipart/form-data\", \"application/xml\", etc., based on the Content-Type header received in the HTTP request.","title":"Parsers In Django Rest Framework"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#parser-classes-in-django-rest","text":"","title":"Parser Classes in Django REST:"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#jsonparser","text":"It parses the incoming request JSON content into python content type dict. It is used if \"Content-Type\" is set to \"application/json\".","title":"JSONParser"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#formparser","text":"It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"application/x-www-form-urlencoded\".","title":"FormParser"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#multipartparser","text":"It parses the incoming request form contents into QueryDict. It is used if \"Content-Type\" is set to \"multipart/form-data\". request.data will be a QueryDict containing all the form parameters. request.files will be a QueryDict containing all the form files. FormParser and MultiPartParser together used for full support of HTML form data.","title":"MultiPartParser"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#fileuploadparser","text":"It is used to parse a single file sent in HTTP request. It expects a url keyword argument \"filename\". If it's not provided then we should provide the filename in the Content-Disposition HTTP header. For example Content-Disposition: attachment; filename=upload.jpg. request.file is used to access the contents of uploaded file. To work with XML data we have use third party library \" REST Framework XML \" .","title":"FileUploadParser"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#configuring-default-parsers-in-django-rest","text":"We configure the parsers in django settings.py . We configure the default parsers using DEFAULT_PARSER_CLASSES setting. Let's see some code below. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES' : ( 'rest_framework.parsers.JSONParser' , ) }","title":"Configuring default parsers in Django REST:"},{"location":"course/django-rest-framework/parsers-in-django-rest-framework/#how-to-override-default-parsers-in-views-or-viewsets","text":"If we do not specify parser classes in views or viewsets then it will use the default parsers classes defined in DEFAULT\\_PARSER\\_CLASSES in settings. Let's do some code. from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView ( APIView ): \"\"\" A view that can accept POST requests with JSON content. \"\"\" parser_classes = ( JSONParser ,) def post ( self , request , format = None ): return Response ({ 'received data' : request . data }) We override default parser classes views or viewsets using the attribute \"parser_classes\" . We can also specify multiple parsers. Reference: https://www.django-rest-framework.org/api-guide/parsers","title":"How to override default parsers in views or viewsets ?"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/","text":"Permissions In Django Rest Framework \u00b6 Permissions in Django Rest Framework are used to grant or deny access for different types of users to different parts of the API. Permissions are very useful when serving API resources/end-points with certain restrictions. For example, let's consider you are writing an api endpoint to create an answer to a question just like stackoverflow . It only allows an authenticated user to create the answers. In this case we restrict the user by checking user is authenticated or not. If user user is authenticated then we allow user to access the API resource otherwise we deny the user. It's a simple example to use django rest permission classes. Permissions Flow in DRF \u00b6 Whenever any request comes to DRF then it enters the \"dispatch\" method. \"dispatch\" method should route the request to appropriate request method like \"get\", \"post\", \"put\", \"delete\", etc. But, before routing the request to the one of these methods it will checks the authentication, \"permissions\" and then it checks throttles(i.e used to limit the number of requests per user or per IP). In Django REST framework we always define permissions as a list. In DRF we can setup global permission classes or we can specify the permission classes in Views and Viewsets. If all permission checks are valid then request will be passed to appropriate method (i.e \"get\", \"post\", \"put\", \"delete\", etc. ) based on the request type otherwise an exception will be raised. The exception can be one of exceptions.PermissionDenied or exceptions.NotAuthenticated . If authentication fails then it returns status code of 401 and if any other permissions fails then it will return the status code of 403. Default Permissions Classes provided by DRF \u00b6 Django rest framework provides the following permission classes which are used frequently.. AllowAny \u00b6 This permission class do not restrict the user to access the API resource. IsAuthenticated \u00b6 This permission class only permits authenticated or logged in users to access the API resource. IsAdminUser \u00b6 This permission class only allows Django Admin Users(i.e user.is_staff = True) to access the api resource and all other users will not be able access the API resource. IsAuthenticatedOrReadOnly \u00b6 This permission class allows authenticated users to perform read and write operations on the API resource. All users which are not authenticated will have read access only. If they try to update the API resource then it will raise permission denied error. DjangoModelPermissions \u00b6 It is based on model permissions provided by django.contrib.auth . It only be applied to views that have a queryset property. It only applied on authenticated users who has the relevant model permissions assigned. POST requests require the user to have the add permission on the model. PUT and PATCH requests require the user to have the change permission on the model. DELETE requests require the user to have the delete permission on the model. DjangoModelPermissionsOrAnonReadOnly \u00b6 Same as DjangoModelPermissions, but it also allows unauthenticated users to have read-only access to the API resource. Configuring the Permissions Gobally in \"settings.py\" \u00b6 If we configure the global permission then these permission will apply on all API Views and ViewSets unless these permissions are overidden in Views and ViewSets. Let's see how to configure the permission globally. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES' : ( 'rest_framework.permissions.IsAuthenticated' , ) } DEFAULT_PERMISSION_CLASSES takes data type of list or tuple or any iterable types. We can configure multiple permissions globally. Working with Permissions in DRF \u00b6 In the last article we have seen how to setup the token based authentication in Django REST Framework. Let's write some code to know how to work with permissions. urls.py from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] views.py from rest_framework.response import Response from rest_framework.views import APIView class ProtectedAPIView ( APIView ): def get ( self , request , format = None ): content = { 'message' : 'Hey! you have authenticated!' } return Response ( content ) We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"Hey! you have authenticated!\"} In above code we have not defined the any permission class but it will ask for user authentication permission to access the API resource. Because we have defined the authentication permission globally. So, we have passed the authentication token in the python request to access the API resource. Writing Custom Permissions in DRF \u00b6 In Django REST Framework we can use custom permission classes also. We can write two types of permission classes \"view level\" and \"object level\" . View level permissions We use these permission when we want to check the user permission/access level before passing the request to process it further. Object level permissions We use it when we want to check the user permission on object level. For example, let's consider the book writer scenario where user writes books and if only allow its owner to modify it. In that kind of scenarios we use object level permissions. Let's write a custom permission to block some IP address to access the API. permissions.py from rest_framework import permissions from .models import Blacklist class BlacklistPermission ( permissions . BasePermission ): \"\"\" Permission check for blacklisted IPs. \"\"\" def has_permission ( self , request , view ): ip_addr = request . META [ 'REMOTE_ADDR' ] blacklisted = Blacklist . objects . filter ( ip_addr = ip_addr ) . exists () return not blacklisted \"BasePermission\" is the base class for all custom permissions. It provides the method \"has_permission\" to implement our custom permissions. In above code we have overriden \"has_permission\" method to implement our permission functionality. It's an example for view level permission. Let's write some code to implement object level permission. models.py from django.db import models from .models import User class Book ( models . Model ): title = models . CharField ( max_length = 30 ) owner = models . ForeignKey ( User , on_delete = models . CASCADE ) class Blacklist ( models . Model ): ip_addr = models . GenericIPAddressField () permissions.py from rest_framework import permissions from .models import Blacklist , Writer class IsBookOwner ( permissions . BasePermission ): \"\"\" Check if user is Book owner or not. \"\"\" def has_object_permission ( self , request , view , obj ): return obj . owner == request . user urls.py from . import views urlpatterns = [ path ( 'api/book/<int:pk>/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] serializers.py from rest_framework import serializers from .models import Book class BookSerializer ( serializers . ModelSeriaizer ): class Meta : model = Book views.py from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated from rest_framework.views import RetrieveAPIView from .permissions import IsBookOwner , BlacklistPermission from .serializers import BookSerializer class BookAPIView ( RetrieveAPIView ): permission_classes = [ BlacklistPermission , IsAuthenticated , IsBookOwner ] serializer_class = BookSerializer We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/book/1/\" , headers = headers ) print ( r . json ()) # Output: {\"title\": \"Smart People Do Smart Things!\"} In \"BookAPIView\" we have overridden global permission classes with our custom permission classes. API Permissions is one of the most powerful features of django rest framework. Reference: https://www.django-rest-framework.org/api-guide/permissions/","title":"Permissions in Django Rest Framework"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#permissions-in-django-rest-framework","text":"Permissions in Django Rest Framework are used to grant or deny access for different types of users to different parts of the API. Permissions are very useful when serving API resources/end-points with certain restrictions. For example, let's consider you are writing an api endpoint to create an answer to a question just like stackoverflow . It only allows an authenticated user to create the answers. In this case we restrict the user by checking user is authenticated or not. If user user is authenticated then we allow user to access the API resource otherwise we deny the user. It's a simple example to use django rest permission classes.","title":"Permissions In Django Rest Framework"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#permissions-flow-in-drf","text":"Whenever any request comes to DRF then it enters the \"dispatch\" method. \"dispatch\" method should route the request to appropriate request method like \"get\", \"post\", \"put\", \"delete\", etc. But, before routing the request to the one of these methods it will checks the authentication, \"permissions\" and then it checks throttles(i.e used to limit the number of requests per user or per IP). In Django REST framework we always define permissions as a list. In DRF we can setup global permission classes or we can specify the permission classes in Views and Viewsets. If all permission checks are valid then request will be passed to appropriate method (i.e \"get\", \"post\", \"put\", \"delete\", etc. ) based on the request type otherwise an exception will be raised. The exception can be one of exceptions.PermissionDenied or exceptions.NotAuthenticated . If authentication fails then it returns status code of 401 and if any other permissions fails then it will return the status code of 403.","title":"Permissions Flow in DRF"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#default-permissions-classes-provided-by-drf","text":"Django rest framework provides the following permission classes which are used frequently..","title":"Default Permissions Classes provided by DRF"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#allowany","text":"This permission class do not restrict the user to access the API resource.","title":"AllowAny"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#isauthenticated","text":"This permission class only permits authenticated or logged in users to access the API resource.","title":"IsAuthenticated"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#isadminuser","text":"This permission class only allows Django Admin Users(i.e user.is_staff = True) to access the api resource and all other users will not be able access the API resource.","title":"IsAdminUser"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#isauthenticatedorreadonly","text":"This permission class allows authenticated users to perform read and write operations on the API resource. All users which are not authenticated will have read access only. If they try to update the API resource then it will raise permission denied error.","title":"IsAuthenticatedOrReadOnly"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#djangomodelpermissions","text":"It is based on model permissions provided by django.contrib.auth . It only be applied to views that have a queryset property. It only applied on authenticated users who has the relevant model permissions assigned. POST requests require the user to have the add permission on the model. PUT and PATCH requests require the user to have the change permission on the model. DELETE requests require the user to have the delete permission on the model.","title":"DjangoModelPermissions"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#djangomodelpermissionsoranonreadonly","text":"Same as DjangoModelPermissions, but it also allows unauthenticated users to have read-only access to the API resource.","title":"DjangoModelPermissionsOrAnonReadOnly"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#configuring-the-permissions-gobally-in-settingspy","text":"If we configure the global permission then these permission will apply on all API Views and ViewSets unless these permissions are overidden in Views and ViewSets. Let's see how to configure the permission globally. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES' : ( 'rest_framework.permissions.IsAuthenticated' , ) } DEFAULT_PERMISSION_CLASSES takes data type of list or tuple or any iterable types. We can configure multiple permissions globally.","title":"Configuring the Permissions Gobally in \"settings.py\""},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#working-with-permissions-in-drf","text":"In the last article we have seen how to setup the token based authentication in Django REST Framework. Let's write some code to know how to work with permissions. urls.py from . import views urlpatterns = [ path ( 'api/protected/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] views.py from rest_framework.response import Response from rest_framework.views import APIView class ProtectedAPIView ( APIView ): def get ( self , request , format = None ): content = { 'message' : 'Hey! you have authenticated!' } return Response ( content ) We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/protected/\" , headers = headers ) print ( r . json ()) # Output: {\"message\": \"Hey! you have authenticated!\"} In above code we have not defined the any permission class but it will ask for user authentication permission to access the API resource. Because we have defined the authentication permission globally. So, we have passed the authentication token in the python request to access the API resource.","title":"Working with Permissions in DRF"},{"location":"course/django-rest-framework/permissions-in-django-rest-framework/#writing-custom-permissions-in-drf","text":"In Django REST Framework we can use custom permission classes also. We can write two types of permission classes \"view level\" and \"object level\" . View level permissions We use these permission when we want to check the user permission/access level before passing the request to process it further. Object level permissions We use it when we want to check the user permission on object level. For example, let's consider the book writer scenario where user writes books and if only allow its owner to modify it. In that kind of scenarios we use object level permissions. Let's write a custom permission to block some IP address to access the API. permissions.py from rest_framework import permissions from .models import Blacklist class BlacklistPermission ( permissions . BasePermission ): \"\"\" Permission check for blacklisted IPs. \"\"\" def has_permission ( self , request , view ): ip_addr = request . META [ 'REMOTE_ADDR' ] blacklisted = Blacklist . objects . filter ( ip_addr = ip_addr ) . exists () return not blacklisted \"BasePermission\" is the base class for all custom permissions. It provides the method \"has_permission\" to implement our custom permissions. In above code we have overriden \"has_permission\" method to implement our permission functionality. It's an example for view level permission. Let's write some code to implement object level permission. models.py from django.db import models from .models import User class Book ( models . Model ): title = models . CharField ( max_length = 30 ) owner = models . ForeignKey ( User , on_delete = models . CASCADE ) class Blacklist ( models . Model ): ip_addr = models . GenericIPAddressField () permissions.py from rest_framework import permissions from .models import Blacklist , Writer class IsBookOwner ( permissions . BasePermission ): \"\"\" Check if user is Book owner or not. \"\"\" def has_object_permission ( self , request , view , obj ): return obj . owner == request . user urls.py from . import views urlpatterns = [ path ( 'api/book/<int:pk>/' , views . ProtectedAPIView . as_view (), name = 'protected' ), ] serializers.py from rest_framework import serializers from .models import Book class BookSerializer ( serializers . ModelSeriaizer ): class Meta : model = Book views.py from rest_framework.response import Response from rest_framework.permissions import IsAuthenticated from rest_framework.views import RetrieveAPIView from .permissions import IsBookOwner , BlacklistPermission from .serializers import BookSerializer class BookAPIView ( RetrieveAPIView ): permission_classes = [ BlacklistPermission , IsAuthenticated , IsBookOwner ] serializer_class = BookSerializer We have written api view now it's time to test the above API endpoint (i.e \"api/protected/\"). Let's do this using python requests . import requests headers = { \"Authorization\" : \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" , \"content-type\" : \"application/json\" } r = requests . get ( \"https://localhost:8000/api/book/1/\" , headers = headers ) print ( r . json ()) # Output: {\"title\": \"Smart People Do Smart Things!\"} In \"BookAPIView\" we have overridden global permission classes with our custom permission classes. API Permissions is one of the most powerful features of django rest framework. Reference: https://www.django-rest-framework.org/api-guide/permissions/","title":"Writing Custom Permissions in DRF"},{"location":"course/django-rest-framework/renderers-in-django-rest-framework/","text":"renderers in Django Rest Framework \u00b6 Renderers are used to serialize the response into a specific media type like JSON, XML, YAML, etc. Django REST Framework provides various built-in renderer classes and it also supports to write a custom renderer. We specify renderers as an iterable type (i.e tuple, list, set, etc.). It means we can use multiple renderers for a single view/viewset. A renderer is chosen based on the media type received in the request. We can also specify default renderers globally in settings. Setting renderers globally \u00b6 We can set renderers globally like below in settings.py REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES' : [ 'rest_framework.renderers.JSONRenderer' , 'rest_framework.renderers.BrowsableAPIRenderer' , ] } Setting renderer for a View or Viewset \u00b6 we can set renderer to a view or viewset using attribute \"renderer_classes\" like below. from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView ( APIView ): \"\"\" A view that returns the count of active users in JSON. \"\"\" renderer_classes = [ JSONRenderer ] def get ( self , request , format = None ): user_count = User . objects . filter ( active = True ) . count () content = { 'user_count' : user_count } return Response ( content ) To generate \"xml\" response then use third party package \"REST Framework XML\" To generate \"jsonp\" response then use third party package \"REST framework JSONP\" To generate \"YAML\" response then use third party package \"REST framework YAML\"","title":"Renderers in Django Rest Framework"},{"location":"course/django-rest-framework/renderers-in-django-rest-framework/#renderers-in-django-rest-framework","text":"Renderers are used to serialize the response into a specific media type like JSON, XML, YAML, etc. Django REST Framework provides various built-in renderer classes and it also supports to write a custom renderer. We specify renderers as an iterable type (i.e tuple, list, set, etc.). It means we can use multiple renderers for a single view/viewset. A renderer is chosen based on the media type received in the request. We can also specify default renderers globally in settings.","title":"renderers in Django Rest Framework"},{"location":"course/django-rest-framework/renderers-in-django-rest-framework/#setting-renderers-globally","text":"We can set renderers globally like below in settings.py REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES' : [ 'rest_framework.renderers.JSONRenderer' , 'rest_framework.renderers.BrowsableAPIRenderer' , ] }","title":"Setting renderers globally"},{"location":"course/django-rest-framework/renderers-in-django-rest-framework/#setting-renderer-for-a-view-or-viewset","text":"we can set renderer to a view or viewset using attribute \"renderer_classes\" like below. from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView ( APIView ): \"\"\" A view that returns the count of active users in JSON. \"\"\" renderer_classes = [ JSONRenderer ] def get ( self , request , format = None ): user_count = User . objects . filter ( active = True ) . count () content = { 'user_count' : user_count } return Response ( content ) To generate \"xml\" response then use third party package \"REST Framework XML\" To generate \"jsonp\" response then use third party package \"REST framework JSONP\" To generate \"YAML\" response then use third party package \"REST framework YAML\"","title":"Setting renderer for a View or Viewset"},{"location":"course/django-rest-framework/routers-in-django-rest-framework/","text":"Routers In Django Rest Framework \u00b6 Routers are used with ViewSets in django rest framework to auto config the urls. Routers provides a simple, quick and consistent way of wiring ViewSet logic to a set of URLs. Router automatically maps the incoming request to proper viewset action based on the request method type(i.e GET, POST, etc). Let's start using routers. Working with DRF Routers \u00b6 Lets's see a simple example how to configure viewset urls urls.py from rest_framework import routers from .views import UserViewSet router = routers . SimpleRouter () router . register ( 'users' , UserViewSet ) urlpatterns = router . urls Above example will generate urls configuration like below URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' We have two types of routers in Django REST SimpleRouter \u00b6 It includes actions for all actions (i.e list, create, retrieve, update, partial_update and destroy). Let's see how it configures the urls URL Style HTTP Method Action URL Name {prefix}/ GET list {basename}-list POST create {prefix}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} DefaultRouter \u00b6 It also includes all actions just like SimpleRouter and it additionally provides a default root view which returns a response containing hyperlinks to all the list views. Let's see how it configures the urls URL Style HTTP Method Action URL Name [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} To avoid trailing slash we have to provide trailing_slash=False while initiating the router like below. router = SimpleRouter ( trailing_slash = False ) # or # router = DefaultRouter(trailing_slash=False) Reference: https://www.django-rest-framework.org/api-guide/routers SourceCode: https://github.com/encode/django-rest-framework/blob/master/rest_framework/routers.py","title":"Routers in Django Rest Framework"},{"location":"course/django-rest-framework/routers-in-django-rest-framework/#routers-in-django-rest-framework","text":"Routers are used with ViewSets in django rest framework to auto config the urls. Routers provides a simple, quick and consistent way of wiring ViewSet logic to a set of URLs. Router automatically maps the incoming request to proper viewset action based on the request method type(i.e GET, POST, etc). Let's start using routers.","title":"Routers In Django Rest Framework"},{"location":"course/django-rest-framework/routers-in-django-rest-framework/#working-with-drf-routers","text":"Lets's see a simple example how to configure viewset urls urls.py from rest_framework import routers from .views import UserViewSet router = routers . SimpleRouter () router . register ( 'users' , UserViewSet ) urlpatterns = router . urls Above example will generate urls configuration like below URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' We have two types of routers in Django REST","title":"Working with DRF Routers"},{"location":"course/django-rest-framework/routers-in-django-rest-framework/#simplerouter","text":"It includes actions for all actions (i.e list, create, retrieve, update, partial_update and destroy). Let's see how it configures the urls URL Style HTTP Method Action URL Name {prefix}/ GET list {basename}-list POST create {prefix}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name}","title":"SimpleRouter"},{"location":"course/django-rest-framework/routers-in-django-rest-framework/#defaultrouter","text":"It also includes all actions just like SimpleRouter and it additionally provides a default root view which returns a response containing hyperlinks to all the list views. Let's see how it configures the urls URL Style HTTP Method Action URL Name [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} To avoid trailing slash we have to provide trailing_slash=False while initiating the router like below. router = SimpleRouter ( trailing_slash = False ) # or # router = DefaultRouter(trailing_slash=False) Reference: https://www.django-rest-framework.org/api-guide/routers SourceCode: https://github.com/encode/django-rest-framework/blob/master/rest_framework/routers.py","title":"DefaultRouter"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/","text":"Serializers In Django Rest Framework \u00b6 Serializers in django rest framework are similar to django forms. By using django rest framework serializers we can serialize and deserialize the data. We can also validate the incoming data using django rest framework serializers to maintain the integrity of the data. We can divide the django rest framework serializers into two categories. Normal Serializers It simply validates the data and performs the serialization and de-serialization. For normal serializers we need implement the serializer methods like \"save\" and \"update\". We also need to specify the each and every field of serializer externally and also in the serializer meta class \"fields\" attribute. Model serializers It comes with advanced features like in-built functionality for \"save\", \"update\". Unlike the normal serializers we can simply provide \"fields\" in the serializer meta class and no need to write external fields. In this article we will only practice about the normal serializers. Creating a django rest framework serializer class \u00b6 In django rest framework we use \"Serializer\" as a base class for all the serializers. we import it from \"rest_framework.serializers\" module. Let's create a student serializer class. from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 100 ) last_name = serializers . CharField ( max_length = 100 ) dob = serializers . DateField ( required = False ) college = serializers . CharField ( max_length = 100 ) address = serializers . CharField ( max_length = 100 ) we have created a serializer class for a \"Student\" that takes student information like \"first_name\", \"last_name\", \"dob\" (date of birth) and address. In above serializers we have used serializer fields \"CharField\", \"DateField\" only. We can find many more fields at \"http://www.django-rest-framework.org/api-guide/fields/\" . Every django rest framework serializer takes 2 parameters \"instance\", \"data\" as initializers. Working with django rest framework serializers \u00b6 from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have created the serializer instance with no instance and no data. After, we have validated the serializer against the data. By default every field in the serializer has a validator(i.e field required) . To avoid the field required validator we can specify \"required=False\" in the serializer field. We can validate the serializer by calling the method \" is_valid() \". It will return the boolean(True/False) value. If the serializer is not valid then we can get errors by using the attribute \"errors\". Note: \"errors\" attribute only available after calling the method \" is_valid() \" otherwise serializer will raise the errors. data = { 'first_name' : 'John' , 'last_name' : 'Williams' , 'college' : 'University of Columbia' , 'address' : '1-4h, Columbia' } serializer = StudentSerializer ( data = data ) # check if serializer is valid serializer . is_valid () # output: True # access the validated data serializer . validated_data # OrderedDict([ # ('first_name', 'John'), # ('last_name', 'Williams'), # ('college', 'University of Columbia'), # ('address', '1-4h, Columbia')]) In the above code we provided the serializer with valid data. We validated the serializer with the method \"is_valid()\" and it returned \"True\". It means the provided data is valid. Now, access the validated data from the serializer using the attribute \"validated_data\". Note: \"errors\" attribute only available after calling the method \"is_valid()\" otherwise serializer will raise the errors. Custom validations in django rest serializers \u00b6 we have two types of serializer validators 1.field validation using \"validate_ \" method 2.common validation using \"validate\" method field validation using \"validate_ \" method \u00b6 from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have written custom validator for field \"dob\". The validation method recieves the argument as the value of the field after converting it into a python object. common validation using \"validate\" method \u00b6 from rest_framework import serializers class EventSerializer ( serializers . Serializer ): description = serializers . CharField ( max_length = 100 ) start = serializers . DateTimeField () finish = serializers . DateTimeField () def validate ( self , data ): \"\"\" Check that the start is before the stop. \"\"\" if data [ 'start' ] > data [ 'finish' ]: raise serializers . ValidationError ( \"finish must occur after start\" ) return data # let's test it serializer = EventSerializer ( data = { 'description' : 'desc' , 'start' : '2100-12-12 0:0:0' , 'finish' : '2050-12-03 0:0:0' }) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # {'non_field_errors':[ErrorDetail(string='finish must occur after start',code='invalid')]} In the above code we have writer a common validation method for all the fields instead individual fields. The method receives the data() after converting fields data into equivalent python objects. In the next article we will discuss about django rest framework model serializers Reference: http://www.django-rest-framework.org/tutorial/1-serialization/","title":"Serializers in Django Rest Framework"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/#serializers-in-django-rest-framework","text":"Serializers in django rest framework are similar to django forms. By using django rest framework serializers we can serialize and deserialize the data. We can also validate the incoming data using django rest framework serializers to maintain the integrity of the data. We can divide the django rest framework serializers into two categories. Normal Serializers It simply validates the data and performs the serialization and de-serialization. For normal serializers we need implement the serializer methods like \"save\" and \"update\". We also need to specify the each and every field of serializer externally and also in the serializer meta class \"fields\" attribute. Model serializers It comes with advanced features like in-built functionality for \"save\", \"update\". Unlike the normal serializers we can simply provide \"fields\" in the serializer meta class and no need to write external fields. In this article we will only practice about the normal serializers.","title":"Serializers In Django Rest Framework"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/#creating-a-django-rest-framework-serializer-class","text":"In django rest framework we use \"Serializer\" as a base class for all the serializers. we import it from \"rest_framework.serializers\" module. Let's create a student serializer class. from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 100 ) last_name = serializers . CharField ( max_length = 100 ) dob = serializers . DateField ( required = False ) college = serializers . CharField ( max_length = 100 ) address = serializers . CharField ( max_length = 100 ) we have created a serializer class for a \"Student\" that takes student information like \"first_name\", \"last_name\", \"dob\" (date of birth) and address. In above serializers we have used serializer fields \"CharField\", \"DateField\" only. We can find many more fields at \"http://www.django-rest-framework.org/api-guide/fields/\" . Every django rest framework serializer takes 2 parameters \"instance\", \"data\" as initializers.","title":"Creating a django rest framework serializer class"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/#working-with-django-rest-framework-serializers","text":"from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have created the serializer instance with no instance and no data. After, we have validated the serializer against the data. By default every field in the serializer has a validator(i.e field required) . To avoid the field required validator we can specify \"required=False\" in the serializer field. We can validate the serializer by calling the method \" is_valid() \". It will return the boolean(True/False) value. If the serializer is not valid then we can get errors by using the attribute \"errors\". Note: \"errors\" attribute only available after calling the method \" is_valid() \" otherwise serializer will raise the errors. data = { 'first_name' : 'John' , 'last_name' : 'Williams' , 'college' : 'University of Columbia' , 'address' : '1-4h, Columbia' } serializer = StudentSerializer ( data = data ) # check if serializer is valid serializer . is_valid () # output: True # access the validated data serializer . validated_data # OrderedDict([ # ('first_name', 'John'), # ('last_name', 'Williams'), # ('college', 'University of Columbia'), # ('address', '1-4h, Columbia')]) In the above code we provided the serializer with valid data. We validated the serializer with the method \"is_valid()\" and it returned \"True\". It means the provided data is valid. Now, access the validated data from the serializer using the attribute \"validated_data\". Note: \"errors\" attribute only available after calling the method \"is_valid()\" otherwise serializer will raise the errors.","title":"Working with django rest framework serializers"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/#custom-validations-in-django-rest-serializers","text":"we have two types of serializer validators 1.field validation using \"validate_ \" method 2.common validation using \"validate\" method","title":"Custom validations in django rest serializers"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/#field-validation-using-validate_-method","text":"from datetime import date from rest_framework import serializers class StudentSerializer ( serializers . Serializer ): first_name = serializers . CharField ( max_length = 80 ) dob = serializers . DateField () def validate_dob ( self , dob ): if dob > date . today (): raise serializers . ValidationError ( \"Future date not allowed\" ) return dob # let's test it serializer = StudentSerializer ( data = { 'first_name' : 'Anji' , 'dob' : '2100-12-12' }) serializer . is_valid () # ouput: False serializer . errors # output: {'dob': [ErrorDetail(string='Future date not allowed', code='invalid')]} In above code we have written custom validator for field \"dob\". The validation method recieves the argument as the value of the field after converting it into a python object.","title":"field validation using \"validate_\" method"},{"location":"course/django-rest-framework/serializers-in-django-rest-framework/#common-validation-using-validate-method","text":"from rest_framework import serializers class EventSerializer ( serializers . Serializer ): description = serializers . CharField ( max_length = 100 ) start = serializers . DateTimeField () finish = serializers . DateTimeField () def validate ( self , data ): \"\"\" Check that the start is before the stop. \"\"\" if data [ 'start' ] > data [ 'finish' ]: raise serializers . ValidationError ( \"finish must occur after start\" ) return data # let's test it serializer = EventSerializer ( data = { 'description' : 'desc' , 'start' : '2100-12-12 0:0:0' , 'finish' : '2050-12-03 0:0:0' }) print ( serializer . is_valid ()) # output: False print ( serializer . errors ) # {'non_field_errors':[ErrorDetail(string='finish must occur after start',code='invalid')]} In the above code we have writer a common validation method for all the fields instead individual fields. The method receives the data() after converting fields data into equivalent python objects. In the next article we will discuss about django rest framework model serializers Reference: http://www.django-rest-framework.org/tutorial/1-serialization/","title":"common validation using \"validate\" method"},{"location":"course/django-rest-framework/viewsets-in-django-rest-framework/","text":"Viewsets In Django Rest Framework \u00b6 ViewSets are one of the super cool features of Django REST Framework. ViewSets are just a type of class based view but it do not provide request method handlers like \"get()\", \"post()\", \"patch()\", \"delete()\", etc. But, it provides actions such as \"create()\", \"list()\", \"retrieve()\", \"update()\", \"partial_update()\" and \"destroy()\". DRF allows us to combine the logic for a set of related views in a single class \" ViewSet \". ViewSets can speed-up the development and better maintainability. In class based views we map views to urls using url config (i.e path ), but where as in viewsets we use routers to register the viewsets . Routers simplifies the process of configuring the viewsets to urls. Advantages of ViewSets \u00b6 Repeated functionality can be combined into a single class. Routers are used to wiring up the url configurations so, we do not need to write url configurations externally. For large API's we can enforce a consistent URL configuration throughout the API. ViewSet classes in DRF ViewSet It does not provide the any implemetations of actions. We have to override the class and define the action implementations explicitly. We ca use the attributes like permission_classes, authentication_classes Example: Let's define a simple viewset that can be used to list or retrieve all the students in the school model. models.py from django.db import models class Student ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () def __str__ ( self ): return \" {name} \" . format ( name = self . name ) serializers.py from rest_framework import serializers from .models import Student class StudentSerializer ( serializers . ModelSerializer ): class Meta : model = Student fields = ( 'id' , 'name' , 'age' ) views.py from django.shortcuts import get_object_or_404 from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentViewSet ( viewsets . ViewSet ): def list ( self , request ): queryset = Student . objects . all () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , pk = None ): queryset = Student . objects . all () user = get_object_or_404 ( queryset , pk = pk ) serializer = StudentSerializer ( user ) return Response ( serializer . data ) GenericViewSet Just like \"ViewSet\", It also does not provide the implementation of actions. We ca use the attributes like permission_classes, authentication_classes The only difference between ViewSet and GenericViewSet is that it provides generic methods like get_object and get_queryset . Example: views.py from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentGenericViewSet ( viewsets . GenericViewSet ): def get_queryset ( self ): queryset = Student . objects . all () return queryset def get_object ( self ): queryset = self . get_queryset () obj = queryset . get ( pk = self . kwargs [ 'pk' ]) return obj def list ( self , request ): queryset = self . get_queryset () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , ** kwargs ): obj = self . get_object () serializer = StudentSerializer ( obj ) return Response ( serializer . data ) ModelViewSet It provides all the actions by default (i.e .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy()). Most of the times we use this because it provides the generic functionality so, we simply need to override the attributes like queryset , serializer_class , permission_classes and authentication_classes . If we any conditional logic then we can override methods like get_object , get_queryset , get_permission_classes , etc. Example: views.py from rest_framework import viewsets from .models import Student from .serializers import StudentSerializer class StudentModelViewSet ( viewsets . ModelViewSet ): queryset = Student . objects . all () serializer_class = StudentSerializer So, our viewsets are ready to go. But, we have not configured the urls. Yes, lets do this with Django Rest \"Routers\". urls.py from rest_framework.routers import DefaultRouter from . import views router = DefaultRouter () router . register ( 'student-viewset' , views . StudentViewSet , basename = 'student_vs' ) router . register ( 'student-generic-viewset' , views . StudentGenericViewSet , basename = 'student_gvs' ) router . register ( 'student-model-viewset' , views . StudentModelViewSet , basename = 'student_mvs' ) urlpatterns = router . urls # print(urlpatterns) StudentViewSet Urls '^student-viewset/$' '^student-viewset/(?P<pk>[^/.]+)/$' StudentGenericViewSet Urls '^student-generic-viewset/$' '^student-generic-viewset/(?P<pk>[^/.]+)/$' Student*ModelViewSet* Urls '^student-model-viewset/$' '^student-model-viewset/(?P<pk>[^/.]+)/$' For \" StudentViewSet \" and \" StudentGenericViewset \" we have implemeted two actions (i.e list and retrieve) only. so, we can only retrieve the resources. But, where as in \" StudentModelViewset \" we have inherited the \" ModelViewSet \" so it also provides functionalities like create update and partial update in addition to list and retrieve. so, try it on your own. You can find the sample project on github . I will write more about *\"Django REST Routers\"*in the next article.","title":"Viewsets in Django Rest Framework"},{"location":"course/django-rest-framework/viewsets-in-django-rest-framework/#viewsets-in-django-rest-framework","text":"ViewSets are one of the super cool features of Django REST Framework. ViewSets are just a type of class based view but it do not provide request method handlers like \"get()\", \"post()\", \"patch()\", \"delete()\", etc. But, it provides actions such as \"create()\", \"list()\", \"retrieve()\", \"update()\", \"partial_update()\" and \"destroy()\". DRF allows us to combine the logic for a set of related views in a single class \" ViewSet \". ViewSets can speed-up the development and better maintainability. In class based views we map views to urls using url config (i.e path ), but where as in viewsets we use routers to register the viewsets . Routers simplifies the process of configuring the viewsets to urls.","title":"Viewsets In Django Rest Framework"},{"location":"course/django-rest-framework/viewsets-in-django-rest-framework/#advantages-of-viewsets","text":"Repeated functionality can be combined into a single class. Routers are used to wiring up the url configurations so, we do not need to write url configurations externally. For large API's we can enforce a consistent URL configuration throughout the API. ViewSet classes in DRF ViewSet It does not provide the any implemetations of actions. We have to override the class and define the action implementations explicitly. We ca use the attributes like permission_classes, authentication_classes Example: Let's define a simple viewset that can be used to list or retrieve all the students in the school model. models.py from django.db import models class Student ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () def __str__ ( self ): return \" {name} \" . format ( name = self . name ) serializers.py from rest_framework import serializers from .models import Student class StudentSerializer ( serializers . ModelSerializer ): class Meta : model = Student fields = ( 'id' , 'name' , 'age' ) views.py from django.shortcuts import get_object_or_404 from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentViewSet ( viewsets . ViewSet ): def list ( self , request ): queryset = Student . objects . all () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , pk = None ): queryset = Student . objects . all () user = get_object_or_404 ( queryset , pk = pk ) serializer = StudentSerializer ( user ) return Response ( serializer . data ) GenericViewSet Just like \"ViewSet\", It also does not provide the implementation of actions. We ca use the attributes like permission_classes, authentication_classes The only difference between ViewSet and GenericViewSet is that it provides generic methods like get_object and get_queryset . Example: views.py from rest_framework import viewsets from rest_framework.response import Response from .models import Student from .serializers import StudentSerializer class StudentGenericViewSet ( viewsets . GenericViewSet ): def get_queryset ( self ): queryset = Student . objects . all () return queryset def get_object ( self ): queryset = self . get_queryset () obj = queryset . get ( pk = self . kwargs [ 'pk' ]) return obj def list ( self , request ): queryset = self . get_queryset () serializer = StudentSerializer ( queryset , many = True ) return Response ( serializer . data ) def retrieve ( self , request , ** kwargs ): obj = self . get_object () serializer = StudentSerializer ( obj ) return Response ( serializer . data ) ModelViewSet It provides all the actions by default (i.e .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy()). Most of the times we use this because it provides the generic functionality so, we simply need to override the attributes like queryset , serializer_class , permission_classes and authentication_classes . If we any conditional logic then we can override methods like get_object , get_queryset , get_permission_classes , etc. Example: views.py from rest_framework import viewsets from .models import Student from .serializers import StudentSerializer class StudentModelViewSet ( viewsets . ModelViewSet ): queryset = Student . objects . all () serializer_class = StudentSerializer So, our viewsets are ready to go. But, we have not configured the urls. Yes, lets do this with Django Rest \"Routers\". urls.py from rest_framework.routers import DefaultRouter from . import views router = DefaultRouter () router . register ( 'student-viewset' , views . StudentViewSet , basename = 'student_vs' ) router . register ( 'student-generic-viewset' , views . StudentGenericViewSet , basename = 'student_gvs' ) router . register ( 'student-model-viewset' , views . StudentModelViewSet , basename = 'student_mvs' ) urlpatterns = router . urls # print(urlpatterns) StudentViewSet Urls '^student-viewset/$' '^student-viewset/(?P<pk>[^/.]+)/$' StudentGenericViewSet Urls '^student-generic-viewset/$' '^student-generic-viewset/(?P<pk>[^/.]+)/$' Student*ModelViewSet* Urls '^student-model-viewset/$' '^student-model-viewset/(?P<pk>[^/.]+)/$' For \" StudentViewSet \" and \" StudentGenericViewset \" we have implemeted two actions (i.e list and retrieve) only. so, we can only retrieve the resources. But, where as in \" StudentModelViewset \" we have inherited the \" ModelViewSet \" so it also provides functionalities like create update and partial update in addition to list and retrieve. so, try it on your own. You can find the sample project on github . I will write more about *\"Django REST Routers\"*in the next article.","title":"Advantages of ViewSets"},{"location":"course/git/","text":"Git \u00b6 What is Git? \u00b6 Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows. Git work flow \u00b6 How to install Git in linux/Ubuntu? \u00b6 To install git just run the below commands in the terminal sudo apt update sudo apt install git git --version git --version will give you the installed version of git. How to configure the Git? \u00b6 The following commands will set your git commit username and email address: git config --global user.name \"Your Name\" git config --global user.email \"youremail@yourdomain.com\" We can verify the config with command git config --list What is \"git init\"? \u00b6 The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. Create a directory that you want to work and cd to it and execute the below command git init Above command will create a directory .git which will contain all git revision history. What is \"git remote\"? \u00b6 git remote allows us to manage the connections of remote repository. It allows us to add new remote connections It shows existing remote connections It allows us to remove the existing connections Add new git remote connection \u00b6 git remote add <short name> <url> Example: git remote add origin https://github.com/AnjaneyuluBatta505/learnbatta.git Show existing git remote connections \u00b6 git remote -v Output: origin https://github.com/AnjaneyuluBatta505/learnbatta.git (fetch) origin https://github.com/AnjaneyuluBatta505/learnbatta.git (push) Remove existing remote connection \u00b6 git remote remove <short name> Example: git remote remove origin what is \"git fetch\" ? \u00b6 git fetch really only downloads new data from a remote repository - but it doesn't integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository. What is \"git branch\"? \u00b6 Git branch is a way to write the new code without making changes to the existing code. Whenever we develop a new feature then we will create a new branch from the stable branch and implement the feature. After getting approval we will merge the branch back to the stable branch. In most of the code repositories the stable branch name is master . We can change the stable branch to any name. what is \"git checkout \"? \u00b6 With git fetch command we will get the new data from the remote repo. Let's change the branch to stable branch master with below command. git checkout master We can give any branch name instead of master . how to create a new git branch from branch master? \u00b6 If you want to create a new branch feature1 from stable branch master then run the below commands. git branch Outout: *master Let's create the branch git checkout -b feature1 Above command will create a new branch feature1 from branch master . Output: Switched to a new branch 'feature1' Let's see what branch we are on git branch output: * feature1 master What is \"git status\"? \u00b6 The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git. Status output does not show you any information regarding the committed project history. Let's say, I have added a new file that looks like below hello.py print ( \"hello world\" ) now run the command git status . We will get the below output On branch feature1 Untracked files: ( use \"git add <file>...\" to include in what will be committed ) hello.py nothing added to commit but untracked files present ( use \"git add\" to track ) What is \"git add\"? \u00b6 The git add is a command, which adds changes in the working directory to the staging area. With the help of this command, you tell Git that you want to add updates to a certain file in the next commit. But in order to record changes, you need to run git commit too. Let's add file hello.py to staging area with below command git add hello.py Let's see the status git status Output On branch feature1 Changes to be committed: (use \"git restore --staged <file>...\" to unstage) new file: hello.py What is \"git commit\"? \u00b6 The commit command is used to save your changes to the local repository. Note that you have to explicitly tell Git which changes you want to include in a commit before running the \"git commit\" command. This means that a file won't be automatically included in the next commit just because it was changed. Let's commit the file git commit -m \"hello.py file added\" Output: [feature1 c1e6c1e] hello.py file added 1 file changed, 1 insertion(+) create mode 100644 hello.py What is \"git push\"? \u00b6 The git push command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo. ... Remote branches are configured using the git remote command. Pushing has the potential to overwrite changes, caution should be taken when pushing. Currently, all changes that we committed are in local branch we need to push the branch to remote repository. Let's do that with command git push <branch name> . git push origin feature1 What is \"git pull\"? \u00b6 We are working in a team, we work with multiple features. If we have dependency on some feature we need to get that code to our local environment. To get the code from the remote repository to local we use git pull . git pull What is \"git diff\"? \u00b6 Git diff allows to see that changes that we made to the code. git diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more. git diff how to diff a single file with remote branch file? \u00b6 git diff origin/<branch_name>:path/to/file.ext path/to/file.ext","title":"Git"},{"location":"course/git/#git","text":"","title":"Git"},{"location":"course/git/#what-is-git","text":"Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows.","title":"What is Git?"},{"location":"course/git/#git-work-flow","text":"","title":"Git work flow"},{"location":"course/git/#how-to-install-git-in-linuxubuntu","text":"To install git just run the below commands in the terminal sudo apt update sudo apt install git git --version git --version will give you the installed version of git.","title":"How to install Git in linux/Ubuntu?"},{"location":"course/git/#how-to-configure-the-git","text":"The following commands will set your git commit username and email address: git config --global user.name \"Your Name\" git config --global user.email \"youremail@yourdomain.com\" We can verify the config with command git config --list","title":"How to configure the Git?"},{"location":"course/git/#what-is-git-init","text":"The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. Create a directory that you want to work and cd to it and execute the below command git init Above command will create a directory .git which will contain all git revision history.","title":"What is \"git init\"?"},{"location":"course/git/#what-is-git-remote","text":"git remote allows us to manage the connections of remote repository. It allows us to add new remote connections It shows existing remote connections It allows us to remove the existing connections","title":"What is \"git remote\"?"},{"location":"course/git/#add-new-git-remote-connection","text":"git remote add <short name> <url> Example: git remote add origin https://github.com/AnjaneyuluBatta505/learnbatta.git","title":"Add new git remote connection"},{"location":"course/git/#show-existing-git-remote-connections","text":"git remote -v Output: origin https://github.com/AnjaneyuluBatta505/learnbatta.git (fetch) origin https://github.com/AnjaneyuluBatta505/learnbatta.git (push)","title":"Show existing git remote connections"},{"location":"course/git/#remove-existing-remote-connection","text":"git remote remove <short name> Example: git remote remove origin","title":"Remove existing remote connection"},{"location":"course/git/#what-is-git-fetch","text":"git fetch really only downloads new data from a remote repository - but it doesn't integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository.","title":"what is \"git fetch\" ?"},{"location":"course/git/#what-is-git-branch","text":"Git branch is a way to write the new code without making changes to the existing code. Whenever we develop a new feature then we will create a new branch from the stable branch and implement the feature. After getting approval we will merge the branch back to the stable branch. In most of the code repositories the stable branch name is master . We can change the stable branch to any name.","title":"What is \"git branch\"?"},{"location":"course/git/#what-is-git-checkout","text":"With git fetch command we will get the new data from the remote repo. Let's change the branch to stable branch master with below command. git checkout master We can give any branch name instead of master .","title":"what is \"git checkout \"?"},{"location":"course/git/#how-to-create-a-new-git-branch-from-branch-master","text":"If you want to create a new branch feature1 from stable branch master then run the below commands. git branch Outout: *master Let's create the branch git checkout -b feature1 Above command will create a new branch feature1 from branch master . Output: Switched to a new branch 'feature1' Let's see what branch we are on git branch output: * feature1 master","title":"how to create a new git branch from branch master?"},{"location":"course/git/#what-is-git-status","text":"The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git. Status output does not show you any information regarding the committed project history. Let's say, I have added a new file that looks like below hello.py print ( \"hello world\" ) now run the command git status . We will get the below output On branch feature1 Untracked files: ( use \"git add <file>...\" to include in what will be committed ) hello.py nothing added to commit but untracked files present ( use \"git add\" to track )","title":"What is \"git status\"?"},{"location":"course/git/#what-is-git-add","text":"The git add is a command, which adds changes in the working directory to the staging area. With the help of this command, you tell Git that you want to add updates to a certain file in the next commit. But in order to record changes, you need to run git commit too. Let's add file hello.py to staging area with below command git add hello.py Let's see the status git status Output On branch feature1 Changes to be committed: (use \"git restore --staged <file>...\" to unstage) new file: hello.py","title":"What is \"git add\"?"},{"location":"course/git/#what-is-git-commit","text":"The commit command is used to save your changes to the local repository. Note that you have to explicitly tell Git which changes you want to include in a commit before running the \"git commit\" command. This means that a file won't be automatically included in the next commit just because it was changed. Let's commit the file git commit -m \"hello.py file added\" Output: [feature1 c1e6c1e] hello.py file added 1 file changed, 1 insertion(+) create mode 100644 hello.py","title":"What is \"git commit\"?"},{"location":"course/git/#what-is-git-push","text":"The git push command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo. ... Remote branches are configured using the git remote command. Pushing has the potential to overwrite changes, caution should be taken when pushing. Currently, all changes that we committed are in local branch we need to push the branch to remote repository. Let's do that with command git push <branch name> . git push origin feature1","title":"What is \"git push\"?"},{"location":"course/git/#what-is-git-pull","text":"We are working in a team, we work with multiple features. If we have dependency on some feature we need to get that code to our local environment. To get the code from the remote repository to local we use git pull . git pull","title":"What is \"git pull\"?"},{"location":"course/git/#what-is-git-diff","text":"Git diff allows to see that changes that we made to the code. git diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more. git diff","title":"What is \"git diff\"?"},{"location":"course/git/#how-to-diff-a-single-file-with-remote-branch-file","text":"git diff origin/<branch_name>:path/to/file.ext path/to/file.ext","title":"how to diff a single file with remote branch file?"},{"location":"course/golang/","text":"Go Programming Language \u00b6 Why to choose Golang ? \u00b6 High performance due to static types and concurrency Concurrency & Channels for parallel processing Fast Compile Time Low learning curve because it's the minimal programming language It's opensource & backed by Google! Golang comparison with other languages \u00b6 Companies using Golang \u00b6 Google Uber Twitch Dailymotion SendGrid Dropbox SoundCloud Youtube Official Website: https://golang.org/","title":"Go Language"},{"location":"course/golang/#go-programming-language","text":"","title":"Go Programming Language"},{"location":"course/golang/#why-to-choose-golang","text":"High performance due to static types and concurrency Concurrency & Channels for parallel processing Fast Compile Time Low learning curve because it's the minimal programming language It's opensource & backed by Google!","title":"Why to choose Golang?"},{"location":"course/golang/#golang-comparison-with-other-languages","text":"","title":"Golang comparison with other languages"},{"location":"course/golang/#companies-using-golang","text":"Google Uber Twitch Dailymotion SendGrid Dropbox SoundCloud Youtube Official Website: https://golang.org/","title":"Companies using Golang"},{"location":"course/golang/data-types-and-variables/","text":"Golang data types, variable and Constants \u00b6 Golang has the following data types Basic type : Numbers Integers Floating-Point Numbers Complex Numbers Strings Booleans Aggregate type : Array Structs Reference type : Pointers Slices Maps Functions Channels Interface type Numbers \u00b6 In go language we have signed and un-signed integers. Let's see the table of integers that we can define to save the memory Data Type Description int8 8-bit signed integer int16 16-bit signed integer int32 32-bit signed integer int64 64-bit signed integer uint8 8-bit unsigned integer uint16 16-bit unsigned integer uint32 32-bit unsigned integer uint64 64-bit unsigned integer int Both in and uint contain same size, either 32 or 64 bit. uint Both in and uint contain same size, either 32 or 64 bit. rune It is a synonym of int32 and also represent Unicode code points. byte It is a synonym of int8 . uintptr It is an unsigned integer type. Its width is not defined, but its can hold all the bits of a pointer value. Example: package main import \"fmt\" var myInt8 int8 = 2 func main (){ var myInt int = 2506 fmt . Println ( myInt8 , myInt ) } Like above we can define the integer variables. Choose the integer type based on the number size. Strings \u00b6 String is immutable slice of bytes and the bytes of the strings can be represented in utf-8 encoding. Example: package main import \"fmt\" var myStr1 string = \"Hello Wolrd!!\" func main (){ myStr2 := \"This is Batta\" fmt . Println ( myStr1 , myStr2 ) } Booleans \u00b6 Booleans has only two values true or false . It's data type is bool Example: package main import \"fmt\" var valid bool = true func main (){ invalid := false fmt . Println ( valid , invalid ) } Array \u00b6 In Golang, array is a fixed-size collection of elements of the same type. The elements of the array are stored sequentially Example: package main import \"fmt\" func main () { var a [ 2 ] string a [ 0 ] = \"Hello\" a [ 1 ] = \"World\" fmt . Println ( a [ 0 ], a [ 1 ]) fmt . Println ( a ) primes := [ 6 ] int { 2 , 3 , 5 , 7 , 11 , 13 } fmt . Println ( primes ) } Structs \u00b6 A struct is a collection of data fields with declared data types. Golang has the ability to declare and create own data types by combining one or more types, including both built-in and user-defined types. Example: package main import \"fmt\" type rectangle struct { length float64 breadth float64 color string } func main () { fmt . Println ( rectangle { 10.5 , 25.10 , \"red\" }) } Pointers \u00b6 A pointer is a variable that stores the memory address data referenced by another variable. Pointers have the power to mutate data they are pointing to Example: package main import \"fmt\" func main () { var title string = \"Google\" var pointer * string = & title fmt . Println ( \"title =\" , title ) fmt . Println ( \"pointer =\" , pointer ) fmt . Println ( \"pointer data =\" , * pointer ) // lets change the data * pointer = \"Bing\" fmt . Println ( \"title =\" , title ) fmt . Println ( \"pointer =\" , pointer ) fmt . Println ( \"pointer data =\" , * pointer ) } Slices \u00b6 A Slice is a segment of an array. Slices build on arrays and provide more power, flexibility, and convenience compared to arrays. Example: package main import \"fmt\" func main () { var a = [ 5 ] string { \"Alpha\" , \"Beta\" , \"Gamma\" , \"Delta\" , \"Epsilon\" } // Creating a slice from the array var s [] string = a [ 1 : 4 ] fmt . Println ( \"Array a = \" , a ) fmt . Println ( \"Slice s = \" , s ) } Maps \u00b6 A map is an unordered collection of key-value pairs. It maps keys to values. The keys are unique within a map . Example: package main import \"fmt\" func main () { var m = map [ string ] int { \"one\" : 1 , \"two\" : 2 , \"three\" : 3 , \"four\" : 4 , \"five\" : 5 , // Comma is necessary } fmt . Println ( m ) fmt . Println ( m [ \"one\" ]) } Functions \u00b6 A function is an independent section of code that maps zero or more input parameters to zero or more output parameters. Example: package main import \"fmt\" // function func average ( xs [] float64 ) float64 { total := 0.0 for _ , v := range xs { total += v } return total / float64 ( len ( xs )) } func main () { xs := [] float64 { 98 , 93 , 77 , 82 , 83 } fmt . Println ( average ( xs )) } Channels \u00b6 Channels can be thought as pipes using which Goroutines communicate. Similar to how water flows from one end to another in a pipe, data can be sent from one end and received from the another end using channels. Example: package main import ( \"fmt\" \"time\" ) func hello ( done chan bool ) { fmt . Println ( \"hello go routine is going to sleep\" ) time . Sleep ( 4 * time . Second ) fmt . Println ( \"hello go routine awake and going to write to done\" ) done <- true } func main () { done := make ( chan bool ) fmt . Println ( \"Main going to call hello go goroutine\" ) go hello ( done ) <- done fmt . Println ( \"Main received data\" ) } Defining Variables \u00b6 A variable is a named unit of data that may be assigned a value. Declaring variables using var \u00b6 Example: package main import \"fmt\" func main (){ var ten int = 10 ; var twenty int ; twenty = 20 fmt . Println ( ten ) fmt . Println ( twenty ) } Short form of declaring variables without var \u00b6 Example: package main import \"fmt\" func main (){ ten := 10 ; fmt . Println ( ten ) } Interface type \u00b6 Interfaces in Go do not enforce a type to implement methods but interfaces are very powerful tools. A type can choose to implement methods of an interface. Using interfaces, a value can be represented in multiple types, AKA, polymorphism. Example: package main import \"fmt\" type Rock struct { Mass int Volume int } func ( r Rock ) Density () int { return r . Mass / r . Volume } func IsItDenser ( a , b Dense ) bool { return a . Density () > b . Density () } type Geode struct { } func ( g Geode ) Density () int { return 100 } type Dense interface { Density () int } func main () { r := Rock { 10 , 1 } g := Geode {} // Returns true because Geode's Density method always // returns 100 fmt . Println ( IsItDenser ( g , r )) } Go Constants \u00b6 Go supports constants of character, string, boolean, and numeric values. const declares a constant value. package main import ( \"fmt\" \"math\" ) const s string = \"constant\" func main () { fmt . Println ( s ) const n = 500000000 const d = 3e20 / n fmt . Println ( d ) fmt . Println ( int64 ( d )) fmt . Println ( math . Sin ( n )) } Output: constant 6e+11 600000000000 -0.28470407323754404","title":"Go data types, variable and Constants"},{"location":"course/golang/data-types-and-variables/#golang-data-types-variable-and-constants","text":"Golang has the following data types Basic type : Numbers Integers Floating-Point Numbers Complex Numbers Strings Booleans Aggregate type : Array Structs Reference type : Pointers Slices Maps Functions Channels Interface type","title":"Golang data types, variable and Constants"},{"location":"course/golang/data-types-and-variables/#numbers","text":"In go language we have signed and un-signed integers. Let's see the table of integers that we can define to save the memory Data Type Description int8 8-bit signed integer int16 16-bit signed integer int32 32-bit signed integer int64 64-bit signed integer uint8 8-bit unsigned integer uint16 16-bit unsigned integer uint32 32-bit unsigned integer uint64 64-bit unsigned integer int Both in and uint contain same size, either 32 or 64 bit. uint Both in and uint contain same size, either 32 or 64 bit. rune It is a synonym of int32 and also represent Unicode code points. byte It is a synonym of int8 . uintptr It is an unsigned integer type. Its width is not defined, but its can hold all the bits of a pointer value. Example: package main import \"fmt\" var myInt8 int8 = 2 func main (){ var myInt int = 2506 fmt . Println ( myInt8 , myInt ) } Like above we can define the integer variables. Choose the integer type based on the number size.","title":"Numbers"},{"location":"course/golang/data-types-and-variables/#strings","text":"String is immutable slice of bytes and the bytes of the strings can be represented in utf-8 encoding. Example: package main import \"fmt\" var myStr1 string = \"Hello Wolrd!!\" func main (){ myStr2 := \"This is Batta\" fmt . Println ( myStr1 , myStr2 ) }","title":"Strings"},{"location":"course/golang/data-types-and-variables/#booleans","text":"Booleans has only two values true or false . It's data type is bool Example: package main import \"fmt\" var valid bool = true func main (){ invalid := false fmt . Println ( valid , invalid ) }","title":"Booleans"},{"location":"course/golang/data-types-and-variables/#array","text":"In Golang, array is a fixed-size collection of elements of the same type. The elements of the array are stored sequentially Example: package main import \"fmt\" func main () { var a [ 2 ] string a [ 0 ] = \"Hello\" a [ 1 ] = \"World\" fmt . Println ( a [ 0 ], a [ 1 ]) fmt . Println ( a ) primes := [ 6 ] int { 2 , 3 , 5 , 7 , 11 , 13 } fmt . Println ( primes ) }","title":"Array"},{"location":"course/golang/data-types-and-variables/#structs","text":"A struct is a collection of data fields with declared data types. Golang has the ability to declare and create own data types by combining one or more types, including both built-in and user-defined types. Example: package main import \"fmt\" type rectangle struct { length float64 breadth float64 color string } func main () { fmt . Println ( rectangle { 10.5 , 25.10 , \"red\" }) }","title":"Structs"},{"location":"course/golang/data-types-and-variables/#pointers","text":"A pointer is a variable that stores the memory address data referenced by another variable. Pointers have the power to mutate data they are pointing to Example: package main import \"fmt\" func main () { var title string = \"Google\" var pointer * string = & title fmt . Println ( \"title =\" , title ) fmt . Println ( \"pointer =\" , pointer ) fmt . Println ( \"pointer data =\" , * pointer ) // lets change the data * pointer = \"Bing\" fmt . Println ( \"title =\" , title ) fmt . Println ( \"pointer =\" , pointer ) fmt . Println ( \"pointer data =\" , * pointer ) }","title":"Pointers"},{"location":"course/golang/data-types-and-variables/#slices","text":"A Slice is a segment of an array. Slices build on arrays and provide more power, flexibility, and convenience compared to arrays. Example: package main import \"fmt\" func main () { var a = [ 5 ] string { \"Alpha\" , \"Beta\" , \"Gamma\" , \"Delta\" , \"Epsilon\" } // Creating a slice from the array var s [] string = a [ 1 : 4 ] fmt . Println ( \"Array a = \" , a ) fmt . Println ( \"Slice s = \" , s ) }","title":"Slices"},{"location":"course/golang/data-types-and-variables/#maps","text":"A map is an unordered collection of key-value pairs. It maps keys to values. The keys are unique within a map . Example: package main import \"fmt\" func main () { var m = map [ string ] int { \"one\" : 1 , \"two\" : 2 , \"three\" : 3 , \"four\" : 4 , \"five\" : 5 , // Comma is necessary } fmt . Println ( m ) fmt . Println ( m [ \"one\" ]) }","title":"Maps"},{"location":"course/golang/data-types-and-variables/#functions","text":"A function is an independent section of code that maps zero or more input parameters to zero or more output parameters. Example: package main import \"fmt\" // function func average ( xs [] float64 ) float64 { total := 0.0 for _ , v := range xs { total += v } return total / float64 ( len ( xs )) } func main () { xs := [] float64 { 98 , 93 , 77 , 82 , 83 } fmt . Println ( average ( xs )) }","title":"Functions"},{"location":"course/golang/data-types-and-variables/#channels","text":"Channels can be thought as pipes using which Goroutines communicate. Similar to how water flows from one end to another in a pipe, data can be sent from one end and received from the another end using channels. Example: package main import ( \"fmt\" \"time\" ) func hello ( done chan bool ) { fmt . Println ( \"hello go routine is going to sleep\" ) time . Sleep ( 4 * time . Second ) fmt . Println ( \"hello go routine awake and going to write to done\" ) done <- true } func main () { done := make ( chan bool ) fmt . Println ( \"Main going to call hello go goroutine\" ) go hello ( done ) <- done fmt . Println ( \"Main received data\" ) }","title":"Channels"},{"location":"course/golang/data-types-and-variables/#defining-variables","text":"A variable is a named unit of data that may be assigned a value.","title":"Defining Variables"},{"location":"course/golang/data-types-and-variables/#declaring-variables-using-var","text":"Example: package main import \"fmt\" func main (){ var ten int = 10 ; var twenty int ; twenty = 20 fmt . Println ( ten ) fmt . Println ( twenty ) }","title":"Declaring variables using var"},{"location":"course/golang/data-types-and-variables/#short-form-of-declaring-variables-without-var","text":"Example: package main import \"fmt\" func main (){ ten := 10 ; fmt . Println ( ten ) }","title":"Short form of declaring variables without var"},{"location":"course/golang/data-types-and-variables/#interface-type","text":"Interfaces in Go do not enforce a type to implement methods but interfaces are very powerful tools. A type can choose to implement methods of an interface. Using interfaces, a value can be represented in multiple types, AKA, polymorphism. Example: package main import \"fmt\" type Rock struct { Mass int Volume int } func ( r Rock ) Density () int { return r . Mass / r . Volume } func IsItDenser ( a , b Dense ) bool { return a . Density () > b . Density () } type Geode struct { } func ( g Geode ) Density () int { return 100 } type Dense interface { Density () int } func main () { r := Rock { 10 , 1 } g := Geode {} // Returns true because Geode's Density method always // returns 100 fmt . Println ( IsItDenser ( g , r )) }","title":"Interface type"},{"location":"course/golang/data-types-and-variables/#go-constants","text":"Go supports constants of character, string, boolean, and numeric values. const declares a constant value. package main import ( \"fmt\" \"math\" ) const s string = \"constant\" func main () { fmt . Println ( s ) const n = 500000000 const d = 3e20 / n fmt . Println ( d ) fmt . Println ( int64 ( d )) fmt . Println ( math . Sin ( n )) } Output: constant 6e+11 600000000000 -0.28470407323754404","title":"Go Constants"},{"location":"course/golang/for-loop/","text":"In go programming language we have only one looping statement for . We use keywords like break , continue and range with for loop based on the use-case that we have. Structure of for loop in golang \u00b6 for < initialization >; < condition >; < step > { sum += i } We can have a initialization in for loop to initialize the data and condition to check whether to continue with next iteration. After the iteration we have a step to update it's contents to be checked inside condition. It's not necessary to have all three of these to work with for loop. Let's write a simple go program to print the first ten numbers. package main import \"fmt\" func main (){ for i := 1 ; i <= 10 ; i ++ { fmt . Println ( i ) } } break keyword in golang \u00b6 The break keyword allows you to terminate a loop at that point and continue execution at the statement following the end of the for loop block. Example: golang-break.go package main import \"fmt\" func main () { i := 0 for { //since there are no checks, this is an infinite loop if i >= 3 { break } fmt . Println ( \"i = \" , i ) i ++ ; } fmt . Println ( \"A statement just after for loop.\" ) } Output: i = 0 i = 1 i = 2 A statement just after for loop. continue keyword in golang \u00b6 The continue statement allows us to skip the particular loop iteration when it is used. Example: Print all odd numbers from 1 to 10. package main import \"fmt\" func main () { for i := 0 ; i <= 10 ; i ++ { if i % 2 == 0 { continue } fmt . Println ( i ) } } Output: 1 3 5 7 9 if you see the above output it skipped the even numbers to print. That's because we used continue statement. range keyword in golang \u00b6 The range keyword allows us to iterate over items of a list or a map . Let's implement it. package main import \"fmt\" func main () { // using range with an array a := [ ... ] string { \"a\" , \"b\" , \"c\" , \"d\" } for index , value := range a { fmt . Println ( \"Array index = \" , index , \", Index value = \" , value ) } // using range with a map // iterate only keys capitals := map [ string ] string { \"France\" : \"Paris\" , \"Italy\" : \"Rome\" , \"Japan\" : \"Tokyo\" } for key := range capitals { fmt . Println ( \"Map Key = \" , key ) } //iterate keys and values for key , val := range capitals { fmt . Println ( \"Map Key = \" , key , \", Value = \" , val ) } } Output: Array index = 0 , Index value = a Array index = 1 , Index value = b Array index = 2 , Index value = c Array index = 3 , Index value = d Map Key = France Map Key = Italy Map Key = Japan Map Key = Japan , Value = Tokyo Map Key = France , Value = Paris Map Key = Italy , Value = Rome","title":"Go for loop"},{"location":"course/golang/for-loop/#structure-of-for-loop-in-golang","text":"for < initialization >; < condition >; < step > { sum += i } We can have a initialization in for loop to initialize the data and condition to check whether to continue with next iteration. After the iteration we have a step to update it's contents to be checked inside condition. It's not necessary to have all three of these to work with for loop. Let's write a simple go program to print the first ten numbers. package main import \"fmt\" func main (){ for i := 1 ; i <= 10 ; i ++ { fmt . Println ( i ) } }","title":"Structure of for loop in golang"},{"location":"course/golang/for-loop/#break-keyword-in-golang","text":"The break keyword allows you to terminate a loop at that point and continue execution at the statement following the end of the for loop block. Example: golang-break.go package main import \"fmt\" func main () { i := 0 for { //since there are no checks, this is an infinite loop if i >= 3 { break } fmt . Println ( \"i = \" , i ) i ++ ; } fmt . Println ( \"A statement just after for loop.\" ) } Output: i = 0 i = 1 i = 2 A statement just after for loop.","title":"break keyword in golang"},{"location":"course/golang/for-loop/#continue-keyword-in-golang","text":"The continue statement allows us to skip the particular loop iteration when it is used. Example: Print all odd numbers from 1 to 10. package main import \"fmt\" func main () { for i := 0 ; i <= 10 ; i ++ { if i % 2 == 0 { continue } fmt . Println ( i ) } } Output: 1 3 5 7 9 if you see the above output it skipped the even numbers to print. That's because we used continue statement.","title":"continue keyword in golang"},{"location":"course/golang/for-loop/#range-keyword-in-golang","text":"The range keyword allows us to iterate over items of a list or a map . Let's implement it. package main import \"fmt\" func main () { // using range with an array a := [ ... ] string { \"a\" , \"b\" , \"c\" , \"d\" } for index , value := range a { fmt . Println ( \"Array index = \" , index , \", Index value = \" , value ) } // using range with a map // iterate only keys capitals := map [ string ] string { \"France\" : \"Paris\" , \"Italy\" : \"Rome\" , \"Japan\" : \"Tokyo\" } for key := range capitals { fmt . Println ( \"Map Key = \" , key ) } //iterate keys and values for key , val := range capitals { fmt . Println ( \"Map Key = \" , key , \", Value = \" , val ) } } Output: Array index = 0 , Index value = a Array index = 1 , Index value = b Array index = 2 , Index value = c Array index = 3 , Index value = d Map Key = France Map Key = Italy Map Key = Japan Map Key = Japan , Value = Tokyo Map Key = France , Value = Paris Map Key = Italy , Value = Rome","title":"range keyword in golang"},{"location":"course/golang/go-functions/","text":"A go function is a group of statements that can perform a specific functionality for different data values. Go function with return type \u00b6 Example: Find maximum of two given numbers. package main import \"fmt\" func main () { a , b , c , d := 1 , 2 , 3 , 4 result1 := max ( a , b ) fmt . Printf ( \"Max value is : %d\\n\" , result1 ) result2 := max ( c , d ) fmt . Printf ( \"Max value is : %d\\n\" , result2 ) } func max ( num1 int , num2 int ) int { if ( num1 > num2 ) { return num1 } else { return num2 } } Output: Max value is : 2 Max value is : 4 If you see the above we have used the function twice for different values. Go function without return type \u00b6 We can write go functions that return no values but performs some operations. Example: Greet user package main import \"fmt\" func greetUser ( user string ){ fmt . Printf ( \"Hello %s\\n\" , user ) } func main () { user := \"Anji\" greetUser ( user ) } Output: Hello Anji If we see the above function greetUser , we not returning any data. That's reason we didn't specify the return type. Go function that return multiple values \u00b6 We can return multiple values in go functions . Example: Find rectangle area and perimeter package main import \"fmt\" func rectangle ( l int , b int ) ( area int , perimeter int ) { perimeter = 2 * ( l + b ) area = l * b return // Return statement without specify variable name } func main () { var a , p int a , p = rectangle ( 20 , 30 ) fmt . Println ( \"Area:\" , a ) fmt . Println ( \"Perimeter:\" , p ) } Output: Area: 600 Parameter: 100 Go Variadic Functions \u00b6 Variadic functions can be called with any number of trailing arguments. For example, fmt.Println is a common variadic function. Example: Find sum of all given numbers package main import \"fmt\" func sum ( nums ... int ) { fmt . Print ( nums , \" \" ) total := 0 for _ , num := range nums { total += num } fmt . Println ( total ) } func main () { sum ( 1 , 2 ) sum ( 1 , 2 , 3 ) nums := [] int { 1 , 2 , 3 , 4 } sum ( nums ... ) } Output: [1 2] 3 [1 2 3] 6 [1 2 3 4] 10 If you see the above function we have sent 2 arguments and 3 arguments respectively and we got the results in both of the cases. This type of functions are called as variadic functions.","title":"Go functions"},{"location":"course/golang/go-functions/#go-function-with-return-type","text":"Example: Find maximum of two given numbers. package main import \"fmt\" func main () { a , b , c , d := 1 , 2 , 3 , 4 result1 := max ( a , b ) fmt . Printf ( \"Max value is : %d\\n\" , result1 ) result2 := max ( c , d ) fmt . Printf ( \"Max value is : %d\\n\" , result2 ) } func max ( num1 int , num2 int ) int { if ( num1 > num2 ) { return num1 } else { return num2 } } Output: Max value is : 2 Max value is : 4 If you see the above we have used the function twice for different values.","title":"Go function with return type"},{"location":"course/golang/go-functions/#go-function-without-return-type","text":"We can write go functions that return no values but performs some operations. Example: Greet user package main import \"fmt\" func greetUser ( user string ){ fmt . Printf ( \"Hello %s\\n\" , user ) } func main () { user := \"Anji\" greetUser ( user ) } Output: Hello Anji If we see the above function greetUser , we not returning any data. That's reason we didn't specify the return type.","title":"Go function without return type"},{"location":"course/golang/go-functions/#go-function-that-return-multiple-values","text":"We can return multiple values in go functions . Example: Find rectangle area and perimeter package main import \"fmt\" func rectangle ( l int , b int ) ( area int , perimeter int ) { perimeter = 2 * ( l + b ) area = l * b return // Return statement without specify variable name } func main () { var a , p int a , p = rectangle ( 20 , 30 ) fmt . Println ( \"Area:\" , a ) fmt . Println ( \"Perimeter:\" , p ) } Output: Area: 600 Parameter: 100","title":"Go function that return multiple values"},{"location":"course/golang/go-functions/#go-variadic-functions","text":"Variadic functions can be called with any number of trailing arguments. For example, fmt.Println is a common variadic function. Example: Find sum of all given numbers package main import \"fmt\" func sum ( nums ... int ) { fmt . Print ( nums , \" \" ) total := 0 for _ , num := range nums { total += num } fmt . Println ( total ) } func main () { sum ( 1 , 2 ) sum ( 1 , 2 , 3 ) nums := [] int { 1 , 2 , 3 , 4 } sum ( nums ... ) } Output: [1 2] 3 [1 2 3] 6 [1 2 3 4] 10 If you see the above function we have sent 2 arguments and 3 arguments respectively and we got the results in both of the cases. This type of functions are called as variadic functions.","title":"Go Variadic Functions"},{"location":"course/golang/golang-introduction/","text":"Golang introduction \u00b6 Golang installation in ubuntu \u00b6 We can install golang with ubuntu snap like below $ sudo snap install --classic go For manual installation read https://golang.org/doc/install . But, I recommend you to use snap to skip it. Test your installation \u00b6 To test the go installation just check the version of golang like below $ go version go version go1.14.2 linux/amd64 setup GOPATH \u00b6 open ~/.bash_profile add below code. export GOPATH=$HOME/go Save and exit your editor. Then, source your ~/.bash_profile. source ~/.bash_profile Golang \"Hello World\" program \u00b6 Let's write a golang \"hello world\" program. helloWorld.go package main import \"fmt\" func main () { fmt . Printf ( \"hello, world\\n\" ) } how to run the go program ? \u00b6 Golang is compiled language so first we have to compile the program and then execute the byte code. Let's compile the above program $ go build helloWorld.go Now, run the bytecode file helloWorld like below $ ./helloWorld hello, world Hurray!!! we have successfully wrote our first program in golang . Keywords in Golang \u00b6 Keywords or reserved words in golang are break , default , func , interface , select , case , defer , go , map , struct , chan , else , goto , package , switch , const , fallthrough , if , range , type , continue , for , import , return , var Predeclared identifiers / Built-in functions \u00b6 append , bool , byte , cap , close , complex , complex64 , complex128 , uint16 , copy , false , float32 , float64 , imag , int , int8 , int16 , uint32 , int32 , int64 , iota , len , make , new , nil , panic , uint64 , print , println , real , recover , string , true , uint , uint8 , uintptr Identifiers \u00b6 Identifiers begin with a letter (a letter is every letter in Unicode UTF-8 or _) and followed by 0 or more letters or Unicode digits, like: X56 , group1 , _x23 , i , \u04e9\u051112 . The _ itself is a special identifier, called the blank identifier. It can be used in declarations or variable assignments like any other identifier (and any type can be assigned to it), but its value is discarded, so it cannot be used anymore in the code that follows.","title":"Go Introduction"},{"location":"course/golang/golang-introduction/#golang-introduction","text":"","title":"Golang introduction"},{"location":"course/golang/golang-introduction/#golang-installation-in-ubuntu","text":"We can install golang with ubuntu snap like below $ sudo snap install --classic go For manual installation read https://golang.org/doc/install . But, I recommend you to use snap to skip it.","title":"Golang installation in ubuntu"},{"location":"course/golang/golang-introduction/#test-your-installation","text":"To test the go installation just check the version of golang like below $ go version go version go1.14.2 linux/amd64","title":"Test your installation"},{"location":"course/golang/golang-introduction/#setup-gopath","text":"open ~/.bash_profile add below code. export GOPATH=$HOME/go Save and exit your editor. Then, source your ~/.bash_profile. source ~/.bash_profile","title":"setup GOPATH"},{"location":"course/golang/golang-introduction/#golang-hello-world-program","text":"Let's write a golang \"hello world\" program. helloWorld.go package main import \"fmt\" func main () { fmt . Printf ( \"hello, world\\n\" ) }","title":"Golang \"Hello World\" program"},{"location":"course/golang/golang-introduction/#how-to-run-the-go-program","text":"Golang is compiled language so first we have to compile the program and then execute the byte code. Let's compile the above program $ go build helloWorld.go Now, run the bytecode file helloWorld like below $ ./helloWorld hello, world Hurray!!! we have successfully wrote our first program in golang .","title":"how to run the go program ?"},{"location":"course/golang/golang-introduction/#keywords-in-golang","text":"Keywords or reserved words in golang are break , default , func , interface , select , case , defer , go , map , struct , chan , else , goto , package , switch , const , fallthrough , if , range , type , continue , for , import , return , var","title":"Keywords in Golang"},{"location":"course/golang/golang-introduction/#predeclared-identifiers-built-in-functions","text":"append , bool , byte , cap , close , complex , complex64 , complex128 , uint16 , copy , false , float32 , float64 , imag , int , int8 , int16 , uint32 , int32 , int64 , iota , len , make , new , nil , panic , uint64 , print , println , real , recover , string , true , uint , uint8 , uintptr","title":"Predeclared identifiers / Built-in functions"},{"location":"course/golang/golang-introduction/#identifiers","text":"Identifiers begin with a letter (a letter is every letter in Unicode UTF-8 or _) and followed by 0 or more letters or Unicode digits, like: X56 , group1 , _x23 , i , \u04e9\u051112 . The _ itself is a special identifier, called the blank identifier. It can be used in declarations or variable assignments like any other identifier (and any type can be assigned to it), but its value is discarded, so it cannot be used anymore in the code that follows.","title":"Identifiers"},{"location":"course/golang/if-else-statement/","text":"Let's write some code that can use if/else condition in golang. if condition \u00b6 Problem Statement: Ask user to enter his name then print welcome if user's name is anji . package main import \"fmt\" func main (){ var name string fmt . Println ( \"Enter your name\" ) fmt . Scanln ( & name ) if name == \"anji\" { fmt . Println ( \"Welcome\" ) } } if/else condition \u00b6 Problem Statement: Ask user to enter his name then print welcome if user's name is anji otherwise print invalid name package main import \"fmt\" func main (){ var name string fmt . Println ( \"Enter your name\" ) fmt . Scanln ( & name ) if name == \"anji\" { fmt . Println ( \"Welcome\" ) } else { fmt . Println ( \"invalid name\" ) } } if/else if/else condition \u00b6 Problem Statement: Ask user to enter a number and find if the number is postive , zero or negative. package main import \"fmt\" func main (){ var number int8 fmt . Println ( \"Enter number\" ) fmt . Scanln ( & number ) if num == 0 { fmt . Println ( \"zero\" ) } else if num > 0 { fmt . Println ( \"positive\" ) } else { fmt . Println ( \"negative\" ) } } Nested if/else conditions \u00b6 We can use if/else conditions inside if/else condition, this is called nested conditions. I don't think we need an example code for this. if/else with init statement \u00b6 Let's modify the above user welcome program package main import \"fmt\" func getName () string { return \"anji\" } func main (){ if name := getName (); name == \"anji\" { fmt . Println ( \"Welcome\" ) } else { fmt . Println ( \"invalid name\" ) } } In above program we have initialized the name within the if statement and using that in the comparison. This is useful when we don't want the data of the variable after the if condition to save the memory.","title":"Go if...else"},{"location":"course/golang/if-else-statement/#if-condition","text":"Problem Statement: Ask user to enter his name then print welcome if user's name is anji . package main import \"fmt\" func main (){ var name string fmt . Println ( \"Enter your name\" ) fmt . Scanln ( & name ) if name == \"anji\" { fmt . Println ( \"Welcome\" ) } }","title":"if condition"},{"location":"course/golang/if-else-statement/#ifelse-condition","text":"Problem Statement: Ask user to enter his name then print welcome if user's name is anji otherwise print invalid name package main import \"fmt\" func main (){ var name string fmt . Println ( \"Enter your name\" ) fmt . Scanln ( & name ) if name == \"anji\" { fmt . Println ( \"Welcome\" ) } else { fmt . Println ( \"invalid name\" ) } }","title":"if/else condition"},{"location":"course/golang/if-else-statement/#ifelse-ifelse-condition","text":"Problem Statement: Ask user to enter a number and find if the number is postive , zero or negative. package main import \"fmt\" func main (){ var number int8 fmt . Println ( \"Enter number\" ) fmt . Scanln ( & number ) if num == 0 { fmt . Println ( \"zero\" ) } else if num > 0 { fmt . Println ( \"positive\" ) } else { fmt . Println ( \"negative\" ) } }","title":"if/else if/else condition"},{"location":"course/golang/if-else-statement/#nested-ifelse-conditions","text":"We can use if/else conditions inside if/else condition, this is called nested conditions. I don't think we need an example code for this.","title":"Nested if/else conditions"},{"location":"course/golang/if-else-statement/#ifelse-with-init-statement","text":"Let's modify the above user welcome program package main import \"fmt\" func getName () string { return \"anji\" } func main (){ if name := getName (); name == \"anji\" { fmt . Println ( \"Welcome\" ) } else { fmt . Println ( \"invalid name\" ) } } In above program we have initialized the name within the if statement and using that in the comparison. This is useful when we don't want the data of the variable after the if condition to save the memory.","title":"if/else with init statement"},{"location":"course/golang/switch-case/","text":"Golang Switch Case \u00b6 Switch Case is the shorter form of writing complex if/else conditions. We don't need to use break keyword inside the case block, go compiler automatically adds it. Let's see a simple program that implements the switch case package main import ( \"fmt\" \"runtime\" ) func main () { fmt . Print ( \"Go runs on \" ) switch os := runtime . GOOS ; os { case \"darwin\" : fmt . Println ( \"OS X.\" ) case \"linux\" : fmt . Println ( \"Linux.\" ) default : // freebsd, openbsd, // plan9, windows... fmt . Printf ( \"%s.\\n\" , os ) } } Note: We can use multiple values in a switch case by separating them with a comma , . Let's a simple function that implements it func WhiteSpace ( c rune ) bool { switch c { case ' ' , '\\t' , '\\n' , '\\f' , '\\r' : return true } return false }","title":"Go switch case"},{"location":"course/golang/switch-case/#golang-switch-case","text":"Switch Case is the shorter form of writing complex if/else conditions. We don't need to use break keyword inside the case block, go compiler automatically adds it. Let's see a simple program that implements the switch case package main import ( \"fmt\" \"runtime\" ) func main () { fmt . Print ( \"Go runs on \" ) switch os := runtime . GOOS ; os { case \"darwin\" : fmt . Println ( \"OS X.\" ) case \"linux\" : fmt . Println ( \"Linux.\" ) default : // freebsd, openbsd, // plan9, windows... fmt . Printf ( \"%s.\\n\" , os ) } } Note: We can use multiple values in a switch case by separating them with a comma , . Let's a simple function that implements it func WhiteSpace ( c rune ) bool { switch c { case ' ' , '\\t' , '\\n' , '\\f' , '\\r' : return true } return false }","title":"Golang Switch Case"},{"location":"course/golang/understanding-go-program/","text":"Understanding a go program \u00b6 Go programming is all about packages. Every program in golang must belongs to a package. structure of a go program \u00b6 In first line we have to declare the package After package declaration, write import statements. Now, define variables and functions It's time to define the main function which is the first function to run after the init function when we run the golang program . Note: Whenever we run a go program it looks for the main package if it finds it then it look for the main function to run the program otherwise it throws an error. Simple Go program - hello world \u00b6 package main import \"fmt\" func main () { fmt . Println ( \"hello world\" ) } Above code a simple program to print the \"hello world\" . If you see the code structure we have declared a main package after that we have import statement followed by main function. fmt is a built-in package in go programming which allows us to formate the data and print the output to stdout . Println is one of the functions in the package fmt . Go program execution example \u00b6 Let's write a simple golang program to understand the execution flow. sample.go package main import \"fmt\" var _ int64 = s () func init () { fmt . Println ( \"init func\" ) } func s () int64 { fmt . Println ( \"calling s() func\" ) return 1 } func main () { fmt . Println ( \"main func\" ) } If we run the above program with command go run sample.go we can get the output like below. calling s() func init func main func From the above output we can understand that init function always called before execution of the main function. When to use init function in golang? \u00b6 init() function mostly used to initialize the data for the package before running it. init() is always called, regardless if there's main or not, so if you import a package that has an init function, it will be executed. We can write go programs without init() function also.","title":"Go Program"},{"location":"course/golang/understanding-go-program/#understanding-a-go-program","text":"Go programming is all about packages. Every program in golang must belongs to a package.","title":"Understanding a go program"},{"location":"course/golang/understanding-go-program/#structure-of-a-go-program","text":"In first line we have to declare the package After package declaration, write import statements. Now, define variables and functions It's time to define the main function which is the first function to run after the init function when we run the golang program . Note: Whenever we run a go program it looks for the main package if it finds it then it look for the main function to run the program otherwise it throws an error.","title":"structure of a go program"},{"location":"course/golang/understanding-go-program/#simple-go-program-hello-world","text":"package main import \"fmt\" func main () { fmt . Println ( \"hello world\" ) } Above code a simple program to print the \"hello world\" . If you see the code structure we have declared a main package after that we have import statement followed by main function. fmt is a built-in package in go programming which allows us to formate the data and print the output to stdout . Println is one of the functions in the package fmt .","title":"Simple Go program - hello world"},{"location":"course/golang/understanding-go-program/#go-program-execution-example","text":"Let's write a simple golang program to understand the execution flow. sample.go package main import \"fmt\" var _ int64 = s () func init () { fmt . Println ( \"init func\" ) } func s () int64 { fmt . Println ( \"calling s() func\" ) return 1 } func main () { fmt . Println ( \"main func\" ) } If we run the above program with command go run sample.go we can get the output like below. calling s() func init func main func From the above output we can understand that init function always called before execution of the main function.","title":"Go program execution example"},{"location":"course/golang/understanding-go-program/#when-to-use-init-function-in-golang","text":"init() function mostly used to initialize the data for the package before running it. init() is always called, regardless if there's main or not, so if you import a package that has an init function, it will be executed. We can write go programs without init() function also.","title":"When to use init function in golang?"},{"location":"course/golang/working-with-arrays/","text":"Golang Working with Arrays \u00b6 Arrays in go language are fixed sized collection of homogeneous elements. Array elements are stored sequentially and can be accessed using index. Golang Array declaration \u00b6 We can declare the arrays in go as follows var nameOfArray [size] Type Golang int Array declaration \u00b6 var numbers [ 5 ] int Golang string Array declaration \u00b6 var names [ 5 ] string In the same way we can declare arrays for any type like float32 , struct , etc. Golang Array initializing and accessing the elements \u00b6 We can access the golang array elements with indexes. See the below image to understand it in a better way. Note: Array indexes always starts with 0 package main import \"fmt\" func main (){ var numbers [ 5 ] int fmt . Println ( \"numbers = \" , numbers ); // assign element to array numbers [ 0 ] = 100 numbers [ 4 ] = 500 fmt . Println ( \"numbers = \" , numbers ); } Output: numbers = [0 0 0 0 0] numbers = [100 0 0 0 500] In the above code, we initialized the array of size 5 and type int . For integer data type we have the default value 0 . We updated the value of the array at index zero to value 100 with statement numbers[0] = 100 and did the same for index 4 . Golang iterating the array elements using range . \u00b6 Let's write a simple program to print the names in an array. package main import \"fmt\" func main (){ names := [] string { \"Anji\" , \"Ram\" , \"John\" , \"Shera\" } for index , name := range names { fmt . Println ( \"index = \" , index , \"name = \" , name ) } } Output: index = 0 name = Anji index = 1 name = Ram index = 2 name = John index = 3 name = Shera We can also declare the array with the known elements like above. We can use the range keyword with go array and for loop. Golang Multidimensional arrays \u00b6 Let's define a 3X3 matrix with the elements package main import \"fmt\" func main (){ matrix := [ 3 ][ 3 ] int { { 1 , 2 , 3 }, { 4 , 5 , 6 }, { 7 , 8 , 9 }, } fmt . Println ( \"matrix = \" , matrix ) // update the element matrix [ 1 ][ 1 ] = 100 fmt . Println ( \"matrix = \" , matrix ) } Ouput: matrix = [[1 2 3] [4 5 6] [7 8 9]] matrix = [[1 2 3] [4 100 6] [7 8 9]]","title":"Golang Arrays"},{"location":"course/golang/working-with-arrays/#golang-working-with-arrays","text":"Arrays in go language are fixed sized collection of homogeneous elements. Array elements are stored sequentially and can be accessed using index.","title":"Golang Working with Arrays"},{"location":"course/golang/working-with-arrays/#golang-array-declaration","text":"We can declare the arrays in go as follows var nameOfArray [size] Type","title":"Golang Array declaration"},{"location":"course/golang/working-with-arrays/#golang-int-array-declaration","text":"var numbers [ 5 ] int","title":"Golang int Array declaration"},{"location":"course/golang/working-with-arrays/#golang-string-array-declaration","text":"var names [ 5 ] string In the same way we can declare arrays for any type like float32 , struct , etc.","title":"Golang string Array declaration"},{"location":"course/golang/working-with-arrays/#golang-array-initializing-and-accessing-the-elements","text":"We can access the golang array elements with indexes. See the below image to understand it in a better way. Note: Array indexes always starts with 0 package main import \"fmt\" func main (){ var numbers [ 5 ] int fmt . Println ( \"numbers = \" , numbers ); // assign element to array numbers [ 0 ] = 100 numbers [ 4 ] = 500 fmt . Println ( \"numbers = \" , numbers ); } Output: numbers = [0 0 0 0 0] numbers = [100 0 0 0 500] In the above code, we initialized the array of size 5 and type int . For integer data type we have the default value 0 . We updated the value of the array at index zero to value 100 with statement numbers[0] = 100 and did the same for index 4 .","title":"Golang Array initializing and accessing the elements"},{"location":"course/golang/working-with-arrays/#golang-iterating-the-array-elements-using-range","text":"Let's write a simple program to print the names in an array. package main import \"fmt\" func main (){ names := [] string { \"Anji\" , \"Ram\" , \"John\" , \"Shera\" } for index , name := range names { fmt . Println ( \"index = \" , index , \"name = \" , name ) } } Output: index = 0 name = Anji index = 1 name = Ram index = 2 name = John index = 3 name = Shera We can also declare the array with the known elements like above. We can use the range keyword with go array and for loop.","title":"Golang iterating the array elements using range."},{"location":"course/golang/working-with-arrays/#golang-multidimensional-arrays","text":"Let's define a 3X3 matrix with the elements package main import \"fmt\" func main (){ matrix := [ 3 ][ 3 ] int { { 1 , 2 , 3 }, { 4 , 5 , 6 }, { 7 , 8 , 9 }, } fmt . Println ( \"matrix = \" , matrix ) // update the element matrix [ 1 ][ 1 ] = 100 fmt . Println ( \"matrix = \" , matrix ) } Ouput: matrix = [[1 2 3] [4 5 6] [7 8 9]] matrix = [[1 2 3] [4 100 6] [7 8 9]]","title":"Golang Multidimensional arrays"},{"location":"course/golang/working-with-channels/","text":"Golang Working with channels \u00b6 Note: To execute golang code online you can use https://play.golang.org/ Golang Channels \u00b6 Channels are pipes that link between goroutines within your Go based applications that allow communication and subsequently the passing of values to and from variables. Channels are goroutine-safe. Channels can store and pass values between goroutines. Channels provide FIFO semantics. Channels cause goroutines to block and unblock, which we just learned about. Golang Unbuffered channel \u00b6 package main import \"fmt\" func calcSquare ( c chan int , num int ){ c <- num * num } func main (){ c := make ( chan int ) go calcSquare ( c , 5 ) fmt . Println ( <- c ) // 25 go calcSquare ( c , 2 ) go calcSquare ( c , 4 ) fmt . Println ( <- c ) // 4 fmt . Println ( <- c ) // 16 } In above program we have used a channel c . we can see that to pass a value to a channel we used syntax channelName <- value to add a value to the channel we have used syntax <- channelName to get the data. We can also see that that program didn't stop before calculating the square of the given number as we used channel to store the data. Golang Buffered channel \u00b6 Unlike unbuffered channels buffered channels has a storage capacity. package main import \"fmt\" func main () { ch := make ( chan string , 2 ) ch <- \"hello\" ch <- \"babe\" fmt . Println ( <- ch ) // hello fmt . Println ( <- ch ) // babe } If we try to add a new element to the channel it will throw an error by saying fatal error: all goroutines are asleep - deadlock! .","title":"Golang Channels"},{"location":"course/golang/working-with-channels/#golang-working-with-channels","text":"Note: To execute golang code online you can use https://play.golang.org/","title":"Golang Working with channels"},{"location":"course/golang/working-with-channels/#golang-channels","text":"Channels are pipes that link between goroutines within your Go based applications that allow communication and subsequently the passing of values to and from variables. Channels are goroutine-safe. Channels can store and pass values between goroutines. Channels provide FIFO semantics. Channels cause goroutines to block and unblock, which we just learned about.","title":"Golang Channels"},{"location":"course/golang/working-with-channels/#golang-unbuffered-channel","text":"package main import \"fmt\" func calcSquare ( c chan int , num int ){ c <- num * num } func main (){ c := make ( chan int ) go calcSquare ( c , 5 ) fmt . Println ( <- c ) // 25 go calcSquare ( c , 2 ) go calcSquare ( c , 4 ) fmt . Println ( <- c ) // 4 fmt . Println ( <- c ) // 16 } In above program we have used a channel c . we can see that to pass a value to a channel we used syntax channelName <- value to add a value to the channel we have used syntax <- channelName to get the data. We can also see that that program didn't stop before calculating the square of the given number as we used channel to store the data.","title":"Golang Unbuffered channel"},{"location":"course/golang/working-with-channels/#golang-buffered-channel","text":"Unlike unbuffered channels buffered channels has a storage capacity. package main import \"fmt\" func main () { ch := make ( chan string , 2 ) ch <- \"hello\" ch <- \"babe\" fmt . Println ( <- ch ) // hello fmt . Println ( <- ch ) // babe } If we try to add a new element to the channel it will throw an error by saying fatal error: all goroutines are asleep - deadlock! .","title":"Golang Buffered channel"},{"location":"course/golang/working-with-goroutines/","text":"Golang Working with goroutine \u00b6 Note: To execute golang code online you can use https://play.golang.org/ What is goroutine ? \u00b6 Goroutines are functions or methods that run concurrently with other functions or methods. Goroutines can be thought of as lightweight threads. The cost of creating a Goroutine is tiny when compared to a thread. The benefits of Goroutines \u00b6 They are lightweight. Ability to scale seamlessly. They are virtual threads. Less memory requirement (2KB). Provide additional memory to Goroutines during runtime. how to implement goroutine? \u00b6 we need use the keyword go before the function call. let's see an example. package main import ( \"fmt\" ) func callme () { fmt . Println ( \"goroutine called\" ) } func main () { go callme () fmt . Println ( \"main function\" ) } - When we run above code we can see that the goroutine code didn't get executed. - After, the first statement go callme() the main control goes to the next line fmt.Println(\"main function\") and then exits. - So, the go routine didn't have enough time to execute it. Hence, it didn't executed. package main import ( \"fmt\" \"time\" ) func callme () { fmt . Println ( \"goroutine called\" ) } func main () { go callme () time . Sleep ( 1 * time . Second ) fmt . Println ( \"main function\" ) } If we execute the above code we can see that the goroutine executes callme function code. Because, we are keeping the seep mode time.Sleep(1 * time.Second) in the program which gives the goroutine enough time to execute. References \u00b6 https://golangbot.com/goroutines/","title":"Golang Goroutines"},{"location":"course/golang/working-with-goroutines/#golang-working-with-goroutine","text":"Note: To execute golang code online you can use https://play.golang.org/","title":"Golang Working with goroutine"},{"location":"course/golang/working-with-goroutines/#what-is-goroutine","text":"Goroutines are functions or methods that run concurrently with other functions or methods. Goroutines can be thought of as lightweight threads. The cost of creating a Goroutine is tiny when compared to a thread.","title":"What is goroutine ?"},{"location":"course/golang/working-with-goroutines/#the-benefits-of-goroutines","text":"They are lightweight. Ability to scale seamlessly. They are virtual threads. Less memory requirement (2KB). Provide additional memory to Goroutines during runtime.","title":"The benefits of Goroutines"},{"location":"course/golang/working-with-goroutines/#how-to-implement-goroutine","text":"we need use the keyword go before the function call. let's see an example. package main import ( \"fmt\" ) func callme () { fmt . Println ( \"goroutine called\" ) } func main () { go callme () fmt . Println ( \"main function\" ) } - When we run above code we can see that the goroutine code didn't get executed. - After, the first statement go callme() the main control goes to the next line fmt.Println(\"main function\") and then exits. - So, the go routine didn't have enough time to execute it. Hence, it didn't executed. package main import ( \"fmt\" \"time\" ) func callme () { fmt . Println ( \"goroutine called\" ) } func main () { go callme () time . Sleep ( 1 * time . Second ) fmt . Println ( \"main function\" ) } If we execute the above code we can see that the goroutine executes callme function code. Because, we are keeping the seep mode time.Sleep(1 * time.Second) in the program which gives the goroutine enough time to execute.","title":"how to implement goroutine?"},{"location":"course/golang/working-with-goroutines/#references","text":"https://golangbot.com/goroutines/","title":"References"},{"location":"course/golang/working-with-interface/","text":"Golang Working with interface \u00b6 Note: To execute golang code online you can use https://play.golang.org/ What is an interface? \u00b6 An interface is defined as a custom datatype which contains set of unimplemented methods. The interface defines the behavior for similar type of objects. Go Interfaces are implemented implicitly To implement an interface, you just need to implement all the methods declared in the interface. syntax to create an interface \u00b6 type InterfaceName interface { Method1 () float64 Method2 () int } woking with interface \u00b6 Let's see a simple example to find the area and perimeter of a shape. package main import ( \"fmt\" \"reflect\" \"math\" ) type Shape interface { GetArea () float64 ; GetPerimeter () float64 ; } type Circle struct { Radius float64 } func ( c Circle ) GetArea () float64 { return math . Pi * math . Pow ( c . Radius , 2 ) } func ( c Circle ) GetPerimeter () float64 { return 2 * math . Pi * c . Radius } type Rectangle struct { Length float64 Width float64 } func ( r Rectangle ) GetArea () float64 { return r . Length * r . Width } func ( r Rectangle ) GetPerimeter () float64 { return 2 * ( r . Length + r . Width ) } func GetTotalArea ( shapes ... Shape ) float64 { sum := 0.0 ; for _ , obj := range shapes { sum = sum + obj . GetArea () } return sum } func main () { var s Shape = Circle { Radius : 3 } fmt . Printf ( \"Type: %s , Area: %f\\n\" , reflect . TypeOf ( s ), s . GetArea ()) s = Rectangle { Length : 10 , Width : 20 } fmt . Printf ( \"Type: %s , Area: %f\\n\" , reflect . TypeOf ( s ), s . GetArea ()) // find total area totalArea := GetTotalArea ( Circle { Radius : 3 }, Rectangle { Length : 10 , Width : 20 }) fmt . Println ( \"total area = \" , totalArea ) } - In the above code, we have two objects types which are Rectangle and Circle and an interface Shape . - We also have a function GetTotalArea which takes an array of objects of type interface and iterates through each and finds the total area. - To the function GetTotalArea we can pass any object which has methods GetArea and GetPerimeter . - As we can see, we have written a generic function to calculate the total area irrespective of the object data type. It will be a complex if we didn't use an interface . - We use interfaces when we have a dynamic assignment of data objects which has the similar behaviour as the interface. using interface with switch statement \u00b6 package main import \"fmt\" func PrintInterfaceType ( x interface {}) { switch x .( type ) { case bool : fmt . Print ( x .( bool )) case int : fmt . Print ( x .( int )) case float64 : fmt . Print ( x .( float64 )) case complex128 : fmt . Print ( x .( complex128 )) case string : fmt . Print ( \"string: \" , x .( string )) case chan int : fmt . Print ( x .( chan int )) default : fmt . Print ( \"Unknown type\" ) } fmt . Print ( \"\\n\" ) } func main (){ var name interface {} = \"Hello\" ; PrintInterfaceType ( name ) // output: string: Hello } - We can use .(type) to find the data type of the interface object. - We have a limitation for .(type) syntax, we can only use it inside of a switch case. - We have implemented the similar behaviour with switch statement. finding type of data passed to interface \u00b6 In the above example we have seen how to get an actual type of interface object. But, we do have a similar package in golang which provides the similar functionality. By using package reflect , we can perform similar functionality easily. Let's an example package main import \"fmt\" import \"reflect\" func main () { var x interface {} x = 3.14 t := reflect . TypeOf ( x ) v := reflect . ValueOf ( x ) // x.(<type>) fmt . Printf ( \"x: type = %v, value = %v\\n\" , t , v ) goo := x fmt . Printf ( \"goo: type = %T, value = %v\\n\" , goo , goo ) x = & struct { name string }{} t = reflect . TypeOf ( x ) v = reflect . ValueOf ( x ) // x.(<type>) fmt . Printf ( \"x: type = %v, value = %v\\n\" , t , v ) hoo := x fmt . Printf ( \"hoo: type = %T, value = %v\\n\" , hoo , hoo ) } The above will produce the output something like below x: type = float64, value = 3.14 goo: type = float64, value = 3.14 x: type = *struct { name string }, value = &{} hoo: type = *struct { name string }, value = &{} References: https://golang.org/pkg/reflect/","title":"Golang Interfaces"},{"location":"course/golang/working-with-interface/#golang-working-with-interface","text":"Note: To execute golang code online you can use https://play.golang.org/","title":"Golang Working with interface"},{"location":"course/golang/working-with-interface/#what-is-an-interface","text":"An interface is defined as a custom datatype which contains set of unimplemented methods. The interface defines the behavior for similar type of objects. Go Interfaces are implemented implicitly To implement an interface, you just need to implement all the methods declared in the interface.","title":"What is an interface?"},{"location":"course/golang/working-with-interface/#syntax-to-create-an-interface","text":"type InterfaceName interface { Method1 () float64 Method2 () int }","title":"syntax to create an interface"},{"location":"course/golang/working-with-interface/#woking-with-interface","text":"Let's see a simple example to find the area and perimeter of a shape. package main import ( \"fmt\" \"reflect\" \"math\" ) type Shape interface { GetArea () float64 ; GetPerimeter () float64 ; } type Circle struct { Radius float64 } func ( c Circle ) GetArea () float64 { return math . Pi * math . Pow ( c . Radius , 2 ) } func ( c Circle ) GetPerimeter () float64 { return 2 * math . Pi * c . Radius } type Rectangle struct { Length float64 Width float64 } func ( r Rectangle ) GetArea () float64 { return r . Length * r . Width } func ( r Rectangle ) GetPerimeter () float64 { return 2 * ( r . Length + r . Width ) } func GetTotalArea ( shapes ... Shape ) float64 { sum := 0.0 ; for _ , obj := range shapes { sum = sum + obj . GetArea () } return sum } func main () { var s Shape = Circle { Radius : 3 } fmt . Printf ( \"Type: %s , Area: %f\\n\" , reflect . TypeOf ( s ), s . GetArea ()) s = Rectangle { Length : 10 , Width : 20 } fmt . Printf ( \"Type: %s , Area: %f\\n\" , reflect . TypeOf ( s ), s . GetArea ()) // find total area totalArea := GetTotalArea ( Circle { Radius : 3 }, Rectangle { Length : 10 , Width : 20 }) fmt . Println ( \"total area = \" , totalArea ) } - In the above code, we have two objects types which are Rectangle and Circle and an interface Shape . - We also have a function GetTotalArea which takes an array of objects of type interface and iterates through each and finds the total area. - To the function GetTotalArea we can pass any object which has methods GetArea and GetPerimeter . - As we can see, we have written a generic function to calculate the total area irrespective of the object data type. It will be a complex if we didn't use an interface . - We use interfaces when we have a dynamic assignment of data objects which has the similar behaviour as the interface.","title":"woking with interface"},{"location":"course/golang/working-with-interface/#using-interface-with-switch-statement","text":"package main import \"fmt\" func PrintInterfaceType ( x interface {}) { switch x .( type ) { case bool : fmt . Print ( x .( bool )) case int : fmt . Print ( x .( int )) case float64 : fmt . Print ( x .( float64 )) case complex128 : fmt . Print ( x .( complex128 )) case string : fmt . Print ( \"string: \" , x .( string )) case chan int : fmt . Print ( x .( chan int )) default : fmt . Print ( \"Unknown type\" ) } fmt . Print ( \"\\n\" ) } func main (){ var name interface {} = \"Hello\" ; PrintInterfaceType ( name ) // output: string: Hello } - We can use .(type) to find the data type of the interface object. - We have a limitation for .(type) syntax, we can only use it inside of a switch case. - We have implemented the similar behaviour with switch statement.","title":"using interface with switch statement"},{"location":"course/golang/working-with-interface/#finding-type-of-data-passed-to-interface","text":"In the above example we have seen how to get an actual type of interface object. But, we do have a similar package in golang which provides the similar functionality. By using package reflect , we can perform similar functionality easily. Let's an example package main import \"fmt\" import \"reflect\" func main () { var x interface {} x = 3.14 t := reflect . TypeOf ( x ) v := reflect . ValueOf ( x ) // x.(<type>) fmt . Printf ( \"x: type = %v, value = %v\\n\" , t , v ) goo := x fmt . Printf ( \"goo: type = %T, value = %v\\n\" , goo , goo ) x = & struct { name string }{} t = reflect . TypeOf ( x ) v = reflect . ValueOf ( x ) // x.(<type>) fmt . Printf ( \"x: type = %v, value = %v\\n\" , t , v ) hoo := x fmt . Printf ( \"hoo: type = %T, value = %v\\n\" , hoo , hoo ) } The above will produce the output something like below x: type = float64, value = 3.14 goo: type = float64, value = 3.14 x: type = *struct { name string }, value = &{} hoo: type = *struct { name string }, value = &{} References: https://golang.org/pkg/reflect/","title":"finding type of data passed to interface"},{"location":"course/golang/working-with-maps/","text":"Golang Working with Maps \u00b6 Maps in golang are one of the built-in data structures. Data is stored in the form of key and value. In other languages these are called as hashes or dict. A map is an unordered collection of key-value pairs. Note: we can execute the golang code online at https://play.golang.org/ Map initialization \u00b6 package main import \"fmt\" var employee = map [ string ] string { \"John\" : \"EMP001\" , \"Sandy\" : \"EMP002\" } func main () { fmt . Println ( employee ) } // output: map[John:EMP001 Sandy:EMP002] Empty Map declaration \u00b6 package main import \"fmt\" func main () { // maps using syntax var codes = map [ string ] int {} // maps using make function var codes = make ( map [ string ] int ) } create map with initial data \u00b6 package main import \"fmt\" func main () { alphabets := map [ string ] int { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 , \"d\" : 4 } fmt . Println ( alphabets ) // output: map[a:1 b:2 c:3 d:4] } we have initialized alphabets map with initial data add a new key to the map in golang \u00b6 package main import \"fmt\" func main () { alphabets := map [ string ] int {} alphabets [ \"a\" ] = 1 alphabets [ \"b\" ] = 2 fmt . Println ( alphabets ) // output: map[a:1 b:2] } update a key value of a map \u00b6 package main import \"fmt\" func main () { alphabets := map [ string ] int { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 , \"d\" : 4 } // update value of \"c\" to 100 alphabets [ \"c\" ] = 100 fmt . Println ( alphabets ) // output: map[a:1 b:2 c:100 d:4] } delete a key from golang map \u00b6 We can delete the key form a golang map using built-in function delete delete function takes first parameter as map and second parameter as key package main import \"fmt\" func main () { alphabets := map [ string ] int { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 , \"d\" : 4 } // delete key \"c\" delete ( alphabets , \"c\" ) fmt . Println ( alphabets ) // output: map[a:1 b:2 d:4] } find if map has a key or not \u00b6 Let's a quick example to find if key exists and delete it. package main func main () { var sessions = map [ string ] chan int {}; sessions [ \"moo\" ] = make ( chan int ); _ , ok := sessions [ \"moo\" ]; if ok { delete ( sessions , \"moo\" ); } } Finding length of a map \u00b6 We use the bulit-in len function to find the length of the map package main import \"fmt\" func main () { alphabets := map [ string ] int {} fmt . Println ( \"length = \" , len ( alphabets )) // output: length = 0 alphabets [ \"a\" ] = 1 fmt . Println ( \"length = \" , len ( alphabets )) // output: length = 1 } Iterate over a Map \u00b6 Let's create a week days map and iterate over it. package main import \"fmt\" func main () { weekdays := map [ string ] int { \"sunday\" : 0 , \"monday\" : 1 , \"tuesday\" : 2 , \"wednesday\" : 3 , \"thursday\" : 4 , \"friday\" : 5 , \"saturday\" : 6 , } for day , index := range weekdays { fmt . Println ( \"key:\" , day , \"value:\" , index ) } } Output key: sunday value: 0 key: monday value: 1 key: tuesday value: 2 key: wednesday value: 3 key: thursday value: 4 key: friday value: 5 key: saturday value: 6 Get all keys from a golang map as an array \u00b6 There is no built-in function to get all keys or values from a map. To get the keys or values from the maps we need to create an array, iterate over the map and append the keys and/or values to the array. Let's see an example below. package main import \"fmt\" func main () { weekdays := map [ string ] int { \"sunday\" : 0 , \"monday\" : 1 , \"tuesday\" : 2 , \"wednesday\" : 3 , \"thursday\" : 4 , \"friday\" : 5 , \"saturday\" : 6 , } days := [] string {} indexes := [] int {} for day , index := range weekdays { days = append ( days , day ) indexes = append ( indexes , index ) } fmt . Println ( days ) // output: [monday tuesday wednesday thursday friday saturday sunday] fmt . Println ( indexes ) // output: [1 2 3 4 5 6 0] } Merge two maps in golang \u00b6 To merge maps in golang we need to create a third map and iterate over the first and second maps and update the third map. package main import \"fmt\" func merge ( ms ... map [ string ] string ) map [ string ][] string { res := map [ string ][] string {} for _ , m := range ms { for k , v := range m { res [ k ] = append ( res [ k ], v ) } } return res } func main () { m1 := map [ string ] string { \"id_1\" : \"val_1\" } m2 := map [ string ] string { \"id_2\" : \"val_2\" } m3 := map [ string ] string { \"id_1\" : \"val_3\" } res := merge ( m1 , m2 , m3 ) fmt . Println ( res ) // output: map[id_1:[val_1 val_3] id_2:[val_2]] } In the above code we have written a function to merge multiple maps into a single map.","title":"Golang Maps"},{"location":"course/golang/working-with-maps/#golang-working-with-maps","text":"Maps in golang are one of the built-in data structures. Data is stored in the form of key and value. In other languages these are called as hashes or dict. A map is an unordered collection of key-value pairs. Note: we can execute the golang code online at https://play.golang.org/","title":"Golang Working with Maps"},{"location":"course/golang/working-with-maps/#map-initialization","text":"package main import \"fmt\" var employee = map [ string ] string { \"John\" : \"EMP001\" , \"Sandy\" : \"EMP002\" } func main () { fmt . Println ( employee ) } // output: map[John:EMP001 Sandy:EMP002]","title":"Map initialization"},{"location":"course/golang/working-with-maps/#empty-map-declaration","text":"package main import \"fmt\" func main () { // maps using syntax var codes = map [ string ] int {} // maps using make function var codes = make ( map [ string ] int ) }","title":"Empty Map declaration"},{"location":"course/golang/working-with-maps/#create-map-with-initial-data","text":"package main import \"fmt\" func main () { alphabets := map [ string ] int { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 , \"d\" : 4 } fmt . Println ( alphabets ) // output: map[a:1 b:2 c:3 d:4] } we have initialized alphabets map with initial data","title":"create map with initial data"},{"location":"course/golang/working-with-maps/#add-a-new-key-to-the-map-in-golang","text":"package main import \"fmt\" func main () { alphabets := map [ string ] int {} alphabets [ \"a\" ] = 1 alphabets [ \"b\" ] = 2 fmt . Println ( alphabets ) // output: map[a:1 b:2] }","title":"add a new key to the map in golang"},{"location":"course/golang/working-with-maps/#update-a-key-value-of-a-map","text":"package main import \"fmt\" func main () { alphabets := map [ string ] int { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 , \"d\" : 4 } // update value of \"c\" to 100 alphabets [ \"c\" ] = 100 fmt . Println ( alphabets ) // output: map[a:1 b:2 c:100 d:4] }","title":"update a key value of a map"},{"location":"course/golang/working-with-maps/#delete-a-key-from-golang-map","text":"We can delete the key form a golang map using built-in function delete delete function takes first parameter as map and second parameter as key package main import \"fmt\" func main () { alphabets := map [ string ] int { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 , \"d\" : 4 } // delete key \"c\" delete ( alphabets , \"c\" ) fmt . Println ( alphabets ) // output: map[a:1 b:2 d:4] }","title":"delete a key from golang map"},{"location":"course/golang/working-with-maps/#find-if-map-has-a-key-or-not","text":"Let's a quick example to find if key exists and delete it. package main func main () { var sessions = map [ string ] chan int {}; sessions [ \"moo\" ] = make ( chan int ); _ , ok := sessions [ \"moo\" ]; if ok { delete ( sessions , \"moo\" ); } }","title":"find if map has a key or not"},{"location":"course/golang/working-with-maps/#finding-length-of-a-map","text":"We use the bulit-in len function to find the length of the map package main import \"fmt\" func main () { alphabets := map [ string ] int {} fmt . Println ( \"length = \" , len ( alphabets )) // output: length = 0 alphabets [ \"a\" ] = 1 fmt . Println ( \"length = \" , len ( alphabets )) // output: length = 1 }","title":"Finding length of a map"},{"location":"course/golang/working-with-maps/#iterate-over-a-map","text":"Let's create a week days map and iterate over it. package main import \"fmt\" func main () { weekdays := map [ string ] int { \"sunday\" : 0 , \"monday\" : 1 , \"tuesday\" : 2 , \"wednesday\" : 3 , \"thursday\" : 4 , \"friday\" : 5 , \"saturday\" : 6 , } for day , index := range weekdays { fmt . Println ( \"key:\" , day , \"value:\" , index ) } } Output key: sunday value: 0 key: monday value: 1 key: tuesday value: 2 key: wednesday value: 3 key: thursday value: 4 key: friday value: 5 key: saturday value: 6","title":"Iterate over a Map"},{"location":"course/golang/working-with-maps/#get-all-keys-from-a-golang-map-as-an-array","text":"There is no built-in function to get all keys or values from a map. To get the keys or values from the maps we need to create an array, iterate over the map and append the keys and/or values to the array. Let's see an example below. package main import \"fmt\" func main () { weekdays := map [ string ] int { \"sunday\" : 0 , \"monday\" : 1 , \"tuesday\" : 2 , \"wednesday\" : 3 , \"thursday\" : 4 , \"friday\" : 5 , \"saturday\" : 6 , } days := [] string {} indexes := [] int {} for day , index := range weekdays { days = append ( days , day ) indexes = append ( indexes , index ) } fmt . Println ( days ) // output: [monday tuesday wednesday thursday friday saturday sunday] fmt . Println ( indexes ) // output: [1 2 3 4 5 6 0] }","title":"Get all keys from a golang map as an array"},{"location":"course/golang/working-with-maps/#merge-two-maps-in-golang","text":"To merge maps in golang we need to create a third map and iterate over the first and second maps and update the third map. package main import \"fmt\" func merge ( ms ... map [ string ] string ) map [ string ][] string { res := map [ string ][] string {} for _ , m := range ms { for k , v := range m { res [ k ] = append ( res [ k ], v ) } } return res } func main () { m1 := map [ string ] string { \"id_1\" : \"val_1\" } m2 := map [ string ] string { \"id_2\" : \"val_2\" } m3 := map [ string ] string { \"id_1\" : \"val_3\" } res := merge ( m1 , m2 , m3 ) fmt . Println ( res ) // output: map[id_1:[val_1 val_3] id_2:[val_2]] } In the above code we have written a function to merge multiple maps into a single map.","title":"Merge two maps in golang"},{"location":"course/golang/working-with-pointers/","text":"Golang Working with pointers \u00b6 Note: To execute golang code online you can use https://play.golang.org/ What is a pointer? \u00b6 A pointer is a variable which holds the memory address of another variable. When to use a pointer? \u00b6 In golang we when using variables the variable passed as a value. In some cases, we want to modify the data of a variable, for example we are passing a struct variable and want to update a field value. we can't do it because we are passing the value of a variable. For this kind of cases we use pointers and update the data of a variable. As we are not passing the value so, we are not using the extra bit of memory. By using pointers we can utilize the memory effectively. Representing pointer in golang \u00b6 We represent the pointers with *T where T is a name of pointer. Let's write a simple program to see how to implement the pointers. package main import \"fmt\" func main (){ FullName := \"Anjaneyulu Batta\" ; var Name * string = & FullName ; fmt . Printf ( \"Type of Name is %T\\n\" , Name ) fmt . Println ( \"Address of Name is\" , Name ) // ouput: Type of Name is *string // Address of Name is 0xc00010a220 } Accessing value of a pointer in golang \u00b6 To get the value of a pointer we can simply use a * in fron of the pointer variable. Let's see an example below package main import \"fmt\" func main (){ FullName := \"Anjaneyulu Batta\" ; var Name * string = & FullName ; fmt . Println ( \"Value of pointer Name is \" , * Name ) // ouput: Value of pointer Name is Anjaneyulu Batta } Passing pointer to a function \u00b6 Let's see a simple example to update the value of a pointer of type map. package main import \"fmt\" type Employee struct { Name string ID string } func UpdateEmployeeWithPointer ( Emp * Employee ){ Emp . Name = \"John\" Emp . ID = \"EMP002\" } func UpdateEmployeeWithoutPointer ( Emp Employee ){ Emp . Name = \"John\" Emp . ID = \"EMP002\" } func main (){ emp := Employee { Name : \"Anji\" , ID : \"EMP001\" } var empPointer * Employee = & emp ; // call function UpdateEmployeeWithoutPointer UpdateEmployeeWithoutPointer ( emp ) fmt . Println ( emp . Name , emp . ID ) // output: Anji EMP001 // call function UpdateEmployeeWithPointer UpdateEmployeeWithPointer ( empPointer ) fmt . Println ( emp . Name , emp . ID ) // output: John EMP002 } Returning pointer from a function \u00b6 It is perfectly legal for a function to return a pointer of a local variable. The Go compiler is intelligent enough and it will allocate this variable on the heap. package main import ( \"fmt\" ) func returnPointer () * int { i := 5 return & i } func main () { d := returnPointer () fmt . Println ( \"Value of d\" , * d ) // ouput: Value of d 5 } Note: We don't need to work with array pointers as it's internally uses the pointer concept. using slices for arrays instead pointers \u00b6 Let's see a simple example package main import ( \"fmt\" ) func modify ( sls [] int ) { sls [ 0 ] = 90 } func main () { a := [ 3 ] int { 89 , 90 , 91 } modify ( a [:]) fmt . Println ( a ) // [90 90 91] } We have covered simple cases, we can do more with pointers. But, be cautious when using pointers because it modifies the data.","title":"Golang Pointers"},{"location":"course/golang/working-with-pointers/#golang-working-with-pointers","text":"Note: To execute golang code online you can use https://play.golang.org/","title":"Golang Working with pointers"},{"location":"course/golang/working-with-pointers/#what-is-a-pointer","text":"A pointer is a variable which holds the memory address of another variable.","title":"What is a pointer?"},{"location":"course/golang/working-with-pointers/#when-to-use-a-pointer","text":"In golang we when using variables the variable passed as a value. In some cases, we want to modify the data of a variable, for example we are passing a struct variable and want to update a field value. we can't do it because we are passing the value of a variable. For this kind of cases we use pointers and update the data of a variable. As we are not passing the value so, we are not using the extra bit of memory. By using pointers we can utilize the memory effectively.","title":"When to use a pointer?"},{"location":"course/golang/working-with-pointers/#representing-pointer-in-golang","text":"We represent the pointers with *T where T is a name of pointer. Let's write a simple program to see how to implement the pointers. package main import \"fmt\" func main (){ FullName := \"Anjaneyulu Batta\" ; var Name * string = & FullName ; fmt . Printf ( \"Type of Name is %T\\n\" , Name ) fmt . Println ( \"Address of Name is\" , Name ) // ouput: Type of Name is *string // Address of Name is 0xc00010a220 }","title":"Representing pointer in golang"},{"location":"course/golang/working-with-pointers/#accessing-value-of-a-pointer-in-golang","text":"To get the value of a pointer we can simply use a * in fron of the pointer variable. Let's see an example below package main import \"fmt\" func main (){ FullName := \"Anjaneyulu Batta\" ; var Name * string = & FullName ; fmt . Println ( \"Value of pointer Name is \" , * Name ) // ouput: Value of pointer Name is Anjaneyulu Batta }","title":"Accessing value of a pointer in golang"},{"location":"course/golang/working-with-pointers/#passing-pointer-to-a-function","text":"Let's see a simple example to update the value of a pointer of type map. package main import \"fmt\" type Employee struct { Name string ID string } func UpdateEmployeeWithPointer ( Emp * Employee ){ Emp . Name = \"John\" Emp . ID = \"EMP002\" } func UpdateEmployeeWithoutPointer ( Emp Employee ){ Emp . Name = \"John\" Emp . ID = \"EMP002\" } func main (){ emp := Employee { Name : \"Anji\" , ID : \"EMP001\" } var empPointer * Employee = & emp ; // call function UpdateEmployeeWithoutPointer UpdateEmployeeWithoutPointer ( emp ) fmt . Println ( emp . Name , emp . ID ) // output: Anji EMP001 // call function UpdateEmployeeWithPointer UpdateEmployeeWithPointer ( empPointer ) fmt . Println ( emp . Name , emp . ID ) // output: John EMP002 }","title":"Passing pointer to a function"},{"location":"course/golang/working-with-pointers/#returning-pointer-from-a-function","text":"It is perfectly legal for a function to return a pointer of a local variable. The Go compiler is intelligent enough and it will allocate this variable on the heap. package main import ( \"fmt\" ) func returnPointer () * int { i := 5 return & i } func main () { d := returnPointer () fmt . Println ( \"Value of d\" , * d ) // ouput: Value of d 5 } Note: We don't need to work with array pointers as it's internally uses the pointer concept.","title":"Returning pointer from a function"},{"location":"course/golang/working-with-pointers/#using-slices-for-arrays-instead-pointers","text":"Let's see a simple example package main import ( \"fmt\" ) func modify ( sls [] int ) { sls [ 0 ] = 90 } func main () { a := [ 3 ] int { 89 , 90 , 91 } modify ( a [:]) fmt . Println ( a ) // [90 90 91] } We have covered simple cases, we can do more with pointers. But, be cautious when using pointers because it modifies the data.","title":"using slices for arrays instead pointers"},{"location":"course/golang/working-with-slices/","text":"Golang Working with Slices \u00b6 Slices in golang are a special case of arrays. Slices are built on top of arrays. The difference between the slices and arrays are slices uses pointers when we use it (i.e when we pass it to a function or assign it to another variable) where as array passes the values. It makes arrays use more memory. How to create slices in golang? \u00b6 We can create slices using the make keyword. It takes three parameters. Type of array length capacity Let's see an example package main import ( \"fmt\" ) func main (){ var names = make ([] string , 5 , 6 ) fmt . Println ( names ) var numbers = make ([] int , 3 ) fmt . Println ( numbers ) // without make myNumbers := [] int { 1 , 2 , 3 } fmt . Println ( myNumbers ) } Output: [ ] [0 0 0] [1 2 3] Note: If didn't provide the capacity then it will consider it same as length. Try the above code at play.golang.org How make slices from existing arrays \u00b6 We can make the slice without the make keyword and from an existing array. We use square brackets for this. Let's see an example. package main import ( \"fmt\" \"reflect\" ) func main (){ names := [ 5 ] string { \"John\" , \"Henry\" , \"Chanakya\" , \"Ramanujan\" , \"Shera\" } start_index := 0 end_index := 2 names_slice = names [ start_index : end_index ] fmt . Println ( reflect . TypeOf ( names )) fmt . Println ( reflect . TypeOf ( names_slice )) } Output: [5]string []string See the slice underlying structure in the below image. use of len and cap in go slices \u00b6 We can make use of function len to calculate the length of a slice. We can make use of function cap to calculate the capacity of a slice. Let's see an example package main import ( \"fmt\" ) func main (){ var names = make ([] string , 5 , 6 ) fmt . Println ( \"length = \" , len ( names )) fmt . Println ( \"capacity = \" , cap ( names )) } Output: length = 5 capacity = 6 Increase capacity of a slice with \"append\" function golang \u00b6 If we want to increase the capacity of a slice then we have to create the new slice with the more capacity and copy the data into it. To do it we don't need to write more code. We can achieve it with append built-in function. Let's do some code package main import ( \"fmt\" ) func main (){ // slice with capacity `1` slice := [] int { 45 } // let's increase it's capacity with `append` function element1 := 10 element2 := 20 element3 := 30 // we can use any number of arguments slice = append ( slice , element1 , element2 , element3 ) fmt . Println ( \"slice = \" , slice ) } Output: slice = [45 10 20 30] References: \u00b6 http://golang.org/pkg/reflect/#Type https://blog.golang.org/slices-intro","title":"Golang Slices"},{"location":"course/golang/working-with-slices/#golang-working-with-slices","text":"Slices in golang are a special case of arrays. Slices are built on top of arrays. The difference between the slices and arrays are slices uses pointers when we use it (i.e when we pass it to a function or assign it to another variable) where as array passes the values. It makes arrays use more memory.","title":"Golang Working with Slices"},{"location":"course/golang/working-with-slices/#how-to-create-slices-in-golang","text":"We can create slices using the make keyword. It takes three parameters. Type of array length capacity Let's see an example package main import ( \"fmt\" ) func main (){ var names = make ([] string , 5 , 6 ) fmt . Println ( names ) var numbers = make ([] int , 3 ) fmt . Println ( numbers ) // without make myNumbers := [] int { 1 , 2 , 3 } fmt . Println ( myNumbers ) } Output: [ ] [0 0 0] [1 2 3] Note: If didn't provide the capacity then it will consider it same as length. Try the above code at play.golang.org","title":"How to create slices in golang?"},{"location":"course/golang/working-with-slices/#how-make-slices-from-existing-arrays","text":"We can make the slice without the make keyword and from an existing array. We use square brackets for this. Let's see an example. package main import ( \"fmt\" \"reflect\" ) func main (){ names := [ 5 ] string { \"John\" , \"Henry\" , \"Chanakya\" , \"Ramanujan\" , \"Shera\" } start_index := 0 end_index := 2 names_slice = names [ start_index : end_index ] fmt . Println ( reflect . TypeOf ( names )) fmt . Println ( reflect . TypeOf ( names_slice )) } Output: [5]string []string See the slice underlying structure in the below image.","title":"How make slices from existing arrays"},{"location":"course/golang/working-with-slices/#use-of-len-and-cap-in-go-slices","text":"We can make use of function len to calculate the length of a slice. We can make use of function cap to calculate the capacity of a slice. Let's see an example package main import ( \"fmt\" ) func main (){ var names = make ([] string , 5 , 6 ) fmt . Println ( \"length = \" , len ( names )) fmt . Println ( \"capacity = \" , cap ( names )) } Output: length = 5 capacity = 6","title":"use of len and cap in go slices"},{"location":"course/golang/working-with-slices/#increase-capacity-of-a-slice-with-append-function-golang","text":"If we want to increase the capacity of a slice then we have to create the new slice with the more capacity and copy the data into it. To do it we don't need to write more code. We can achieve it with append built-in function. Let's do some code package main import ( \"fmt\" ) func main (){ // slice with capacity `1` slice := [] int { 45 } // let's increase it's capacity with `append` function element1 := 10 element2 := 20 element3 := 30 // we can use any number of arguments slice = append ( slice , element1 , element2 , element3 ) fmt . Println ( \"slice = \" , slice ) } Output: slice = [45 10 20 30]","title":"Increase capacity of a slice with \"append\" function golang"},{"location":"course/golang/working-with-slices/#references","text":"http://golang.org/pkg/reflect/#Type https://blog.golang.org/slices-intro","title":"References:"},{"location":"course/golang/working-with-structs/","text":"Golang Working with structs \u00b6 In golang structs are primittive data types used to create a collection of fields. These are useful for gouping the data. We can compare these with python/java class. Golang is not a object oriented programming language so, we didn't have a concept of class. but, we can achieve the similar functionality with structs and interfaces. we can check about it in the next article. Note : use https://play.golang.org/ to execute the golang code online. syntax to create a struct \u00b6 Let's create simple struct which represents a Person with data first name, last name and age. type Person struct { FirstName string LastName string Age int } Create object of struct and add values to the struct fields \u00b6 Let's create simple struct for a person and create an object to it. package main import \"fmt\" type Person struct { FirstName string LastName string Phone int } func main (){ anji := Person { FirstName : \"Anji\" , LastName : \"B\" , Phone : 1234567890 } fmt . Println ( anji ) // output: {Anji B 1234567890} // create object with new keyword user := new ( Person ) jennifer := Person {} jennifer . FirstName = \"Jennifer\" jennifer . LastName = \"D\" jennifer . Phone = 1233211230 fmt . Println ( jennifer ) // output: {Jennifer D 1233211230} } Accessing the fields of a struct \u00b6 We use dot notation to access the fields of a struct Let's access the fields of a struct. see an example below. package main import \"fmt\" type Person struct { FirstName string LastName string Phone int } func main (){ anji := Person { FirstName : \"Anji\" , LastName : \"Batta\" , Phone : 1234567890 } fmt . Println ( \"First name: \" , anji . FirstName ) // output: Anji fmt . Println ( \"Last name: \" , anji . LastName ) // output: Batta } Updating the fields of a struct \u00b6 Let's see an example how we can update a field of struct object package main import \"fmt\" type Address struct { name , street , city , state string Pincode int } func main (){ addr := Address { name : \"3-5, ABC\" , street : \"Golden Street\" , state : \"Telangana\" , Pincode : 500072 } // Let's update the pincode addr . Pincode = 1001 fmt . Println ( \"Pincode: \" , addr . Pincode ) // output: 1001 } Anonymous struct \u00b6 we can crate the anonymous structs like below witout defining the struct. package main import ( \"fmt\" ) func main () { pizza := struct { name string }{ name : \"Pizza\" , } fmt . Println ( pizza ) // output: {Pizza} } compare two struct objects in golang \u00b6 we use == operator to compare the struct objects package main import ( \"fmt\" ) type Student struct { name string } func main () { s1 := Student { \"John\" } s2 := Student { \"John\" } if ( s1 == s2 ) { fmt . Println ( \"They are equal\" ) } else { fmt . Println ( \"They are not equal\" ) } // output: \"They are equal\" } Note: creating a struct means we are literally creating a new or a custom data type in golang so, we can use the newly created just like any other primittive data type golang.","title":"Golang Structs"},{"location":"course/golang/working-with-structs/#golang-working-with-structs","text":"In golang structs are primittive data types used to create a collection of fields. These are useful for gouping the data. We can compare these with python/java class. Golang is not a object oriented programming language so, we didn't have a concept of class. but, we can achieve the similar functionality with structs and interfaces. we can check about it in the next article. Note : use https://play.golang.org/ to execute the golang code online.","title":"Golang Working with structs"},{"location":"course/golang/working-with-structs/#syntax-to-create-a-struct","text":"Let's create simple struct which represents a Person with data first name, last name and age. type Person struct { FirstName string LastName string Age int }","title":"syntax to create a struct"},{"location":"course/golang/working-with-structs/#create-object-of-struct-and-add-values-to-the-struct-fields","text":"Let's create simple struct for a person and create an object to it. package main import \"fmt\" type Person struct { FirstName string LastName string Phone int } func main (){ anji := Person { FirstName : \"Anji\" , LastName : \"B\" , Phone : 1234567890 } fmt . Println ( anji ) // output: {Anji B 1234567890} // create object with new keyword user := new ( Person ) jennifer := Person {} jennifer . FirstName = \"Jennifer\" jennifer . LastName = \"D\" jennifer . Phone = 1233211230 fmt . Println ( jennifer ) // output: {Jennifer D 1233211230} }","title":"Create object of struct and add values to the struct fields"},{"location":"course/golang/working-with-structs/#accessing-the-fields-of-a-struct","text":"We use dot notation to access the fields of a struct Let's access the fields of a struct. see an example below. package main import \"fmt\" type Person struct { FirstName string LastName string Phone int } func main (){ anji := Person { FirstName : \"Anji\" , LastName : \"Batta\" , Phone : 1234567890 } fmt . Println ( \"First name: \" , anji . FirstName ) // output: Anji fmt . Println ( \"Last name: \" , anji . LastName ) // output: Batta }","title":"Accessing the fields of a struct"},{"location":"course/golang/working-with-structs/#updating-the-fields-of-a-struct","text":"Let's see an example how we can update a field of struct object package main import \"fmt\" type Address struct { name , street , city , state string Pincode int } func main (){ addr := Address { name : \"3-5, ABC\" , street : \"Golden Street\" , state : \"Telangana\" , Pincode : 500072 } // Let's update the pincode addr . Pincode = 1001 fmt . Println ( \"Pincode: \" , addr . Pincode ) // output: 1001 }","title":"Updating the fields of a struct"},{"location":"course/golang/working-with-structs/#anonymous-struct","text":"we can crate the anonymous structs like below witout defining the struct. package main import ( \"fmt\" ) func main () { pizza := struct { name string }{ name : \"Pizza\" , } fmt . Println ( pizza ) // output: {Pizza} }","title":"Anonymous struct"},{"location":"course/golang/working-with-structs/#compare-two-struct-objects-in-golang","text":"we use == operator to compare the struct objects package main import ( \"fmt\" ) type Student struct { name string } func main () { s1 := Student { \"John\" } s2 := Student { \"John\" } if ( s1 == s2 ) { fmt . Println ( \"They are equal\" ) } else { fmt . Println ( \"They are not equal\" ) } // output: \"They are equal\" } Note: creating a struct means we are literally creating a new or a custom data type in golang so, we can use the newly created just like any other primittive data type golang.","title":"compare two struct objects in golang"},{"location":"course/javascript/","text":"Javascript Programming \u00b6 Why to learn javascript ? \u00b6 Javascript can be used on client side and server side. We can develop web apps, mobile apps and even desktop applications with javascript It has good community support so you will get help quickly It's easy to learn and apply and Javascript is everywhere Companies using Javascript \u00b6 Paypal Airbnb Facebook Google Reddit 90% of the companies in the world are using the javascript.","title":"Javascript"},{"location":"course/javascript/#javascript-programming","text":"","title":"Javascript Programming"},{"location":"course/javascript/#why-to-learn-javascript","text":"Javascript can be used on client side and server side. We can develop web apps, mobile apps and even desktop applications with javascript It has good community support so you will get help quickly It's easy to learn and apply and Javascript is everywhere","title":"Why to learn javascript ?"},{"location":"course/javascript/#companies-using-javascript","text":"Paypal Airbnb Facebook Google Reddit 90% of the companies in the world are using the javascript.","title":"Companies using Javascript"},{"location":"course/javascript/data-types/","text":"Data types in javascript \u00b6 We have 8 basic data types in javascript. number for numbers of any kind: integer or floating-point, integers are limited by \u00b1253. bigint is for integer numbers of arbitrary length. string for strings. A string may have zero or more characters, there\u2019s no separate single-character type. boolean for true/false. null for unknown values \u2013 a standalone type that has a single value null. undefined for unassigned values \u2013 a standalone type that has a single value undefined. object for more complex data structures. symbol for unique identifiers. Number \u00b6 It represents both integers and float numbers Besides regular numbers, there are so-called \"special numeric values\" which also belong to this data type: Infinity , -Infinity and NaN . Example: \u00b6 let num1 ; nmu1 = 100 ; let num2 = 200.55 ; let inf = 1 / 0 ; // Infinity let negInf = - 1 / 0 ; // -Infinity let nan = \"hi\" / 0 ; // NaN BigInt \u00b6 In JavaScript, the \"number\" type cannot represent integer values larger than (253-1) (that\u2019s 9007199254740991), or less than -(-253-1) for negatives. It\u2019s a technical limitation caused by their internal representation. const bigInt = 345347890123456789012345678901234567890n; String \u00b6 A string in javascript is mutable collection of characters. A string in javaScript must be surrounded by quotes. let name = \"Jim\" let title = \"You can do anything\" Boolean \u00b6 A boolean is a data type which is used to represent the values true or false Example \u00b6 let isValid = true ; let isChecked = false ; let isBig = 100 > 50000 null \u00b6 It's a special value in javascript which represents nil value It's not type Example \u00b6 let title = null ; undefined \u00b6 undefined is also a special value in javascript just like null which tells that value is not assigned. Example \u00b6 let name ; Object \u00b6 The Object class represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Example \u00b6 let student_info = { name : \"Jess\" , age : 20 , } Symbol \u00b6 A symbol represents a unique identifier let id = Symbol ( \"id\" );","title":"Javascript Data types"},{"location":"course/javascript/data-types/#data-types-in-javascript","text":"We have 8 basic data types in javascript. number for numbers of any kind: integer or floating-point, integers are limited by \u00b1253. bigint is for integer numbers of arbitrary length. string for strings. A string may have zero or more characters, there\u2019s no separate single-character type. boolean for true/false. null for unknown values \u2013 a standalone type that has a single value null. undefined for unassigned values \u2013 a standalone type that has a single value undefined. object for more complex data structures. symbol for unique identifiers.","title":"Data types in javascript"},{"location":"course/javascript/data-types/#number","text":"It represents both integers and float numbers Besides regular numbers, there are so-called \"special numeric values\" which also belong to this data type: Infinity , -Infinity and NaN .","title":"Number"},{"location":"course/javascript/data-types/#example","text":"let num1 ; nmu1 = 100 ; let num2 = 200.55 ; let inf = 1 / 0 ; // Infinity let negInf = - 1 / 0 ; // -Infinity let nan = \"hi\" / 0 ; // NaN","title":"Example:"},{"location":"course/javascript/data-types/#bigint","text":"In JavaScript, the \"number\" type cannot represent integer values larger than (253-1) (that\u2019s 9007199254740991), or less than -(-253-1) for negatives. It\u2019s a technical limitation caused by their internal representation. const bigInt = 345347890123456789012345678901234567890n;","title":"BigInt"},{"location":"course/javascript/data-types/#string","text":"A string in javascript is mutable collection of characters. A string in javaScript must be surrounded by quotes. let name = \"Jim\" let title = \"You can do anything\"","title":"String"},{"location":"course/javascript/data-types/#boolean","text":"A boolean is a data type which is used to represent the values true or false","title":"Boolean"},{"location":"course/javascript/data-types/#example_1","text":"let isValid = true ; let isChecked = false ; let isBig = 100 > 50000","title":"Example"},{"location":"course/javascript/data-types/#null","text":"It's a special value in javascript which represents nil value It's not type","title":"null"},{"location":"course/javascript/data-types/#example_2","text":"let title = null ;","title":"Example"},{"location":"course/javascript/data-types/#undefined","text":"undefined is also a special value in javascript just like null which tells that value is not assigned.","title":"undefined"},{"location":"course/javascript/data-types/#example_3","text":"let name ;","title":"Example"},{"location":"course/javascript/data-types/#object","text":"The Object class represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities.","title":"Object"},{"location":"course/javascript/data-types/#example_4","text":"let student_info = { name : \"Jess\" , age : 20 , }","title":"Example"},{"location":"course/javascript/data-types/#symbol","text":"A symbol represents a unique identifier let id = Symbol ( \"id\" );","title":"Symbol"},{"location":"course/javascript/decorators/","text":"What are Decorators in Javascript? \u00b6 Decorators wrap a function in another function. These wrappers decorate the original function with new capabilities. types of decorators in JavaScript \u00b6 Function decorators \u2014 Wraps a function with another function. Class decorators \u2014 Applied to the whole class at once. Class member decorators \u2014 Applied to members of a class. Function Decorators \u00b6 In function decorators, we can simply wrap a JavaScript function with another function and use it as a decorator. Let\u2019s consider an example to understand this process. The below code shows a simple JavaScript function that multiplies 2 numbers. function multiply ( x , y ) { console . log ( 'Total : ' + ( x * y )); } Now, we can wrap this function with another function to extend the functionalities without changing the original function. function multiply ( x , y ) { console . log ( 'Total : ' + ( x * y )); } function logDecorator ( logger ) { return function ( message ) { const result = logger . apply ( this , arguments ); console . log ( \"Logged at:\" , new Date (). toLocaleString ()); return result ; } } const wrapperFunction = logDecorator ( multiply ); wrapperFunction ( 10 , 10 ) // output: // Total: 100 // Logged at: 02/04/2022, 18:14:25 In the above example, the decorated function is in the variable wrapperFunction() and it can be called similar to any JavaScript function. As you can see, the wrapperFunction() has modified the multiply() function by including a logger. Class Decorators \u00b6 Decorating JavaScript classes is a bit different from decorating functions. If we try to use the same method as discussed in the function decorators section, we will get a TypeError like below: function logDecorator ( logger ) { return function () { console . log ( \"Logged at:\" , new Date (). toLocaleString ()); return logger (); } } class Calculator { constructor ( x , y ) { this . x = x ; this . y = y ; } multiply () { return ( this . x * this . y ); } } let calculator = new Calculator ( 10 , 10 ); let decoratedCalculator = logDecorator ( calculator . multiply ); decoratedCalculator (); we can overcome this issue if you have a good understanding of JavaScript this keyword. But that is not the easiest way to decorate a JavaScript class. Instead, you need to follow the TC39 class decorator proposal to decorate JavaScript classes. Class member decorators \u00b6 Class member decorators are applied for single members in a class. These members can be properties, methods, getters, or setters, and the decorator function accepts 3 input parameters: target - The class that the member is on. name - The name of the member in the class. descriptor - The member descriptor. For example, let\u2019s consider the @readonly decorator. function readonly ( target , name , descriptor ) { descriptor . writable = false ; return descriptor ; } class Example { x () {} @ readonly y () {} } const myClass = new Example (); myClass . x = 10 ; myClass . y = 20 ; In the readonly() function, we have set the writable property of the descriptor to false. Then, it is applied as a decorator to function y() . If you try to modify it, you will get a TypeError . Also, we can create custom decorators and use them as class member decorators like below: function log ( name ) { return function decorator ( t , n , descriptor ) { const original = descriptor . value ; if ( typeof original === 'function' ) { descriptor . value = function (... args ) { console . log ( \"Logged at:\" , new Date (). toLocaleString ()); try { const result = original . apply ( this , args ); console . log ( `Result from ${ name } : ${ result } ` ); return result ; } cach ( e ) { console . log ( `Error from $ {name}: ${ e } ` ); thro e ; } }; } return descriptor ; }; } class Calculator { @ log ( 'Multiply' ) multiply ( x , y ){ return x * y ; } } calculator = new Calculator (); calculator . multiply ( 10 , 10 ); // output: // Logged at: 1/12/2022, 08:00:00 PM // Result from Multiply: 100 In this example, the Calculator class has a method named multiply() , and it is decorated using the log() function. The log() function accepts a single parameter as input, and we can pass values into that when we call the decorator ( @log('Multiply') ). Class decorators \u00b6 Class decorators are applied to the complete class at once. So, any modification we make will impact the whole class. Most importantly, anything you do with class decorators needs to end by returning a new constructor to replace the class constructor. Class decorator functions only accept 1 argument, which is the constructor function being decorated. Let\u2019s take a simple example to understand this behavior. function log ( name ) { return function decorator ( Class ) { return (... args ) => { console . log ( `Arguments for ${ name } : ${ args } ` ); return new Class (... args ); }; } } @ log ( 'Multiply' ) class Calculator { constructor ( x , y ) { } } calculator = new Calculator ( 10 , 10 ); // Arguments for Multiply: [10, 10] console . log ( calculator ); // Calculator {} The log() function of the above example accepts the Calculator class as an argument and returns a new function to replace the constructor of the Calculator class. Advantages using decorators \u00b6 The main purpose of introducing decorators to JavaScript is to share functionalities between JavaScript classes and class properties. But, that\u2019s not the only advantage decorators bring. Decorators allow developers to write clean and reusable code. Developers can easily separate the functional enhancements from the code features using decorators. Apart from that, the decorator syntax is pretty simple and allows to add new features to classes and properties without increasing the code complexity. This makes the code easier to maintain and debug. References: \u00b6 https://www.typescriptlang.org/docs/handbook/decorators.html","title":"Javascript Decorators"},{"location":"course/javascript/decorators/#what-are-decorators-in-javascript","text":"Decorators wrap a function in another function. These wrappers decorate the original function with new capabilities.","title":"What are Decorators in Javascript?"},{"location":"course/javascript/decorators/#types-of-decorators-in-javascript","text":"Function decorators \u2014 Wraps a function with another function. Class decorators \u2014 Applied to the whole class at once. Class member decorators \u2014 Applied to members of a class.","title":"types of decorators in JavaScript"},{"location":"course/javascript/decorators/#function-decorators","text":"In function decorators, we can simply wrap a JavaScript function with another function and use it as a decorator. Let\u2019s consider an example to understand this process. The below code shows a simple JavaScript function that multiplies 2 numbers. function multiply ( x , y ) { console . log ( 'Total : ' + ( x * y )); } Now, we can wrap this function with another function to extend the functionalities without changing the original function. function multiply ( x , y ) { console . log ( 'Total : ' + ( x * y )); } function logDecorator ( logger ) { return function ( message ) { const result = logger . apply ( this , arguments ); console . log ( \"Logged at:\" , new Date (). toLocaleString ()); return result ; } } const wrapperFunction = logDecorator ( multiply ); wrapperFunction ( 10 , 10 ) // output: // Total: 100 // Logged at: 02/04/2022, 18:14:25 In the above example, the decorated function is in the variable wrapperFunction() and it can be called similar to any JavaScript function. As you can see, the wrapperFunction() has modified the multiply() function by including a logger.","title":"Function Decorators"},{"location":"course/javascript/decorators/#class-decorators","text":"Decorating JavaScript classes is a bit different from decorating functions. If we try to use the same method as discussed in the function decorators section, we will get a TypeError like below: function logDecorator ( logger ) { return function () { console . log ( \"Logged at:\" , new Date (). toLocaleString ()); return logger (); } } class Calculator { constructor ( x , y ) { this . x = x ; this . y = y ; } multiply () { return ( this . x * this . y ); } } let calculator = new Calculator ( 10 , 10 ); let decoratedCalculator = logDecorator ( calculator . multiply ); decoratedCalculator (); we can overcome this issue if you have a good understanding of JavaScript this keyword. But that is not the easiest way to decorate a JavaScript class. Instead, you need to follow the TC39 class decorator proposal to decorate JavaScript classes.","title":"Class Decorators"},{"location":"course/javascript/decorators/#class-member-decorators","text":"Class member decorators are applied for single members in a class. These members can be properties, methods, getters, or setters, and the decorator function accepts 3 input parameters: target - The class that the member is on. name - The name of the member in the class. descriptor - The member descriptor. For example, let\u2019s consider the @readonly decorator. function readonly ( target , name , descriptor ) { descriptor . writable = false ; return descriptor ; } class Example { x () {} @ readonly y () {} } const myClass = new Example (); myClass . x = 10 ; myClass . y = 20 ; In the readonly() function, we have set the writable property of the descriptor to false. Then, it is applied as a decorator to function y() . If you try to modify it, you will get a TypeError . Also, we can create custom decorators and use them as class member decorators like below: function log ( name ) { return function decorator ( t , n , descriptor ) { const original = descriptor . value ; if ( typeof original === 'function' ) { descriptor . value = function (... args ) { console . log ( \"Logged at:\" , new Date (). toLocaleString ()); try { const result = original . apply ( this , args ); console . log ( `Result from ${ name } : ${ result } ` ); return result ; } cach ( e ) { console . log ( `Error from $ {name}: ${ e } ` ); thro e ; } }; } return descriptor ; }; } class Calculator { @ log ( 'Multiply' ) multiply ( x , y ){ return x * y ; } } calculator = new Calculator (); calculator . multiply ( 10 , 10 ); // output: // Logged at: 1/12/2022, 08:00:00 PM // Result from Multiply: 100 In this example, the Calculator class has a method named multiply() , and it is decorated using the log() function. The log() function accepts a single parameter as input, and we can pass values into that when we call the decorator ( @log('Multiply') ).","title":"Class member decorators"},{"location":"course/javascript/decorators/#class-decorators_1","text":"Class decorators are applied to the complete class at once. So, any modification we make will impact the whole class. Most importantly, anything you do with class decorators needs to end by returning a new constructor to replace the class constructor. Class decorator functions only accept 1 argument, which is the constructor function being decorated. Let\u2019s take a simple example to understand this behavior. function log ( name ) { return function decorator ( Class ) { return (... args ) => { console . log ( `Arguments for ${ name } : ${ args } ` ); return new Class (... args ); }; } } @ log ( 'Multiply' ) class Calculator { constructor ( x , y ) { } } calculator = new Calculator ( 10 , 10 ); // Arguments for Multiply: [10, 10] console . log ( calculator ); // Calculator {} The log() function of the above example accepts the Calculator class as an argument and returns a new function to replace the constructor of the Calculator class.","title":"Class decorators"},{"location":"course/javascript/decorators/#advantages-using-decorators","text":"The main purpose of introducing decorators to JavaScript is to share functionalities between JavaScript classes and class properties. But, that\u2019s not the only advantage decorators bring. Decorators allow developers to write clean and reusable code. Developers can easily separate the functional enhancements from the code features using decorators. Apart from that, the decorator syntax is pretty simple and allows to add new features to classes and properties without increasing the code complexity. This makes the code easier to maintain and debug.","title":"Advantages using decorators"},{"location":"course/javascript/decorators/#references","text":"https://www.typescriptlang.org/docs/handbook/decorators.html","title":"References:"},{"location":"course/javascript/error-handling/","text":"","title":"Error handling"},{"location":"course/javascript/generators/","text":"What is a generator? \u00b6 A generator function in JavaScript is a special type of function which is able to stop and resume its execution at will. generator function syntax \u00b6 To create a generator function we put a star * after the function keyword Arrow generator functions are not permitted Inside the function we can use yield to pause the execution function * generate () { yield 33 ; yield 99 ; } yield pauses the execution and returns a so called Generator object to the caller. This object is both an iterable, and an iterator at the same time. Note: generators go exhaust once you consume all their values. generator with for...of loop \u00b6 Let's write a simple function which generates n numbers function * generateNumbers ( limit = Infinity ){ for ( let i = 1 ; i <= limit ; i ++ ){ yield i ; } } // let's create generator let gen = generateNumbers ( 2 ); // let's use for...of for ( const num of gen ){ console . log ( num ); } // output // 1 // 2 - From the above code let gen = generateNumbers(2); we have created a generator object which generates 2 numbers. - After, we used it with for...of construct and logged the number to the console. generator with spread (...) operator \u00b6 function * fibonacci ( limit = Infinity ) { let count = 1 ; let a = 0 ; let b = 1 ; while ( count <= limit ) { let current = a ; a = b ; b = current + a ; yield current ; } } let fib = fibonacci ( 3 ); console . log (... fib ) // output: - In the above code we have written fibonacci generator which creates n number of fibonacci numbers. - with let fib = fibonacci(3); , we have created the fib generator and used it with spread ... operator. - we can use the generator as Iterator References: \u00b6 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function *","title":"Javascript Generators"},{"location":"course/javascript/generators/#what-is-a-generator","text":"A generator function in JavaScript is a special type of function which is able to stop and resume its execution at will.","title":"What is a generator?"},{"location":"course/javascript/generators/#generator-function-syntax","text":"To create a generator function we put a star * after the function keyword Arrow generator functions are not permitted Inside the function we can use yield to pause the execution function * generate () { yield 33 ; yield 99 ; } yield pauses the execution and returns a so called Generator object to the caller. This object is both an iterable, and an iterator at the same time. Note: generators go exhaust once you consume all their values.","title":"generator function syntax"},{"location":"course/javascript/generators/#generator-with-forof-loop","text":"Let's write a simple function which generates n numbers function * generateNumbers ( limit = Infinity ){ for ( let i = 1 ; i <= limit ; i ++ ){ yield i ; } } // let's create generator let gen = generateNumbers ( 2 ); // let's use for...of for ( const num of gen ){ console . log ( num ); } // output // 1 // 2 - From the above code let gen = generateNumbers(2); we have created a generator object which generates 2 numbers. - After, we used it with for...of construct and logged the number to the console.","title":"generator with for...of loop"},{"location":"course/javascript/generators/#generator-with-spread-operator","text":"function * fibonacci ( limit = Infinity ) { let count = 1 ; let a = 0 ; let b = 1 ; while ( count <= limit ) { let current = a ; a = b ; b = current + a ; yield current ; } } let fib = fibonacci ( 3 ); console . log (... fib ) // output: - In the above code we have written fibonacci generator which creates n number of fibonacci numbers. - with let fib = fibonacci(3); , we have created the fib generator and used it with spread ... operator. - we can use the generator as Iterator","title":"generator with spread (...) operator"},{"location":"course/javascript/generators/#references","text":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function *","title":"References:"},{"location":"course/javascript/getters-and-setters/","text":"Why to use Getters and Setters? \u00b6 We generally define and use the properties in the javascript. We access the attribute and change it's value if requied. But, some times we may need to return data based on some computations, for that we can use the functions. But, can't use it as an attribute but with getters we can access the value and with setters we can set the value. get keyword is used for getter and set keyword is used for setter. Example use of Getters and Setters \u00b6 var person = { firstName : 'Jimmy' , lastName : 'Smith' , get fullName () { return this . firstName + ' ' + this . lastName ; } set fullName ( name ) { var words = name . toString (). split ( ' ' ); this . firstName = words [ 0 ] || '' ; this . lastName = words [ 1 ] || '' ; } } we can use fullName attribute to get the full name like console.log(person.fullName) we can update the firstName and lastName by setting fullName like below. person . fullName = 'Vin Diesel' console . log ( person . firstName ); // Vin console . log ( person . lastName ) // Diesel Reference: \u00b6 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set","title":"Javascript Getters and Setters"},{"location":"course/javascript/getters-and-setters/#why-to-use-getters-and-setters","text":"We generally define and use the properties in the javascript. We access the attribute and change it's value if requied. But, some times we may need to return data based on some computations, for that we can use the functions. But, can't use it as an attribute but with getters we can access the value and with setters we can set the value. get keyword is used for getter and set keyword is used for setter.","title":"Why to use Getters and Setters?"},{"location":"course/javascript/getters-and-setters/#example-use-of-getters-and-setters","text":"var person = { firstName : 'Jimmy' , lastName : 'Smith' , get fullName () { return this . firstName + ' ' + this . lastName ; } set fullName ( name ) { var words = name . toString (). split ( ' ' ); this . firstName = words [ 0 ] || '' ; this . lastName = words [ 1 ] || '' ; } } we can use fullName attribute to get the full name like console.log(person.fullName) we can update the firstName and lastName by setting fullName like below. person . fullName = 'Vin Diesel' console . log ( person . firstName ); // Vin console . log ( person . lastName ) // Diesel","title":"Example use of Getters and Setters"},{"location":"course/javascript/getters-and-setters/#reference","text":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set","title":"Reference:"},{"location":"course/javascript/if-else/","text":"If Else Conditions javascript \u00b6 \"if else\" conditions in javascript are used execute the code based on the condition. That's why these also called as conditional statements. If statement \u00b6 Use Case: If purchase amount is more that 1000 then give customer a free chocolate. let purchaseAmount = 1500 ; if ( purchaseAmount > 1000 ){ console . log ( \"You won a free chocolate\" ); } If...else statement \u00b6 Use case: Check if user is logged in or not. let isLoggeIn = false ; if ( isLoggeIn ){ console . log ( \"Welcome User!\" ); } else { console . log ( \"Please login\" ); } If...else if..else statement \u00b6 Use Case: Age Appropriate Drinks if ( age < 14 ) { return \"drink fruit juice\" ; } else if ( age < 18 ) { return \"drink soda\" ; } else if ( age < 21 ) { return \"drink fruit-flavored beer\" ; } else { return \"drink throat-piercing vodka\" ; }","title":"Javascript If...Else"},{"location":"course/javascript/if-else/#if-else-conditions-javascript","text":"\"if else\" conditions in javascript are used execute the code based on the condition. That's why these also called as conditional statements.","title":"If Else Conditions javascript"},{"location":"course/javascript/if-else/#if-statement","text":"Use Case: If purchase amount is more that 1000 then give customer a free chocolate. let purchaseAmount = 1500 ; if ( purchaseAmount > 1000 ){ console . log ( \"You won a free chocolate\" ); }","title":"If statement"},{"location":"course/javascript/if-else/#ifelse-statement","text":"Use case: Check if user is logged in or not. let isLoggeIn = false ; if ( isLoggeIn ){ console . log ( \"Welcome User!\" ); } else { console . log ( \"Please login\" ); }","title":"If...else statement"},{"location":"course/javascript/if-else/#ifelse-ifelse-statement","text":"Use Case: Age Appropriate Drinks if ( age < 14 ) { return \"drink fruit juice\" ; } else if ( age < 18 ) { return \"drink soda\" ; } else if ( age < 21 ) { return \"drink fruit-flavored beer\" ; } else { return \"drink throat-piercing vodka\" ; }","title":"If...else if..else statement"},{"location":"course/javascript/inheritance/","text":"Class inheritance in Javascript \u00b6 Inheritance is the procedure in which one class inherits the attributes and methods of another class. It provides code reusability It gives better maintainability of the code Javascript uses extends keyword to inherit the class. Javascript uses super keyword to call the parent class method. A quick example \u00b6 Let's write some code to represent the different types cars i.e Audi and Tesla. As, we know Audi and Tesla both has common properties and functionalities. so, we can have a base class with common properties and functionalities. Let's name it as Car The other two classes Audi and Tesla can inherit these properties and can add additional implementations. class Car { constructor ( color , model , makeYear , fuelType ){ this . color = color ; this . model = model ; this . makeYear = makeYear ; this . fuelType = fuelType ; } start (){ return `started` ; } stop (){ return `stopped` } } class Audi extends Car { constructor ( color , model , makeYear ){ super ( color , model , makeYear , 'Petrol' ) } } class Tesla extends Car { constructor ( color , model , makeYear ){ super ( color , model , makeYear , 'Electric' ) this . autoPilotMode = false ; } setAutoPilotMode ( mode ){ this . autoPilotMode = mode ; return this . autoPilotMode ; } startAutoPilotMode (){ return this . setAutoPilotMode ( true ); } stopAutoPilotMode (){ return this . setAutoPilotMode ( false ); } } from the above code, we can see that classes Audi , Tesla both inherited the prperties from class Car . We have implemented extra funcionaliy \"auto pilot mode\" on class Tesla . Let's create objects for both cars Audi and Tesla // create audi object let audi_a4 = new Audi ( 'Blue' , 'A4' , 2022 ); console . log ( audi_a4 . start ()) // output: started console . log ( audi_a4 . color ) // output: Blue // create tesla object let tesla = new Tesla ( 'Red' , 'S' , 2022 ); console . log ( tesla . start ()) // output: started console . log ( tesla . startAutoPilotMode ()) // output: true Like above code we can re-use the properties from parent class and implement additional properties/functionalities.","title":"Javascript Class Inheritance"},{"location":"course/javascript/inheritance/#class-inheritance-in-javascript","text":"Inheritance is the procedure in which one class inherits the attributes and methods of another class. It provides code reusability It gives better maintainability of the code Javascript uses extends keyword to inherit the class. Javascript uses super keyword to call the parent class method.","title":"Class inheritance in Javascript"},{"location":"course/javascript/inheritance/#a-quick-example","text":"Let's write some code to represent the different types cars i.e Audi and Tesla. As, we know Audi and Tesla both has common properties and functionalities. so, we can have a base class with common properties and functionalities. Let's name it as Car The other two classes Audi and Tesla can inherit these properties and can add additional implementations. class Car { constructor ( color , model , makeYear , fuelType ){ this . color = color ; this . model = model ; this . makeYear = makeYear ; this . fuelType = fuelType ; } start (){ return `started` ; } stop (){ return `stopped` } } class Audi extends Car { constructor ( color , model , makeYear ){ super ( color , model , makeYear , 'Petrol' ) } } class Tesla extends Car { constructor ( color , model , makeYear ){ super ( color , model , makeYear , 'Electric' ) this . autoPilotMode = false ; } setAutoPilotMode ( mode ){ this . autoPilotMode = mode ; return this . autoPilotMode ; } startAutoPilotMode (){ return this . setAutoPilotMode ( true ); } stopAutoPilotMode (){ return this . setAutoPilotMode ( false ); } } from the above code, we can see that classes Audi , Tesla both inherited the prperties from class Car . We have implemented extra funcionaliy \"auto pilot mode\" on class Tesla . Let's create objects for both cars Audi and Tesla // create audi object let audi_a4 = new Audi ( 'Blue' , 'A4' , 2022 ); console . log ( audi_a4 . start ()) // output: started console . log ( audi_a4 . color ) // output: Blue // create tesla object let tesla = new Tesla ( 'Red' , 'S' , 2022 ); console . log ( tesla . start ()) // output: started console . log ( tesla . startAutoPilotMode ()) // output: true Like above code we can re-use the properties from parent class and implement additional properties/functionalities.","title":"A quick example"},{"location":"course/javascript/introduction/","text":"Introduction to javascript programming \u00b6 Before getting started with javascript we should know basic elements of a webpage. HTML, CSS are the basic elements of a webpage. Now, you got the doubt if HTML an CSS are the basic elements why javascript? HTML - is used to create a skeleton for the webpage. CSS - is used to add styles to the HTMl skeleton. Why to use javascript on client side ? \u00b6 Now, you might got some idea about why we use javascript on client side (i.e browser in case of web). We use javascript to give life to the webpage. It allows user to interact with the webpage. If you don't about web and it's tech HTML and CSS then I recommend you to read about it. What are the tools to get started with Javascript? \u00b6 We need A web browser (i.e Google Chrome) A Text Editor (i.e VS Code) A Thinking Mind (i.e I know you already have it) (adsbygoogle = window.adsbygoogle || []).push({}); Hello world program with javascript \u00b6 Create a document with name first_program.html and add the below code. < html > < body > < h1 id = \"hello\" ></ h1 > < script type = \"text/javascript\" > document . getElementById ( 'hello' ). innerHTML = \"Hello World\" ; </ script > </ body > </ html > In the above code, we have created a webpage and embedded javascript with tag script . Now, we know how to use javascript inside a web page using script tag. understand the developer tools in browser \u00b6 I'm assuming that you have a google chrome browser if not download and install it. Now, open the chrome browser and press Ctrl + Shift + J . It will show the screen like below. Elements \u00b6 It is used to see the HTML elements tree structure and called as DOM (Document Object Model) We can edit the DOM by inspecting it. Console \u00b6 It will show the javascript warnings and errors if any. We can make use of the Console to execute the javascript expressions. Let's copy and paste the expression 55 + 45 and press enter. We will get output as 100 . Sources \u00b6 It will show the assets like images, videos, javascript, css, etc. Information of other domains that are used in the webpage. (adsbygoogle = window.adsbygoogle || []).push({}); Network \u00b6 It will show the all network calls sent to different servers. Performance \u00b6 We can check the performance of the webpage, how it responds & how much time it's taking to load the data, etc. Memory \u00b6 We can profile memory usage and track down leaks if any Application \u00b6 Inspect all resources that are loaded, including IndexedDB or Web SQL databases, local and session storage, cookies, Application Cache, images, fonts, and stylesheets. Security panel \u00b6 Debug mixed content issues, certificate problems, and more. Now you have got the basic idea of how we can make use of the developer tools. print statement in javascript \u00b6 Like all other programming languages we have a print statement in javascript. But it's called as console . We can use it like below. console . log ( \"100 + 50 = \" , 100 + 50 ); Open the developer tools and execute the above code, it will give output 100 + 50 = 150 How to use separate javascript files with HTML document? \u00b6 We can use a separate javascript files in the web documents. Javascript file has the extension of .js . Let's see an example to it. sum.js function calc_sum ( n1 , n2 ){ return n1 + n2 ; } console . log ( \"100 + 50 = \" , calc_sum ( 100 , 50 )); my_file.html < html > < body > < script src = \"./sum.js\" ></ script > </ body > </ html > Make sure both files are in the same directory then only it will work. We have given a relative path to the file in the above example. We can give full file path or a web path. We can make use of <script src=\"{{file path}}\"> tag like above to use separate javascript files with web pages. Open the webpage and browser console. It will show output 100 + 50 = 150 . (adsbygoogle = window.adsbygoogle || []).push({});","title":"Introduction"},{"location":"course/javascript/introduction/#introduction-to-javascript-programming","text":"Before getting started with javascript we should know basic elements of a webpage. HTML, CSS are the basic elements of a webpage. Now, you got the doubt if HTML an CSS are the basic elements why javascript? HTML - is used to create a skeleton for the webpage. CSS - is used to add styles to the HTMl skeleton.","title":"Introduction to javascript programming"},{"location":"course/javascript/introduction/#why-to-use-javascript-on-client-side","text":"Now, you might got some idea about why we use javascript on client side (i.e browser in case of web). We use javascript to give life to the webpage. It allows user to interact with the webpage. If you don't about web and it's tech HTML and CSS then I recommend you to read about it.","title":"Why to use javascript on client side ?"},{"location":"course/javascript/introduction/#what-are-the-tools-to-get-started-with-javascript","text":"We need A web browser (i.e Google Chrome) A Text Editor (i.e VS Code) A Thinking Mind (i.e I know you already have it) (adsbygoogle = window.adsbygoogle || []).push({});","title":"What are the tools to get started with Javascript?"},{"location":"course/javascript/introduction/#hello-world-program-with-javascript","text":"Create a document with name first_program.html and add the below code. < html > < body > < h1 id = \"hello\" ></ h1 > < script type = \"text/javascript\" > document . getElementById ( 'hello' ). innerHTML = \"Hello World\" ; </ script > </ body > </ html > In the above code, we have created a webpage and embedded javascript with tag script . Now, we know how to use javascript inside a web page using script tag.","title":"Hello world program with javascript"},{"location":"course/javascript/introduction/#understand-the-developer-tools-in-browser","text":"I'm assuming that you have a google chrome browser if not download and install it. Now, open the chrome browser and press Ctrl + Shift + J . It will show the screen like below.","title":"understand the developer tools in browser"},{"location":"course/javascript/introduction/#elements","text":"It is used to see the HTML elements tree structure and called as DOM (Document Object Model) We can edit the DOM by inspecting it.","title":"Elements"},{"location":"course/javascript/introduction/#console","text":"It will show the javascript warnings and errors if any. We can make use of the Console to execute the javascript expressions. Let's copy and paste the expression 55 + 45 and press enter. We will get output as 100 .","title":"Console"},{"location":"course/javascript/introduction/#sources","text":"It will show the assets like images, videos, javascript, css, etc. Information of other domains that are used in the webpage. (adsbygoogle = window.adsbygoogle || []).push({});","title":"Sources"},{"location":"course/javascript/introduction/#network","text":"It will show the all network calls sent to different servers.","title":"Network"},{"location":"course/javascript/introduction/#performance","text":"We can check the performance of the webpage, how it responds & how much time it's taking to load the data, etc.","title":"Performance"},{"location":"course/javascript/introduction/#memory","text":"We can profile memory usage and track down leaks if any","title":"Memory"},{"location":"course/javascript/introduction/#application","text":"Inspect all resources that are loaded, including IndexedDB or Web SQL databases, local and session storage, cookies, Application Cache, images, fonts, and stylesheets.","title":"Application"},{"location":"course/javascript/introduction/#security-panel","text":"Debug mixed content issues, certificate problems, and more. Now you have got the basic idea of how we can make use of the developer tools.","title":"Security panel"},{"location":"course/javascript/introduction/#print-statement-in-javascript","text":"Like all other programming languages we have a print statement in javascript. But it's called as console . We can use it like below. console . log ( \"100 + 50 = \" , 100 + 50 ); Open the developer tools and execute the above code, it will give output 100 + 50 = 150","title":"print statement in javascript"},{"location":"course/javascript/introduction/#how-to-use-separate-javascript-files-with-html-document","text":"We can use a separate javascript files in the web documents. Javascript file has the extension of .js . Let's see an example to it. sum.js function calc_sum ( n1 , n2 ){ return n1 + n2 ; } console . log ( \"100 + 50 = \" , calc_sum ( 100 , 50 )); my_file.html < html > < body > < script src = \"./sum.js\" ></ script > </ body > </ html > Make sure both files are in the same directory then only it will work. We have given a relative path to the file in the above example. We can give full file path or a web path. We can make use of <script src=\"{{file path}}\"> tag like above to use separate javascript files with web pages. Open the webpage and browser console. It will show output 100 + 50 = 150 . (adsbygoogle = window.adsbygoogle || []).push({});","title":"How to use separate javascript files with HTML document?"},{"location":"course/javascript/iterators/","text":"Iterables and Iterators in JavaScript \u00b6 Iterator is an object which implements the iteration protocol. We have two iteration protocols The iterator protocol The iterable protocol The iterator protocol \u00b6 The iterator protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated. next() - A function, with either zero arguments or one argument, that returns object with properties done and value done - boolean which represents whether next value available or not. value - Any JavaScript value returned by the iterator. Let's see an example, how we can implement it. const generateFibonacciIterator = ( max = Infinity ) => { let n1 = 0 ; let n2 = 0 ; return { next : () => { let nextVal = n2 === 0 ? 1 : n1 + n2 ; // update n1, n2 const prevVal = n2 ; n2 = nextVal ; n1 = prevVal ; // set {done, value} let done = false if ( nextVal >= max ) { nextVal = undefined done = true } // return iteration object return { done , value : nextVal } } } } // create iterator const iterator = generateFibonacciIterator ( 5 ); // now use `next()` method to get the value. console . log ( iterator . next ()); // output: {done: false, value: 1} console . log ( iterator . next ()); // output: {done: false, value: 1} console . log ( iterator . next ()); // output: {done: false, value: 2} console . log ( iterator . next ()); // output: {done: false, value: 3} console . log ( iterator . next ()); // output: {done: true, value: undefined} Note: we can't use it with the spread ... operator or for...of constructor. The iterable protocol \u00b6 The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for...of construct. String , Array , TypedArray , Map , and Set are all built-in iterables Let's see an example, how we can implement it. const myNumbersIterator = { begin : 1 , end : 3 , // iterator built-in to work with spread `...` operator [ Symbol . iterator ](){ this . current = this . begin ; return this ; }, next (){ if ( this . current <= this . end ) { return { done : false , value : this . current ++ }; } else { return { done : true , value : undefined }; } } } Now, we can use above iterator with for...of construct like below. for ( const num of myNumbersIterator ){ console . log ( num ); } /** 1 2 3 */ // spread operator console . log ( myNumbersIterator ) // 1 2 3 Note: Symbol.iterator must be implemented to work with constructs like for...of , ... , etc. References: \u00b6 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators","title":"Javascript Iterables and Iterators"},{"location":"course/javascript/iterators/#iterables-and-iterators-in-javascript","text":"Iterator is an object which implements the iteration protocol. We have two iteration protocols The iterator protocol The iterable protocol","title":"Iterables and Iterators in JavaScript"},{"location":"course/javascript/iterators/#the-iterator-protocol","text":"The iterator protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated. next() - A function, with either zero arguments or one argument, that returns object with properties done and value done - boolean which represents whether next value available or not. value - Any JavaScript value returned by the iterator. Let's see an example, how we can implement it. const generateFibonacciIterator = ( max = Infinity ) => { let n1 = 0 ; let n2 = 0 ; return { next : () => { let nextVal = n2 === 0 ? 1 : n1 + n2 ; // update n1, n2 const prevVal = n2 ; n2 = nextVal ; n1 = prevVal ; // set {done, value} let done = false if ( nextVal >= max ) { nextVal = undefined done = true } // return iteration object return { done , value : nextVal } } } } // create iterator const iterator = generateFibonacciIterator ( 5 ); // now use `next()` method to get the value. console . log ( iterator . next ()); // output: {done: false, value: 1} console . log ( iterator . next ()); // output: {done: false, value: 1} console . log ( iterator . next ()); // output: {done: false, value: 2} console . log ( iterator . next ()); // output: {done: false, value: 3} console . log ( iterator . next ()); // output: {done: true, value: undefined} Note: we can't use it with the spread ... operator or for...of constructor.","title":"The iterator protocol"},{"location":"course/javascript/iterators/#the-iterable-protocol","text":"The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for...of construct. String , Array , TypedArray , Map , and Set are all built-in iterables Let's see an example, how we can implement it. const myNumbersIterator = { begin : 1 , end : 3 , // iterator built-in to work with spread `...` operator [ Symbol . iterator ](){ this . current = this . begin ; return this ; }, next (){ if ( this . current <= this . end ) { return { done : false , value : this . current ++ }; } else { return { done : true , value : undefined }; } } } Now, we can use above iterator with for...of construct like below. for ( const num of myNumbersIterator ){ console . log ( num ); } /** 1 2 3 */ // spread operator console . log ( myNumbersIterator ) // 1 2 3 Note: Symbol.iterator must be implemented to work with constructs like for...of , ... , etc.","title":"The iterable protocol"},{"location":"course/javascript/iterators/#references","text":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators","title":"References:"},{"location":"course/javascript/loops/","text":"Loops in javascript \u00b6 Loops allow us to execute a set of statements repeatedly until the specified condition is met. In javascript we have 2 types of loops for loop while loop for loop syntax \u00b6 for ( intialization ; condition ; updation ) { // code block to be executed } - intialization : we intialize the required variables - condtion : To check whether to run the statements in the forloop block or not - updation : To update the intialized variable to make the condition invalid/valid based on the requirement. for loop example 1 \u00b6 for ( var i = 0 ; i < 5 ; i ++ ) { console . log ( i ); } It will give below output 0 1 2 3 4 In the above code we initialized i to 0 and checked condition i < 5 and updated i value by one in each iteration. Above iterates 5 times and executes the code and for the 6 th iteration the condition fails so, it stops the execution. while loop syntax \u00b6 JavaScript includes while loop to execute code repeatedly till it satisfies a specified condition. Unlike for loop, while loop only requires condition expression. while ( condition ) { /* code to be executed till the specified condition is true */ } while loop example \u00b6 var i = 0 ; while ( i < 5 ) { console . log ( i ); i ++ ; } It will give below output 0 1 2 3 4 We use keyword break statement to stop the execution of the loop and continue to skip the iteration. Let's see a few examples. for ( var i = 0 ; i < 5 ; i ++ ) { if ( i == 3 ){ continue ; } console . log ( i ); } It will give below output 0 1 2 4 for ( var i = 0 ; i < 5 ; i ++ ) { if ( i == 3 ){ break ; } console . log ( i ); } It will give below output 0 1 2 Let's see the same in while loop var i = 0 ; while ( i < 5 ) { if ( i == 3 ){ break ; } console . log ( i ); i ++ ; } It will give below output 0 1 2 var i = 0 ; while ( i < 5 ) { if ( i == 3 ){ continue ; } console . log ( i ); i ++ ; } It will give below output 0 1 2 4","title":"Javascript Loops"},{"location":"course/javascript/loops/#loops-in-javascript","text":"Loops allow us to execute a set of statements repeatedly until the specified condition is met. In javascript we have 2 types of loops for loop while loop","title":"Loops in javascript"},{"location":"course/javascript/loops/#for-loop-syntax","text":"for ( intialization ; condition ; updation ) { // code block to be executed } - intialization : we intialize the required variables - condtion : To check whether to run the statements in the forloop block or not - updation : To update the intialized variable to make the condition invalid/valid based on the requirement.","title":"for loop syntax"},{"location":"course/javascript/loops/#for-loop-example-1","text":"for ( var i = 0 ; i < 5 ; i ++ ) { console . log ( i ); } It will give below output 0 1 2 3 4 In the above code we initialized i to 0 and checked condition i < 5 and updated i value by one in each iteration. Above iterates 5 times and executes the code and for the 6 th iteration the condition fails so, it stops the execution.","title":"for loop example 1"},{"location":"course/javascript/loops/#while-loop-syntax","text":"JavaScript includes while loop to execute code repeatedly till it satisfies a specified condition. Unlike for loop, while loop only requires condition expression. while ( condition ) { /* code to be executed till the specified condition is true */ }","title":"while loop syntax"},{"location":"course/javascript/loops/#while-loop-example","text":"var i = 0 ; while ( i < 5 ) { console . log ( i ); i ++ ; } It will give below output 0 1 2 3 4 We use keyword break statement to stop the execution of the loop and continue to skip the iteration. Let's see a few examples. for ( var i = 0 ; i < 5 ; i ++ ) { if ( i == 3 ){ continue ; } console . log ( i ); } It will give below output 0 1 2 4 for ( var i = 0 ; i < 5 ; i ++ ) { if ( i == 3 ){ break ; } console . log ( i ); } It will give below output 0 1 2 Let's see the same in while loop var i = 0 ; while ( i < 5 ) { if ( i == 3 ){ break ; } console . log ( i ); i ++ ; } It will give below output 0 1 2 var i = 0 ; while ( i < 5 ) { if ( i == 3 ){ continue ; } console . log ( i ); i ++ ; } It will give below output 0 1 2 4","title":"while loop example"},{"location":"course/javascript/map-filter-reduce/","text":"","title":"Map filter reduce"},{"location":"course/javascript/operators/","text":"Operators in javascript \u00b6 JavaScript operators are used to assign values, compare values, perform arithmetic operations, and more. Assignment (=) Operators \u00b6 Operator Description Example = Assign 10+10 = 20 += Add and assign var a=10; a+=20; Now a = 30 -= Subtract and assign var a=20; a-=10; Now a = 10 *= Multiply and assign var a=10; a*=20; Now a = 200 /= Divide and assign var a=10; a/=2; Now a = 5 %= Modulus and assign var a=10; a%=2; Now a = 0 Arithmetic Operators \u00b6 Operator Description Example + Addition 10+20 = 30 - Subtraction 20-10 = 10 * Multiplication 10*20 = 200 / Division 20/10 = 2 % Modulus (Remainder) 20%10 = 0 ++ Increment var a=10; a++; Now a = 11 -- Decrement var a=10; a--; Now a = 9 Comparison Operators \u00b6 Operator Description Example == Is equal to 10==20 = false === Identical (equal and of same type) 10==20 = false != Not equal to 10!=20 = true !== Not Identical 20!==20 = false > Greater than 20>10 = true >= Greater than or equal to 20>=10 = true < Less than 20<10 = false <= Less than or equal to 20<=10 = false Logical Operators \u00b6 Operator Description Example && Logical AND (10==20 && 20==33) = false || Logical OR (10==20 || 20==33) = false ! Logical Not !(10==20) = true Ternary Operator \u00b6 It's the simplest form of writing the if else condition. Example: let marks = 30 ; let result = marks > 50 ? 'pass' : 'fail' ; console . log ( 'result = ' , result )","title":"Javascript Operators"},{"location":"course/javascript/operators/#operators-in-javascript","text":"JavaScript operators are used to assign values, compare values, perform arithmetic operations, and more.","title":"Operators in javascript"},{"location":"course/javascript/operators/#assignment-operators","text":"Operator Description Example = Assign 10+10 = 20 += Add and assign var a=10; a+=20; Now a = 30 -= Subtract and assign var a=20; a-=10; Now a = 10 *= Multiply and assign var a=10; a*=20; Now a = 200 /= Divide and assign var a=10; a/=2; Now a = 5 %= Modulus and assign var a=10; a%=2; Now a = 0","title":"Assignment (=) Operators"},{"location":"course/javascript/operators/#arithmetic-operators","text":"Operator Description Example + Addition 10+20 = 30 - Subtraction 20-10 = 10 * Multiplication 10*20 = 200 / Division 20/10 = 2 % Modulus (Remainder) 20%10 = 0 ++ Increment var a=10; a++; Now a = 11 -- Decrement var a=10; a--; Now a = 9","title":"Arithmetic Operators"},{"location":"course/javascript/operators/#comparison-operators","text":"Operator Description Example == Is equal to 10==20 = false === Identical (equal and of same type) 10==20 = false != Not equal to 10!=20 = true !== Not Identical 20!==20 = false > Greater than 20>10 = true >= Greater than or equal to 20>=10 = true < Less than 20<10 = false <= Less than or equal to 20<=10 = false","title":"Comparison Operators"},{"location":"course/javascript/operators/#logical-operators","text":"Operator Description Example && Logical AND (10==20 && 20==33) = false || Logical OR (10==20 || 20==33) = false ! Logical Not !(10==20) = true","title":"Logical Operators"},{"location":"course/javascript/operators/#ternary-operator","text":"It's the simplest form of writing the if else condition. Example: let marks = 30 ; let result = marks > 50 ? 'pass' : 'fail' ; console . log ( 'result = ' , result )","title":"Ternary Operator"},{"location":"course/javascript/prototypes/","text":"prototype: an original model on which something is patterned Object prototypes in Javascript \u00b6 Every object in JavaScript has a built-in property, which is called its prototype. The prototype is itself an object , so the prototype will have its own prototype, making what's called a prototype chain. The chain ends when we reach a prototype that has null for its own prototype. In javascript, new objects can be created with a constructor function, like new F() . If F.prototype is an object, then the new operator uses it to set [[Prototype]] for the new object. note: JavaScript had prototypal inheritance from the beginning. It was one of the core features of the language. Default properties of prototype object \u00b6 Every javascript function or an object which is created with new keyword has below properties. constructor : \u0192 Object () hasOwnProperty : \u0192 hasOwnProperty () isPrototypeOf : \u0192 isPrototypeOf () propertyIsEnumerable : \u0192 propertyIsEnumerable () toLocaleString : \u0192 toLocaleString () toString : \u0192 toString () valueOf : \u0192 valueOf () __defineGetter__ : \u0192 __defineGetter__ () __defineSetter__ : \u0192 __defineSetter__ () __lookupGetter__ : \u0192 __lookupGetter__ () __lookupSetter__ : \u0192 __lookupSetter__ () __proto__ : (...) get __proto__ : \u0192 __proto__ () set __proto__ : \u0192 __proto__ () Let's see an example function Person ( name , age ){ this . name = name this . age = age } const obj = new Person ( 'John' , 25 ); console . log ( obj . hasOwnProperty ) // \u0192 hasOwnProperty() { [native code] } console . log ( obj . isPrototypeOf ) // \u0192 isPrototypeOf() { [native code] } console . log ( obj . constructor ) // \u0192 Person(name, age){ this.name = name; this.age = age;} - Let's talk about constructor a bit. A constructor enables us to provide any custom initialization that must be done before any other methods can be called on an instantiated object. - Every object in javascript has a constructor by default. - default constructor function(){} - The default constructor functionality can be overriden Why use prototypes? \u00b6 It's very simple They use less memory We can add dynamic properties to function/class/object how to save memory with prototype? \u00b6 function Animal ( name ){ // this is the function/class and the constructor at the same time. this . walk = function (){}; this . talk = function (){}; this . jump = function (){}; } If we call new Animal() then it the constructor is called immediately. This is where the problem of performance occurs. We defined three functions inside the constructor, this means every single time the object is instantiated then those functions are defined a new. We are creating duplicate functions every single time. If we create two or three objects, then the problem is negligible. But if we create a herd of animals, we start seeing our memory growing because for each animal we are creating a whole new method at run time time. The solution to the problem is to use Prototypes. prototype allow us to define the methods once, as a blue print, and have each instance build from it. function Animal (){}; Animal . prototype . walk = function (){}; Animal . prototype . talk = function (){}; Animal . prototype . jump = function (){}; how to add dynamic properties with javascript prototypes? \u00b6 Let's consider below code function Student () { this . name = 'John' ; this . gender = 'M' ; } var studObj = new Student (); console . log ( Student . prototype ); // object console . log ( studObj . prototype ); // undefined console . log ( studObj . __proto__ ); // object console . log ( typeof Student . prototype ); // object console . log ( typeof studObj . __proto__ ); // object console . log ( Student . prototype === studObj . __proto__ ); // true From the above code, we can understand that prototype object is available at Student.prototype when it's not instantiated. but, after creating the object it's referenced in property __proto__ It allows the instance objects to access the prototypes properties when it's updated dynamically. Let's add an attribute info to Student.prototype and we can able to access it with instance studObj also. Student . prototype . info = { country : 'India' }; console . log ( studObj . info ); // {country: 'India'} References: \u00b6 https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes","title":"Javascript prototypes"},{"location":"course/javascript/prototypes/#object-prototypes-in-javascript","text":"Every object in JavaScript has a built-in property, which is called its prototype. The prototype is itself an object , so the prototype will have its own prototype, making what's called a prototype chain. The chain ends when we reach a prototype that has null for its own prototype. In javascript, new objects can be created with a constructor function, like new F() . If F.prototype is an object, then the new operator uses it to set [[Prototype]] for the new object. note: JavaScript had prototypal inheritance from the beginning. It was one of the core features of the language.","title":"Object prototypes in Javascript"},{"location":"course/javascript/prototypes/#default-properties-of-prototype-object","text":"Every javascript function or an object which is created with new keyword has below properties. constructor : \u0192 Object () hasOwnProperty : \u0192 hasOwnProperty () isPrototypeOf : \u0192 isPrototypeOf () propertyIsEnumerable : \u0192 propertyIsEnumerable () toLocaleString : \u0192 toLocaleString () toString : \u0192 toString () valueOf : \u0192 valueOf () __defineGetter__ : \u0192 __defineGetter__ () __defineSetter__ : \u0192 __defineSetter__ () __lookupGetter__ : \u0192 __lookupGetter__ () __lookupSetter__ : \u0192 __lookupSetter__ () __proto__ : (...) get __proto__ : \u0192 __proto__ () set __proto__ : \u0192 __proto__ () Let's see an example function Person ( name , age ){ this . name = name this . age = age } const obj = new Person ( 'John' , 25 ); console . log ( obj . hasOwnProperty ) // \u0192 hasOwnProperty() { [native code] } console . log ( obj . isPrototypeOf ) // \u0192 isPrototypeOf() { [native code] } console . log ( obj . constructor ) // \u0192 Person(name, age){ this.name = name; this.age = age;} - Let's talk about constructor a bit. A constructor enables us to provide any custom initialization that must be done before any other methods can be called on an instantiated object. - Every object in javascript has a constructor by default. - default constructor function(){} - The default constructor functionality can be overriden","title":"Default properties of prototype object"},{"location":"course/javascript/prototypes/#why-use-prototypes","text":"It's very simple They use less memory We can add dynamic properties to function/class/object","title":"Why use prototypes?"},{"location":"course/javascript/prototypes/#how-to-save-memory-with-prototype","text":"function Animal ( name ){ // this is the function/class and the constructor at the same time. this . walk = function (){}; this . talk = function (){}; this . jump = function (){}; } If we call new Animal() then it the constructor is called immediately. This is where the problem of performance occurs. We defined three functions inside the constructor, this means every single time the object is instantiated then those functions are defined a new. We are creating duplicate functions every single time. If we create two or three objects, then the problem is negligible. But if we create a herd of animals, we start seeing our memory growing because for each animal we are creating a whole new method at run time time. The solution to the problem is to use Prototypes. prototype allow us to define the methods once, as a blue print, and have each instance build from it. function Animal (){}; Animal . prototype . walk = function (){}; Animal . prototype . talk = function (){}; Animal . prototype . jump = function (){};","title":"how to save memory with prototype?"},{"location":"course/javascript/prototypes/#how-to-add-dynamic-properties-with-javascript-prototypes","text":"Let's consider below code function Student () { this . name = 'John' ; this . gender = 'M' ; } var studObj = new Student (); console . log ( Student . prototype ); // object console . log ( studObj . prototype ); // undefined console . log ( studObj . __proto__ ); // object console . log ( typeof Student . prototype ); // object console . log ( typeof studObj . __proto__ ); // object console . log ( Student . prototype === studObj . __proto__ ); // true From the above code, we can understand that prototype object is available at Student.prototype when it's not instantiated. but, after creating the object it's referenced in property __proto__ It allows the instance objects to access the prototypes properties when it's updated dynamically. Let's add an attribute info to Student.prototype and we can able to access it with instance studObj also. Student . prototype . info = { country : 'India' }; console . log ( studObj . info ); // {country: 'India'}","title":"how to add dynamic properties with javascript prototypes?"},{"location":"course/javascript/prototypes/#references","text":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes","title":"References:"},{"location":"course/javascript/switch-case/","text":"Switch Case in javascript \u00b6 In javascript switch case is an alternative to multiple if else conditions. It allows us to write less code and still get the same functionality as if else condtions. Switch case syntax \u00b6 switch ( choice ) { case choice_1 : // code block break ; case choice_2 : // code block break ; default : // code block } default : If the given cases are not matched then it will execute the default statement. break : We use the break statement to stop execution of switch block once the case/choice is matched. If no break statement is specified then it executes all the cases and default also. Switch case example \u00b6 Let's write a simple switch case to print the price of a fruit const expr = 'Papayas' ; switch ( expr ) { case 'Oranges' : console . log ( 'Oranges are $0.59 a pound.' ); break ; case 'Mangoes' : case 'Papayas' : console . log ( 'Mangoes and papayas are $2.79 a pound.' ); // expected output: \"Mangoes and papayas are $2.79 a pound.\" break ; default : console . log ( `Sorry, we are out of ${ expr } .` ); }","title":"Javascript Switch Case"},{"location":"course/javascript/switch-case/#switch-case-in-javascript","text":"In javascript switch case is an alternative to multiple if else conditions. It allows us to write less code and still get the same functionality as if else condtions.","title":"Switch Case in javascript"},{"location":"course/javascript/switch-case/#switch-case-syntax","text":"switch ( choice ) { case choice_1 : // code block break ; case choice_2 : // code block break ; default : // code block } default : If the given cases are not matched then it will execute the default statement. break : We use the break statement to stop execution of switch block once the case/choice is matched. If no break statement is specified then it executes all the cases and default also.","title":"Switch case syntax"},{"location":"course/javascript/switch-case/#switch-case-example","text":"Let's write a simple switch case to print the price of a fruit const expr = 'Papayas' ; switch ( expr ) { case 'Oranges' : console . log ( 'Oranges are $0.59 a pound.' ); break ; case 'Mangoes' : case 'Papayas' : console . log ( 'Mangoes and papayas are $2.79 a pound.' ); // expected output: \"Mangoes and papayas are $2.79 a pound.\" break ; default : console . log ( `Sorry, we are out of ${ expr } .` ); }","title":"Switch case example"},{"location":"course/javascript/variables/","text":"Variables in javascript \u00b6 A variable is a name which holds a value in the computer memory. Javascript is a dynamic typed language. It means we do not define the types while defning a varialbe unlike the statically typed languages. We can store different data types in the variable Examples for javascript variables \u00b6 Number variables \u00b6 let ten = 10 ; let weight = 55.5 ; String variables \u00b6 let firstName = \"Anjaneyulu\" ; let lastName = \"Batta\" ; Object variables \u00b6 let student = { firstName : \"Anjaneyulu\" , lastName : \"Batta\" , age : 20 , weight : 68 , } let numbers = [ 1 , 2 , 3 , 4 , 5.5 ] Points to remember when you are defining a javascript variable \u00b6 Variable names cannot contain spaces. Variable names must begin with a letter, an underscore (_) or a dollar sign ($). Variable names can only contain letters, numbers, underscores, or dollar signs. Variable names are case-sensitive(i.e uppercase letters and lowercase letters are not cosidered as same). Do not use in-build javascript variables or reserved words. Variable should be meaningful & it should represent the information about data stored in it. variable name should not be too small or too lengthy When you have multiple words in the variable then you can use the camelcase notation or underscore(_) notation. Examples: firstName , full_address , collegeName , address1 , address2 Javascript Reserved Keywords \u00b6 JavaScript has some reserved words you should know before you begin coding. The following table contains a list of JavaScript reserved words, which cannot be used as JavaScript variables, functions, methods, loop labels, or object names. abstract boolean break byte case catch char class const continue debugger default delete do double else enum export extends false final finally float for function goto if implements import in instanceof int interface long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with","title":"Javascript Variables"},{"location":"course/javascript/variables/#variables-in-javascript","text":"A variable is a name which holds a value in the computer memory. Javascript is a dynamic typed language. It means we do not define the types while defning a varialbe unlike the statically typed languages. We can store different data types in the variable","title":"Variables in javascript"},{"location":"course/javascript/variables/#examples-for-javascript-variables","text":"","title":"Examples for javascript variables"},{"location":"course/javascript/variables/#number-variables","text":"let ten = 10 ; let weight = 55.5 ;","title":"Number variables"},{"location":"course/javascript/variables/#string-variables","text":"let firstName = \"Anjaneyulu\" ; let lastName = \"Batta\" ;","title":"String variables"},{"location":"course/javascript/variables/#object-variables","text":"let student = { firstName : \"Anjaneyulu\" , lastName : \"Batta\" , age : 20 , weight : 68 , } let numbers = [ 1 , 2 , 3 , 4 , 5.5 ]","title":"Object variables"},{"location":"course/javascript/variables/#points-to-remember-when-you-are-defining-a-javascript-variable","text":"Variable names cannot contain spaces. Variable names must begin with a letter, an underscore (_) or a dollar sign ($). Variable names can only contain letters, numbers, underscores, or dollar signs. Variable names are case-sensitive(i.e uppercase letters and lowercase letters are not cosidered as same). Do not use in-build javascript variables or reserved words. Variable should be meaningful & it should represent the information about data stored in it. variable name should not be too small or too lengthy When you have multiple words in the variable then you can use the camelcase notation or underscore(_) notation. Examples: firstName , full_address , collegeName , address1 , address2","title":"Points to remember when you are defining a javascript variable"},{"location":"course/javascript/variables/#javascript-reserved-keywords","text":"JavaScript has some reserved words you should know before you begin coding. The following table contains a list of JavaScript reserved words, which cannot be used as JavaScript variables, functions, methods, loop labels, or object names. abstract boolean break byte case catch char class const continue debugger default delete do double else enum export extends false final finally float for function goto if implements import in instanceof int interface long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with","title":"Javascript Reserved Keywords"},{"location":"course/javascript/working-with-arrays/","text":"What is an Array? \u00b6 Stores multiple elements in a single variable No restrictions on data types Used frequently in solving problems How to create an Array? \u00b6 Array with no elements var arr = []; Array with a few elements var fruits = [ \"apple\" , \"banana\" ]; var numbers = [ 1.2 , 56 , - 10 ] var mixed = [ \"apple\" , 1 , false , null ] Nested Arrays \u00b6 Nested arrays are arrays which contain arrays as elements var data = [ [ \"apple\" , \"banana\" ], [ \"fish\" , \"bun\" , 100 ], ]; Accessing & Modifying an Array with indexes \u00b6 Arrays stored in a sequencial manner with an index. Index always starts with 0 Let's see an example to access array elements with indexes var fruits = [ \"apple\" , \"banana\" , \"grapes\" , \"mango\" ]; var apple = fruits [ 0 ] var banana = fruits [ 1 ] var grapes = fruits [ 2 ] var mango = fruits [ 3 ] console . log ( apple ); // output: apple Let's see an example to update array elemets with indexes var fruits = [ \"apple\" , \"banana\" , \"grapes\" , \"mango\" ]; console . log ( \"before update:\" , fruits ) // output: before update: [\"apple\", \"banana\", \"grapes\", \"mango\"] fruits [ 0 ] = \"orange\" console . log ( \"after update:\" , fruits ) // output: before update: [\"orange\", \"banana\", \"grapes\", \"mango\"] If you execute the above code you will find that we have updated the first element from value apple to orange Accessing multi dimentional arrays with indexes \u00b6 Multidimentional arrays are nothing but nested arrays We don't use these multi dimentional arrays frequently var food_items = [ [ \"apple\" , \"banana\" , \"orange\" ], [ \"bun\" , \"pizza\" , \"cake\" ] ] var apple = food_items [ 0 ][ 0 ]; var banana = food_items [ 0 ][ 1 ]; var orange = food_items [ 0 ][ 2 ]; var bun = food_items [ 1 ][ 0 ]; var pizza = food_items [ 1 ][ 1 ]; var cake = food_items [ 1 ][ 2 ]; console . log ( cake ) // output: cake Add element to an array at the end with push() method \u00b6 var fruits = [ \"apple\" ] fruits . push ( \"banana\" ) console . log ( fruits ) // output: [\"apple\", \"banana\"] - Above code adds the element banana at the end of the array fruits Add element to an array at the beginning with unshift() method \u00b6 var fruits = [ \"apple\" ] fruits . unshift ( \"banana\" ) console . log ( fruits ) // output: [\"banana\", \"apple\"] - Above code adds the element banana at the beginning of the array fruits Remove last element from an array with pop() method \u00b6 var fruits = [ \"apple\" , \"banana\" ] var banana = fruits . pop () console . log ( fruits ) // output: [\"apple\"] console . log ( banana ) // output: banana - Above code will removes the last element from array fruits and returns the element. - Returned element stored in the variable banana Remove first element from an array with shift() method \u00b6 var fruits = [ \"apple\" , \"banana\" ] var apple = fruits . shift () console . log ( fruits ) // output: [\"banana\"] console . log ( apple ) // output: apple - Above code removes the element banana from beginning of the array fruits - Returened element stored in the variable apple Loop over an Array \u00b6 let fruits = [ 'Apple' , 'Banana' ] fruits . forEach ( function ( item , index ) { console . log ( item , index ) }) /* output: Apple 0 Banana 1 */ Remove items from an index position using splice(index, numberOfElements) \u00b6 let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] console . log ( vegetables ) // [\"Cabbage\", \"Turnip\", \"Radish\", \"Carrot\"] let pos = 1 let n = 2 let removedItems = vegetables . splice ( pos , n ) // this is how to remove items, n defines the number of items to be removed, // starting at the index position specified by pos and progressing toward the end of array. console . log ( vegetables ) // [\"Cabbage\", \"Carrot\"] (the original array is changed) console . log ( removedItems ) // [\"Turnip\", \"Radish\"] Copy an Array \u00b6 let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let shallowCopy = vegetables . slice () console . log ( shallowCopy ) // ['Cabbage', 'Turnip', 'Radish', 'Carrot'] Finding length of javascript array \u00b6 let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let count = vegetables . length console . log ( count ) // 4 Find the index of an item in the Array \u00b6 let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let pos = vegetables . indexOf ( 'Turnip' ) console . log ( pos ) // 1 Reverse an array javascript \u00b6 let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let reverse_order = vegetables . reverse (); console . log ( reverse_order ) // [\"Cabbage\", \"Turnip\", \"Radish\", \"Carrot\"]","title":"Javascript Array"},{"location":"course/javascript/working-with-arrays/#what-is-an-array","text":"Stores multiple elements in a single variable No restrictions on data types Used frequently in solving problems","title":"What is an Array?"},{"location":"course/javascript/working-with-arrays/#how-to-create-an-array","text":"Array with no elements var arr = []; Array with a few elements var fruits = [ \"apple\" , \"banana\" ]; var numbers = [ 1.2 , 56 , - 10 ] var mixed = [ \"apple\" , 1 , false , null ]","title":"How to create an Array?"},{"location":"course/javascript/working-with-arrays/#nested-arrays","text":"Nested arrays are arrays which contain arrays as elements var data = [ [ \"apple\" , \"banana\" ], [ \"fish\" , \"bun\" , 100 ], ];","title":"Nested Arrays"},{"location":"course/javascript/working-with-arrays/#accessing-modifying-an-array-with-indexes","text":"Arrays stored in a sequencial manner with an index. Index always starts with 0 Let's see an example to access array elements with indexes var fruits = [ \"apple\" , \"banana\" , \"grapes\" , \"mango\" ]; var apple = fruits [ 0 ] var banana = fruits [ 1 ] var grapes = fruits [ 2 ] var mango = fruits [ 3 ] console . log ( apple ); // output: apple Let's see an example to update array elemets with indexes var fruits = [ \"apple\" , \"banana\" , \"grapes\" , \"mango\" ]; console . log ( \"before update:\" , fruits ) // output: before update: [\"apple\", \"banana\", \"grapes\", \"mango\"] fruits [ 0 ] = \"orange\" console . log ( \"after update:\" , fruits ) // output: before update: [\"orange\", \"banana\", \"grapes\", \"mango\"] If you execute the above code you will find that we have updated the first element from value apple to orange","title":"Accessing &amp; Modifying an Array with indexes"},{"location":"course/javascript/working-with-arrays/#accessing-multi-dimentional-arrays-with-indexes","text":"Multidimentional arrays are nothing but nested arrays We don't use these multi dimentional arrays frequently var food_items = [ [ \"apple\" , \"banana\" , \"orange\" ], [ \"bun\" , \"pizza\" , \"cake\" ] ] var apple = food_items [ 0 ][ 0 ]; var banana = food_items [ 0 ][ 1 ]; var orange = food_items [ 0 ][ 2 ]; var bun = food_items [ 1 ][ 0 ]; var pizza = food_items [ 1 ][ 1 ]; var cake = food_items [ 1 ][ 2 ]; console . log ( cake ) // output: cake","title":"Accessing multi dimentional arrays with indexes"},{"location":"course/javascript/working-with-arrays/#add-element-to-an-array-at-the-end-with-push-method","text":"var fruits = [ \"apple\" ] fruits . push ( \"banana\" ) console . log ( fruits ) // output: [\"apple\", \"banana\"] - Above code adds the element banana at the end of the array fruits","title":"Add element to an array at the end with push() method"},{"location":"course/javascript/working-with-arrays/#add-element-to-an-array-at-the-beginning-with-unshift-method","text":"var fruits = [ \"apple\" ] fruits . unshift ( \"banana\" ) console . log ( fruits ) // output: [\"banana\", \"apple\"] - Above code adds the element banana at the beginning of the array fruits","title":"Add element to an array at the beginning with unshift() method"},{"location":"course/javascript/working-with-arrays/#remove-last-element-from-an-array-with-pop-method","text":"var fruits = [ \"apple\" , \"banana\" ] var banana = fruits . pop () console . log ( fruits ) // output: [\"apple\"] console . log ( banana ) // output: banana - Above code will removes the last element from array fruits and returns the element. - Returned element stored in the variable banana","title":"Remove last element from an array with pop() method"},{"location":"course/javascript/working-with-arrays/#remove-first-element-from-an-array-with-shift-method","text":"var fruits = [ \"apple\" , \"banana\" ] var apple = fruits . shift () console . log ( fruits ) // output: [\"banana\"] console . log ( apple ) // output: apple - Above code removes the element banana from beginning of the array fruits - Returened element stored in the variable apple","title":"Remove first element from an array with shift() method"},{"location":"course/javascript/working-with-arrays/#loop-over-an-array","text":"let fruits = [ 'Apple' , 'Banana' ] fruits . forEach ( function ( item , index ) { console . log ( item , index ) }) /* output: Apple 0 Banana 1 */","title":"Loop over an Array"},{"location":"course/javascript/working-with-arrays/#remove-items-from-an-index-position-using-spliceindex-numberofelements","text":"let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] console . log ( vegetables ) // [\"Cabbage\", \"Turnip\", \"Radish\", \"Carrot\"] let pos = 1 let n = 2 let removedItems = vegetables . splice ( pos , n ) // this is how to remove items, n defines the number of items to be removed, // starting at the index position specified by pos and progressing toward the end of array. console . log ( vegetables ) // [\"Cabbage\", \"Carrot\"] (the original array is changed) console . log ( removedItems ) // [\"Turnip\", \"Radish\"]","title":"Remove items from an index position using splice(index, numberOfElements)"},{"location":"course/javascript/working-with-arrays/#copy-an-array","text":"let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let shallowCopy = vegetables . slice () console . log ( shallowCopy ) // ['Cabbage', 'Turnip', 'Radish', 'Carrot']","title":"Copy an Array"},{"location":"course/javascript/working-with-arrays/#finding-length-of-javascript-array","text":"let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let count = vegetables . length console . log ( count ) // 4","title":"Finding length of javascript array"},{"location":"course/javascript/working-with-arrays/#find-the-index-of-an-item-in-the-array","text":"let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let pos = vegetables . indexOf ( 'Turnip' ) console . log ( pos ) // 1","title":"Find the index of an item in the Array"},{"location":"course/javascript/working-with-arrays/#reverse-an-array-javascript","text":"let vegetables = [ 'Cabbage' , 'Turnip' , 'Radish' , 'Carrot' ] let reverse_order = vegetables . reverse (); console . log ( reverse_order ) // [\"Cabbage\", \"Turnip\", \"Radish\", \"Carrot\"]","title":"Reverse an array javascript"},{"location":"course/javascript/working-with-classes/","text":"About Javascript Class \u00b6 Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes are just like funcitons in javascript with special syntax. Why to use Javascript Classes? \u00b6 To encapsulate all related code To reuse properties and methods in other classes via inheritance. Better maintainability Class Syntax \u00b6 class ClassName { constructor () { ... } } Example class Country \u00b6 class Country { constructor ( name , population ){ this . name = name ; this . population = population ; } } console . log ( typeof Country ); // function In above code we have create a class which is template to represent a country. constuctor is special method which runs every time when an object is created for a given class. this is special keyword which represents the instance of javascript class object. Creating object for a javascript class \u00b6 class Person { constructor ( firstName , lastName , age ){ this . firstName = firstName ; this . lastName = lastName ; this . age = age ; } // method to get full name getFullName (){ return this . firstName + \" \" + this . lastName ; } // method to check if person is adult isAdult (){ if ( this . age >= 18 ){ return true ; } else { return false ; } } } // create object for above class let john = new Person ( \"John\" , \"Bocasta\" , 45 ) console . log ( john . getFullName ()) // John Bocasta console . log ( john . isAdult ()) // true // create another object for same class let nani = new Person ( \"Nani\" , \"Ch\" , 8 ) console . log ( nani . getFullName ()) // Nani Ch console . log ( nani . isAdult ()) // false In above code we have define a person class and created two different objects new is keyword used to create an object for a class. Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes","title":"Javascript Class"},{"location":"course/javascript/working-with-classes/#about-javascript-class","text":"Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes are just like funcitons in javascript with special syntax.","title":"About Javascript Class"},{"location":"course/javascript/working-with-classes/#why-to-use-javascript-classes","text":"To encapsulate all related code To reuse properties and methods in other classes via inheritance. Better maintainability","title":"Why to use Javascript Classes?"},{"location":"course/javascript/working-with-classes/#class-syntax","text":"class ClassName { constructor () { ... } }","title":"Class Syntax"},{"location":"course/javascript/working-with-classes/#example-class-country","text":"class Country { constructor ( name , population ){ this . name = name ; this . population = population ; } } console . log ( typeof Country ); // function In above code we have create a class which is template to represent a country. constuctor is special method which runs every time when an object is created for a given class. this is special keyword which represents the instance of javascript class object.","title":"Example class Country"},{"location":"course/javascript/working-with-classes/#creating-object-for-a-javascript-class","text":"class Person { constructor ( firstName , lastName , age ){ this . firstName = firstName ; this . lastName = lastName ; this . age = age ; } // method to get full name getFullName (){ return this . firstName + \" \" + this . lastName ; } // method to check if person is adult isAdult (){ if ( this . age >= 18 ){ return true ; } else { return false ; } } } // create object for above class let john = new Person ( \"John\" , \"Bocasta\" , 45 ) console . log ( john . getFullName ()) // John Bocasta console . log ( john . isAdult ()) // true // create another object for same class let nani = new Person ( \"Nani\" , \"Ch\" , 8 ) console . log ( nani . getFullName ()) // Nani Ch console . log ( nani . isAdult ()) // false In above code we have define a person class and created two different objects new is keyword used to create an object for a class. Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes","title":"Creating object for a javascript class"},{"location":"course/javascript/working-with-date/","text":"Date and time in Javascript \u00b6 The Date object is used to work with dates and times. You create an instance of the Date object with the \"new\" keyword. Timezones \u00b6 There are hundreds of timezones in our world. In JavaScript, we only care about two\u2014Local Time and Coordinated Universal Time (UTC). Local time refers to the timezone your computer is in. UTC is synonymous with Greenwich Mean Time (GMT) in practice. By default, almost every date method in JavaScript (except one) gives you a date/time in local time. You only get UTC if you specify UTC. With this, we can talk about creating dates. Creating a date \u00b6 You can create a date with new Date() . There are four possible ways to use new Date() : With a date-string With date arguments With a timestamp With no arguments date-string method \u00b6 In the date-string method, you create a date by passing a date-string into new Date . The Date format is YYYY-MM-DDTHH:mm:ss.sssZ Here\u2019s what the values mean: YYYY: 4-digit year MM: 2-digit month (where January is 01 and December is 12) DD: 2-digit date (0 to 31) - : Date delimiters T : Indicates the start of time HH: 24-digit hour (0 to 23) mm: Minutes (0 to 59) ss: Seconds (0 to 59) sss: Milliseconds (0 to 999) : : Time delimiters Z : If Z is present, date will be set to UTC. If Z is not present, it\u2019ll be Local Time. (This only applies if time is provided.) let date = new Date ( '2021-03-21T14:23:54.234Z' ) console . log ( date ) // Sun Mar 21 2021 19:53:54 GMT+0530 (India Standard Time) - The output may change based on your locale timezone Creating dates with arguments \u00b6 we can pass in up to seven arguments to create a date/time. Year: 4-digit year. Month: Month of the year (0-11). Month is zero-indexed. Defaults to 0 if omitted. Day: Day of the month (1-31). Defaults to 1 if omitted. Hour: Hour of the day (0-23). Defaults to 0 if omitted. Minutes: Minutes (0-59). Defaults to 0 if omitted. Seconds: Seconds (0-59). Defaults to 0 if omitted. Milliseconds: Milliseconds (0-999). Defaults to 0 if omitted. // 11th June 2019, 5:23:59am, Local Time let date = new Date ( 2019 , 5 , 11 , 5 , 23 , 59 ) console . log ( date ); - The output may change based on your locale timezone Creating UTC time \u00b6 We can create a UTC time like below let date = new Date ( Date . UTC ( 2019 , 5 , 11 )) console . log ( date ); // Tue Jun 11 2019 05:30:00 GMT+0530 (India Standard Time) - The output may change based on your locale timezone Creating dates with timestamps \u00b6 In JavaScript, a timestamp is the amount of milliseconds elapsed since 1 January 1970 (1 January 1970 is also known as Unix epoch time). let timestamp_in_milliseconds = 1560211200000 ; let date = new Date ( timestamp_in_milliseconds ); console . log ( date ); // Tue Jun 11 2019 05:30:00 GMT+0530 (India Standard Time) - The output may change based on your locale timezone Date with no arguments \u00b6 If we create a date without any arguments, we get a date set to the current time (in Local Time). let date = new Date (); console . log ( date ); // Sat May 29 2021 13:33:33 GMT+0530 (India Standard Time) Formatting a date \u00b6 We can get the string representation of Date object with date formatting methods. Default string formatting methods - toString - toDateString - toLocaleString - toLocaleDateString - toGMTString - toUTCString - toISOString const date = new Date ( 2021 , 0 , 23 , 17 , 23 , 42 ); console . log ( date . toString ()) // Sat Jan 23 2021 17:23:42 GMT+0530 (India Standard Time) console . log ( date . toDateString ()) // Sat Jan 23 2021 console . log ( date . toLocaleString ()) // 1/23/2021, 5:23:42 PM console . log ( date . toLocaleDateString ()) // 1/23/2021 console . log ( date . toGMTString ()) // Sat, 23 Jan 2021 11:53:42 GMT console . log ( date . toUTCString ()) // Sat, 23 Jan 2021 11:53:42 GMT console . log ( date . toISOString ()) // 2021-01-23T11:53:42.000Z Writing a custom date formatter \u00b6 Let\u2019s say we want something like 23 January 2021 . To create this value, we need to know the date methods that comes with the Date object. To get dates, we can use these four methods: getFullYear: Gets 4-digit year according to local time getMonth: Gets month of the year (0-11) according to local time. Month is zero-indexed. getDate: Gets day of the month (1-31) according to local time. getDay: Gets day of the week (0-6) according to local time. Day of the week begins with Sunday (0) and ends with Saturday (6). const d = new Date ( 2021 , 0 , 23 ) const year = d . getFullYear () // 2021 const date = d . getDate () // 23 const month = d . getMonth () // 0 const monthsArr = [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' , 'August' , 'September' , 'October' , 'November' , 'December' ] const formatted = date + \" \" + monthsArr [ month ] + \" \" + year ; console . log ( formatted ) // 23 January 2021 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date","title":"Javascript Date and Time"},{"location":"course/javascript/working-with-date/#date-and-time-in-javascript","text":"The Date object is used to work with dates and times. You create an instance of the Date object with the \"new\" keyword.","title":"Date and time in Javascript"},{"location":"course/javascript/working-with-date/#timezones","text":"There are hundreds of timezones in our world. In JavaScript, we only care about two\u2014Local Time and Coordinated Universal Time (UTC). Local time refers to the timezone your computer is in. UTC is synonymous with Greenwich Mean Time (GMT) in practice. By default, almost every date method in JavaScript (except one) gives you a date/time in local time. You only get UTC if you specify UTC. With this, we can talk about creating dates.","title":"Timezones"},{"location":"course/javascript/working-with-date/#creating-a-date","text":"You can create a date with new Date() . There are four possible ways to use new Date() : With a date-string With date arguments With a timestamp With no arguments","title":"Creating a date"},{"location":"course/javascript/working-with-date/#date-string-method","text":"In the date-string method, you create a date by passing a date-string into new Date . The Date format is YYYY-MM-DDTHH:mm:ss.sssZ Here\u2019s what the values mean: YYYY: 4-digit year MM: 2-digit month (where January is 01 and December is 12) DD: 2-digit date (0 to 31) - : Date delimiters T : Indicates the start of time HH: 24-digit hour (0 to 23) mm: Minutes (0 to 59) ss: Seconds (0 to 59) sss: Milliseconds (0 to 999) : : Time delimiters Z : If Z is present, date will be set to UTC. If Z is not present, it\u2019ll be Local Time. (This only applies if time is provided.) let date = new Date ( '2021-03-21T14:23:54.234Z' ) console . log ( date ) // Sun Mar 21 2021 19:53:54 GMT+0530 (India Standard Time) - The output may change based on your locale timezone","title":"date-string method"},{"location":"course/javascript/working-with-date/#creating-dates-with-arguments","text":"we can pass in up to seven arguments to create a date/time. Year: 4-digit year. Month: Month of the year (0-11). Month is zero-indexed. Defaults to 0 if omitted. Day: Day of the month (1-31). Defaults to 1 if omitted. Hour: Hour of the day (0-23). Defaults to 0 if omitted. Minutes: Minutes (0-59). Defaults to 0 if omitted. Seconds: Seconds (0-59). Defaults to 0 if omitted. Milliseconds: Milliseconds (0-999). Defaults to 0 if omitted. // 11th June 2019, 5:23:59am, Local Time let date = new Date ( 2019 , 5 , 11 , 5 , 23 , 59 ) console . log ( date ); - The output may change based on your locale timezone","title":"Creating dates with arguments"},{"location":"course/javascript/working-with-date/#creating-utc-time","text":"We can create a UTC time like below let date = new Date ( Date . UTC ( 2019 , 5 , 11 )) console . log ( date ); // Tue Jun 11 2019 05:30:00 GMT+0530 (India Standard Time) - The output may change based on your locale timezone","title":"Creating UTC time"},{"location":"course/javascript/working-with-date/#creating-dates-with-timestamps","text":"In JavaScript, a timestamp is the amount of milliseconds elapsed since 1 January 1970 (1 January 1970 is also known as Unix epoch time). let timestamp_in_milliseconds = 1560211200000 ; let date = new Date ( timestamp_in_milliseconds ); console . log ( date ); // Tue Jun 11 2019 05:30:00 GMT+0530 (India Standard Time) - The output may change based on your locale timezone","title":"Creating dates with timestamps"},{"location":"course/javascript/working-with-date/#date-with-no-arguments","text":"If we create a date without any arguments, we get a date set to the current time (in Local Time). let date = new Date (); console . log ( date ); // Sat May 29 2021 13:33:33 GMT+0530 (India Standard Time)","title":"Date with no arguments"},{"location":"course/javascript/working-with-date/#formatting-a-date","text":"We can get the string representation of Date object with date formatting methods. Default string formatting methods - toString - toDateString - toLocaleString - toLocaleDateString - toGMTString - toUTCString - toISOString const date = new Date ( 2021 , 0 , 23 , 17 , 23 , 42 ); console . log ( date . toString ()) // Sat Jan 23 2021 17:23:42 GMT+0530 (India Standard Time) console . log ( date . toDateString ()) // Sat Jan 23 2021 console . log ( date . toLocaleString ()) // 1/23/2021, 5:23:42 PM console . log ( date . toLocaleDateString ()) // 1/23/2021 console . log ( date . toGMTString ()) // Sat, 23 Jan 2021 11:53:42 GMT console . log ( date . toUTCString ()) // Sat, 23 Jan 2021 11:53:42 GMT console . log ( date . toISOString ()) // 2021-01-23T11:53:42.000Z","title":"Formatting a date"},{"location":"course/javascript/working-with-date/#writing-a-custom-date-formatter","text":"Let\u2019s say we want something like 23 January 2021 . To create this value, we need to know the date methods that comes with the Date object. To get dates, we can use these four methods: getFullYear: Gets 4-digit year according to local time getMonth: Gets month of the year (0-11) according to local time. Month is zero-indexed. getDate: Gets day of the month (1-31) according to local time. getDay: Gets day of the week (0-6) according to local time. Day of the week begins with Sunday (0) and ends with Saturday (6). const d = new Date ( 2021 , 0 , 23 ) const year = d . getFullYear () // 2021 const date = d . getDate () // 23 const month = d . getMonth () // 0 const monthsArr = [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' , 'August' , 'September' , 'October' , 'November' , 'December' ] const formatted = date + \" \" + monthsArr [ month ] + \" \" + year ; console . log ( formatted ) // 23 January 2021 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date","title":"Writing a custom date formatter"},{"location":"course/javascript/working-with-functions/","text":"What is a function? \u00b6 A javascript function is representation of set of operations as a single unit. It can be reused to perform the same set of operations for different set of data. advantages of a function \u00b6 code reusability better code maintainability javascript function syntax \u00b6 function name_of_function ( param1 , parm2 , ... params ){ // statements } function to calculate a square value of a number \u00b6 function square ( number ) { return number * number ; } let result = square ( 5 ) console . log ( result ); // 25 It's a simple example of find the square of the number function to find given item in an array \u00b6 function isExists ( item , arr ){ let result = false ; for ( i = 0 ; i < arr . length ; i ++ ){ let itm = arr [ index ]; if ( itm == item ){ result = false ; break ; } } } let fruits = [ \"apples\" , \"oranges\" , \"mango\" ]; let output = isExists ( \"apples\" , fruits ); console . log ( output ); // true let output = isExists ( \"onion\" , fruits ); console . log ( output ); // false let numbers = [ 1 , 2 , 3 , 4 , 5 ]; let output2 = isExists ( 4 , numbers ); console . log ( output ); // true recursion in javascript function \u00b6 The (factorial)[ https://en.wikipedia.org/wiki/Factorial ] function (symbol: !) says to multiply all whole numbers from our chosen number down to 1. Examples: 4! = 4 \u00d7 3 \u00d7 2 \u00d7 1 = 24 7! = 7 \u00d7 6 \u00d7 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 5040 1! = 1 function nFactorial ( n ) { if ( n < 0 ) { return ; } if ( n === 0 ) { return 1 ; } return n * nFactorial ( n - 1 ); } console . log ( nFactorial ( 4 )); // 24 console . log ( nFactorial ( 7 )); // 5040 console . log ( nFactorial ( 1 )); // 1","title":"Javascript Functions"},{"location":"course/javascript/working-with-functions/#what-is-a-function","text":"A javascript function is representation of set of operations as a single unit. It can be reused to perform the same set of operations for different set of data.","title":"What is a function?"},{"location":"course/javascript/working-with-functions/#advantages-of-a-function","text":"code reusability better code maintainability","title":"advantages of a function"},{"location":"course/javascript/working-with-functions/#javascript-function-syntax","text":"function name_of_function ( param1 , parm2 , ... params ){ // statements }","title":"javascript function syntax"},{"location":"course/javascript/working-with-functions/#function-to-calculate-a-square-value-of-a-number","text":"function square ( number ) { return number * number ; } let result = square ( 5 ) console . log ( result ); // 25 It's a simple example of find the square of the number","title":"function to calculate a square value of a number"},{"location":"course/javascript/working-with-functions/#function-to-find-given-item-in-an-array","text":"function isExists ( item , arr ){ let result = false ; for ( i = 0 ; i < arr . length ; i ++ ){ let itm = arr [ index ]; if ( itm == item ){ result = false ; break ; } } } let fruits = [ \"apples\" , \"oranges\" , \"mango\" ]; let output = isExists ( \"apples\" , fruits ); console . log ( output ); // true let output = isExists ( \"onion\" , fruits ); console . log ( output ); // false let numbers = [ 1 , 2 , 3 , 4 , 5 ]; let output2 = isExists ( 4 , numbers ); console . log ( output ); // true","title":"function to find given item in an array"},{"location":"course/javascript/working-with-functions/#recursion-in-javascript-function","text":"The (factorial)[ https://en.wikipedia.org/wiki/Factorial ] function (symbol: !) says to multiply all whole numbers from our chosen number down to 1. Examples: 4! = 4 \u00d7 3 \u00d7 2 \u00d7 1 = 24 7! = 7 \u00d7 6 \u00d7 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 5040 1! = 1 function nFactorial ( n ) { if ( n < 0 ) { return ; } if ( n === 0 ) { return 1 ; } return n * nFactorial ( n - 1 ); } console . log ( nFactorial ( 4 )); // 24 console . log ( nFactorial ( 7 )); // 5040 console . log ( nFactorial ( 1 )); // 1","title":"recursion in javascript function"},{"location":"course/javascript/working-with-object/","text":"Working with object in Javascript \u00b6 JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. We use javascript objects for representing real world objects like person, car, bus, etc. creating an object in javascript \u00b6 To create an object with properties, we you use the key:value within the curly braces. For example, the following creates a new person object: syntax \u00b6 let obj1 = { key : val } // or let obj2 = new Object () obj2 . key = val create a person object \u00b6 For a person object we have simple attributes firstName , lastName let john = { firstName : \"John\" , lastName : \"Doe\" , } let anji = new Object () anji . firstName = \"Anji\" anji . lastName = \"Batta\" We have created two objects in the above code. 1. john and 2. anji reading data from javascript object \u00b6 We can do this in 2 ways dot notation square backet notation let john = { firstName : \"John\" , lastName : \"Doe\" , } let firstName = john [ \"firstName\" ]; let lastName = john . lastName ; console . log ( firstName ); // John console . log ( lastName ); // Doe about javascript objects \u00b6 Objects are the foundation of JavaScript and permeate its every aspect. Almost everything in JavaScript is an object. In fact, only six things are not objects . They are \u2014 null , undefined , strings , numbers , boolean , and symbols . These are called primitive values or primitive types. Anything that is not a primitive value is an Object. That includes arrays, functions, constructors, and objects themselves. using functions with objects \u00b6 we can use functions as a keys in javascript object. but, we call it as methods. let's add fullName and greeting methods to person object. let john = { firstName : \"John\" , lastName : \"Doe\" , fullName : function (){ return this . firstName + \" \" + this . lastName ; }, greeting : function (){ console . log ( \"Hello \" + this . fullName ()) } } console . log ( john . greeting ()) // Hello John Doe Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Javascript Object"},{"location":"course/javascript/working-with-object/#working-with-object-in-javascript","text":"JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. We use javascript objects for representing real world objects like person, car, bus, etc.","title":"Working with object in Javascript"},{"location":"course/javascript/working-with-object/#creating-an-object-in-javascript","text":"To create an object with properties, we you use the key:value within the curly braces. For example, the following creates a new person object:","title":"creating an object in javascript"},{"location":"course/javascript/working-with-object/#syntax","text":"let obj1 = { key : val } // or let obj2 = new Object () obj2 . key = val","title":"syntax"},{"location":"course/javascript/working-with-object/#create-a-person-object","text":"For a person object we have simple attributes firstName , lastName let john = { firstName : \"John\" , lastName : \"Doe\" , } let anji = new Object () anji . firstName = \"Anji\" anji . lastName = \"Batta\" We have created two objects in the above code. 1. john and 2. anji","title":"create a person object"},{"location":"course/javascript/working-with-object/#reading-data-from-javascript-object","text":"We can do this in 2 ways dot notation square backet notation let john = { firstName : \"John\" , lastName : \"Doe\" , } let firstName = john [ \"firstName\" ]; let lastName = john . lastName ; console . log ( firstName ); // John console . log ( lastName ); // Doe","title":"reading data from javascript object"},{"location":"course/javascript/working-with-object/#about-javascript-objects","text":"Objects are the foundation of JavaScript and permeate its every aspect. Almost everything in JavaScript is an object. In fact, only six things are not objects . They are \u2014 null , undefined , strings , numbers , boolean , and symbols . These are called primitive values or primitive types. Anything that is not a primitive value is an Object. That includes arrays, functions, constructors, and objects themselves.","title":"about javascript objects"},{"location":"course/javascript/working-with-object/#using-functions-with-objects","text":"we can use functions as a keys in javascript object. but, we call it as methods. let's add fullName and greeting methods to person object. let john = { firstName : \"John\" , lastName : \"Doe\" , fullName : function (){ return this . firstName + \" \" + this . lastName ; }, greeting : function (){ console . log ( \"Hello \" + this . fullName ()) } } console . log ( john . greeting ()) // Hello John Doe Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"using functions with objects"},{"location":"course/javascript/working-with-strings/","text":"Working with strings in Javascript \u00b6 Strings are one of the data types of javascript which are used to hold the text data. It's the most used data type in javascript. How to create strings? \u00b6 let string1 = \"A string primitive\" ; let string2 = 'Also a string primitive' ; let string3 = `Yet another string primitive` ; Character access at a position with charAt(index) \u00b6 let name = \"Bala\" ; let letter = name . charAt ( 0 ) console . log ( letter ) // B Character access at a position with charCodeAt(index) \u00b6 All symbols handled in a number format in the computer which is ASCII code. charCodeAt method returns the ASCII number. let name = \"Bala\" ; let ascii_number = name . charCodeAt ( 0 ) console . log ( ascii_number ) // 66 Comparing strings in javascript \u00b6 let a = 'a' let b = 'b' if ( a < b ) { // true console . log ( a + ' is less than ' + b ) } else if ( a > b ) { console . log ( a + ' is greater than ' + b ) } else { console . log ( a + ' and ' + b + ' are equal.' ) } Find length of string \u00b6 let searchEngine = \"Google\" let count = searchEngine . length console . log ( count ) // 6 Finding a substring using indexOf(str) and lastIndexOf(str) \u00b6 The indexOf() method returns the position of the first occurrence of a specified text in a string let text = \"I love to visit beach\" ; var pos = text . indexOf ( \"beach\" ); console . log ( pos ) // 16 The lastIndexOf() method returns the index of the last occurrence of a specified text in a string var str = \"Please locate where 'locate' occurs!\" ; var pos = str . lastIndexOf ( \"locate\" ); console . log ( pos ) // 21 Both indexOf() , and lastIndexOf() return -1 if the text is not found. Escaping special characters \u00b6 To escape special characters, you use the backslash \\ character. For example: Windows line break: '\\r\\n' Unix line break: '\\n' Tab: '\\t' Backslash '\\' The following example uses the backslash character to escape the single quote character in a string: let str = 'I\\'m a string!' ; console . log ( str ) // I'm a string To concatenate two or more strings, you use the + operator: \u00b6 Concatenating strings via + operator let name = 'John' ; let str = 'Hello ' + name ; console . log ( str ); // \"Hello John\" If you want to assemble a string piece by piece, you can use the += operator: let className = 'btn' ; className += ' btn-primary' className += ' none' ; console . log ( className ); // btn btn-primary none coverting other data types to string notation \u00b6 Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this: let number = 10 ; console . log ( number . toString ()); // \"10\" let is_valid = false ; console . log ( is_valid . toString ()); // \"false\" const o = new Object (); console . log ( o . toString ()); // [object Object] converting to lowercase using toLowerCase() method \u00b6 The JavaScript String toLowerCase() method returns the given string in lowercase letters. var s1 = \"Hello World\" ; var s2 = s1 . toLowerCase (); console . log ( s2 ) // hello world converting to uppercase using toUpperCase() method \u00b6 The JavaScript String toUpperCase() method returns the given string in uppercase letters. var s1 = \"Hello World\" ; var s2 = s1 . toUpperCase (); console . log ( s2 ) // HELLO WORLD get substring from string using method slice(beginIndex, endIndex) \u00b6 slice(beginIndex, endIndex) method returns the parts of string from given beginIndex to endIndex. In slice() method, beginIndex is inclusive and endIndex is exclusive. var s1 = \"Get me something\" ; var s2 = s1 . slice ( 7 , 16 ); console . log ( s2 ) // something String concatenation using concat(str1, str2, ...strN) \u00b6 It simply concatenates the string and returns it. let str1 = \"Hello\" ; let str2 = \"World.\" ; let str3 = \"I'm Chitti\" ; let output = str1 . concat ( str2 , str3 ) console . log ( output ) // Hello World.I'm Chitti","title":"Javascript Strings"},{"location":"course/javascript/working-with-strings/#working-with-strings-in-javascript","text":"Strings are one of the data types of javascript which are used to hold the text data. It's the most used data type in javascript.","title":"Working with strings in Javascript"},{"location":"course/javascript/working-with-strings/#how-to-create-strings","text":"let string1 = \"A string primitive\" ; let string2 = 'Also a string primitive' ; let string3 = `Yet another string primitive` ;","title":"How to create strings?"},{"location":"course/javascript/working-with-strings/#character-access-at-a-position-with-charatindex","text":"let name = \"Bala\" ; let letter = name . charAt ( 0 ) console . log ( letter ) // B","title":"Character access at a position with charAt(index)"},{"location":"course/javascript/working-with-strings/#character-access-at-a-position-with-charcodeatindex","text":"All symbols handled in a number format in the computer which is ASCII code. charCodeAt method returns the ASCII number. let name = \"Bala\" ; let ascii_number = name . charCodeAt ( 0 ) console . log ( ascii_number ) // 66","title":"Character access at a position with charCodeAt(index)"},{"location":"course/javascript/working-with-strings/#comparing-strings-in-javascript","text":"let a = 'a' let b = 'b' if ( a < b ) { // true console . log ( a + ' is less than ' + b ) } else if ( a > b ) { console . log ( a + ' is greater than ' + b ) } else { console . log ( a + ' and ' + b + ' are equal.' ) }","title":"Comparing strings in javascript"},{"location":"course/javascript/working-with-strings/#find-length-of-string","text":"let searchEngine = \"Google\" let count = searchEngine . length console . log ( count ) // 6","title":"Find length of string"},{"location":"course/javascript/working-with-strings/#finding-a-substring-using-indexofstr-and-lastindexofstr","text":"The indexOf() method returns the position of the first occurrence of a specified text in a string let text = \"I love to visit beach\" ; var pos = text . indexOf ( \"beach\" ); console . log ( pos ) // 16 The lastIndexOf() method returns the index of the last occurrence of a specified text in a string var str = \"Please locate where 'locate' occurs!\" ; var pos = str . lastIndexOf ( \"locate\" ); console . log ( pos ) // 21 Both indexOf() , and lastIndexOf() return -1 if the text is not found.","title":"Finding a substring using indexOf(str) and lastIndexOf(str)"},{"location":"course/javascript/working-with-strings/#escaping-special-characters","text":"To escape special characters, you use the backslash \\ character. For example: Windows line break: '\\r\\n' Unix line break: '\\n' Tab: '\\t' Backslash '\\' The following example uses the backslash character to escape the single quote character in a string: let str = 'I\\'m a string!' ; console . log ( str ) // I'm a string","title":"Escaping special characters"},{"location":"course/javascript/working-with-strings/#to-concatenate-two-or-more-strings-you-use-the-operator","text":"Concatenating strings via + operator let name = 'John' ; let str = 'Hello ' + name ; console . log ( str ); // \"Hello John\" If you want to assemble a string piece by piece, you can use the += operator: let className = 'btn' ; className += ' btn-primary' className += ' none' ; console . log ( className ); // btn btn-primary none","title":"To concatenate two or more strings, you use the + operator:"},{"location":"course/javascript/working-with-strings/#coverting-other-data-types-to-string-notation","text":"Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this: let number = 10 ; console . log ( number . toString ()); // \"10\" let is_valid = false ; console . log ( is_valid . toString ()); // \"false\" const o = new Object (); console . log ( o . toString ()); // [object Object]","title":"coverting other data types to string notation"},{"location":"course/javascript/working-with-strings/#converting-to-lowercase-using-tolowercase-method","text":"The JavaScript String toLowerCase() method returns the given string in lowercase letters. var s1 = \"Hello World\" ; var s2 = s1 . toLowerCase (); console . log ( s2 ) // hello world","title":"converting to lowercase using toLowerCase() method"},{"location":"course/javascript/working-with-strings/#converting-to-uppercase-using-touppercase-method","text":"The JavaScript String toUpperCase() method returns the given string in uppercase letters. var s1 = \"Hello World\" ; var s2 = s1 . toUpperCase (); console . log ( s2 ) // HELLO WORLD","title":"converting to uppercase using toUpperCase() method"},{"location":"course/javascript/working-with-strings/#get-substring-from-string-using-method-slicebeginindex-endindex","text":"slice(beginIndex, endIndex) method returns the parts of string from given beginIndex to endIndex. In slice() method, beginIndex is inclusive and endIndex is exclusive. var s1 = \"Get me something\" ; var s2 = s1 . slice ( 7 , 16 ); console . log ( s2 ) // something","title":"get substring from string using method slice(beginIndex, endIndex)"},{"location":"course/javascript/working-with-strings/#string-concatenation-using-concatstr1-str2-strn","text":"It simply concatenates the string and returns it. let str1 = \"Hello\" ; let str2 = \"World.\" ; let str3 = \"I'm Chitti\" ; let output = str1 . concat ( str2 , str3 ) console . log ( output ) // Hello World.I'm Chitti","title":"String concatenation using concat(str1, str2, ...strN)"},{"location":"course/python/","text":"Python is a high-level and interpreted programming language. It is created by Guido van Rossum. Python first released in 1991, Python has a good design philosophy. It provides features like code readability, and a syntax that allows fewer lines of code to implement functionality compare to other programming languages. Python is a general purpose programming language. History of python \u00b6 Python was conceived in the late 1980s, and its implementation began in December 1989 by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the operating system Amoeba. Rossum was fan of a comedy series from late seventies. The name \"Python\" was taken from the same series \"Monty Python's Flying Circus\". Features of Python Programming \u00b6 A simple language which is easier to learn Free and open source Portability (run code in any platform) Extensible and embeddable(c, c++, etc) A high level interpreted language Large standard libraries to solve common problems Supports object oriented programming Applications of python \u00b6 Web and Internet Development Frameworks such as Django and Pyramid . Micro-frameworks such as Flask and Bottle . Advanced content management systems such as Plone and django CMS . Scientific and Numeric SciPy is a collection of packages for mathematics, science, and engineering. Pandas is a data analysis and modeling library. Education Python is a superb language for teaching programming, both at the introductory level and in more advanced courses. Books such as How to Think Like a Computer Scientist , Python Programming: An Introduction to Computer Science, and Practical Programming. Desktop GUIs wxWidgets Qt via pyqt or pyside Software Development Python used as a supporting language for software developers along with other programming languages. Python is used in automation of software processes. Also used for build, control and management, testing and in many other ways. SCons for build control. Buildbot and Apache Gump for automated continuous compilation and testing. Roundup or Trac for bug tracking and project management. Business Applications python is used for ERP(enterprice resource planning) and internet e-commerce applications. Odoo offers a range of business applications that form a complete pack of enterprise management applications. Tryton is a high-level general purpose application platform.","title":"Introduction"},{"location":"course/python/#history-of-python","text":"Python was conceived in the late 1980s, and its implementation began in December 1989 by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the operating system Amoeba. Rossum was fan of a comedy series from late seventies. The name \"Python\" was taken from the same series \"Monty Python's Flying Circus\".","title":"History of python"},{"location":"course/python/#features-of-python-programming","text":"A simple language which is easier to learn Free and open source Portability (run code in any platform) Extensible and embeddable(c, c++, etc) A high level interpreted language Large standard libraries to solve common problems Supports object oriented programming","title":"Features of Python Programming"},{"location":"course/python/#applications-of-python","text":"Web and Internet Development Frameworks such as Django and Pyramid . Micro-frameworks such as Flask and Bottle . Advanced content management systems such as Plone and django CMS . Scientific and Numeric SciPy is a collection of packages for mathematics, science, and engineering. Pandas is a data analysis and modeling library. Education Python is a superb language for teaching programming, both at the introductory level and in more advanced courses. Books such as How to Think Like a Computer Scientist , Python Programming: An Introduction to Computer Science, and Practical Programming. Desktop GUIs wxWidgets Qt via pyqt or pyside Software Development Python used as a supporting language for software developers along with other programming languages. Python is used in automation of software processes. Also used for build, control and management, testing and in many other ways. SCons for build control. Buildbot and Apache Gump for automated continuous compilation and testing. Roundup or Trac for bug tracking and project management. Business Applications python is used for ERP(enterprice resource planning) and internet e-commerce applications. Odoo offers a range of business applications that form a complete pack of enterprise management applications. Tryton is a high-level general purpose application platform.","title":"Applications of python"},{"location":"course/python/booleans/","text":"In python, we represent boolean data with keywords True and False we can evaluate any expression in python and get the boolean data. Let's solve some problems using boolean data. Code examples \u00b6 print ( 10 > 9 ) # True print ( 10 == 9 ) # False print ( 10 < 9 ) # False Above code will give boolean value based on the operation. Evaluate Values and Variables \u00b6 bool is a built-in function allows us to evaluate other data type values into boolean data type. bool ( \"Hello\" ) bool will return False for the below values bool ( None ) bool ( False ) bool ( 0 ) bool ( \"\" ) bool (()) bool ([]) bool ({}) bool will return True for the below values bool ( \"awesome\" ) bool ( 123 ) bool ([ \"apple\" , \"cherry\" , \"banana\" ]) Check if given number is even or odd \u00b6 If number divisible by 2 then it's a even number. Below program will find if the number is even or not. num = 20 is_even = num % 2 == 0 if is_even : print ( \"even\" ) else : print ( \"odd\" ) Age classifier \u00b6 Write program to take age and tell whether its infant or child or adult age = int ( input ( \"Please enter your age:\" )) if age <= 0 : print ( 'Invalid input' ) elif age >= 1 and age <= 5 : print ( 'Infant' ) elif age >= 6 and age <= 10 : print ( 'Child' ) else : print ( 'Adult' )","title":"Python booleans"},{"location":"course/python/booleans/#code-examples","text":"print ( 10 > 9 ) # True print ( 10 == 9 ) # False print ( 10 < 9 ) # False Above code will give boolean value based on the operation.","title":"Code examples"},{"location":"course/python/booleans/#evaluate-values-and-variables","text":"bool is a built-in function allows us to evaluate other data type values into boolean data type. bool ( \"Hello\" ) bool will return False for the below values bool ( None ) bool ( False ) bool ( 0 ) bool ( \"\" ) bool (()) bool ([]) bool ({}) bool will return True for the below values bool ( \"awesome\" ) bool ( 123 ) bool ([ \"apple\" , \"cherry\" , \"banana\" ])","title":"Evaluate Values and Variables"},{"location":"course/python/booleans/#check-if-given-number-is-even-or-odd","text":"If number divisible by 2 then it's a even number. Below program will find if the number is even or not. num = 20 is_even = num % 2 == 0 if is_even : print ( \"even\" ) else : print ( \"odd\" )","title":"Check if given number is even or odd"},{"location":"course/python/booleans/#age-classifier","text":"Write program to take age and tell whether its infant or child or adult age = int ( input ( \"Please enter your age:\" )) if age <= 0 : print ( 'Invalid input' ) elif age >= 1 and age <= 5 : print ( 'Infant' ) elif age >= 6 and age <= 10 : print ( 'Child' ) else : print ( 'Adult' )","title":"Age classifier"},{"location":"course/python/classes-and-objects/","text":"Python classes and objects \u00b6 what is a class? \u00b6 Class is a template for an object Class should follow camel case notation All classes in one file - when classes are short One class per file - when classes are long when to use a class? \u00b6 Several functions with share state More than one copy of the same state variables To extend the behavior of an existing functionality Do not use classes for simple things class - syntax \u00b6 To create a class, use the keyword class Let's looke at the below class class Calculator : pi = 3.14 def add ( self , num1 , num2 ): return num1 + num2 def sub ( self , num1 , num2 ): return num1 - num2 In above class Calculator is the name of the class add , sub are instance methods pi is a class attribute create object using class \u00b6 Let's use the above class and create an object calc = Calculator () print ( calc . sum ( 1 , 2 )) # output: 3 print ( calc . pi ) # output: 3.14 Calculator() creates the class object and stores it in variable calc calc.pi will retrieve the value of the attribute calc.sum(1, 2) calls the class method sum with arguments 1 and 2 For instance methods self is automatically passed as a default argument. self is nothing but the object itself. i.e self and calc both are same in above code. __new__ - constructor \u00b6 __new__ is an object constructor By overriding this method we can modify the behaviour of the class/object. Let's see an example class Person : def __new__ ( cls , * args , ** kwargs ): print ( \"__new__ called\" ) instance = super () . __new__ ( cls , * args , ** kwargs ) instance . developer = \"Anjaneyulu Batta\" return instance p = Person () # output: __new__ called print ( p . developer ) # output: Anjaneyulu Batta In the above code, we have overriden the default behaviour of __new__ method. added an attribute developer __init__ - initializer \u00b6 __init__ is the object initializer It is used when we want the object to hold the given values in the class attributes Let's look at an example class Rectange : def __init__ ( self , length , width ): self . length = length self . width = width rect = Rectange ( 10 , 30 ) print ( rect . length ) # output: 10 print ( rect . width ) # output: 30 In the above example, we have initialized the rect object with length and width attributes __str__ - object representation as string \u00b6 __str__ method is used to represent the object in string notation Let's look at an example class Point : def __init__ ( self , x , y ): self . x = x self . y = y p = Point ( 10 , 20 ) print ( p ) # output: <__main__.Point object at 0x102c953d0> without __str__ method it will print output like < main .Point object at 0x102c953d0> let's add __str__ method and print it class Point : def __init__ ( self , x , y ): self . x = x self . y = y def __str__ ( self ): return f 'Point( { self . x } , { self . y } )' p = Point ( 10 , 20 ) print ( p ) # output: Point(10, 20) after adding __str__ it will print the output like Point(10, 20) instance method \u00b6 To use instance method, we need to create an object from class Can just call the method just like function on the object with . Let's look at an exmaple class Circle : def __init__ ( self , radius ): self . radius = radius def get_area ( self ): return 3.14 * self . radius ** 2 c = Circle ( 10 ) area = c . get_area () print ( area ) # output: 314.0 For any instance method self is the first argument. classmethod \u00b6 To use class method we don't need to create the class object. To define any class method we need @classmethod decorator Like instance method, it passes the first argument as class. Let's see an example class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year def __str__ ( self ): return f ' { self . day } / { self . month } / { self . year } ' @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( '-' )) obj = cls ( day , month , year ) return obj d = Date . from_string ( \"25-10-2022\" ) print ( d ) # output: 25/10/2022 In the above code, we can see that the method from_string(cls, date_as_string) has the first param as cls which is nothing but Date class. By default python passes the argument cls along with user specified arguments. staticmethod \u00b6 It's just like normal python function that just defined inside the class Like classmethod it also required to use decorator staticmethod Let's look at an example class Claci : @staticmethod def add ( x , y ): return x + y @staticmethod def mul ( x , y ): return x * y print ( Calci . add ( 10 , 20 )) # output: 30 From the above code, we can see that we don't need to create an instance and no default argument is passed. References \u00b6 https://docs.python.org/dev/tutorial/classes.html","title":"Python classes and objects"},{"location":"course/python/classes-and-objects/#python-classes-and-objects","text":"","title":"Python classes and objects"},{"location":"course/python/classes-and-objects/#what-is-a-class","text":"Class is a template for an object Class should follow camel case notation All classes in one file - when classes are short One class per file - when classes are long","title":"what is a class?"},{"location":"course/python/classes-and-objects/#when-to-use-a-class","text":"Several functions with share state More than one copy of the same state variables To extend the behavior of an existing functionality Do not use classes for simple things","title":"when to use a class?"},{"location":"course/python/classes-and-objects/#class-syntax","text":"To create a class, use the keyword class Let's looke at the below class class Calculator : pi = 3.14 def add ( self , num1 , num2 ): return num1 + num2 def sub ( self , num1 , num2 ): return num1 - num2 In above class Calculator is the name of the class add , sub are instance methods pi is a class attribute","title":"class - syntax"},{"location":"course/python/classes-and-objects/#create-object-using-class","text":"Let's use the above class and create an object calc = Calculator () print ( calc . sum ( 1 , 2 )) # output: 3 print ( calc . pi ) # output: 3.14 Calculator() creates the class object and stores it in variable calc calc.pi will retrieve the value of the attribute calc.sum(1, 2) calls the class method sum with arguments 1 and 2 For instance methods self is automatically passed as a default argument. self is nothing but the object itself. i.e self and calc both are same in above code.","title":"create object using class"},{"location":"course/python/classes-and-objects/#__new__-constructor","text":"__new__ is an object constructor By overriding this method we can modify the behaviour of the class/object. Let's see an example class Person : def __new__ ( cls , * args , ** kwargs ): print ( \"__new__ called\" ) instance = super () . __new__ ( cls , * args , ** kwargs ) instance . developer = \"Anjaneyulu Batta\" return instance p = Person () # output: __new__ called print ( p . developer ) # output: Anjaneyulu Batta In the above code, we have overriden the default behaviour of __new__ method. added an attribute developer","title":"__new__ - constructor"},{"location":"course/python/classes-and-objects/#__init__-initializer","text":"__init__ is the object initializer It is used when we want the object to hold the given values in the class attributes Let's look at an example class Rectange : def __init__ ( self , length , width ): self . length = length self . width = width rect = Rectange ( 10 , 30 ) print ( rect . length ) # output: 10 print ( rect . width ) # output: 30 In the above example, we have initialized the rect object with length and width attributes","title":"__init__ - initializer"},{"location":"course/python/classes-and-objects/#__str__-object-representation-as-string","text":"__str__ method is used to represent the object in string notation Let's look at an example class Point : def __init__ ( self , x , y ): self . x = x self . y = y p = Point ( 10 , 20 ) print ( p ) # output: <__main__.Point object at 0x102c953d0> without __str__ method it will print output like < main .Point object at 0x102c953d0> let's add __str__ method and print it class Point : def __init__ ( self , x , y ): self . x = x self . y = y def __str__ ( self ): return f 'Point( { self . x } , { self . y } )' p = Point ( 10 , 20 ) print ( p ) # output: Point(10, 20) after adding __str__ it will print the output like Point(10, 20)","title":"__str__ - object representation as string"},{"location":"course/python/classes-and-objects/#instance-method","text":"To use instance method, we need to create an object from class Can just call the method just like function on the object with . Let's look at an exmaple class Circle : def __init__ ( self , radius ): self . radius = radius def get_area ( self ): return 3.14 * self . radius ** 2 c = Circle ( 10 ) area = c . get_area () print ( area ) # output: 314.0 For any instance method self is the first argument.","title":"instance method"},{"location":"course/python/classes-and-objects/#classmethod","text":"To use class method we don't need to create the class object. To define any class method we need @classmethod decorator Like instance method, it passes the first argument as class. Let's see an example class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year def __str__ ( self ): return f ' { self . day } / { self . month } / { self . year } ' @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( '-' )) obj = cls ( day , month , year ) return obj d = Date . from_string ( \"25-10-2022\" ) print ( d ) # output: 25/10/2022 In the above code, we can see that the method from_string(cls, date_as_string) has the first param as cls which is nothing but Date class. By default python passes the argument cls along with user specified arguments.","title":"classmethod"},{"location":"course/python/classes-and-objects/#staticmethod","text":"It's just like normal python function that just defined inside the class Like classmethod it also required to use decorator staticmethod Let's look at an example class Claci : @staticmethod def add ( x , y ): return x + y @staticmethod def mul ( x , y ): return x * y print ( Calci . add ( 10 , 20 )) # output: 30 From the above code, we can see that we don't need to create an instance and no default argument is passed.","title":"staticmethod"},{"location":"course/python/classes-and-objects/#references","text":"https://docs.python.org/dev/tutorial/classes.html","title":"References"},{"location":"course/python/collections/","text":"Collections module consists of advanced data structures to handle the data in an efficient manner. It providers alternative data structure to python built-in data types like dict , list , set , and tuple . namedtuple \u00b6 Named tuples are basically easy-to-create, lightweight object types. Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax. They can be used similarly to struct or other common record types, except that they are immutable. It also improves the readability Let's look at the below example from collections import namedtuple Point = namedtuple ( 'Point' , 'x y' ) p1 = Point ( 1.0 , 5.0 ) p2 = Point ( 2.5 , 1.5 ) x , y = p1 . x , p1 . y print ( x , y ) # output: 1.0 5.0 a , b = p2 [ 0 ], p2 [ 1 ] print ( a , b ) # output: 2.5 1.5 deque \u00b6 deque - doubly ended queue deque is preferred over a list in the cases where we need quicker append and pop operations from both the ends of the container O(1) - time complexity for append and pop operations for deque . O(n) - time complexity for append and pop operations for list deque - syntax \u00b6 from collections import deque queue = deque ([ 'apple' , 'banana' , 500 ]) print ( queue ) # output: deque(['apple', 'banana', 500]) deque - add items \u00b6 append() - method adds the item to the right end of the deque. appendleft() - method adds the item to the left end of the deque. insert(i, item) - method adds the item at index position i extend(iterable) - method adds the multiple elements to the right end of the deque. extendleft(iterable) - method adds the multiple elements to the left end of the deque. from collections import deque queue = deque ([ 'apple' , 'banana' ]) left_fruit = \"Watermelon\" right_fruit = \"Orange\" # append left queue . appendleft ( left_fruit ) print ( queue ) # output: deque(['Watermelon', 'apple', 'banana']) # append right queue . append ( right_fruit ) print ( queue ) # output: deque(['Watermelon', 'apple', 'banana', 'Orange']) # insert at index 2 queue . insert ( 2 , \"Grapes\" ) print ( queue ) # output: deque(['Watermelon', 'apple', 'Grapes', 'banana', 'Orange']) # add multiple elements to the right end queue = deque ([ 1 , 2 , 3 ]) queue . extend (( 4 , 5 , 6 )) print ( queue ) # output: deque([1, 2, 3, 4, 5, 6]) # add multiple elements to the left end queue = deque ([ 1 , 2 , 3 ]) queue . extendleft (( 4 , 5 , 6 )) print ( queue ) # output: deque([6, 5, 4, 1, 2, 3]) deque - remove items \u00b6 pop() - method removes the item to the right end of the deque. popleft() - method removes the item to the left end of the deque. remove(item) - method removes the first occurence of the item from collections import deque queue = deque ([ 'Watermelon' , 'apple' , 'banana' , 'Orange' ]) # remove item from left queue . popleft () print ( queue ) # output: deque(['apple', 'banana', 'Orange']) # remove item from right queue . pop () print ( queue ) # output: deque(['apple', 'banana']) # remove given item cities = deque ([ 'Hyderabad' , 'London' , 'Singapore' , 'Tokyo' ]) item = \"Hyderabad\" cities . remove ( item ) print ( cities ) # output: deque(['London', 'Singapore', 'Tokyo']) deque - access items \u00b6 index(item, start, end) - method returns the first index of the item item - item to search start - start index end - end index count(item) - method returns number of occurences of the item reverse() - method used to reverse the order of the elements. rotate(increment) - rotates the deque by the number specified in arguments. If the number specified is negative, rotation occurs to the left. from collections import deque queue = deque ([ 1 , 2 , 3 , 4 , 5 , 6 , 4 , 2 , 6 ]) # get index of an element print ( queue . index ( 4 )) # output: 3 print ( queue . index ( 4 , 4 , 8 )) # output: 6 # count occurences print ( queue . count ( 4 )) # output: 2 # reverse deque queue . reverse () print ( queue ) # output: deque([6, 2, 4, 6, 5, 4, 3, 2, 1]) # rotate the deque queue . rotate ( 2 ) print ( queue ) # output: deque([2, 1, 6, 2, 4, 6, 5, 4, 3]) ChainMap \u00b6 ChainMap combines multiple dictionaries into one. from collections import ChainMap fruites = { \"banana\" : 100 , \"apple\" : 200 } vegetables = { \"Brinjol\" : 50 , \"Cauliflower\" : 40 } grocery = ChainMap ( fruites , vegetables ) print ( grocery ) # output: ChainMap({'banana': 100, 'apple': 200}, {'Brinjol': 50, 'Cauliflower': 40}) ChainMap - new_child(item) \u00b6 Add a new dict to existing ChainMap from collections import ChainMap fruites = { \"banana\" : 100 , \"apple\" : 200 } vegetables = { \"Brinjol\" : 50 , \"Cauliflower\" : 40 } grocery = ChainMap ( fruites , vegetables ) bakery = { \"Cake\" : 10 , \"Bun\" : 15 } # add \"bakery\" to grocery chainmap new_grocery = grocery . new_child ( bakery ) print ( new_grocery ) # output: ChainMap({'Cake': 10, 'Bun': 15}, {'banana': 100, 'apple': 200}, {'Brinjol': 50, 'Cauliflower': 40}) print ( grocery ) # output: ChainMap({'banana': 100, 'apple': 200}, {'Brinjol': 50, 'Cauliflower': 40}) ChainMap - parents \u00b6 It returns the all dicts inside the ChainMap except the first one. from collections import ChainMap a = { \"name\" : \"John\" } b = { \"name\" : \"Anji\" } c = { \"name\" : \"Chunn\" } cmap = ChainMap ( a , b , c ) print ( cmap . parents ) # output: ChainMap({'name': 'Anji'}, {'name': 'Chunn'}) ChainMap - maps \u00b6 It returns the list all maps in ChainMap from collections import ChainMap fruites = { \"name\" : \"Mango\" } vegtables = { \"name\" : \"Califlower\" } chain_map = ChainMap ( fruites , vegtables ) print ( chain_map . maps ) # output: [{'name': 'Mango'}, {'name': 'Califlower'}] Counter \u00b6 A Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. Counter - initialization \u00b6 from collections import Counter empty_counter = Counter () print ( empty_counter ) # output: Counter() counter_from_iterable = Counter ( 'Google' ) print ( counter_from_iterable ) # output: Counter({'o': 2, 'G': 1, 'g': 1, 'l': 1, 'e': 1}) counter_from_map = Counter ({ 'red' : 4 , 'blue' : 2 }) print ( counter_from_map ) # output: Counter({'red': 4, 'blue': 2}) counter_from_kwargs = Counter ( cats = 4 , dogs = 8 ) print ( counter_from_kwargs ) # output: Counter({'dogs': 8, 'cats': 4}) Counter - elements() \u00b6 Get all elements from the Counter object. from collections import Counter c = Counter ( a = 4 , b = 2 , c = 0 , d =- 2 ) elements = c . elements () print ( elements ) # output: <itertools.chain object at 0x1047e7250> print ( list ( elements )) # output: ['a', 'a', 'a', 'a', 'b', 'b'] Counter - most_common() \u00b6 Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None, most_common() returns all elements in the counter. from collections import Counter c = Counter ( 'abracadabra' ) common = c . most_common ( 3 ) print ( common ) # output: [('a', 5), ('b', 2), ('r', 2)] Counter - subtract() \u00b6 Elements are subtracted from an iterable or from another mapping (or counter). from collections import Counter c = Counter ( a = 4 , b = 2 , c = 0 , d =- 2 ) d = Counter ( a = 1 , b = 2 , c = 3 , d = 4 ) c . subtract ( d ) print ( c ) # output: Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6}) Counter - total() \u00b6 Compute the sum of the counts. Note: it only works on python version 3.10 or later from collections import Counter c = Counter ( a = 10 , b = 5 , c = 0 ) print ( c . total ()) # output: 15 Counter - arithmetic operations \u00b6 from collections import Counter a = Counter ( a = 10 , b = 5 , c = 1 ) b = Counter ( a = 7 , b = 3 , x = 100 ) print ( a + b ) # output: Counter({'x': 100, 'a': 17, 'b': 8, 'c': 1}) print ( a - b ) # output: Counter({'a': 3, 'b': 2, 'c': 1}) print ( a & b ) # output: Counter({'a': 7, 'b': 3}) print ( a | b ) # output: Counter({'x': 100, 'a': 10, 'b': 5, 'c': 1}) print ( a == b ) # output: False OrderedDict \u00b6 It's a sub class of dict Unlike dict it maintains the order of the elements inserted. It supports all methods as dict from collections import OrderedDict d = OrderedDict () d [ \"apple\" ] = 100 d [ \"grapes\" ] = 200 d [ \"oranges\" ] = 300 print ( d ) # output: OrderedDict([('apple', 100), ('grapes', 200), ('oranges', 300)]) defaultdict \u00b6 defaultdict - syntax \u00b6 defaultdict ( default_factory ) defaultdict dict is a subclass of dict Both, defaultdict and dict works very similar except default dict did not throw KeyError unless default_factory is None default_factory() function returns the default value set by the user. defaultdict - basic usage \u00b6 from collections import defaultdict d = defaultdict ( lambda : \"key does not exist\" ) d [ \"name\" ] = \"Anji\" print ( d [ \"name\" ]) # output: Anji d [ \"name\" ] = \"John\" print ( d [ \"name\" ]) # output: John print ( d [ \"unknown\" ]) # output: key does not exist defaultdict - using list as default_factory \u00b6 from collections import defaultdict d = defaultdict ( list ) names = [ \"Anji\" , \"Jessie\" , \"Sudha\" ] for name in names : d [ \"names\" ] . append ( name ) print ( d ) # output: defaultdict(list, {'names': ['Anji', 'Jessie', 'Sudha']}) UserDict \u00b6 Prior to the introduction of dict, the UserDict class was used to create dictionary-like sub-classes that obtained new behaviors by overriding existing methods or adding new ones. It has no added advantage over dict UserList \u00b6 Python supports a List like a container called UserList present in the collections module. This class acts as a wrapper class around the List objects. It has no added advantage over list UserString \u00b6 The class, UserString acts as a wrapper around string objects. The need for this class has been partially supplanted by the ability to subclass directly from str; however, this class can be easier to work with because the underlying string is accessible as an attribute. It has no added advantage over string References: \u00b6 https://docs.python.org/3/library/collections.html","title":"Python collections"},{"location":"course/python/collections/#namedtuple","text":"Named tuples are basically easy-to-create, lightweight object types. Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax. They can be used similarly to struct or other common record types, except that they are immutable. It also improves the readability Let's look at the below example from collections import namedtuple Point = namedtuple ( 'Point' , 'x y' ) p1 = Point ( 1.0 , 5.0 ) p2 = Point ( 2.5 , 1.5 ) x , y = p1 . x , p1 . y print ( x , y ) # output: 1.0 5.0 a , b = p2 [ 0 ], p2 [ 1 ] print ( a , b ) # output: 2.5 1.5","title":"namedtuple"},{"location":"course/python/collections/#deque","text":"deque - doubly ended queue deque is preferred over a list in the cases where we need quicker append and pop operations from both the ends of the container O(1) - time complexity for append and pop operations for deque . O(n) - time complexity for append and pop operations for list","title":"deque"},{"location":"course/python/collections/#deque-syntax","text":"from collections import deque queue = deque ([ 'apple' , 'banana' , 500 ]) print ( queue ) # output: deque(['apple', 'banana', 500])","title":"deque - syntax"},{"location":"course/python/collections/#deque-add-items","text":"append() - method adds the item to the right end of the deque. appendleft() - method adds the item to the left end of the deque. insert(i, item) - method adds the item at index position i extend(iterable) - method adds the multiple elements to the right end of the deque. extendleft(iterable) - method adds the multiple elements to the left end of the deque. from collections import deque queue = deque ([ 'apple' , 'banana' ]) left_fruit = \"Watermelon\" right_fruit = \"Orange\" # append left queue . appendleft ( left_fruit ) print ( queue ) # output: deque(['Watermelon', 'apple', 'banana']) # append right queue . append ( right_fruit ) print ( queue ) # output: deque(['Watermelon', 'apple', 'banana', 'Orange']) # insert at index 2 queue . insert ( 2 , \"Grapes\" ) print ( queue ) # output: deque(['Watermelon', 'apple', 'Grapes', 'banana', 'Orange']) # add multiple elements to the right end queue = deque ([ 1 , 2 , 3 ]) queue . extend (( 4 , 5 , 6 )) print ( queue ) # output: deque([1, 2, 3, 4, 5, 6]) # add multiple elements to the left end queue = deque ([ 1 , 2 , 3 ]) queue . extendleft (( 4 , 5 , 6 )) print ( queue ) # output: deque([6, 5, 4, 1, 2, 3])","title":"deque - add items"},{"location":"course/python/collections/#deque-remove-items","text":"pop() - method removes the item to the right end of the deque. popleft() - method removes the item to the left end of the deque. remove(item) - method removes the first occurence of the item from collections import deque queue = deque ([ 'Watermelon' , 'apple' , 'banana' , 'Orange' ]) # remove item from left queue . popleft () print ( queue ) # output: deque(['apple', 'banana', 'Orange']) # remove item from right queue . pop () print ( queue ) # output: deque(['apple', 'banana']) # remove given item cities = deque ([ 'Hyderabad' , 'London' , 'Singapore' , 'Tokyo' ]) item = \"Hyderabad\" cities . remove ( item ) print ( cities ) # output: deque(['London', 'Singapore', 'Tokyo'])","title":"deque - remove items"},{"location":"course/python/collections/#deque-access-items","text":"index(item, start, end) - method returns the first index of the item item - item to search start - start index end - end index count(item) - method returns number of occurences of the item reverse() - method used to reverse the order of the elements. rotate(increment) - rotates the deque by the number specified in arguments. If the number specified is negative, rotation occurs to the left. from collections import deque queue = deque ([ 1 , 2 , 3 , 4 , 5 , 6 , 4 , 2 , 6 ]) # get index of an element print ( queue . index ( 4 )) # output: 3 print ( queue . index ( 4 , 4 , 8 )) # output: 6 # count occurences print ( queue . count ( 4 )) # output: 2 # reverse deque queue . reverse () print ( queue ) # output: deque([6, 2, 4, 6, 5, 4, 3, 2, 1]) # rotate the deque queue . rotate ( 2 ) print ( queue ) # output: deque([2, 1, 6, 2, 4, 6, 5, 4, 3])","title":"deque - access items"},{"location":"course/python/collections/#chainmap","text":"ChainMap combines multiple dictionaries into one. from collections import ChainMap fruites = { \"banana\" : 100 , \"apple\" : 200 } vegetables = { \"Brinjol\" : 50 , \"Cauliflower\" : 40 } grocery = ChainMap ( fruites , vegetables ) print ( grocery ) # output: ChainMap({'banana': 100, 'apple': 200}, {'Brinjol': 50, 'Cauliflower': 40})","title":"ChainMap"},{"location":"course/python/collections/#chainmap-new_childitem","text":"Add a new dict to existing ChainMap from collections import ChainMap fruites = { \"banana\" : 100 , \"apple\" : 200 } vegetables = { \"Brinjol\" : 50 , \"Cauliflower\" : 40 } grocery = ChainMap ( fruites , vegetables ) bakery = { \"Cake\" : 10 , \"Bun\" : 15 } # add \"bakery\" to grocery chainmap new_grocery = grocery . new_child ( bakery ) print ( new_grocery ) # output: ChainMap({'Cake': 10, 'Bun': 15}, {'banana': 100, 'apple': 200}, {'Brinjol': 50, 'Cauliflower': 40}) print ( grocery ) # output: ChainMap({'banana': 100, 'apple': 200}, {'Brinjol': 50, 'Cauliflower': 40})","title":"ChainMap - new_child(item)"},{"location":"course/python/collections/#chainmap-parents","text":"It returns the all dicts inside the ChainMap except the first one. from collections import ChainMap a = { \"name\" : \"John\" } b = { \"name\" : \"Anji\" } c = { \"name\" : \"Chunn\" } cmap = ChainMap ( a , b , c ) print ( cmap . parents ) # output: ChainMap({'name': 'Anji'}, {'name': 'Chunn'})","title":"ChainMap - parents"},{"location":"course/python/collections/#chainmap-maps","text":"It returns the list all maps in ChainMap from collections import ChainMap fruites = { \"name\" : \"Mango\" } vegtables = { \"name\" : \"Califlower\" } chain_map = ChainMap ( fruites , vegtables ) print ( chain_map . maps ) # output: [{'name': 'Mango'}, {'name': 'Califlower'}]","title":"ChainMap - maps"},{"location":"course/python/collections/#counter","text":"A Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts.","title":"Counter"},{"location":"course/python/collections/#counter-initialization","text":"from collections import Counter empty_counter = Counter () print ( empty_counter ) # output: Counter() counter_from_iterable = Counter ( 'Google' ) print ( counter_from_iterable ) # output: Counter({'o': 2, 'G': 1, 'g': 1, 'l': 1, 'e': 1}) counter_from_map = Counter ({ 'red' : 4 , 'blue' : 2 }) print ( counter_from_map ) # output: Counter({'red': 4, 'blue': 2}) counter_from_kwargs = Counter ( cats = 4 , dogs = 8 ) print ( counter_from_kwargs ) # output: Counter({'dogs': 8, 'cats': 4})","title":"Counter - initialization"},{"location":"course/python/collections/#counter-elements","text":"Get all elements from the Counter object. from collections import Counter c = Counter ( a = 4 , b = 2 , c = 0 , d =- 2 ) elements = c . elements () print ( elements ) # output: <itertools.chain object at 0x1047e7250> print ( list ( elements )) # output: ['a', 'a', 'a', 'a', 'b', 'b']","title":"Counter - elements()"},{"location":"course/python/collections/#counter-most_common","text":"Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None, most_common() returns all elements in the counter. from collections import Counter c = Counter ( 'abracadabra' ) common = c . most_common ( 3 ) print ( common ) # output: [('a', 5), ('b', 2), ('r', 2)]","title":"Counter - most_common()"},{"location":"course/python/collections/#counter-subtract","text":"Elements are subtracted from an iterable or from another mapping (or counter). from collections import Counter c = Counter ( a = 4 , b = 2 , c = 0 , d =- 2 ) d = Counter ( a = 1 , b = 2 , c = 3 , d = 4 ) c . subtract ( d ) print ( c ) # output: Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})","title":"Counter - subtract()"},{"location":"course/python/collections/#counter-total","text":"Compute the sum of the counts. Note: it only works on python version 3.10 or later from collections import Counter c = Counter ( a = 10 , b = 5 , c = 0 ) print ( c . total ()) # output: 15","title":"Counter - total()"},{"location":"course/python/collections/#counter-arithmetic-operations","text":"from collections import Counter a = Counter ( a = 10 , b = 5 , c = 1 ) b = Counter ( a = 7 , b = 3 , x = 100 ) print ( a + b ) # output: Counter({'x': 100, 'a': 17, 'b': 8, 'c': 1}) print ( a - b ) # output: Counter({'a': 3, 'b': 2, 'c': 1}) print ( a & b ) # output: Counter({'a': 7, 'b': 3}) print ( a | b ) # output: Counter({'x': 100, 'a': 10, 'b': 5, 'c': 1}) print ( a == b ) # output: False","title":"Counter - arithmetic operations"},{"location":"course/python/collections/#ordereddict","text":"It's a sub class of dict Unlike dict it maintains the order of the elements inserted. It supports all methods as dict from collections import OrderedDict d = OrderedDict () d [ \"apple\" ] = 100 d [ \"grapes\" ] = 200 d [ \"oranges\" ] = 300 print ( d ) # output: OrderedDict([('apple', 100), ('grapes', 200), ('oranges', 300)])","title":"OrderedDict"},{"location":"course/python/collections/#defaultdict","text":"","title":"defaultdict"},{"location":"course/python/collections/#defaultdict-syntax","text":"defaultdict ( default_factory ) defaultdict dict is a subclass of dict Both, defaultdict and dict works very similar except default dict did not throw KeyError unless default_factory is None default_factory() function returns the default value set by the user.","title":"defaultdict - syntax"},{"location":"course/python/collections/#defaultdict-basic-usage","text":"from collections import defaultdict d = defaultdict ( lambda : \"key does not exist\" ) d [ \"name\" ] = \"Anji\" print ( d [ \"name\" ]) # output: Anji d [ \"name\" ] = \"John\" print ( d [ \"name\" ]) # output: John print ( d [ \"unknown\" ]) # output: key does not exist","title":"defaultdict - basic usage"},{"location":"course/python/collections/#defaultdict-using-list-as-default_factory","text":"from collections import defaultdict d = defaultdict ( list ) names = [ \"Anji\" , \"Jessie\" , \"Sudha\" ] for name in names : d [ \"names\" ] . append ( name ) print ( d ) # output: defaultdict(list, {'names': ['Anji', 'Jessie', 'Sudha']})","title":"defaultdict - using list as default_factory"},{"location":"course/python/collections/#userdict","text":"Prior to the introduction of dict, the UserDict class was used to create dictionary-like sub-classes that obtained new behaviors by overriding existing methods or adding new ones. It has no added advantage over dict","title":"UserDict"},{"location":"course/python/collections/#userlist","text":"Python supports a List like a container called UserList present in the collections module. This class acts as a wrapper class around the List objects. It has no added advantage over list","title":"UserList"},{"location":"course/python/collections/#userstring","text":"The class, UserString acts as a wrapper around string objects. The need for this class has been partially supplanted by the ability to subclass directly from str; however, this class can be easier to work with because the underlying string is accessible as an attribute. It has no added advantage over string","title":"UserString"},{"location":"course/python/collections/#references","text":"https://docs.python.org/3/library/collections.html","title":"References:"},{"location":"course/python/conditions/","text":"Python uses boolean logic to evaluate conditions. The boolean values True and False are returned when an expression is evaluated. Use conditions to solve different problems. Prerequisites \u00b6 Python operators knowledge is required to understand python if..else conditions. We use operators with if...else statements to take the programmatic decisions. conditions syntax \u00b6 if...else syntax use it if we have only two possible conditions if < condition > : < statement > else : < statement > if...elif...else syntax use it when we have 3 or more possible conditions if < condition > : < statement > elif < condition > : < statement > # add more elif we have more conditions else : < statement > let's use python conditions to solve the problems Note: if alone can be use used without elif or else . elif and else are optional conditions. so, use these only when needed. student exam result \u00b6 let's write a program to find if student passed in the exam or not. Student will fail in the exam if he/she gets less than 50 marks. student_marks = 60 pass_marks = 50 if student_marks >= pass_marks : print ( \"Hurray\" ) else : print ( \"Meh\" ) # Output: Hurray try out the above code by changing the values for student_marks find max of two numbers \u00b6 let's write the program to find the largest of given two numbers num1 = 10 and num2 = 20 num1 = 10 num2 = 20 if num1 > num2 : print ( f \"max = { num1 } \" ) elif num2 > num1 : print ( f \"max = { num2 } \" ) else : print ( f \"both are equal\" ) # output: max = 20 Try out the above code by changing the values of num1 and num2 find max of three numbers \u00b6 let's write the program to find the largest of given two numbers num1 = 10, num2 = 20 and num3 = 30 num1 = 10 num2 = 20 num3 = 30 if num1 >= num2 and num1 >= num3 : print ( f \"max = { num1 } \" ) elif num2 >= num1 and num2 >= num3 : print ( f \"max = { num2 } \" ) else : print ( f \"max = { num3 } \" ) # output: max = 30 welcome adulthood - nested conditions \u00b6 write a program to check if person is adult and if adult then print welcome message. Check if the person is graduated then say \"congrats\" if the person has license then say \"happy driving\" age = 19 isGraduated = False hasLicense = True # Look if person is 18 years or older if age >= 18 : print ( \"You're 18 or older. Welcome to adulthood!\" ) if isGraduated : print ( 'Congratulations with your graduation!' ) if hasLicense : print ( 'Happy driving!' ) summary \u00b6 We solved few problems by using the concepts learned so far. We can solve more problems by using the python conditions. We can use nested if...else conditions. TODO: You will need to find out problems and solve it using python conditions. References \u00b6 https://docs.python.org/3/tutorial/controlflow.html","title":"Python if...else"},{"location":"course/python/conditions/#prerequisites","text":"Python operators knowledge is required to understand python if..else conditions. We use operators with if...else statements to take the programmatic decisions.","title":"Prerequisites"},{"location":"course/python/conditions/#conditions-syntax","text":"if...else syntax use it if we have only two possible conditions if < condition > : < statement > else : < statement > if...elif...else syntax use it when we have 3 or more possible conditions if < condition > : < statement > elif < condition > : < statement > # add more elif we have more conditions else : < statement > let's use python conditions to solve the problems Note: if alone can be use used without elif or else . elif and else are optional conditions. so, use these only when needed.","title":"conditions syntax"},{"location":"course/python/conditions/#student-exam-result","text":"let's write a program to find if student passed in the exam or not. Student will fail in the exam if he/she gets less than 50 marks. student_marks = 60 pass_marks = 50 if student_marks >= pass_marks : print ( \"Hurray\" ) else : print ( \"Meh\" ) # Output: Hurray try out the above code by changing the values for student_marks","title":"student exam result"},{"location":"course/python/conditions/#find-max-of-two-numbers","text":"let's write the program to find the largest of given two numbers num1 = 10 and num2 = 20 num1 = 10 num2 = 20 if num1 > num2 : print ( f \"max = { num1 } \" ) elif num2 > num1 : print ( f \"max = { num2 } \" ) else : print ( f \"both are equal\" ) # output: max = 20 Try out the above code by changing the values of num1 and num2","title":"find max of two numbers"},{"location":"course/python/conditions/#find-max-of-three-numbers","text":"let's write the program to find the largest of given two numbers num1 = 10, num2 = 20 and num3 = 30 num1 = 10 num2 = 20 num3 = 30 if num1 >= num2 and num1 >= num3 : print ( f \"max = { num1 } \" ) elif num2 >= num1 and num2 >= num3 : print ( f \"max = { num2 } \" ) else : print ( f \"max = { num3 } \" ) # output: max = 30","title":"find max of three numbers"},{"location":"course/python/conditions/#welcome-adulthood-nested-conditions","text":"write a program to check if person is adult and if adult then print welcome message. Check if the person is graduated then say \"congrats\" if the person has license then say \"happy driving\" age = 19 isGraduated = False hasLicense = True # Look if person is 18 years or older if age >= 18 : print ( \"You're 18 or older. Welcome to adulthood!\" ) if isGraduated : print ( 'Congratulations with your graduation!' ) if hasLicense : print ( 'Happy driving!' )","title":"welcome adulthood - nested conditions"},{"location":"course/python/conditions/#summary","text":"We solved few problems by using the concepts learned so far. We can solve more problems by using the python conditions. We can use nested if...else conditions. TODO: You will need to find out problems and solve it using python conditions.","title":"summary"},{"location":"course/python/conditions/#references","text":"https://docs.python.org/3/tutorial/controlflow.html","title":"References"},{"location":"course/python/csv/","text":"CSV introduction \u00b6 CSV - Comma Separated Values CSV is most common import and export format for spreadsheets and databases Read below external articles to know more about CSV https://datatracker.ietf.org/doc/html/rfc4180.html read data from csv file \u00b6 use csv module to read the data from file. look at the below csv file /tmp/products.csv product_name, asin Redmi 9A Sport, B09GFLXVH9 Dell Intel 5th Gen, B07SN9P55R MacBook Air, B07SN8P55R look at the below code import csv file_path = \"/tmp/products.csv\" with open ( file_path , 'r' ) as _file : csv_reader = csv . reader ( _file , delimiter = ',' ) for row in csv_reader : print ( row ) * above program gives the below output. ['product_name', ' asin'] ['Redmi 9A Sport', ' B09GFLXVH9'] ['Dell Intel 5th Gen', ' B07SN9P55R'] ['MacBook Air', ' B07SN8P55R'] from the above output, we can see that when we iterate over the reader it gives list. we can also read the data as dictionary. It treats the first row as header. let's look at the code for that import csv file_path = \"/tmp/products.csv\" with open ( file_path , 'r' ) as _file : csv_reader = csv . DictReader ( _file ) for row in csv_reader : print ( row ) above code gives the below output {'product_name': 'Redmi 9A Sport', ' asin': ' B09GFLXVH9'} {'product_name': 'Dell Intel 5th Gen', ' asin': ' B07SN9P55R'} {'product_name': 'MacBook Air', ' asin': ' B07SN8P55R'} * when we use csv.DictReader(file) it reads, the each row as dict. write data to csv file \u00b6 we can use csv.writer(file) or csv.DictWriter(file, fieldnames) let's use csv.writer(file) in the below code. import csv file_path = \"/tmp/students.csv\" with open ( file_path , 'w' ) as _file : header = [ \"first_name\" , \"last_name\" ] data = [ [ \"Anji\" , \"B\" ], [ \"Shiva\" , \"D\" ], [ \"Sathyam\" , \"M\" ], [ \"Rajeswari\" , \"D\" ] ] # write to file writer = csv . writer ( _file ) # write header writer . writerow ( header ) # write data writer . writerows ( data ) After running the program, just run command cat /tmp/students.csv to see the file contents. first_name,last_name Anji,B Shiva,D Sathyam,M Rajeswari,D Now, let's use csv.DictWriter(file, fieldnames) import csv file_path = \"/tmp/students.csv\" with open ( file_path , 'w' ) as _file : header = [ \"first_name\" , \"last_name\" ] row1 = { \"first_name\" : \"Anji\" , \"last_name\" : \"B\" } data = [ { \"first_name\" : \"Shiva\" , \"last_name\" : \"D\" }, { \"first_name\" : \"Sathyam\" , \"last_name\" : \"M\" }, { \"first_name\" : \"Rajeswari\" , \"last_name\" : \"B\" } ] # write to file writer = csv . DictWriter ( _file , header ) # write header writer . writeheader () # write a single row writer . writerow ( row1 ) # write multiple rows at once writer . writerows ( data ) csv.DictWriter(_file, header) contains below methods writeheader() - write the header writerow(row) - writes a single row (i.e dict) writerows([row1, row2, ...]) - writes multiple rows Note: Try these examples and read official docs for advanced usage Reference: \u00b6 https://docs.python.org/3/library/csv.html","title":"Python csv"},{"location":"course/python/csv/#csv-introduction","text":"CSV - Comma Separated Values CSV is most common import and export format for spreadsheets and databases Read below external articles to know more about CSV https://datatracker.ietf.org/doc/html/rfc4180.html","title":"CSV introduction"},{"location":"course/python/csv/#read-data-from-csv-file","text":"use csv module to read the data from file. look at the below csv file /tmp/products.csv product_name, asin Redmi 9A Sport, B09GFLXVH9 Dell Intel 5th Gen, B07SN9P55R MacBook Air, B07SN8P55R look at the below code import csv file_path = \"/tmp/products.csv\" with open ( file_path , 'r' ) as _file : csv_reader = csv . reader ( _file , delimiter = ',' ) for row in csv_reader : print ( row ) * above program gives the below output. ['product_name', ' asin'] ['Redmi 9A Sport', ' B09GFLXVH9'] ['Dell Intel 5th Gen', ' B07SN9P55R'] ['MacBook Air', ' B07SN8P55R'] from the above output, we can see that when we iterate over the reader it gives list. we can also read the data as dictionary. It treats the first row as header. let's look at the code for that import csv file_path = \"/tmp/products.csv\" with open ( file_path , 'r' ) as _file : csv_reader = csv . DictReader ( _file ) for row in csv_reader : print ( row ) above code gives the below output {'product_name': 'Redmi 9A Sport', ' asin': ' B09GFLXVH9'} {'product_name': 'Dell Intel 5th Gen', ' asin': ' B07SN9P55R'} {'product_name': 'MacBook Air', ' asin': ' B07SN8P55R'} * when we use csv.DictReader(file) it reads, the each row as dict.","title":"read data from csv file"},{"location":"course/python/csv/#write-data-to-csv-file","text":"we can use csv.writer(file) or csv.DictWriter(file, fieldnames) let's use csv.writer(file) in the below code. import csv file_path = \"/tmp/students.csv\" with open ( file_path , 'w' ) as _file : header = [ \"first_name\" , \"last_name\" ] data = [ [ \"Anji\" , \"B\" ], [ \"Shiva\" , \"D\" ], [ \"Sathyam\" , \"M\" ], [ \"Rajeswari\" , \"D\" ] ] # write to file writer = csv . writer ( _file ) # write header writer . writerow ( header ) # write data writer . writerows ( data ) After running the program, just run command cat /tmp/students.csv to see the file contents. first_name,last_name Anji,B Shiva,D Sathyam,M Rajeswari,D Now, let's use csv.DictWriter(file, fieldnames) import csv file_path = \"/tmp/students.csv\" with open ( file_path , 'w' ) as _file : header = [ \"first_name\" , \"last_name\" ] row1 = { \"first_name\" : \"Anji\" , \"last_name\" : \"B\" } data = [ { \"first_name\" : \"Shiva\" , \"last_name\" : \"D\" }, { \"first_name\" : \"Sathyam\" , \"last_name\" : \"M\" }, { \"first_name\" : \"Rajeswari\" , \"last_name\" : \"B\" } ] # write to file writer = csv . DictWriter ( _file , header ) # write header writer . writeheader () # write a single row writer . writerow ( row1 ) # write multiple rows at once writer . writerows ( data ) csv.DictWriter(_file, header) contains below methods writeheader() - write the header writerow(row) - writes a single row (i.e dict) writerows([row1, row2, ...]) - writes multiple rows Note: Try these examples and read official docs for advanced usage","title":"write data to csv file"},{"location":"course/python/csv/#reference","text":"https://docs.python.org/3/library/csv.html","title":"Reference:"},{"location":"course/python/datetime-module/","text":"Python provides two modules datetime and time to work with dates and time. datetime - module \u00b6 datetime modules provides types like datetime - represents date and time date - only represents date timedelta - difference between two datetime values. time - represents time only timezone - fixed offset from UTC implementation of tzinfo. create datetime object \u00b6 from datetime import datetime obj = datetime ( year = 2022 , month = 11 , day = 1 , hour = 23 , minute = 10 , second = 58 , microsecond = 100 ) get current datetime \u00b6 from datetime import datetime now = datetime . now () print ( now ) # output: 2022-11-02 23:35:28.943015 above program gives the current datetime get current UTC datetime \u00b6 from datetime import datetime utc_now = datetime . utcnow () print ( utc_now ) # output: 2022-11-02 18:07:19.646767 datetime.utcnow() gives current UTC datetime get native indian time i.e UTC + 5:30 \u00b6 we can use datetime and timedelta from dateime module from datetime import datetime , timedelta utc_now = datetime . utcnow () ist_now = utc_now + timedelta ( hours = 5 , minutes = 30 ) print ( ist_now ) # output: 2022-11-02 23:44:02.068166 we can also use timezone from pytz module from pytz import timezone from datetime import datetime ist_now = datetime . now ( timezone ( \"Asia/Kolkata\" )) print ( ist_now ) # output: 2022-11-02 23:45:11.013421+05:30 convert datetime to \"YYY-MM-DD HH:MM:SS\" \u00b6 use datetime.strftime to get given format. from datetime import datetime now = datetime . now () str_datetime = now . strptime ( \"%Y-%m- %d %H:%M:%S\" ) print ( str_datetime ) # output: 2022-11-02 23:52:11 convert \"YYY-MM-DD HH:MM:SS\" to datetime \u00b6 use datetime.strftime to convert string to datetime from datetime import datetime dt = datetime . strptime ( \"2022-11-02 23:52:11\" , \"%Y-%m- %d %H:%M:%S\" ) print ( dt ) # output: 2022-11-02 23:52:11 Note: Read more about format codes [i.e %Y , %m , etc] at Python official docs difference between two datetime objects \u00b6 from datetime import datetime d1 = datetime ( 2022 , 1 , 3 ) d2 = datetime ( 2022 , 5 , 3 ) delta = d2 - d1 print ( delta ) # output: 120 days, 0:00:00 print ( type ( delta )) # output: datetime.timedelta above program gives the timedelta between two datetime objects time - module \u00b6 time module is python's built-in module, used to work with time epoch - time \u00b6 The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00:00:00Z). Let's look at below code to get the epoch time import time epoch = time . time () print ( epoch ) # output: 1667615933.811202 convert epoch seconds to datetime string \u00b6 use time.ctime(seconds) to covert seconds to datetime string import time seconds = 1000 date_str = time . ctime ( seconds ) print ( date_str ) # output: 'Thu Jan 1 05:46:40 1970' pause / delay a execution of a program \u00b6 use time.sleep(seconds) to delay execution. let's see an example import time def wait_sec ( sec ): time . sleep ( sec ) print ( f 'I waited { sec } sec' ) wait_sec ( 10 ) # output: I waited 10 sec when we run the above program, it gives the output after 10 sec measure program performance \u00b6 we can measure the run time of a program using time module. let's look at the code below. from time import perf_counter , sleep def wait_5sec (): sleep ( 5 ) start = perf_counter () wait_5sec () end = perf_counter () run_time = end - start print ( run_time ) # output: 5.005124709000029 First, start captures the moment before you call the function. end captures the moment after the function returns. The function\u2019s total execution time took (end - start) seconds. To read more about time module visit python official docs References: \u00b6 https://docs.python.org/3/library/datetime.html https://docs.python.org/3/library/time.html","title":"Python datetime & time modules"},{"location":"course/python/datetime-module/#datetime-module","text":"datetime modules provides types like datetime - represents date and time date - only represents date timedelta - difference between two datetime values. time - represents time only timezone - fixed offset from UTC implementation of tzinfo.","title":"datetime - module"},{"location":"course/python/datetime-module/#create-datetime-object","text":"from datetime import datetime obj = datetime ( year = 2022 , month = 11 , day = 1 , hour = 23 , minute = 10 , second = 58 , microsecond = 100 )","title":"create datetime object"},{"location":"course/python/datetime-module/#get-current-datetime","text":"from datetime import datetime now = datetime . now () print ( now ) # output: 2022-11-02 23:35:28.943015 above program gives the current datetime","title":"get current datetime"},{"location":"course/python/datetime-module/#get-current-utc-datetime","text":"from datetime import datetime utc_now = datetime . utcnow () print ( utc_now ) # output: 2022-11-02 18:07:19.646767 datetime.utcnow() gives current UTC datetime","title":"get current UTC datetime"},{"location":"course/python/datetime-module/#get-native-indian-time-ie-utc-530","text":"we can use datetime and timedelta from dateime module from datetime import datetime , timedelta utc_now = datetime . utcnow () ist_now = utc_now + timedelta ( hours = 5 , minutes = 30 ) print ( ist_now ) # output: 2022-11-02 23:44:02.068166 we can also use timezone from pytz module from pytz import timezone from datetime import datetime ist_now = datetime . now ( timezone ( \"Asia/Kolkata\" )) print ( ist_now ) # output: 2022-11-02 23:45:11.013421+05:30","title":"get native indian time i.e UTC + 5:30"},{"location":"course/python/datetime-module/#convert-datetime-to-yyy-mm-dd-hhmmss","text":"use datetime.strftime to get given format. from datetime import datetime now = datetime . now () str_datetime = now . strptime ( \"%Y-%m- %d %H:%M:%S\" ) print ( str_datetime ) # output: 2022-11-02 23:52:11","title":"convert datetime to \"YYY-MM-DD HH:MM:SS\""},{"location":"course/python/datetime-module/#convert-yyy-mm-dd-hhmmss-to-datetime","text":"use datetime.strftime to convert string to datetime from datetime import datetime dt = datetime . strptime ( \"2022-11-02 23:52:11\" , \"%Y-%m- %d %H:%M:%S\" ) print ( dt ) # output: 2022-11-02 23:52:11 Note: Read more about format codes [i.e %Y , %m , etc] at Python official docs","title":"convert \"YYY-MM-DD HH:MM:SS\" to datetime"},{"location":"course/python/datetime-module/#difference-between-two-datetime-objects","text":"from datetime import datetime d1 = datetime ( 2022 , 1 , 3 ) d2 = datetime ( 2022 , 5 , 3 ) delta = d2 - d1 print ( delta ) # output: 120 days, 0:00:00 print ( type ( delta )) # output: datetime.timedelta above program gives the timedelta between two datetime objects","title":"difference between two datetime objects"},{"location":"course/python/datetime-module/#time-module","text":"time module is python's built-in module, used to work with time","title":"time - module"},{"location":"course/python/datetime-module/#epoch-time","text":"The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00:00:00Z). Let's look at below code to get the epoch time import time epoch = time . time () print ( epoch ) # output: 1667615933.811202","title":"epoch - time"},{"location":"course/python/datetime-module/#convert-epoch-seconds-to-datetime-string","text":"use time.ctime(seconds) to covert seconds to datetime string import time seconds = 1000 date_str = time . ctime ( seconds ) print ( date_str ) # output: 'Thu Jan 1 05:46:40 1970'","title":"convert epoch seconds to datetime string"},{"location":"course/python/datetime-module/#pause-delay-a-execution-of-a-program","text":"use time.sleep(seconds) to delay execution. let's see an example import time def wait_sec ( sec ): time . sleep ( sec ) print ( f 'I waited { sec } sec' ) wait_sec ( 10 ) # output: I waited 10 sec when we run the above program, it gives the output after 10 sec","title":"pause / delay a execution of a program"},{"location":"course/python/datetime-module/#measure-program-performance","text":"we can measure the run time of a program using time module. let's look at the code below. from time import perf_counter , sleep def wait_5sec (): sleep ( 5 ) start = perf_counter () wait_5sec () end = perf_counter () run_time = end - start print ( run_time ) # output: 5.005124709000029 First, start captures the moment before you call the function. end captures the moment after the function returns. The function\u2019s total execution time took (end - start) seconds. To read more about time module visit python official docs","title":"measure program performance"},{"location":"course/python/datetime-module/#references","text":"https://docs.python.org/3/library/datetime.html https://docs.python.org/3/library/time.html","title":"References:"},{"location":"course/python/dict/","text":"Dict is mutable, unordered collection with elements in the form of a key:value pairs that associate keys to values. Keys must be unique in dict Key can can be any hashable python object As it's mutable data structure we can add/update/remove elements from dict. create a dict \u00b6 can use dict custructor to create dict can create dict with syntax like {key1: value1, key2: value2} can create empty dict with syntax {} empty = {} student = { \"name\" : \"Anji\" , \"stream\" : \"Computer Science\" , \"grade\" : \"A\" } print ( student ) # Output: {'name': 'Anji', 'stream': 'Computer Science', 'grade': 'A'} nums = dict ( one = 1 , two = 2 ) print ( nums ) # Output: {'one': 1, 'two': 2} add key to dict \u00b6 use syntax dict[key] = value to add new key car = {} car [ \"brand\" ] = \"Ford\" car [ \"model\" ] = \"Mustang\" print ( car ) # Output: {'brand': 'Ford', 'model': 'Mustang'} access dict key \u00b6 use syntax dict[key] to access key or use method dict.get(key) dict[key] throws an error if key not found in dict. dict.get(key) return None if key not found in dict. car = { 'brand' : 'Ford' , 'model' : 'Mustang' } print ( car [ 'brand' ]) # Output: Ford update dict key \u00b6 use syntax dict[key] = new_value to update value student = { \"name\" : \"John\" , \"grade\" : \"A\" } student [ \"grade\" ] = \"B\" print ( student ) # Output: {'name': 'John', 'grade': 'B'} delete dict key \u00b6 use syntax del dict[key] key from dict student = { \"name\" : \"John\" , \"grade\" : \"A\" } del student [ 'grade' ] print ( student ) # Output: {'name': 'John'} get dict keys \u00b6 use method dict.keys() to get keys address = { \"line1\" : \"4/23/10\" , \"line2\" : \"Golden street\" , \"city\" : \"London\" } keys = address . keys () print ( keys ) # Output: dict_keys(['line1', 'line2', 'city']) get dict values \u00b6 use method dict.values() to get values address = { \"line1\" : \"4/23/10\" , \"line2\" : \"Golden street\" , \"city\" : \"London\" } values = address . values () print ( values ) # Output: dict_values(['4/23/10', 'Golden street', 'London']) get dict items \u00b6 use method dict.items() to get items it will return data like [(key, value)] address = { \"line1\" : \"4/23/10\" , \"line2\" : \"Golden street\" , \"city\" : \"London\" } items = address . items () print ( items ) # Output: dict_items([('line1', '4/23/10'), ('line2', 'Golden street'), ('city', 'London')]) use for loop with dict \u00b6 iterate through dict product = { \"name\" : \"Ball\" , \"cost\" : 100 } for key in product : print ( key , product [ key ]) # Output: # name Ball # cost 100 iterate through dict keys product = { \"name\" : \"Ball\" , \"cost\" : 100 } for key in product . keys (): print ( key , product [ key ]) # Output: # name Ball # cost 100 iterate through dict values product = { \"name\" : \"Ball\" , \"cost\" : 100 } for val in product . values (): print ( val ) # Output: # Ball # 100 iterate through dict items product = { \"name\" : \"Ball\" , \"cost\" : 100 } for key , val in product . items (): print ( key , val ) # Output: # name Ball # cost 100 copying dict \u00b6 copy dict to keep the original dict away from modifications. use builtin constructor dict() or method dict.copy() to copy dict. product = { \"name\" : \"Ball\" , \"cost\" : 100 } product_copy1 = product . copy () product_copy1 [ \"name\" ] = \"Pen\" print ( product_copy1 ) # Output: {'name': 'Pen', 'cost': 100} print ( product ) # Output: {'name': 'Ball', 'cost': 100} product_copy2 = dict ( product ) product_copy2 [ \"name\" ] = \"Pencil\" print ( product_copy2 ) # Output: {'name': 'Pencil', 'cost': 100} print ( product ) # Output: {'name': 'Ball', 'cost': 100} compare two dicts \u00b6 use == operator to compare dicts d1 = { \"one\" : 1 } d2 = { \"one\" : 1 } print ( d1 == d2 ) # Output: True nested dicts \u00b6 dict can have dicts as values students = { \"DT001\" : { \"name\" : \"John\" , \"grade\" : \"A\" }, \"DT002\" : { \"name\" : \"Anji\" , \"grade\" : \"B\" } } dict Methods \u00b6 Method Description clear() Removes all the elements from the dictionary copy() Returns a copy of the dictionary fromkeys() Returns a dictionary with the specified keys and value get() Returns the value of the specified key items() Returns a list containing a tuple for each key value pair keys() Returns a list containing the dictionary's keys pop() Removes the element with the specified key popitem() Removes the last inserted key-value pair setdefault() Returns the value of the specified key. If the key does not exist: insert the key, with the specified value update() Updates the dictionary with the specified key-value pairs values() Returns a list of all the values in the dictionary Read more about dict at python official docs Rerefences \u00b6 https://docs.python.org/3/tutorial/datastructures.html#dictionaries https://python-reference.readthedocs.io/en/latest/docs/dict/","title":"Python dict"},{"location":"course/python/dict/#create-a-dict","text":"can use dict custructor to create dict can create dict with syntax like {key1: value1, key2: value2} can create empty dict with syntax {} empty = {} student = { \"name\" : \"Anji\" , \"stream\" : \"Computer Science\" , \"grade\" : \"A\" } print ( student ) # Output: {'name': 'Anji', 'stream': 'Computer Science', 'grade': 'A'} nums = dict ( one = 1 , two = 2 ) print ( nums ) # Output: {'one': 1, 'two': 2}","title":"create a dict"},{"location":"course/python/dict/#add-key-to-dict","text":"use syntax dict[key] = value to add new key car = {} car [ \"brand\" ] = \"Ford\" car [ \"model\" ] = \"Mustang\" print ( car ) # Output: {'brand': 'Ford', 'model': 'Mustang'}","title":"add key to dict"},{"location":"course/python/dict/#access-dict-key","text":"use syntax dict[key] to access key or use method dict.get(key) dict[key] throws an error if key not found in dict. dict.get(key) return None if key not found in dict. car = { 'brand' : 'Ford' , 'model' : 'Mustang' } print ( car [ 'brand' ]) # Output: Ford","title":"access dict key"},{"location":"course/python/dict/#update-dict-key","text":"use syntax dict[key] = new_value to update value student = { \"name\" : \"John\" , \"grade\" : \"A\" } student [ \"grade\" ] = \"B\" print ( student ) # Output: {'name': 'John', 'grade': 'B'}","title":"update dict key"},{"location":"course/python/dict/#delete-dict-key","text":"use syntax del dict[key] key from dict student = { \"name\" : \"John\" , \"grade\" : \"A\" } del student [ 'grade' ] print ( student ) # Output: {'name': 'John'}","title":"delete dict key"},{"location":"course/python/dict/#get-dict-keys","text":"use method dict.keys() to get keys address = { \"line1\" : \"4/23/10\" , \"line2\" : \"Golden street\" , \"city\" : \"London\" } keys = address . keys () print ( keys ) # Output: dict_keys(['line1', 'line2', 'city'])","title":"get dict keys"},{"location":"course/python/dict/#get-dict-values","text":"use method dict.values() to get values address = { \"line1\" : \"4/23/10\" , \"line2\" : \"Golden street\" , \"city\" : \"London\" } values = address . values () print ( values ) # Output: dict_values(['4/23/10', 'Golden street', 'London'])","title":"get dict values"},{"location":"course/python/dict/#get-dict-items","text":"use method dict.items() to get items it will return data like [(key, value)] address = { \"line1\" : \"4/23/10\" , \"line2\" : \"Golden street\" , \"city\" : \"London\" } items = address . items () print ( items ) # Output: dict_items([('line1', '4/23/10'), ('line2', 'Golden street'), ('city', 'London')])","title":"get dict items"},{"location":"course/python/dict/#use-for-loop-with-dict","text":"iterate through dict product = { \"name\" : \"Ball\" , \"cost\" : 100 } for key in product : print ( key , product [ key ]) # Output: # name Ball # cost 100 iterate through dict keys product = { \"name\" : \"Ball\" , \"cost\" : 100 } for key in product . keys (): print ( key , product [ key ]) # Output: # name Ball # cost 100 iterate through dict values product = { \"name\" : \"Ball\" , \"cost\" : 100 } for val in product . values (): print ( val ) # Output: # Ball # 100 iterate through dict items product = { \"name\" : \"Ball\" , \"cost\" : 100 } for key , val in product . items (): print ( key , val ) # Output: # name Ball # cost 100","title":"use for loop with dict"},{"location":"course/python/dict/#copying-dict","text":"copy dict to keep the original dict away from modifications. use builtin constructor dict() or method dict.copy() to copy dict. product = { \"name\" : \"Ball\" , \"cost\" : 100 } product_copy1 = product . copy () product_copy1 [ \"name\" ] = \"Pen\" print ( product_copy1 ) # Output: {'name': 'Pen', 'cost': 100} print ( product ) # Output: {'name': 'Ball', 'cost': 100} product_copy2 = dict ( product ) product_copy2 [ \"name\" ] = \"Pencil\" print ( product_copy2 ) # Output: {'name': 'Pencil', 'cost': 100} print ( product ) # Output: {'name': 'Ball', 'cost': 100}","title":"copying dict"},{"location":"course/python/dict/#compare-two-dicts","text":"use == operator to compare dicts d1 = { \"one\" : 1 } d2 = { \"one\" : 1 } print ( d1 == d2 ) # Output: True","title":"compare two dicts"},{"location":"course/python/dict/#nested-dicts","text":"dict can have dicts as values students = { \"DT001\" : { \"name\" : \"John\" , \"grade\" : \"A\" }, \"DT002\" : { \"name\" : \"Anji\" , \"grade\" : \"B\" } }","title":"nested dicts"},{"location":"course/python/dict/#dict-methods","text":"Method Description clear() Removes all the elements from the dictionary copy() Returns a copy of the dictionary fromkeys() Returns a dictionary with the specified keys and value get() Returns the value of the specified key items() Returns a list containing a tuple for each key value pair keys() Returns a list containing the dictionary's keys pop() Removes the element with the specified key popitem() Removes the last inserted key-value pair setdefault() Returns the value of the specified key. If the key does not exist: insert the key, with the specified value update() Updates the dictionary with the specified key-value pairs values() Returns a list of all the values in the dictionary Read more about dict at python official docs","title":"dict Methods"},{"location":"course/python/dict/#rerefences","text":"https://docs.python.org/3/tutorial/datastructures.html#dictionaries https://python-reference.readthedocs.io/en/latest/docs/dict/","title":"Rerefences"},{"location":"course/python/exceptions/","text":"Python exceptions \u00b6 what is exception? \u00b6 Errors detected during execution are called exceptions. when to raise exceptions? \u00b6 when the unexpected input recieved when unable to proceed further with the given input python keywords for exceptions \u00b6 raise - used to throw new exception try - used to test the code which may throw an error except - used to catch the exception/error to handle it else - used to execute code when there is no error finally - used to execute the code regardless of the result of the try and except how to raise an exeption? \u00b6 pythons base exception class Exception is used to throw an exception. let's look at an example def math_div ( num1 , num2 ): if num2 == 0 : raise Exception ( \"Can't devide with zero\" ) return num1 / num2 above program used to perform the division of two numbers. division with zero can't be performed so, throwing an error. let's call the funciton with some inputs output = math_div ( 10 , 2 ) above code gives output as 5 let's look at other input output = math_div ( 10 , 0 ) above code gives the output looks like below Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 3 , in math_div Exception : Can 't devide with zero most common in-built exceptions \u00b6 Exception - base class for all user defined classes AttributeError - accessed attribute does not found EOFError - nothing to read from file ImportError - failed to import a variable/function/module IndexError - sequence subscript is out of range. KeyError - mapping key is not found NameError - a local or global name is not found SyntaxError - syntax is invalid IndentationError - inconsistent indentation ValueError - operation or function receives an argument that has the right type but an inappropriate value Read more about built-in exceptions at python official docs how to handle raised exceptions? \u00b6 use try and except keywords to handle the exception import random def get_random_number (): return random . randint ( 0 , 3 ) try : lucky_num = 100 / get_random_number () except ZeroDivisionError : print ( \"Cant devide with zero\" ) else : print ( \"you are very lucky\" ) finally : print ( \"done\" ) if get_random_number() function returns 0 then it gives below output Cant devide with zero done otherwise, it gives below output you are very lucky done Note: else and finally are optional blocks writing custom exceptions \u00b6 let's write a function to read the file if file not found then raise a custom file not found exception. import os class FileNotFoundError ( Exception ): pass def read_file ( file_path ): if not os . path . exists ( file_path ): raise FileNotFoundError ( \"File does not exists\" ) with open ( file_path , 'r' ) as _file : return _file . read () valid_file_path = \"/tmp/users.csv\" invalid_file_path = \"/tmp/no_file.csv\" print ( read_file ( valid_file_path )) print ( read_file ( invalid_file_path )) It gives output as below John , K Anji , B FileNotFoundError : File does not exists References \u00b6 https://docs.python.org/3/tutorial/errors.html https://docs.python.org/3/library/exceptions.html","title":"Python exceptions"},{"location":"course/python/exceptions/#python-exceptions","text":"","title":"Python exceptions"},{"location":"course/python/exceptions/#what-is-exception","text":"Errors detected during execution are called exceptions.","title":"what is exception?"},{"location":"course/python/exceptions/#when-to-raise-exceptions","text":"when the unexpected input recieved when unable to proceed further with the given input","title":"when to raise exceptions?"},{"location":"course/python/exceptions/#python-keywords-for-exceptions","text":"raise - used to throw new exception try - used to test the code which may throw an error except - used to catch the exception/error to handle it else - used to execute code when there is no error finally - used to execute the code regardless of the result of the try and except","title":"python keywords for exceptions"},{"location":"course/python/exceptions/#how-to-raise-an-exeption","text":"pythons base exception class Exception is used to throw an exception. let's look at an example def math_div ( num1 , num2 ): if num2 == 0 : raise Exception ( \"Can't devide with zero\" ) return num1 / num2 above program used to perform the division of two numbers. division with zero can't be performed so, throwing an error. let's call the funciton with some inputs output = math_div ( 10 , 2 ) above code gives output as 5 let's look at other input output = math_div ( 10 , 0 ) above code gives the output looks like below Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 3 , in math_div Exception : Can 't devide with zero","title":"how to raise an exeption?"},{"location":"course/python/exceptions/#most-common-in-built-exceptions","text":"Exception - base class for all user defined classes AttributeError - accessed attribute does not found EOFError - nothing to read from file ImportError - failed to import a variable/function/module IndexError - sequence subscript is out of range. KeyError - mapping key is not found NameError - a local or global name is not found SyntaxError - syntax is invalid IndentationError - inconsistent indentation ValueError - operation or function receives an argument that has the right type but an inappropriate value Read more about built-in exceptions at python official docs","title":"most common in-built exceptions"},{"location":"course/python/exceptions/#how-to-handle-raised-exceptions","text":"use try and except keywords to handle the exception import random def get_random_number (): return random . randint ( 0 , 3 ) try : lucky_num = 100 / get_random_number () except ZeroDivisionError : print ( \"Cant devide with zero\" ) else : print ( \"you are very lucky\" ) finally : print ( \"done\" ) if get_random_number() function returns 0 then it gives below output Cant devide with zero done otherwise, it gives below output you are very lucky done Note: else and finally are optional blocks","title":"how to handle raised exceptions?"},{"location":"course/python/exceptions/#writing-custom-exceptions","text":"let's write a function to read the file if file not found then raise a custom file not found exception. import os class FileNotFoundError ( Exception ): pass def read_file ( file_path ): if not os . path . exists ( file_path ): raise FileNotFoundError ( \"File does not exists\" ) with open ( file_path , 'r' ) as _file : return _file . read () valid_file_path = \"/tmp/users.csv\" invalid_file_path = \"/tmp/no_file.csv\" print ( read_file ( valid_file_path )) print ( read_file ( invalid_file_path )) It gives output as below John , K Anji , B FileNotFoundError : File does not exists","title":"writing custom exceptions"},{"location":"course/python/exceptions/#references","text":"https://docs.python.org/3/tutorial/errors.html https://docs.python.org/3/library/exceptions.html","title":"References"},{"location":"course/python/for-loop/","text":"for loop is used for iterating over a sequence sequence can be a list, a tuple, a dictionary, a set, or a string. for loop has a finite number of iterations Prerequisites \u00b6 requires knowledge of list , tuple , dict , set , string and frozenset for loop syntax \u00b6 for val in sequence : statement print student names - iteration \u00b6 write a program to print all names in a given list. the names are \"Anji\", \"Harika\" and \"Angelica\" names = [ \"Anji\" , \"Harika\" , \"Angelica\" ] for name in names : print ( name ) # Output: # Anji # Harika # Angelica use continue keyword with for loop \u00b6 use continue keyword when we want to skip the execution of an iteration write program to print square of the given numbers i.e numbers = [1,2,3,4,5,6] and skip the number if number divisible by 3 numbers = [ 1 , 2 , 3 , 4 , 5 , 6 ] for num in numbers : if ( num % 3 == 0 ): print ( f 'skipped num= { num } ' ) continue print ( f 'square = { num ** 2 } ' ) # Output: # square = 1 # square = 4 # skipped num=3 # square = 16 # square = 25 # skipped num=6 use range() with for loop \u00b6 range() is builtin python function to create a range of numbers. syntax: range(start, end, step) default start=0, step=1 write a program to print numbers from 1 to 5 using range() function. for num in range ( 1 , 6 ): print ( num ) # output: # 1 # 2 # 3 # 4 # 5 write a program to print even numbers between 0 and 5 using range() function. for num in range ( 2 , 6 , 2 ): print ( num ) # output: # 2 # 4 use break keyword in for loop \u00b6 use break keyword if we want to stop the execution of for loop. write a program to print all numbers in given list of numbers but if stop the execution if numer 7 found. numbers = [ 1 , 2 , 7 , 3 , 4 ] for num in numbers : if num == 7 : break print ( num ) # output # 1 # 2 nested for loop \u00b6 for loop can be nested if required write program to print permutations of a string string = \"ABC\" for l1 in string : for l2 in string : print ( l1 , l2 ) # output: # A A # A B # A C # B A # B B # B C # C A # C B # C C word freequency counter \u00b6 write a program to count total number words in a given text. text = 'You know New York, you need New York' words_list = text . split (); counter = {} for word in words_list : word_count = counter . get ( word ) if word_count is None : counter [ word ] = 1 else : counter [ word ] = counter [ word ] + 1 print ( counter ) # output: {'You': 1, 'know': 1, 'New': 2, 'York,': 1, 'you': 1, 'need': 1, 'York': 1} References \u00b6 https://docs.python.org/3/tutorial/controlflow.html#for-statements","title":"Python for loop"},{"location":"course/python/for-loop/#prerequisites","text":"requires knowledge of list , tuple , dict , set , string and frozenset","title":"Prerequisites"},{"location":"course/python/for-loop/#for-loop-syntax","text":"for val in sequence : statement","title":"for loop syntax"},{"location":"course/python/for-loop/#print-student-names-iteration","text":"write a program to print all names in a given list. the names are \"Anji\", \"Harika\" and \"Angelica\" names = [ \"Anji\" , \"Harika\" , \"Angelica\" ] for name in names : print ( name ) # Output: # Anji # Harika # Angelica","title":"print student names - iteration"},{"location":"course/python/for-loop/#use-continue-keyword-with-for-loop","text":"use continue keyword when we want to skip the execution of an iteration write program to print square of the given numbers i.e numbers = [1,2,3,4,5,6] and skip the number if number divisible by 3 numbers = [ 1 , 2 , 3 , 4 , 5 , 6 ] for num in numbers : if ( num % 3 == 0 ): print ( f 'skipped num= { num } ' ) continue print ( f 'square = { num ** 2 } ' ) # Output: # square = 1 # square = 4 # skipped num=3 # square = 16 # square = 25 # skipped num=6","title":"use continue keyword with for loop"},{"location":"course/python/for-loop/#use-range-with-for-loop","text":"range() is builtin python function to create a range of numbers. syntax: range(start, end, step) default start=0, step=1 write a program to print numbers from 1 to 5 using range() function. for num in range ( 1 , 6 ): print ( num ) # output: # 1 # 2 # 3 # 4 # 5 write a program to print even numbers between 0 and 5 using range() function. for num in range ( 2 , 6 , 2 ): print ( num ) # output: # 2 # 4","title":"use range() with for loop"},{"location":"course/python/for-loop/#use-break-keyword-in-for-loop","text":"use break keyword if we want to stop the execution of for loop. write a program to print all numbers in given list of numbers but if stop the execution if numer 7 found. numbers = [ 1 , 2 , 7 , 3 , 4 ] for num in numbers : if num == 7 : break print ( num ) # output # 1 # 2","title":"use break keyword in for loop"},{"location":"course/python/for-loop/#nested-for-loop","text":"for loop can be nested if required write program to print permutations of a string string = \"ABC\" for l1 in string : for l2 in string : print ( l1 , l2 ) # output: # A A # A B # A C # B A # B B # B C # C A # C B # C C","title":"nested for loop"},{"location":"course/python/for-loop/#word-freequency-counter","text":"write a program to count total number words in a given text. text = 'You know New York, you need New York' words_list = text . split (); counter = {} for word in words_list : word_count = counter . get ( word ) if word_count is None : counter [ word ] = 1 else : counter [ word ] = counter [ word ] + 1 print ( counter ) # output: {'You': 1, 'know': 1, 'New': 2, 'York,': 1, 'you': 1, 'need': 1, 'York': 1}","title":"word freequency counter"},{"location":"course/python/for-loop/#references","text":"https://docs.python.org/3/tutorial/controlflow.html#for-statements","title":"References"},{"location":"course/python/frozensets/","text":"A frozenset is an unordered collection of unique and hashable objects. So, lists and dictionaries cannot be members of a frozenset. A tuple can be a member if and only if all its members are immutable. A frozenset is immutable and hashable. A frozenset has to be created using the frozenset() function. create a frozenset \u00b6 students = [ \"John\" , \"Anji\" , \"Charles\" ] students_set = frozenset ( students ) print ( type ( students_set )) # Output: <class 'frozenset'> print ( students_set ) # Output: frozenset({'Anji', 'John', 'Charles'}) elements are unique \u00b6 numbers = ( 1 , 2 , 3 , 4 , 1 , 2 , 6 , 8 , 9 , 10 ) unique_numbers = frozenset ( numbers ) print ( unique_numbers ) # Output: frozenset({1, 2, 3, 4, 6, 8, 9, 10}) convert string to a frozenset \u00b6 string = \"Python is awesome\" fset = frozenset ( string ) print ( fset ) # Output: frozenset({'a', 'w', 't', 'o', 'h', 'i', 'e', 'P', ' ', 'n', 's', 'y', 'm'}) find set difference \u00b6 mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) diff = mammals - fliers print ( diff ) # Output: frozenset({'Lion', 'Deer'}) print ( mammals . difference ( fliers )) # Output: frozenset({'Lion', 'Deer'}) find set symmetric difference \u00b6 mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) diff = mammals ^ fliers print ( diff ) # Output: frozenset({'Deer', 'Eagle', 'Lion', 'Parrot'}) print ( mammals . symmetric_difference ( fliers )) # Output: frozenset({'Deer', 'Eagle', 'Lion', 'Parrot'}) find union of sets \u00b6 mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) union = mammals | fliers print ( union ) # Output: frozenset({'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'}) print ( mammals . union ( fliers )) # Output: frozenset({'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'}) find intersection of sets \u00b6 mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) common = mammals & fliers print ( common ) # Output: frozenset({'Bat'}) print ( mammals . intersection ( fliers )) # Output: frozenset({'Bat'}) check if sets are disjoint \u00b6 mammals = frozenset ([ \"Lion\" , \"Deer\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) is_disjoint = mammals . isdisjoint ( fliers ) print ( is_disjoint ) # Output: True check if set is subset of another set \u00b6 s1 = frozenset ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ]) s2 = frozenset ([ 1 , 2 ]) print ( s2 . issubset ( s1 )) # Output: True check if set is superset of another set \u00b6 s1 = frozenset ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ]) s2 = frozenset ([ 1 , 2 ]) print ( s1 . issuperset ( s2 )) # Output: True Note: union , intersection , difference , symmetric_difference , issubset , issuperset methods will accept any iterable as an argument. using in and not in with fronzensets \u00b6 presidents = frozenset ([ \"Rajendra Prasad\" , \"Sarvepalli Radhakrishnan\" , \"Zakir Husain\" , \"V. V. Giri\" , \"Fakhruddin Ali Ahmed\" , \"Neelam Sanjiva Reddy\" ]) print ( \"Anji\" in presidents ) # Output: False print ( \"Anji\" not in presidents ) # Output: True References \u00b6 https://docs.python.org/3/library/stdtypes.html#frozenset https://en.wikipedia.org/wiki/Set_(mathematics )","title":"Python frozensets"},{"location":"course/python/frozensets/#create-a-frozenset","text":"students = [ \"John\" , \"Anji\" , \"Charles\" ] students_set = frozenset ( students ) print ( type ( students_set )) # Output: <class 'frozenset'> print ( students_set ) # Output: frozenset({'Anji', 'John', 'Charles'})","title":"create a frozenset"},{"location":"course/python/frozensets/#elements-are-unique","text":"numbers = ( 1 , 2 , 3 , 4 , 1 , 2 , 6 , 8 , 9 , 10 ) unique_numbers = frozenset ( numbers ) print ( unique_numbers ) # Output: frozenset({1, 2, 3, 4, 6, 8, 9, 10})","title":"elements are unique"},{"location":"course/python/frozensets/#convert-string-to-a-frozenset","text":"string = \"Python is awesome\" fset = frozenset ( string ) print ( fset ) # Output: frozenset({'a', 'w', 't', 'o', 'h', 'i', 'e', 'P', ' ', 'n', 's', 'y', 'm'})","title":"convert string to a frozenset"},{"location":"course/python/frozensets/#find-set-difference","text":"mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) diff = mammals - fliers print ( diff ) # Output: frozenset({'Lion', 'Deer'}) print ( mammals . difference ( fliers )) # Output: frozenset({'Lion', 'Deer'})","title":"find set difference"},{"location":"course/python/frozensets/#find-set-symmetric-difference","text":"mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) diff = mammals ^ fliers print ( diff ) # Output: frozenset({'Deer', 'Eagle', 'Lion', 'Parrot'}) print ( mammals . symmetric_difference ( fliers )) # Output: frozenset({'Deer', 'Eagle', 'Lion', 'Parrot'})","title":"find set symmetric difference"},{"location":"course/python/frozensets/#find-union-of-sets","text":"mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) union = mammals | fliers print ( union ) # Output: frozenset({'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'}) print ( mammals . union ( fliers )) # Output: frozenset({'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'})","title":"find union of sets"},{"location":"course/python/frozensets/#find-intersection-of-sets","text":"mammals = frozenset ([ \"Lion\" , \"Deer\" , \"Bat\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) common = mammals & fliers print ( common ) # Output: frozenset({'Bat'}) print ( mammals . intersection ( fliers )) # Output: frozenset({'Bat'})","title":"find intersection of sets"},{"location":"course/python/frozensets/#check-if-sets-are-disjoint","text":"mammals = frozenset ([ \"Lion\" , \"Deer\" ]) fliers = frozenset ([ \"Parrot\" , \"Eagle\" , \"Bat\" ]) is_disjoint = mammals . isdisjoint ( fliers ) print ( is_disjoint ) # Output: True","title":"check if sets are disjoint"},{"location":"course/python/frozensets/#check-if-set-is-subset-of-another-set","text":"s1 = frozenset ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ]) s2 = frozenset ([ 1 , 2 ]) print ( s2 . issubset ( s1 )) # Output: True","title":"check if set is subset of another set"},{"location":"course/python/frozensets/#check-if-set-is-superset-of-another-set","text":"s1 = frozenset ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ]) s2 = frozenset ([ 1 , 2 ]) print ( s1 . issuperset ( s2 )) # Output: True Note: union , intersection , difference , symmetric_difference , issubset , issuperset methods will accept any iterable as an argument.","title":"check if set is superset of another set"},{"location":"course/python/frozensets/#using-in-and-not-in-with-fronzensets","text":"presidents = frozenset ([ \"Rajendra Prasad\" , \"Sarvepalli Radhakrishnan\" , \"Zakir Husain\" , \"V. V. Giri\" , \"Fakhruddin Ali Ahmed\" , \"Neelam Sanjiva Reddy\" ]) print ( \"Anji\" in presidents ) # Output: False print ( \"Anji\" not in presidents ) # Output: True","title":"using in and not in with fronzensets"},{"location":"course/python/frozensets/#references","text":"https://docs.python.org/3/library/stdtypes.html#frozenset https://en.wikipedia.org/wiki/Set_(mathematics )","title":"References"},{"location":"course/python/functions/","text":"A function is a block of code which only runs when it is called. why to use function \u00b6 Automate repetitive tasks Allow code reuse Improve code readability Clean-up code Allow easier refactoring keywords \u00b6 def - function start return - return result of function pass - do nothing python function syntax \u00b6 def < function_name > ( < params > ): # <statement> # <statement> return < value > find factorial of a number \u00b6 write a function to find the factorial of a given number def factorial ( number ): result = 1 for i in range ( 1 , number + 1 ): result = result * i return result # call the function print ( factorial ( 4 )) # Output: 24 print ( factorial ( 5 )) # Output: 120 one line function - lambda \u00b6 we can write a one line function using keyword \"lambda\" square = lambda x : x ** 2 print ( square ( 5 )) # output: 25 default params \u00b6 we can pass default params to a function def add ( x = 10 , y = 20 ): return x + y # called func with no arguments default = add () print ( default ) # output: 30 # call func with arguments result = add ( 1 , 2 ) print ( result ) # output: 3 positional argumets & keyword arguments \u00b6 we call a function without keyword arguments then it considers the position and assigns values accordingly. otherwise, we need to pass value with keyword. check the below examples def pow ( x , y ): return x ** y # call by positional argument result = add ( 3 , 2 ) print ( result ) # output: 9 # call by keyword argument result = add ( y = 3 , x = 2 ) print ( result ) # output: 8 number of params are unknown - *args, **kwargs \u00b6 *args are used when number of params are unknown. **kwargs are used when number of keyword params are unknown chek the below examples def sum ( * args ): total = 0 for num in args : total += num return total print ( sum ( 1 , 2 )) # output: 3 print ( sum ( 1 , 2 , 3 )) # output: 6 print ( sum ( 1 , 2 , 3 , 4 , 5 )) # output: 15 *args results in a tuple. hence, we can iterate over it. def print_data ( ** kwargs ): for k , v in kwargs . items (): print ( f ' { k } = { v } ' ) print ( print_data ( first_name = \"Anji\" , last_name = \"B\" )) # output: # first_name = Anji # last_name = B print ( print_data ( physics = \"PHY\" , maths = \"MAT\" , social = \"SOC\" )) # output: # physics = PHY # maths = MAT # social = SOC **kwargs gives a dictionary. so, we can use dict methods and iterate over it. References \u00b6 https://docs.python.org/3/tutorial/controlflow.html#defining-functions","title":"Python functions"},{"location":"course/python/functions/#why-to-use-function","text":"Automate repetitive tasks Allow code reuse Improve code readability Clean-up code Allow easier refactoring","title":"why to use function"},{"location":"course/python/functions/#keywords","text":"def - function start return - return result of function pass - do nothing","title":"keywords"},{"location":"course/python/functions/#python-function-syntax","text":"def < function_name > ( < params > ): # <statement> # <statement> return < value >","title":"python function syntax"},{"location":"course/python/functions/#find-factorial-of-a-number","text":"write a function to find the factorial of a given number def factorial ( number ): result = 1 for i in range ( 1 , number + 1 ): result = result * i return result # call the function print ( factorial ( 4 )) # Output: 24 print ( factorial ( 5 )) # Output: 120","title":"find factorial of a number"},{"location":"course/python/functions/#one-line-function-lambda","text":"we can write a one line function using keyword \"lambda\" square = lambda x : x ** 2 print ( square ( 5 )) # output: 25","title":"one line function - lambda"},{"location":"course/python/functions/#default-params","text":"we can pass default params to a function def add ( x = 10 , y = 20 ): return x + y # called func with no arguments default = add () print ( default ) # output: 30 # call func with arguments result = add ( 1 , 2 ) print ( result ) # output: 3","title":"default params"},{"location":"course/python/functions/#positional-argumets-keyword-arguments","text":"we call a function without keyword arguments then it considers the position and assigns values accordingly. otherwise, we need to pass value with keyword. check the below examples def pow ( x , y ): return x ** y # call by positional argument result = add ( 3 , 2 ) print ( result ) # output: 9 # call by keyword argument result = add ( y = 3 , x = 2 ) print ( result ) # output: 8","title":"positional argumets &amp; keyword arguments"},{"location":"course/python/functions/#number-of-params-are-unknown-args-kwargs","text":"*args are used when number of params are unknown. **kwargs are used when number of keyword params are unknown chek the below examples def sum ( * args ): total = 0 for num in args : total += num return total print ( sum ( 1 , 2 )) # output: 3 print ( sum ( 1 , 2 , 3 )) # output: 6 print ( sum ( 1 , 2 , 3 , 4 , 5 )) # output: 15 *args results in a tuple. hence, we can iterate over it. def print_data ( ** kwargs ): for k , v in kwargs . items (): print ( f ' { k } = { v } ' ) print ( print_data ( first_name = \"Anji\" , last_name = \"B\" )) # output: # first_name = Anji # last_name = B print ( print_data ( physics = \"PHY\" , maths = \"MAT\" , social = \"SOC\" )) # output: # physics = PHY # maths = MAT # social = SOC **kwargs gives a dictionary. so, we can use dict methods and iterate over it.","title":"number of params are unknown - *args, **kwargs"},{"location":"course/python/functions/#references","text":"https://docs.python.org/3/tutorial/controlflow.html#defining-functions","title":"References"},{"location":"course/python/getting-started/","text":"What is a program? \u00b6 A program is a sequence of instructions that tells how to solve a given problem. For example, Finding a square of a number. Basic terminology of programming \u00b6 Input : Get data from the keyboard, a file, or some other device. Math : Perform basic mathematical operations like addition and multiplication. Conditional execution : Check for certain conditions and execute the appropriate sequence of statements. Repetition : Perform some action repeatedly, usually with some variation. Output : Display data on the screen or send data to a file or other device. Python installation \u00b6 Before start programming in python, we have to install python software. To install python software go to https://www.python.org/downloads/ and download and install the python software which is compatible with your operating system. Python program - \"Hello World\" \u00b6 print ( \"Hello World\" ) when we run the above code the python interpreter will give output Hello World . Python Indentation \u00b6 Indentation refers to the spaces at the beginning of a code line. Python uses indentation to indicate a block of code. Indentation improves the code readability Python Comments \u00b6 Comments are used to explain Python code. Comments are used to make the code more readable. Comments are used to prevent execution when testing code. Comments starts with a #, and Python will ignore them: Example: #This is a comment print ( \"Hello, World!\" )","title":"Getting started"},{"location":"course/python/getting-started/#what-is-a-program","text":"A program is a sequence of instructions that tells how to solve a given problem. For example, Finding a square of a number.","title":"What is a program?"},{"location":"course/python/getting-started/#basic-terminology-of-programming","text":"Input : Get data from the keyboard, a file, or some other device. Math : Perform basic mathematical operations like addition and multiplication. Conditional execution : Check for certain conditions and execute the appropriate sequence of statements. Repetition : Perform some action repeatedly, usually with some variation. Output : Display data on the screen or send data to a file or other device.","title":"Basic terminology of programming"},{"location":"course/python/getting-started/#python-installation","text":"Before start programming in python, we have to install python software. To install python software go to https://www.python.org/downloads/ and download and install the python software which is compatible with your operating system.","title":"Python installation"},{"location":"course/python/getting-started/#python-program-hello-world","text":"print ( \"Hello World\" ) when we run the above code the python interpreter will give output Hello World .","title":"Python program - \"Hello World\""},{"location":"course/python/getting-started/#python-indentation","text":"Indentation refers to the spaces at the beginning of a code line. Python uses indentation to indicate a block of code. Indentation improves the code readability","title":"Python Indentation"},{"location":"course/python/getting-started/#python-comments","text":"Comments are used to explain Python code. Comments are used to make the code more readable. Comments are used to prevent execution when testing code. Comments starts with a #, and Python will ignore them: Example: #This is a comment print ( \"Hello, World!\" )","title":"Python Comments"},{"location":"course/python/inheritance/","text":"Python Inheritance \u00b6 Prerequisite \u00b6 Python Class About inheritance \u00b6 Aquiring methods and attributes/properties from other class to the current class. say class B inherit class A then A is parent/base class to class B and B is child/derived class to class A When to use inheritance? \u00b6 when you have common properties and/or methods It's mostly for code reusability Quck example \u00b6 Let's say in an organization we have HR, Engineer, Legal Advisor All all employees of the organization so, they share common properties like name, id, address, dob, salary, etc. But, they will have different designation They also share common behaviours like profile/details, etc. Let's write the code. class Employee : def __init__ ( self , uid , name , role , salary ): self . uid = uid self . name = name self . role = role self . salary = salary def get_details ( self ): data = { \"id\" : self . uid , \"name\" : self . name , \"role\" : self . role } return data class HR ( Employee ): def __init__ ( self , uid , name ): role = \"HR\" salary = 50000 super () . __init__ ( uid , name , role , salary ) class Engineer ( Employee ): def __init__ ( self , uid , name ): role = \"Engineer\" salary = 40000 super () . __init__ ( uid , name , role , salary ) class Advisor ( Employee ): def __init__ ( self , uid , name ): role = \"Advisor\" salary = 60000 super () . __init__ ( uid , name , role , salary ) # let's create objects hr = HR ( \"AB1\" , \"John\" ) engineer = Engineer ( \"AB2\" , \"Akshaya\" ) advisor = Advisor ( \"AB3\" , \"Shiva\" ) for emp in [ hr , engineer , advisor ]: print ( emp . get_details ()) Above code gives the below output {'id': 'AB1', 'name': 'John', 'role': 'HR'} {'id': 'AB2', 'name': 'Akshaya', 'role': 'Engineer'} {'id': 'AB3', 'name': 'Shiva', 'role': 'Advisor'} If you look at the above code we have written most of the code in parent/base class Employee and inherited it in all child classes like HR , Engineer , Advisor . we reused parent class methods __init__ , get_details in the child classes \" super \" allows us to call the parent/base class methods. Take aways Code reusability Less code Readability Maintainability [i.e less code modifications for common feature] Types of inheritance \u00b6 Single inheritance Multi-level inheritance Multiple inheritance Hierarchical Inheritance Hybrid inheritance Single inheritance \u00b6 A derived class is created from a single base class. class A : pass class B ( A ): pass Multi-level inheritance \u00b6 a derived class is created from another derived class. class A : pass class B ( A ): pass class C ( B ): pass In above code, A inherits B and C inherits B B will have properties of A C will have properties of both A and B Multiple inheritance \u00b6 A derived class is created from more than one base class. class A : pass class B : pass class C ( A , B ): pass In above code, A and B are base classes C aquires properties from both A and B No dependency between A and B Hierarchical Inheritance \u00b6 More than one derived class is created from a single base class and further child classes act as parent classes for more than one child class. class A : pass class B ( A ): pass class C ( A ): pass class D ( B ): pass class E ( B ): pass class F ( C ): pass class G ( C ): pass From the above code, class A has two children B and C . Further, B and C both are having two children D and E ; and F and G respectively. It forms a tree like structure. Hybrid inheritance \u00b6 It's a combination of more than one inheritance. Hence, it may be a combination of Multilevel and Multiple or Hierarchical and Multilevel or Hierarchical , Multilevel and Multiple inheritances. Try avoid this kind of inheritance. Keep your code simple and loosely coupled. Method Resolution Order - MRO \u00b6 This case occurs when we inherit multiple classes with same attibutes and/or methods then the order of method/attributes execution priority changes as below child class > first inherited class > next inherited class > ... Let's look at an example class A : def who_are_you ( self ): print ( \"I'm A\" ) class B : def who_are_you ( self ): print ( \"I'm B\" ) class C : def who_are_you ( self ): print ( \"I'm C\" ) class D ( B , C , A ): pass class E ( B , C , A ): def who_are_you ( self ): print ( \"I'm E\" ) class F ( A , B , C ): pass d = D () d . who_are_you () # ouput: I'm B e = E () e . who_are_you () # ouput: I'm E f = F () f . who_are_you () # ouput: I'm A from the above code we can see that child class has high priority over inherited classes. first inherited class will have the next priority and so on.","title":"Python inheritance"},{"location":"course/python/inheritance/#python-inheritance","text":"","title":"Python Inheritance"},{"location":"course/python/inheritance/#prerequisite","text":"Python Class","title":"Prerequisite"},{"location":"course/python/inheritance/#about-inheritance","text":"Aquiring methods and attributes/properties from other class to the current class. say class B inherit class A then A is parent/base class to class B and B is child/derived class to class A","title":"About inheritance"},{"location":"course/python/inheritance/#when-to-use-inheritance","text":"when you have common properties and/or methods It's mostly for code reusability","title":"When to use inheritance?"},{"location":"course/python/inheritance/#quck-example","text":"Let's say in an organization we have HR, Engineer, Legal Advisor All all employees of the organization so, they share common properties like name, id, address, dob, salary, etc. But, they will have different designation They also share common behaviours like profile/details, etc. Let's write the code. class Employee : def __init__ ( self , uid , name , role , salary ): self . uid = uid self . name = name self . role = role self . salary = salary def get_details ( self ): data = { \"id\" : self . uid , \"name\" : self . name , \"role\" : self . role } return data class HR ( Employee ): def __init__ ( self , uid , name ): role = \"HR\" salary = 50000 super () . __init__ ( uid , name , role , salary ) class Engineer ( Employee ): def __init__ ( self , uid , name ): role = \"Engineer\" salary = 40000 super () . __init__ ( uid , name , role , salary ) class Advisor ( Employee ): def __init__ ( self , uid , name ): role = \"Advisor\" salary = 60000 super () . __init__ ( uid , name , role , salary ) # let's create objects hr = HR ( \"AB1\" , \"John\" ) engineer = Engineer ( \"AB2\" , \"Akshaya\" ) advisor = Advisor ( \"AB3\" , \"Shiva\" ) for emp in [ hr , engineer , advisor ]: print ( emp . get_details ()) Above code gives the below output {'id': 'AB1', 'name': 'John', 'role': 'HR'} {'id': 'AB2', 'name': 'Akshaya', 'role': 'Engineer'} {'id': 'AB3', 'name': 'Shiva', 'role': 'Advisor'} If you look at the above code we have written most of the code in parent/base class Employee and inherited it in all child classes like HR , Engineer , Advisor . we reused parent class methods __init__ , get_details in the child classes \" super \" allows us to call the parent/base class methods. Take aways Code reusability Less code Readability Maintainability [i.e less code modifications for common feature]","title":"Quck example"},{"location":"course/python/inheritance/#types-of-inheritance","text":"Single inheritance Multi-level inheritance Multiple inheritance Hierarchical Inheritance Hybrid inheritance","title":"Types of inheritance"},{"location":"course/python/inheritance/#single-inheritance","text":"A derived class is created from a single base class. class A : pass class B ( A ): pass","title":"Single inheritance"},{"location":"course/python/inheritance/#multi-level-inheritance","text":"a derived class is created from another derived class. class A : pass class B ( A ): pass class C ( B ): pass In above code, A inherits B and C inherits B B will have properties of A C will have properties of both A and B","title":"Multi-level inheritance"},{"location":"course/python/inheritance/#multiple-inheritance","text":"A derived class is created from more than one base class. class A : pass class B : pass class C ( A , B ): pass In above code, A and B are base classes C aquires properties from both A and B No dependency between A and B","title":"Multiple inheritance"},{"location":"course/python/inheritance/#hierarchical-inheritance","text":"More than one derived class is created from a single base class and further child classes act as parent classes for more than one child class. class A : pass class B ( A ): pass class C ( A ): pass class D ( B ): pass class E ( B ): pass class F ( C ): pass class G ( C ): pass From the above code, class A has two children B and C . Further, B and C both are having two children D and E ; and F and G respectively. It forms a tree like structure.","title":"Hierarchical Inheritance"},{"location":"course/python/inheritance/#hybrid-inheritance","text":"It's a combination of more than one inheritance. Hence, it may be a combination of Multilevel and Multiple or Hierarchical and Multilevel or Hierarchical , Multilevel and Multiple inheritances. Try avoid this kind of inheritance. Keep your code simple and loosely coupled.","title":"Hybrid inheritance"},{"location":"course/python/inheritance/#method-resolution-order-mro","text":"This case occurs when we inherit multiple classes with same attibutes and/or methods then the order of method/attributes execution priority changes as below child class > first inherited class > next inherited class > ... Let's look at an example class A : def who_are_you ( self ): print ( \"I'm A\" ) class B : def who_are_you ( self ): print ( \"I'm B\" ) class C : def who_are_you ( self ): print ( \"I'm C\" ) class D ( B , C , A ): pass class E ( B , C , A ): def who_are_you ( self ): print ( \"I'm E\" ) class F ( A , B , C ): pass d = D () d . who_are_you () # ouput: I'm B e = E () e . who_are_you () # ouput: I'm E f = F () f . who_are_you () # ouput: I'm A from the above code we can see that child class has high priority over inherited classes. first inherited class will have the next priority and so on.","title":"Method Resolution Order - MRO"},{"location":"course/python/itertools/","text":"why itertools? \u00b6 itertools is a built-in module in Python for handling iterables. It provides a number of fast, memory-efficient way of looping through iterables to achieve different desired results. It is a powerful yet under-rated module that every data scientist should know in order to write clean, elegant and readable code in Python. Infinite iterators \u00b6 count() \u00b6 count is a infinite iterator it takes two arguments start , step By default start=0 and step=1 It will continuously generate the numbers indefinitely unless we stop it. from itertools import count def count_5 (): counter = count () for c in counter : print ( c ) if c == 5 : break def five_multiples_5 (): counter = count ( start = 5 , step = 5 ) stop = 1 for c in counter : print ( c ) if stop == 5 : break stop += 1 count_5 () # output: # 0 # 1 # 2 # 3 # 4 # 5 five_multiples_5 () # output: # 5 # 10 # 15 # 20 # 25 cycle() \u00b6 The cycle() function accepts an iterable and generates an infinite iterator from itertools import cycle seq = [ 1 , 2 , 3 ] iterator = cycle ( seq ) c = 0 for num in iterator : c = c + 1 print ( num ) if c == 6 : break # output: # 1 # 2 # 3 # 1 # 2 # 3 repeat() \u00b6 it repeats the given element n number of times if defined otherwise it will repeat it endlessly. repeat returns an iterator syntax repeat ( element , n_times ) lets look at an example from itertools import repeat repeater = repeat ( 2 , 10 ) print ( list ( repeater )) # output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2] let's generate the square numbers using itertools.repeat from itertools import repeat squares = map ( pow , range ( 1 , 10 ), repeat ( 2 , 10 )) print ( list ( squares )) # output: [1, 4, 9, 16, 25, 36, 49, 64, 81] Itertools functions \u00b6 accumulate() \u00b6 It accumulates the given iterable with operator.add or any other function if provided. from itertools import accumulate sums = accumulate ([ 1 , 2 , 3 , 4 , 5 ]) print ( list ( sums )) # output: [1, 3, 6, 10, 15] muls = accumulate ([ 1 , 2 , 3 , 4 , 5 ], lambda x , y : x * y ) print ( list ( muls )) # output: [1, 2, 6, 24, 120] chain() \u00b6 itertools.chain is a generator function which accepts iterables as arguments. The function starts by iteratively returning each element from the first argument until it is exhausted. from itertools import chain alphabets = [ 'a' , 'b' , 'c' , 'd' , 'e' ] numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] iterator = chain ( alphabets , numbers ) print ( list ( iterator )) # output: ['a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] chain.from_iterable() \u00b6 it's an alternate constructor for itertools.chain . Gets chained inputs from a single iterable argument that is evaluated lazily let's look at examples from itertools import chain iterator = chain . from_iterable ([[ 1 , 2 ], [ 3 , 4 ], 'ABC' ]) print ( list ( iterator )) # output: [1, 2, 3, 4, 'A', 'B', 'C'] compress() \u00b6 Make an iterator that filters elements from data returning only those that have a corresponding element in selectors that evaluates to True. Stops when either the data or selectors iterables has been exhausted. from itertools import compress iterator = compress ( 'ABCDEFGHIJ' , [ True , False , True ]) print ( list ( iterator )) # output: ['A', 'C'] iterator = compress ( 'ABCDEFGHIJ' , [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]) print ( list ( iterator )) # output: ['B', 'D', 'F', 'H', 'J'] dropwhile() \u00b6 Make an iterator that drops elements from the iterable as long as the predicate is true ; from itertools import dropwhile numbers = [ 2 , 4 , 6 , 8 , 9 , 10 , 11 , 12 ] func = lambda x : x % 2 == 0 iterator = dropwhile ( func , numbers ) print ( list ( iterator )) # output: [9, 10, 11, 12] filterfalse() \u00b6 Make an iterator that filters elements from iterable returning only those for which the predicate is False . from itertools import filterfalse numbers = [ 2 , 4 , 6 , 8 , 9 , 10 , 11 , 12 ] func = lambda x : x % 2 == 0 iterator = filterfalse ( func , numbers ) print ( list ( iterator )) # output: [9, 11] groupby() \u00b6 Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. from itertools import groupby data = [ { 'name' : 'satyajit' , 'address' : 'btm' , 'pin' : 560076 }, { 'name' : 'Preetam' , 'address' : 'btm' , 'pin' : 560076 }, { 'name' : 'Mukul' , 'address' : 'Silk board' , 'pin' : 560078 }, { 'name' : 'John' , 'address' : 'Gold board' , 'pin' : 560076 }, ] iterator = groupby ( data , lambda x : x [ 'pin' ]) for key , group in iterator : print ( key , list ( group )) # output: # 560076 [{'name': 'satyajit', 'address': 'btm', 'pin': 560076}, {'name': 'Preetam', 'address': 'btm', 'pin': 560076}] # 560078 [{'name': 'Mukul', 'address': 'Silk board', 'pin': 560078}] # 560076 [{'name': 'John', 'address': 'Gold board', 'pin': 560076}] islice() \u00b6 Make an iterator that returns selected elements from the iterable. It works just like normal python slicing except it returns an iterator. from collections import islice iterator = islice ( \"hello python\" , 0 , 8 , 2 ) print ( list ( iterator )) # output: ['h', 'l', 'o', 'p'] pairwise() \u00b6 Return successive overlapping pairs taken from the input iterable. from itertools import pairwise print ( list ( pairwise ( 'ABCD' ))) # output: [('A', 'B'), ('B', 'C'), ('C', 'D')] print ( list ( pairwise ([ 1 , 2 , 3 , 4 ]))) # output: [(1, 2), (2, 3), (3, 4)] starmap() \u00b6 Make an iterator that computes the function using arguments obtained from the iterable. from itertools import starmap print ( list ( starmap ( pow , [( 2 , 4 ), ( 3 , 4 ), ( 4 , 4 )]))) # output: [16, 81, 256] takewhile() \u00b6 Make an iterator that returns elements from the iterable as long as the predicate is true. from itertools import takewhile def even ( num ): return num % 2 == 0 print ( list ( takewhile ( even , [ 2 , 4 , 6 , 8 , 10 , 11 , 12 , 14 ]))) # output: [2, 4, 6, 8, 10] tee() \u00b6 Return n independent iterators from a single iterable. from itertools import tee items = [ 1 , 2 , 3 , 4 ] iterable = iter ( items ) iterable_list = tee ( iterable , 3 ) print ( list ( iterable_list [ 0 ])) # output: [1, 2, 3, 4] print ( list ( iterable_list [ 1 ])) # output: [1, 2, 3, 4] print ( list ( iterable_list [ 2 ])) # output: [1, 2, 3, 4] zip_longest() \u00b6 Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhauste from itertools import zip_longest students = [ \"Bob\" , \"Ann\" , \"John\" , \"Marry\" , \"Daisy\" , \"Amy\" ] grades = [ \"A\" , \"A+\" , \"D\" ] print ( list ( zip_longest ( students , grades , fillvalue = \"-\" ))) # output: [('Bob', 'A'), ('Ann', 'A+'), ('John', 'D'), ('Marry', '-'), ('Daisy', '-'), ('Amy', '-')] Combinatoric iterators \u00b6 product() \u00b6 Cartesian product of input iterables. from itertools import product s1 = 'AB' s2 = 'DE' print ( list ( product ( s1 , s2 ))) # output:[('A', 'D'), ('A', 'E'), ('B', 'D'), ('B', 'E')] permutations() \u00b6 Return successive r length permutations of elements in the iterable. import itertools print ( list ( itertools . permutations ([ 1 , 2 , 3 ]))) # output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)] combinations() \u00b6 Return r length subsequences of elements from the input iterable. from itertools import combinations numbers = [ 1 , 2 , 3 ] print ( list ( combinations ( numbers , r = 2 ))) # output: [(1, 2), (1, 3), (2, 3)] print ( list ( combinations ( numbers , r = 3 ))) # output: [(1, 2, 3)] combinations_with_replacement() \u00b6 Return r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once. from itertools import combinations_with_replacement numbers = [ 1 , 2 , 3 ] print ( list ( combinations_with_replacement ( numbers , r = 2 ))) # output: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] print ( list ( combinations_with_replacement ( numbers , r = 3 ))) # output: [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 3), (2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)] References: \u00b6 https://docs.python.org/3/library/itertools.html","title":"Python itertools"},{"location":"course/python/itertools/#why-itertools","text":"itertools is a built-in module in Python for handling iterables. It provides a number of fast, memory-efficient way of looping through iterables to achieve different desired results. It is a powerful yet under-rated module that every data scientist should know in order to write clean, elegant and readable code in Python.","title":"why itertools?"},{"location":"course/python/itertools/#infinite-iterators","text":"","title":"Infinite iterators"},{"location":"course/python/itertools/#count","text":"count is a infinite iterator it takes two arguments start , step By default start=0 and step=1 It will continuously generate the numbers indefinitely unless we stop it. from itertools import count def count_5 (): counter = count () for c in counter : print ( c ) if c == 5 : break def five_multiples_5 (): counter = count ( start = 5 , step = 5 ) stop = 1 for c in counter : print ( c ) if stop == 5 : break stop += 1 count_5 () # output: # 0 # 1 # 2 # 3 # 4 # 5 five_multiples_5 () # output: # 5 # 10 # 15 # 20 # 25","title":"count()"},{"location":"course/python/itertools/#cycle","text":"The cycle() function accepts an iterable and generates an infinite iterator from itertools import cycle seq = [ 1 , 2 , 3 ] iterator = cycle ( seq ) c = 0 for num in iterator : c = c + 1 print ( num ) if c == 6 : break # output: # 1 # 2 # 3 # 1 # 2 # 3","title":"cycle()"},{"location":"course/python/itertools/#repeat","text":"it repeats the given element n number of times if defined otherwise it will repeat it endlessly. repeat returns an iterator syntax repeat ( element , n_times ) lets look at an example from itertools import repeat repeater = repeat ( 2 , 10 ) print ( list ( repeater )) # output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2] let's generate the square numbers using itertools.repeat from itertools import repeat squares = map ( pow , range ( 1 , 10 ), repeat ( 2 , 10 )) print ( list ( squares )) # output: [1, 4, 9, 16, 25, 36, 49, 64, 81]","title":"repeat()"},{"location":"course/python/itertools/#itertools-functions","text":"","title":"Itertools functions"},{"location":"course/python/itertools/#accumulate","text":"It accumulates the given iterable with operator.add or any other function if provided. from itertools import accumulate sums = accumulate ([ 1 , 2 , 3 , 4 , 5 ]) print ( list ( sums )) # output: [1, 3, 6, 10, 15] muls = accumulate ([ 1 , 2 , 3 , 4 , 5 ], lambda x , y : x * y ) print ( list ( muls )) # output: [1, 2, 6, 24, 120]","title":"accumulate()"},{"location":"course/python/itertools/#chain","text":"itertools.chain is a generator function which accepts iterables as arguments. The function starts by iteratively returning each element from the first argument until it is exhausted. from itertools import chain alphabets = [ 'a' , 'b' , 'c' , 'd' , 'e' ] numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] iterator = chain ( alphabets , numbers ) print ( list ( iterator )) # output: ['a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","title":"chain()"},{"location":"course/python/itertools/#chainfrom_iterable","text":"it's an alternate constructor for itertools.chain . Gets chained inputs from a single iterable argument that is evaluated lazily let's look at examples from itertools import chain iterator = chain . from_iterable ([[ 1 , 2 ], [ 3 , 4 ], 'ABC' ]) print ( list ( iterator )) # output: [1, 2, 3, 4, 'A', 'B', 'C']","title":"chain.from_iterable()"},{"location":"course/python/itertools/#compress","text":"Make an iterator that filters elements from data returning only those that have a corresponding element in selectors that evaluates to True. Stops when either the data or selectors iterables has been exhausted. from itertools import compress iterator = compress ( 'ABCDEFGHIJ' , [ True , False , True ]) print ( list ( iterator )) # output: ['A', 'C'] iterator = compress ( 'ABCDEFGHIJ' , [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]) print ( list ( iterator )) # output: ['B', 'D', 'F', 'H', 'J']","title":"compress()"},{"location":"course/python/itertools/#dropwhile","text":"Make an iterator that drops elements from the iterable as long as the predicate is true ; from itertools import dropwhile numbers = [ 2 , 4 , 6 , 8 , 9 , 10 , 11 , 12 ] func = lambda x : x % 2 == 0 iterator = dropwhile ( func , numbers ) print ( list ( iterator )) # output: [9, 10, 11, 12]","title":"dropwhile()"},{"location":"course/python/itertools/#filterfalse","text":"Make an iterator that filters elements from iterable returning only those for which the predicate is False . from itertools import filterfalse numbers = [ 2 , 4 , 6 , 8 , 9 , 10 , 11 , 12 ] func = lambda x : x % 2 == 0 iterator = filterfalse ( func , numbers ) print ( list ( iterator )) # output: [9, 11]","title":"filterfalse()"},{"location":"course/python/itertools/#groupby","text":"Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. from itertools import groupby data = [ { 'name' : 'satyajit' , 'address' : 'btm' , 'pin' : 560076 }, { 'name' : 'Preetam' , 'address' : 'btm' , 'pin' : 560076 }, { 'name' : 'Mukul' , 'address' : 'Silk board' , 'pin' : 560078 }, { 'name' : 'John' , 'address' : 'Gold board' , 'pin' : 560076 }, ] iterator = groupby ( data , lambda x : x [ 'pin' ]) for key , group in iterator : print ( key , list ( group )) # output: # 560076 [{'name': 'satyajit', 'address': 'btm', 'pin': 560076}, {'name': 'Preetam', 'address': 'btm', 'pin': 560076}] # 560078 [{'name': 'Mukul', 'address': 'Silk board', 'pin': 560078}] # 560076 [{'name': 'John', 'address': 'Gold board', 'pin': 560076}]","title":"groupby()"},{"location":"course/python/itertools/#islice","text":"Make an iterator that returns selected elements from the iterable. It works just like normal python slicing except it returns an iterator. from collections import islice iterator = islice ( \"hello python\" , 0 , 8 , 2 ) print ( list ( iterator )) # output: ['h', 'l', 'o', 'p']","title":"islice()"},{"location":"course/python/itertools/#pairwise","text":"Return successive overlapping pairs taken from the input iterable. from itertools import pairwise print ( list ( pairwise ( 'ABCD' ))) # output: [('A', 'B'), ('B', 'C'), ('C', 'D')] print ( list ( pairwise ([ 1 , 2 , 3 , 4 ]))) # output: [(1, 2), (2, 3), (3, 4)]","title":"pairwise()"},{"location":"course/python/itertools/#starmap","text":"Make an iterator that computes the function using arguments obtained from the iterable. from itertools import starmap print ( list ( starmap ( pow , [( 2 , 4 ), ( 3 , 4 ), ( 4 , 4 )]))) # output: [16, 81, 256]","title":"starmap()"},{"location":"course/python/itertools/#takewhile","text":"Make an iterator that returns elements from the iterable as long as the predicate is true. from itertools import takewhile def even ( num ): return num % 2 == 0 print ( list ( takewhile ( even , [ 2 , 4 , 6 , 8 , 10 , 11 , 12 , 14 ]))) # output: [2, 4, 6, 8, 10]","title":"takewhile()"},{"location":"course/python/itertools/#tee","text":"Return n independent iterators from a single iterable. from itertools import tee items = [ 1 , 2 , 3 , 4 ] iterable = iter ( items ) iterable_list = tee ( iterable , 3 ) print ( list ( iterable_list [ 0 ])) # output: [1, 2, 3, 4] print ( list ( iterable_list [ 1 ])) # output: [1, 2, 3, 4] print ( list ( iterable_list [ 2 ])) # output: [1, 2, 3, 4]","title":"tee()"},{"location":"course/python/itertools/#zip_longest","text":"Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhauste from itertools import zip_longest students = [ \"Bob\" , \"Ann\" , \"John\" , \"Marry\" , \"Daisy\" , \"Amy\" ] grades = [ \"A\" , \"A+\" , \"D\" ] print ( list ( zip_longest ( students , grades , fillvalue = \"-\" ))) # output: [('Bob', 'A'), ('Ann', 'A+'), ('John', 'D'), ('Marry', '-'), ('Daisy', '-'), ('Amy', '-')]","title":"zip_longest()"},{"location":"course/python/itertools/#combinatoric-iterators","text":"","title":"Combinatoric iterators"},{"location":"course/python/itertools/#product","text":"Cartesian product of input iterables. from itertools import product s1 = 'AB' s2 = 'DE' print ( list ( product ( s1 , s2 ))) # output:[('A', 'D'), ('A', 'E'), ('B', 'D'), ('B', 'E')]","title":"product()"},{"location":"course/python/itertools/#permutations","text":"Return successive r length permutations of elements in the iterable. import itertools print ( list ( itertools . permutations ([ 1 , 2 , 3 ]))) # output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]","title":"permutations()"},{"location":"course/python/itertools/#combinations","text":"Return r length subsequences of elements from the input iterable. from itertools import combinations numbers = [ 1 , 2 , 3 ] print ( list ( combinations ( numbers , r = 2 ))) # output: [(1, 2), (1, 3), (2, 3)] print ( list ( combinations ( numbers , r = 3 ))) # output: [(1, 2, 3)]","title":"combinations()"},{"location":"course/python/itertools/#combinations_with_replacement","text":"Return r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once. from itertools import combinations_with_replacement numbers = [ 1 , 2 , 3 ] print ( list ( combinations_with_replacement ( numbers , r = 2 ))) # output: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] print ( list ( combinations_with_replacement ( numbers , r = 3 ))) # output: [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 3), (2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)]","title":"combinations_with_replacement()"},{"location":"course/python/itertools/#references","text":"https://docs.python.org/3/library/itertools.html","title":"References:"},{"location":"course/python/json/","text":"JSON introduction \u00b6 JSON - JavaScript Object Notation The most popular format for data exchange Read below external articles to know more about JSON https://www.json.org/json-en.html https://datatracker.ietf.org/doc/html/rfc7159.html JSON v/s Python \u00b6 JSON format is similar to dict notation in Python Fields are always enclosed only by double quote \" character Instead of True there is true (lowercase) Instead of False there is false (lowercase) Instead of None there is null list is known as array (despite the same syntax) dict is known as object (despite the same syntax) There is no tuple or set Coma , is not allowed after the last element in list or object camelCase is convention, although snake_case is also valid convert JSON string to python dictionary \u00b6 use json.loads(json_string) to convert string to python dict. lets see an example import json data_str = '{\"name\":\"Apple\", \"cost\": 30}' data = json . loads ( data_str ) print ( type ( data )) # output: <class 'dict'> print ( data [ \"name\" ]) # output: Apple convert python objects to JSON string \u00b6 use json.dumps(obj) to convert python object to JSON string let's look at an example import json students = [ \"Anji\" , \"David\" , \"Paul\" ] data_str = json . dumps ( students ) print ( type ( data_str )) # output: <class 'str'> print ( data_str ) # output: [\"Anji\", \"David\", \"Paul\"] write JSON to file - json.dump \u00b6 use json.dump(data, file) to write the data to file. let's look at an example import json data = { \"students\" : [ \"Travis\" , \"Sudhakar\" , \"Devika\" ]} file_path = \"/tmp/data.json\" with open ( file_path , \"a+\" ) as _file : json . dump ( data , _file ) open the file and we can find {\"students\": [\"Travis\", \"Sudhakar\", \"Devika\"]} as the text content. load JSON data from file to memory - json.load \u00b6 use json.load() to load data from file to memory let's look at the below code import json data = None with open ( file_path , \"r\" ) as _file : data = json . load ( _file ) print ( data ) # output: {'students': ['Travis', 'Sudhakar', 'Devika']} Reference: \u00b6 https://docs.python.org/3/library/json.html","title":"Python json"},{"location":"course/python/json/#json-introduction","text":"JSON - JavaScript Object Notation The most popular format for data exchange Read below external articles to know more about JSON https://www.json.org/json-en.html https://datatracker.ietf.org/doc/html/rfc7159.html","title":"JSON introduction"},{"location":"course/python/json/#json-vs-python","text":"JSON format is similar to dict notation in Python Fields are always enclosed only by double quote \" character Instead of True there is true (lowercase) Instead of False there is false (lowercase) Instead of None there is null list is known as array (despite the same syntax) dict is known as object (despite the same syntax) There is no tuple or set Coma , is not allowed after the last element in list or object camelCase is convention, although snake_case is also valid","title":"JSON v/s Python"},{"location":"course/python/json/#convert-json-string-to-python-dictionary","text":"use json.loads(json_string) to convert string to python dict. lets see an example import json data_str = '{\"name\":\"Apple\", \"cost\": 30}' data = json . loads ( data_str ) print ( type ( data )) # output: <class 'dict'> print ( data [ \"name\" ]) # output: Apple","title":"convert JSON string to python dictionary"},{"location":"course/python/json/#convert-python-objects-to-json-string","text":"use json.dumps(obj) to convert python object to JSON string let's look at an example import json students = [ \"Anji\" , \"David\" , \"Paul\" ] data_str = json . dumps ( students ) print ( type ( data_str )) # output: <class 'str'> print ( data_str ) # output: [\"Anji\", \"David\", \"Paul\"]","title":"convert python objects to JSON string"},{"location":"course/python/json/#write-json-to-file-jsondump","text":"use json.dump(data, file) to write the data to file. let's look at an example import json data = { \"students\" : [ \"Travis\" , \"Sudhakar\" , \"Devika\" ]} file_path = \"/tmp/data.json\" with open ( file_path , \"a+\" ) as _file : json . dump ( data , _file ) open the file and we can find {\"students\": [\"Travis\", \"Sudhakar\", \"Devika\"]} as the text content.","title":"write JSON to file - json.dump"},{"location":"course/python/json/#load-json-data-from-file-to-memory-jsonload","text":"use json.load() to load data from file to memory let's look at the below code import json data = None with open ( file_path , \"r\" ) as _file : data = json . load ( _file ) print ( data ) # output: {'students': ['Travis', 'Sudhakar', 'Devika']}","title":"load JSON data from file to memory - json.load"},{"location":"course/python/json/#reference","text":"https://docs.python.org/3/library/json.html","title":"Reference:"},{"location":"course/python/lists/","text":"The data type list is an ordered sequence which is mutable and made up of one or more elements. List can have elements of different data types, such as integer, float, string, tuple or even another list. List is very useful to group together elements of mixed data types. sytanx - Example \u00b6 names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] access list item with index \u00b6 As list is an ordered sequence we can access the elements with an index Index starts with 0 and ends with length of list - 1 List supports negative index which starts from -1 (i.e -1, -2, -3, ...) names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] name = names [ 1 ] print ( name ) # Output: Arjun slicing a list \u00b6 we can get a part or a slice of a list with slicing slice syntax: mylist[start:end:step] start is start index position. default is 0 end is the end index exclusive. default is length of list - 1 step is current index + number . Try out the below code to see how it works numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 ] print ( numbers [ 1 : 5 ]) # Output: [2, 3, 4, 5] print ( numbers [ 5 :]) # Output: [6, 7, 8, 9, 0] print ( numbers [: 5 ]) # Output: [1, 2, 3, 4, 5] print ( numbers [ 0 : 9 : 2 ]) # Output: [1, 3, 5, 7, 9] check if element exists in a list \u00b6 we use in operator to check if element exists names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] print ( \"Anji\" in names ) # Output: False check if element not exists in a list \u00b6 use not in operator to check if element exists names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] print ( \"Anji\" not in names ) # Output: True update list element with an index \u00b6 fruits = [ \"apple\" , \"banana\" , \"cherry\" ] fruits [ 0 ] = \"watermelon\" print ( fruits ) # Output: ['watermelon', 'banana', 'cherry'] update a range of elements \u00b6 numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] numbers [ 0 : 5 ] = [ 100 , 200 , 300 , 400 , 500 , 600 ] print ( numbers ) # Output: [100, 200, 300, 400, 500, 600, 6, 7, 8, 9] insert an element at an index \u00b6 use method insert() to add an element at a specific index. fruits = [ \"apple\" , \"banana\" , \"cherry\" ] fruits . insert ( 2 , \"watermelon\" ) print ( fruits ) # Output: ['apple', 'banana', 'watermelon', 'cherry'] add an element to end of the list \u00b6 use method append() to add an element at the end of the list names = [ \"Anji\" , \"Arun\" , \"Abhi\" ] names . append ( \"John\" ) print ( names ) # Output: ['Anji', 'Arun', 'Abhi', 'John'] append multiple elements to the list \u00b6 use method extend() to add all elements from one list to other we can any iterable with extend() method like tuple , set , etc. games = [ \"I spy\" , \"Hide-and-seek\" , \"Musical chairs\" ] outdoor_games = [ \"Kho-kho\" , \"Football\" , \"Volleyball\" ] games . extend ( outdoor_games ) print ( games ) # Output: ['I spy', 'Hide-and-seek', 'Musical chairs', 'Kho-kho', 'Football', 'Volleyball'] remove an element from list \u00b6 use method list.remove(element) to remove an element numbers = [ 1 , 2 , 3 , \"remove me\" , 5 , 6 ] numbers . remove ( \"remove me\" ) print ( numbers ) # Output: [1, 2, 3, 5, 6] remove an element at an index from list \u00b6 use method list.pop(index) to delete element at an index numbers = [ 1 , 2 , 3 , 4 , 5 ] index = 2 numbers . pop ( index ) print ( numbers ) # Output: [1, 2, 4, 5] If index is not given then it will remove the last element. numbers = [ 1 , 2 , 3 , 4 , 5 ] numbers . pop () print ( numbers ) # Output: [1, 2, 3, 4] empty a list \u00b6 use method list.clear() to delete all elements from the list. fruits = [ \"apple\" , \"banana\" ] fruits . clear () print ( fruits ) # Output: [] using for loop with list \u00b6 fruits = [ \"apple\" , \"banana\" ] for fruit in fruits : print ( fruit ) # Output: # apple # banana list comprehension \u00b6 List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list or any iterable element. numbers = [ 1 , 2 , 3 , 4 , 5 ] squares = [ num * num for num in numbers ] print ( squares ) # Output: [1, 4, 9, 16, 25] conditional list comprehension \u00b6 list comprehension to filter names start with letter \"A\" names = [ \"Anji\" , \"Ram\" , \"Arun\" ] names_list = [ name for name in names if name . startswith ( \"A\" )] print ( names_list ) # Output: ['Anji', 'Arun'] list comprehension to convert names to upper case if it starts with \"A\" names = [ \"Anji\" , \"Naveen\" , \"Arun\" ] names_list = [ name . upper () if name . startswith ( \"A\" ) else name for name in names ] print ( names_list ) # Output: ['ANJI', 'Naveen', 'ARUN'] sort elements of a list \u00b6 list sorting can be done in two ways by using list method list.sort() by using builtin function sorted(list) list.sort() in an inplace sort which modifies the list. numbers = [ 3 , 2 , 4 , 5 , 1 ] numbers . sort () print ( numbers ) # Output: [1, 2, 3, 4, 5] sorted(list) is not an inplace sort which sorts list elements and returns a new list. numbers = [ 3 , 2 , 4 , 5 , 1 ] new_list = sorted ( numbers ) print ( new_list ) # Output: [1, 2, 3, 4, 5] print ( numbers ) # Output: [3,2,4,5,1] copy existing list to other \u00b6 use list.copy() method to copy list object numbers = [ 1 , 2 , 3 , 4 , 5 ] numbers_copy = numbers . copy () print ( numbers_copy ) # Output: [1,2,3,4,5] alternative is to use list constructor numbers = [ 1 , 2 , 3 , 4 , 5 ] numbers_copy = list ( numbers ) print ( numbers_copy ) # Output: [1,2,3,4,5] combine two lists with + operator \u00b6 letters = [ \"a\" , \"b\" , \"c\" ] numbers = [ 1 , 2 , 3 , 4 ] chars = letters + numbers print ( chars ) # Output: ['a', 'b', 'c', 1, 2, 3, 4] other useful list methods \u00b6 python has a set of built-in methods that we can use on lists. Method Description append() Adds an element at the end of the list clear() Removes all the elements from the list copy() Returns a copy of the list count() Returns the number of elements with the specified value extend() Add the elements of a list (or any iterable), to the end of the current list index() Returns the index of the first element with the specified value insert() Adds an element at the specified position pop() Removes the element at the specified position remove() Removes the item with the specified value reverse() Reverses the order of the list sort() Sorts the list Read more about list at official docs References \u00b6 https://docs.python.org/3/tutorial/datastructures.html","title":"Python lists"},{"location":"course/python/lists/#sytanx-example","text":"names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ]","title":"sytanx - Example"},{"location":"course/python/lists/#access-list-item-with-index","text":"As list is an ordered sequence we can access the elements with an index Index starts with 0 and ends with length of list - 1 List supports negative index which starts from -1 (i.e -1, -2, -3, ...) names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] name = names [ 1 ] print ( name ) # Output: Arjun","title":"access list item with index"},{"location":"course/python/lists/#slicing-a-list","text":"we can get a part or a slice of a list with slicing slice syntax: mylist[start:end:step] start is start index position. default is 0 end is the end index exclusive. default is length of list - 1 step is current index + number . Try out the below code to see how it works numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 ] print ( numbers [ 1 : 5 ]) # Output: [2, 3, 4, 5] print ( numbers [ 5 :]) # Output: [6, 7, 8, 9, 0] print ( numbers [: 5 ]) # Output: [1, 2, 3, 4, 5] print ( numbers [ 0 : 9 : 2 ]) # Output: [1, 3, 5, 7, 9]","title":"slicing a list"},{"location":"course/python/lists/#check-if-element-exists-in-a-list","text":"we use in operator to check if element exists names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] print ( \"Anji\" in names ) # Output: False","title":"check if element exists in a list"},{"location":"course/python/lists/#check-if-element-not-exists-in-a-list","text":"use not in operator to check if element exists names = [ \"Krishna\" , \"Arjun\" , \"Kausalya\" ] print ( \"Anji\" not in names ) # Output: True","title":"check if element not exists in a list"},{"location":"course/python/lists/#update-list-element-with-an-index","text":"fruits = [ \"apple\" , \"banana\" , \"cherry\" ] fruits [ 0 ] = \"watermelon\" print ( fruits ) # Output: ['watermelon', 'banana', 'cherry']","title":"update list element with an index"},{"location":"course/python/lists/#update-a-range-of-elements","text":"numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] numbers [ 0 : 5 ] = [ 100 , 200 , 300 , 400 , 500 , 600 ] print ( numbers ) # Output: [100, 200, 300, 400, 500, 600, 6, 7, 8, 9]","title":"update a range of elements"},{"location":"course/python/lists/#insert-an-element-at-an-index","text":"use method insert() to add an element at a specific index. fruits = [ \"apple\" , \"banana\" , \"cherry\" ] fruits . insert ( 2 , \"watermelon\" ) print ( fruits ) # Output: ['apple', 'banana', 'watermelon', 'cherry']","title":"insert an element at an index"},{"location":"course/python/lists/#add-an-element-to-end-of-the-list","text":"use method append() to add an element at the end of the list names = [ \"Anji\" , \"Arun\" , \"Abhi\" ] names . append ( \"John\" ) print ( names ) # Output: ['Anji', 'Arun', 'Abhi', 'John']","title":"add an element to end of the list"},{"location":"course/python/lists/#append-multiple-elements-to-the-list","text":"use method extend() to add all elements from one list to other we can any iterable with extend() method like tuple , set , etc. games = [ \"I spy\" , \"Hide-and-seek\" , \"Musical chairs\" ] outdoor_games = [ \"Kho-kho\" , \"Football\" , \"Volleyball\" ] games . extend ( outdoor_games ) print ( games ) # Output: ['I spy', 'Hide-and-seek', 'Musical chairs', 'Kho-kho', 'Football', 'Volleyball']","title":"append multiple elements to the list"},{"location":"course/python/lists/#remove-an-element-from-list","text":"use method list.remove(element) to remove an element numbers = [ 1 , 2 , 3 , \"remove me\" , 5 , 6 ] numbers . remove ( \"remove me\" ) print ( numbers ) # Output: [1, 2, 3, 5, 6]","title":"remove an element from list"},{"location":"course/python/lists/#remove-an-element-at-an-index-from-list","text":"use method list.pop(index) to delete element at an index numbers = [ 1 , 2 , 3 , 4 , 5 ] index = 2 numbers . pop ( index ) print ( numbers ) # Output: [1, 2, 4, 5] If index is not given then it will remove the last element. numbers = [ 1 , 2 , 3 , 4 , 5 ] numbers . pop () print ( numbers ) # Output: [1, 2, 3, 4]","title":"remove an element at an index from list"},{"location":"course/python/lists/#empty-a-list","text":"use method list.clear() to delete all elements from the list. fruits = [ \"apple\" , \"banana\" ] fruits . clear () print ( fruits ) # Output: []","title":"empty a list"},{"location":"course/python/lists/#using-for-loop-with-list","text":"fruits = [ \"apple\" , \"banana\" ] for fruit in fruits : print ( fruit ) # Output: # apple # banana","title":"using for loop with list"},{"location":"course/python/lists/#list-comprehension","text":"List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list or any iterable element. numbers = [ 1 , 2 , 3 , 4 , 5 ] squares = [ num * num for num in numbers ] print ( squares ) # Output: [1, 4, 9, 16, 25]","title":"list comprehension"},{"location":"course/python/lists/#conditional-list-comprehension","text":"list comprehension to filter names start with letter \"A\" names = [ \"Anji\" , \"Ram\" , \"Arun\" ] names_list = [ name for name in names if name . startswith ( \"A\" )] print ( names_list ) # Output: ['Anji', 'Arun'] list comprehension to convert names to upper case if it starts with \"A\" names = [ \"Anji\" , \"Naveen\" , \"Arun\" ] names_list = [ name . upper () if name . startswith ( \"A\" ) else name for name in names ] print ( names_list ) # Output: ['ANJI', 'Naveen', 'ARUN']","title":"conditional list comprehension"},{"location":"course/python/lists/#sort-elements-of-a-list","text":"list sorting can be done in two ways by using list method list.sort() by using builtin function sorted(list) list.sort() in an inplace sort which modifies the list. numbers = [ 3 , 2 , 4 , 5 , 1 ] numbers . sort () print ( numbers ) # Output: [1, 2, 3, 4, 5] sorted(list) is not an inplace sort which sorts list elements and returns a new list. numbers = [ 3 , 2 , 4 , 5 , 1 ] new_list = sorted ( numbers ) print ( new_list ) # Output: [1, 2, 3, 4, 5] print ( numbers ) # Output: [3,2,4,5,1]","title":"sort elements of a list"},{"location":"course/python/lists/#copy-existing-list-to-other","text":"use list.copy() method to copy list object numbers = [ 1 , 2 , 3 , 4 , 5 ] numbers_copy = numbers . copy () print ( numbers_copy ) # Output: [1,2,3,4,5] alternative is to use list constructor numbers = [ 1 , 2 , 3 , 4 , 5 ] numbers_copy = list ( numbers ) print ( numbers_copy ) # Output: [1,2,3,4,5]","title":"copy existing list to other"},{"location":"course/python/lists/#combine-two-lists-with-operator","text":"letters = [ \"a\" , \"b\" , \"c\" ] numbers = [ 1 , 2 , 3 , 4 ] chars = letters + numbers print ( chars ) # Output: ['a', 'b', 'c', 1, 2, 3, 4]","title":"combine two lists with + operator"},{"location":"course/python/lists/#other-useful-list-methods","text":"python has a set of built-in methods that we can use on lists. Method Description append() Adds an element at the end of the list clear() Removes all the elements from the list copy() Returns a copy of the list count() Returns the number of elements with the specified value extend() Add the elements of a list (or any iterable), to the end of the current list index() Returns the index of the first element with the specified value insert() Adds an element at the specified position pop() Removes the element at the specified position remove() Removes the item with the specified value reverse() Reverses the order of the list sort() Sorts the list Read more about list at official docs","title":"other useful list methods"},{"location":"course/python/lists/#references","text":"https://docs.python.org/3/tutorial/datastructures.html","title":"References"},{"location":"course/python/logging/","text":"why logging? \u00b6 Logging is essential to understand the behaviour of the application Logging helps in debugging the unexpected issues or for simply tracking events. Logs can used to get insights, set monitoring alerts, etc. logging levels \u00b6 Critical - used when error occured but execution can't be continued Error - used when error occured but execution can be continued Warning - used when something unexpected happened in the application, a problem, or a situation that might disturb one of the processes. Info - used to when debugging the app with less details Debug - used to when debug the app with specific details. logging module \u00b6 python has a built-in module to handle the logging. it can be extended to write custom loggers based on the dev needs. let's look at the below code import logging # config logging logger = logging . getLogger ( name = 'mylogger' ) logging . basicConfig ( level = logging . DEBUG ) def calculate_simple_interest ( p , t , r ): logger . info ( f 'principal= { p } time= { t } rate of interest= { r } ' ) amount = p * ( 1 + r * t ) return amount if __name__ == '__main__' : interest = calculate_simple_interest ( 1000 , 12 , 0.2 ) Try out the above code, we can see the below log in the console. INFO:mylogger:principal=1000 time=12 rate of interest=0.2 logging handlers \u00b6 Handler is an object responsible for dispatching the appropriate log messages (based on the log messages' severity) to the handler's specified destination. Handlers are propagated like levels. If the logger has no handler set, its chain of ancestors is search for a handler. import logging logger = logging . getLogger ( 'dev' ) logger . setLevel ( logging . INFO ) fileHandler = logging . FileHandler ( 'test.log' ) fileHandler . setLevel ( logging . INFO ) consoleHandler = logging . StreamHandler () consoleHandler . setLevel ( logging . INFO ) logger . addHandler ( fileHandler ) logger . addHandler ( consoleHandler ) logger . info ( 'information message' ) In the above code we have setup the two handlers. file handler - writes the logs to the file stream handler - writes the logs to the stream if specified otherwise to sys.stderr is used. logging formatters \u00b6 Formatter is an object which configures the final order, structure, and contents of the log record. In addition to the message string, log records also include date and time, log names, and log level severity. import logging logger = logging . getLogger ( 'dev' ) logger . setLevel ( logging . INFO ) consoleHandler = logging . StreamHandler () consoleHandler . setLevel ( logging . INFO ) logger . addHandler ( consoleHandler ) formatter = logging . Formatter ( ' %(asctime)s %(name)s %(levelname)s : %(message)s ' ) consoleHandler . setFormatter ( formatter ) logger . info ( 'information message' ) # output: 2022-12-25 10:25:12,080 dev INFO: information message logging basicConfig \u00b6 The basicConfig configures the root logger. It does basic configuration for the logging system by creating a stream handler with a default formatter. The debug, info, warning, error and critical call basicConfig automatically if no handlers are defined for the root logger. import logging logging . basicConfig ( filename = '/tmp/test.log' , format = ' %(filename)s : %(message)s ' , level = logging . DEBUG ) logging . debug ( 'This is a debug message' ) logging . info ( 'This is an info message' ) logging . warning ( 'This is a warning message' ) logging . error ( 'This is an error message' ) logging . critical ( 'This is a critical message' ) when we run the above code, it writes the logs to the file /tmp/test.log . when we do cat /tmp/test.log then it shows the below text testlog.py: This is a debug message testlog.py: This is an info message testlog.py: This is a warning message testlog.py: This is an error message testlog.py: This is a critical message References: \u00b6 https://docs.python.org/3/library/logging.html","title":"Python logging"},{"location":"course/python/logging/#why-logging","text":"Logging is essential to understand the behaviour of the application Logging helps in debugging the unexpected issues or for simply tracking events. Logs can used to get insights, set monitoring alerts, etc.","title":"why logging?"},{"location":"course/python/logging/#logging-levels","text":"Critical - used when error occured but execution can't be continued Error - used when error occured but execution can be continued Warning - used when something unexpected happened in the application, a problem, or a situation that might disturb one of the processes. Info - used to when debugging the app with less details Debug - used to when debug the app with specific details.","title":"logging levels"},{"location":"course/python/logging/#logging-module","text":"python has a built-in module to handle the logging. it can be extended to write custom loggers based on the dev needs. let's look at the below code import logging # config logging logger = logging . getLogger ( name = 'mylogger' ) logging . basicConfig ( level = logging . DEBUG ) def calculate_simple_interest ( p , t , r ): logger . info ( f 'principal= { p } time= { t } rate of interest= { r } ' ) amount = p * ( 1 + r * t ) return amount if __name__ == '__main__' : interest = calculate_simple_interest ( 1000 , 12 , 0.2 ) Try out the above code, we can see the below log in the console. INFO:mylogger:principal=1000 time=12 rate of interest=0.2","title":"logging module"},{"location":"course/python/logging/#logging-handlers","text":"Handler is an object responsible for dispatching the appropriate log messages (based on the log messages' severity) to the handler's specified destination. Handlers are propagated like levels. If the logger has no handler set, its chain of ancestors is search for a handler. import logging logger = logging . getLogger ( 'dev' ) logger . setLevel ( logging . INFO ) fileHandler = logging . FileHandler ( 'test.log' ) fileHandler . setLevel ( logging . INFO ) consoleHandler = logging . StreamHandler () consoleHandler . setLevel ( logging . INFO ) logger . addHandler ( fileHandler ) logger . addHandler ( consoleHandler ) logger . info ( 'information message' ) In the above code we have setup the two handlers. file handler - writes the logs to the file stream handler - writes the logs to the stream if specified otherwise to sys.stderr is used.","title":"logging handlers"},{"location":"course/python/logging/#logging-formatters","text":"Formatter is an object which configures the final order, structure, and contents of the log record. In addition to the message string, log records also include date and time, log names, and log level severity. import logging logger = logging . getLogger ( 'dev' ) logger . setLevel ( logging . INFO ) consoleHandler = logging . StreamHandler () consoleHandler . setLevel ( logging . INFO ) logger . addHandler ( consoleHandler ) formatter = logging . Formatter ( ' %(asctime)s %(name)s %(levelname)s : %(message)s ' ) consoleHandler . setFormatter ( formatter ) logger . info ( 'information message' ) # output: 2022-12-25 10:25:12,080 dev INFO: information message","title":"logging formatters"},{"location":"course/python/logging/#logging-basicconfig","text":"The basicConfig configures the root logger. It does basic configuration for the logging system by creating a stream handler with a default formatter. The debug, info, warning, error and critical call basicConfig automatically if no handlers are defined for the root logger. import logging logging . basicConfig ( filename = '/tmp/test.log' , format = ' %(filename)s : %(message)s ' , level = logging . DEBUG ) logging . debug ( 'This is a debug message' ) logging . info ( 'This is an info message' ) logging . warning ( 'This is a warning message' ) logging . error ( 'This is an error message' ) logging . critical ( 'This is a critical message' ) when we run the above code, it writes the logs to the file /tmp/test.log . when we do cat /tmp/test.log then it shows the below text testlog.py: This is a debug message testlog.py: This is an info message testlog.py: This is a warning message testlog.py: This is an error message testlog.py: This is a critical message","title":"logging basicConfig"},{"location":"course/python/logging/#references","text":"https://docs.python.org/3/library/logging.html","title":"References:"},{"location":"course/python/math/","text":"Python math module consists of important constants like pi, tau, etc. and most of commonly used mathematical functions. We can use all these functions in our programming while solving the poblems. python math constants \u00b6 math.pi \u00b6 It represents the mathematical constant \u03c0 = 3.14159 Let's write a simple program to calculate the area of a circle import math def get_circle_area ( radius ): area = math . pi * radius ** 2 return area math.e \u00b6 It represents the mathematical constant e = 2.718281 It's also called the Euler\u2019s number. import math print ( math . e ) # output: 2.718281828459045 math.tau \u00b6 It represents the mathematical constant \u03c4 = 6.28318 import math print ( math . tau ) # output: 6.283185307179586 math.inf \u00b6 It represents the value of floating-point infinity import math print ( math . inf ) # output: inf math.nan \u00b6 It represents floating-point NaN value which means Not a Number import math print ( math . nan ) # output: nan python math functions \u00b6 The numeric functions in the math module take real numbers/integers as arguments and after doing the specified mathematical calculations, it returns a number or a boolean value. math.ceil(x) \u00b6 Rounds a number up to the nearest integer import math print ( math . ceil ( 1.4 )) # output: 2 print ( math . ceil ( - 5.3 )) # output: -5 math.floor(x) \u00b6 Rounds a number down to the nearest integer import math print ( math . floor ( 0.6 )) # output: 0 print ( math . floor ( 1.4 )) # output: 1 math.fabs(x) \u00b6 Returns the absolute value of a number import math print ( math . fabs ( 7.5 )) # output: 7.5 print ( math . fabs ( - 7.5 )) # output: 7.5 math.copysign(x,y) \u00b6 Returns a float consisting of the value of the first parameter and the sign of the second parameter import math print ( math . copysign ( 7.5 , - 1 )) # output: -7.5 print ( math . copysign ( - 120 , 100 )) # output: 120.0 math.factorial(x) \u00b6 Returns the factorial of a given number import math print ( math . factorial ( 5 )) # output: 120 print ( math . factorial ( 16 )) # output: 20922789888000 math.fmod(x,y) \u00b6 Returns the remainder of x/y import math print ( math . fmod ( 23 , 6 )) # output: 5.0 math.gcd(x,y) \u00b6 Returns the greatest common divisor of two integers import math print ( math . gcd ( 23 , 6 )) # output: 1 math.comb(n,r) \u00b6 Returns the number of ways to choose k items from n items without repetition and order import math print ( math . comb ( 5 , 3 )) # output: 10 math.frexp(x) \u00b6 Return the mantissa and exponent of x as the pair (m, e). m is a float and e is an integer such that x == m * 2**e exactly. If x is zero, returns (0.0, 0), otherwise 0.5 <= abs(m) < 1. This is used to \u201cpick apart\u201d the internal representation of a float in a portable way. import math print ( math . frexp ( 5 )) # output: (0.625, 3) math.fsum(iterable) \u00b6 Returns the sum of all items in any iterable (tuples, arrays, lists, etc.) import math print ( math . fsum ([ 5 , 3 , 7 ])) # output: 15.0 math.isclose(x, y, rel_tol = 1e-09, abs_tol = 0.0) \u00b6 Checks whether two values are close to each other, or not import math print ( math . isclose ( 1.233 , 1.233 )) # output: True print ( math . isclose ( 1.233 , 1.24 )) # output: False math.isfinite(x) \u00b6 Check whether a value is finite or not import math print ( math . isfinite ( 100 )) # output: True print ( math . isfinite ( float ( \"-inf\" ))) # output: False print ( math . isfinite ( math . inf )) # output: False print ( math . isfinite ( 0 )) # output: True math.isinf(x) \u00b6 Checks whether a number is infinite or not import math print ( math . isinf ( math . inf )) # output: True print ( math . isinf ( 0 )) # output: False math.isnan(x) \u00b6 Checks whether a value is NaN (not a number) or not import math print ( math . isnan ( math . nan )) # output: True print ( math . isnan ( 10 )) # output: False math.sqrt(x) \u00b6 Return the square root of x. import math print ( math . sqrt ( 100 )) # output: 10.0 print ( math . sqrt ( 10 )) # output: 3.1622776601683795 math.isqrt(x) \u00b6 Rounds a square root number downwards to the nearest integer import math print ( math . isqrt ( 100 )) # output: 10.0 print ( math . isqrt ( 10 )) # output: 3 math.lcm(x,y,z\u2026.) \u00b6 Return the least common multiple of the specified integer arguments. import math print ( math . lcm ( 10 , 15 , 21 , 8 )) # output: 840 Note: only available after 3.9 math.ldexp(x,i) \u00b6 Return x * (2**i). This is essentially the inverse of function frexp(). import math print ( math . ldexp ( 9 , 3 )) # output: 72.0 print ( math . ldexp ( - 5 , 2 )) # output: -20 math.modf(x) \u00b6 Return the fractional and integer parts of x. Both results carry the sign of x and are floats. import math print ( math . modf ( 9 )) # output: (0.0, 9.0) print ( math . modf ( 12.5 )) # output: (0.5, 12.0) math.nextafter(x,y) \u00b6 Return the next floating-point value after x towards y. import math print ( math . nextafter ( - 5 , math . inf )) # output: -4.999999999999999 print ( math . nextafter ( 10 , - math . inf )) # output: 9.999999999999998 print ( math . nextafter ( 16 , 0.0 )) # output: 15.999999999999998 math.prod(iterable, start=1) \u00b6 Calculate the product of all the elements in the input iterable. The default start value for the product is 1. import math print ( math . prod ([ 1 , 2 , 3 , 4 , 5 , 6 ])) # output: 720 print ( math . prod ([])) # output: 1 math.remainder(x,y) \u00b6 Returns the closest value that can make numerator completely divisible by the denominator import math print ( math . remainder ( 17 , 2 )) # output: 1 print ( math . remainder ( 2 , 17 )) # output: 2 math.trunc(x) \u00b6 Returns the truncated integer parts of a number import math print ( math . trunc ( 2.77 )) # output: 2 print ( math . trunc ( - 3.77 )) # output: -3 math.pow(x, y) \u00b6 Returns the value of x to the power of y import math print ( math . pow ( 2 , 4 )) # output: 16.0 math.exp(x) \u00b6 Return e raised to the power x, where e = 2.718281\u2026 is the base of natural logarithms. import math print ( math . exp ( 4 )) # output: 54.598150033144236 print ( math . exp ( - 6.89 )) # output: 0.0010179138409954387 math.expm1(x) \u00b6 Return e raised to the power x, minus 1. Here e is the base of natural logarithms. import math print ( math . expm1 ( 4 )) # output: 53.598150033144236 math.log(x, [b]) \u00b6 return the logarithm of x to the given base, calculated as log(x)/log(base). import math print ( math . log ( 10 , 2 )) # output: 3.3219280948873626 math.log1p(x) \u00b6 Return the natural logarithm of 1+x (base e). The result is calculated in a way which is accurate for x near zero. import math print ( math . log1p ( 10 )) # output: 2.3978952727983707 math.log2(x) \u00b6 Return the base-2 logarithm of x. This is usually more accurate than log(x, 2). import math print ( math . log2 ( 10 )) # output: 3.321928094887362 Math module also provides trignometric calculations also. Note: If you want more advanced maths then look at python packages like Numpy , SciPy , Statsmodel , Scikit-learn , etc. References \u00b6 https://docs.python.org/3/library/math.html","title":"Python math"},{"location":"course/python/math/#python-math-constants","text":"","title":"python math constants"},{"location":"course/python/math/#mathpi","text":"It represents the mathematical constant \u03c0 = 3.14159 Let's write a simple program to calculate the area of a circle import math def get_circle_area ( radius ): area = math . pi * radius ** 2 return area","title":"math.pi"},{"location":"course/python/math/#mathe","text":"It represents the mathematical constant e = 2.718281 It's also called the Euler\u2019s number. import math print ( math . e ) # output: 2.718281828459045","title":"math.e"},{"location":"course/python/math/#mathtau","text":"It represents the mathematical constant \u03c4 = 6.28318 import math print ( math . tau ) # output: 6.283185307179586","title":"math.tau"},{"location":"course/python/math/#mathinf","text":"It represents the value of floating-point infinity import math print ( math . inf ) # output: inf","title":"math.inf"},{"location":"course/python/math/#mathnan","text":"It represents floating-point NaN value which means Not a Number import math print ( math . nan ) # output: nan","title":"math.nan"},{"location":"course/python/math/#python-math-functions","text":"The numeric functions in the math module take real numbers/integers as arguments and after doing the specified mathematical calculations, it returns a number or a boolean value.","title":"python math functions"},{"location":"course/python/math/#mathceilx","text":"Rounds a number up to the nearest integer import math print ( math . ceil ( 1.4 )) # output: 2 print ( math . ceil ( - 5.3 )) # output: -5","title":"math.ceil(x)"},{"location":"course/python/math/#mathfloorx","text":"Rounds a number down to the nearest integer import math print ( math . floor ( 0.6 )) # output: 0 print ( math . floor ( 1.4 )) # output: 1","title":"math.floor(x)"},{"location":"course/python/math/#mathfabsx","text":"Returns the absolute value of a number import math print ( math . fabs ( 7.5 )) # output: 7.5 print ( math . fabs ( - 7.5 )) # output: 7.5","title":"math.fabs(x)"},{"location":"course/python/math/#mathcopysignxy","text":"Returns a float consisting of the value of the first parameter and the sign of the second parameter import math print ( math . copysign ( 7.5 , - 1 )) # output: -7.5 print ( math . copysign ( - 120 , 100 )) # output: 120.0","title":"math.copysign(x,y)"},{"location":"course/python/math/#mathfactorialx","text":"Returns the factorial of a given number import math print ( math . factorial ( 5 )) # output: 120 print ( math . factorial ( 16 )) # output: 20922789888000","title":"math.factorial(x)"},{"location":"course/python/math/#mathfmodxy","text":"Returns the remainder of x/y import math print ( math . fmod ( 23 , 6 )) # output: 5.0","title":"math.fmod(x,y)"},{"location":"course/python/math/#mathgcdxy","text":"Returns the greatest common divisor of two integers import math print ( math . gcd ( 23 , 6 )) # output: 1","title":"math.gcd(x,y)"},{"location":"course/python/math/#mathcombnr","text":"Returns the number of ways to choose k items from n items without repetition and order import math print ( math . comb ( 5 , 3 )) # output: 10","title":"math.comb(n,r)"},{"location":"course/python/math/#mathfrexpx","text":"Return the mantissa and exponent of x as the pair (m, e). m is a float and e is an integer such that x == m * 2**e exactly. If x is zero, returns (0.0, 0), otherwise 0.5 <= abs(m) < 1. This is used to \u201cpick apart\u201d the internal representation of a float in a portable way. import math print ( math . frexp ( 5 )) # output: (0.625, 3)","title":"math.frexp(x)"},{"location":"course/python/math/#mathfsumiterable","text":"Returns the sum of all items in any iterable (tuples, arrays, lists, etc.) import math print ( math . fsum ([ 5 , 3 , 7 ])) # output: 15.0","title":"math.fsum(iterable)"},{"location":"course/python/math/#mathisclosex-y-rel_tol-1e-09-abs_tol-00","text":"Checks whether two values are close to each other, or not import math print ( math . isclose ( 1.233 , 1.233 )) # output: True print ( math . isclose ( 1.233 , 1.24 )) # output: False","title":"math.isclose(x, y, rel_tol = 1e-09, abs_tol = 0.0)"},{"location":"course/python/math/#mathisfinitex","text":"Check whether a value is finite or not import math print ( math . isfinite ( 100 )) # output: True print ( math . isfinite ( float ( \"-inf\" ))) # output: False print ( math . isfinite ( math . inf )) # output: False print ( math . isfinite ( 0 )) # output: True","title":"math.isfinite(x)"},{"location":"course/python/math/#mathisinfx","text":"Checks whether a number is infinite or not import math print ( math . isinf ( math . inf )) # output: True print ( math . isinf ( 0 )) # output: False","title":"math.isinf(x)"},{"location":"course/python/math/#mathisnanx","text":"Checks whether a value is NaN (not a number) or not import math print ( math . isnan ( math . nan )) # output: True print ( math . isnan ( 10 )) # output: False","title":"math.isnan(x)"},{"location":"course/python/math/#mathsqrtx","text":"Return the square root of x. import math print ( math . sqrt ( 100 )) # output: 10.0 print ( math . sqrt ( 10 )) # output: 3.1622776601683795","title":"math.sqrt(x)"},{"location":"course/python/math/#mathisqrtx","text":"Rounds a square root number downwards to the nearest integer import math print ( math . isqrt ( 100 )) # output: 10.0 print ( math . isqrt ( 10 )) # output: 3","title":"math.isqrt(x)"},{"location":"course/python/math/#mathlcmxyz","text":"Return the least common multiple of the specified integer arguments. import math print ( math . lcm ( 10 , 15 , 21 , 8 )) # output: 840 Note: only available after 3.9","title":"math.lcm(x,y,z\u2026.)"},{"location":"course/python/math/#mathldexpxi","text":"Return x * (2**i). This is essentially the inverse of function frexp(). import math print ( math . ldexp ( 9 , 3 )) # output: 72.0 print ( math . ldexp ( - 5 , 2 )) # output: -20","title":"math.ldexp(x,i)"},{"location":"course/python/math/#mathmodfx","text":"Return the fractional and integer parts of x. Both results carry the sign of x and are floats. import math print ( math . modf ( 9 )) # output: (0.0, 9.0) print ( math . modf ( 12.5 )) # output: (0.5, 12.0)","title":"math.modf(x)"},{"location":"course/python/math/#mathnextafterxy","text":"Return the next floating-point value after x towards y. import math print ( math . nextafter ( - 5 , math . inf )) # output: -4.999999999999999 print ( math . nextafter ( 10 , - math . inf )) # output: 9.999999999999998 print ( math . nextafter ( 16 , 0.0 )) # output: 15.999999999999998","title":"math.nextafter(x,y)"},{"location":"course/python/math/#mathproditerable-start1","text":"Calculate the product of all the elements in the input iterable. The default start value for the product is 1. import math print ( math . prod ([ 1 , 2 , 3 , 4 , 5 , 6 ])) # output: 720 print ( math . prod ([])) # output: 1","title":"math.prod(iterable, start=1)"},{"location":"course/python/math/#mathremainderxy","text":"Returns the closest value that can make numerator completely divisible by the denominator import math print ( math . remainder ( 17 , 2 )) # output: 1 print ( math . remainder ( 2 , 17 )) # output: 2","title":"math.remainder(x,y)"},{"location":"course/python/math/#mathtruncx","text":"Returns the truncated integer parts of a number import math print ( math . trunc ( 2.77 )) # output: 2 print ( math . trunc ( - 3.77 )) # output: -3","title":"math.trunc(x)"},{"location":"course/python/math/#mathpowx-y","text":"Returns the value of x to the power of y import math print ( math . pow ( 2 , 4 )) # output: 16.0","title":"math.pow(x, y)"},{"location":"course/python/math/#mathexpx","text":"Return e raised to the power x, where e = 2.718281\u2026 is the base of natural logarithms. import math print ( math . exp ( 4 )) # output: 54.598150033144236 print ( math . exp ( - 6.89 )) # output: 0.0010179138409954387","title":"math.exp(x)"},{"location":"course/python/math/#mathexpm1x","text":"Return e raised to the power x, minus 1. Here e is the base of natural logarithms. import math print ( math . expm1 ( 4 )) # output: 53.598150033144236","title":"math.expm1(x)"},{"location":"course/python/math/#mathlogx-b","text":"return the logarithm of x to the given base, calculated as log(x)/log(base). import math print ( math . log ( 10 , 2 )) # output: 3.3219280948873626","title":"math.log(x, [b])"},{"location":"course/python/math/#mathlog1px","text":"Return the natural logarithm of 1+x (base e). The result is calculated in a way which is accurate for x near zero. import math print ( math . log1p ( 10 )) # output: 2.3978952727983707","title":"math.log1p(x)"},{"location":"course/python/math/#mathlog2x","text":"Return the base-2 logarithm of x. This is usually more accurate than log(x, 2). import math print ( math . log2 ( 10 )) # output: 3.321928094887362 Math module also provides trignometric calculations also. Note: If you want more advanced maths then look at python packages like Numpy , SciPy , Statsmodel , Scikit-learn , etc.","title":"math.log2(x)"},{"location":"course/python/math/#references","text":"https://docs.python.org/3/library/math.html","title":"References"},{"location":"course/python/method-overload-override/","text":"Python method overload & override \u00b6 Prerequisite \u00b6 Python Inheritance what is method overloading? \u00b6 Method overloading simply means that a \" function/method \" with same \" name \" behaves differently based on the number of parameters or their data types. Note: Python does not support the same function/method to defined multiple times by default. function overloading \u00b6 Let's take a simple function named add which adds numbers if we pass int and concatenates if we pass strings. we can use the conditionals to solve it. def add ( x , y ): if isinstance ( x , int ) and isinstance ( y , int ): return x + y else : return f ' { x }{ y } ' # pass integers print ( add ( 1 , 2 )) # output: 3 # pass strings print ( add ( \"1\" , \"2\" )) # output: 12 Note: Keep it simple, you don't want to copy the implementation from other languages. i.e java, c++. Because, construction of the language is different from one another. method overloading \u00b6 Just like for functions, it's not possible to use the same method name for different parameters. For this case also, we use conditionals to get the desired output. Let's look at an example class Package : def __init__ ( self , product ): self . product = product def pack_product ( self , is_gift = None ): if is_gift : print ( f \"Your { self . product } is packed with special care.\" ) else : print ( f \"Your { self . product } is packed.\" ) package = Package ( \"Mobile\" ) package . pack_product () # output: Your Mobile is packed. package . pack_product ( True ) # output: Your Mobile is packed with special care. Just like above, we can implement the method overload behaviour. method overriding \u00b6 Method overriding allows the child/dereived class to define same method name as parent/base class and can replace/modify the inherited behaviour of parent/base class. Let's look at an example class Rectangle : def __init__ ( self , length , breadth ): self . length = length self . breadth = breadth def area ( self ): return self . length * self . breadth class Square ( Rectangle ): def __init__ ( self , side ): super () . __init__ ( side , side ) rect = Rectange ( 10 , 20 ) print ( rect . area ()) # output: 200 square = Square ( 10 ) print ( square . area ()) # output: 100 If we look at above code we have overridden parent class Rectangle init method in the chile class Square Rectangle init method take two arguments where as child class Square take only one argument. so, by overriding the __init__ method we changed the behaviour of the child class. Note: Do not override if you didn't use the parent class method functionality.","title":"Python method overloading & overriding"},{"location":"course/python/method-overload-override/#python-method-overload-override","text":"","title":"Python method overload &amp; override"},{"location":"course/python/method-overload-override/#prerequisite","text":"Python Inheritance","title":"Prerequisite"},{"location":"course/python/method-overload-override/#what-is-method-overloading","text":"Method overloading simply means that a \" function/method \" with same \" name \" behaves differently based on the number of parameters or their data types. Note: Python does not support the same function/method to defined multiple times by default.","title":"what is method overloading?"},{"location":"course/python/method-overload-override/#function-overloading","text":"Let's take a simple function named add which adds numbers if we pass int and concatenates if we pass strings. we can use the conditionals to solve it. def add ( x , y ): if isinstance ( x , int ) and isinstance ( y , int ): return x + y else : return f ' { x }{ y } ' # pass integers print ( add ( 1 , 2 )) # output: 3 # pass strings print ( add ( \"1\" , \"2\" )) # output: 12 Note: Keep it simple, you don't want to copy the implementation from other languages. i.e java, c++. Because, construction of the language is different from one another.","title":"function overloading"},{"location":"course/python/method-overload-override/#method-overloading","text":"Just like for functions, it's not possible to use the same method name for different parameters. For this case also, we use conditionals to get the desired output. Let's look at an example class Package : def __init__ ( self , product ): self . product = product def pack_product ( self , is_gift = None ): if is_gift : print ( f \"Your { self . product } is packed with special care.\" ) else : print ( f \"Your { self . product } is packed.\" ) package = Package ( \"Mobile\" ) package . pack_product () # output: Your Mobile is packed. package . pack_product ( True ) # output: Your Mobile is packed with special care. Just like above, we can implement the method overload behaviour.","title":"method overloading"},{"location":"course/python/method-overload-override/#method-overriding","text":"Method overriding allows the child/dereived class to define same method name as parent/base class and can replace/modify the inherited behaviour of parent/base class. Let's look at an example class Rectangle : def __init__ ( self , length , breadth ): self . length = length self . breadth = breadth def area ( self ): return self . length * self . breadth class Square ( Rectangle ): def __init__ ( self , side ): super () . __init__ ( side , side ) rect = Rectange ( 10 , 20 ) print ( rect . area ()) # output: 200 square = Square ( 10 ) print ( square . area ()) # output: 100 If we look at above code we have overridden parent class Rectangle init method in the chile class Square Rectangle init method take two arguments where as child class Square take only one argument. so, by overriding the __init__ method we changed the behaviour of the child class. Note: Do not override if you didn't use the parent class method functionality.","title":"method overriding"},{"location":"course/python/modules-and-packages/","text":"python modules and packages \u00b6 module intro \u00b6 python module is a python file contains a set of functions, variables and classes modules are a way to organize the code based on the type of the functionality improves the project structure and maintainability improves code reusability module usage \u00b6 create a file named calculator.py with basic math functionalities. calculator.py pi = 3.14 def add ( a , b ): return a + b def subtract ( a , b ): return a - b def multiply ( a , b ): return a * b we can use the functions in the above module in another module. let's create a new module named main.py and use the module calculator main.py import calculator print ( calculator . add ( 10 , 20 )) # output: 30 print ( calculator . pi ) # output: 3.14 If we don't want to import complete module then we can import the required functions, variables, etc. using keywords from and import Let's see the code for that from calculator import add , pi print ( add ( 10 , 20 )) # output: 30 print ( pi ) # output: 3.14 in-built python modules \u00b6 python has the following modules sys os glob math io etc. package intro \u00b6 A python package is a directory which collection of modules. Modules that are related to each other are mainly put in the same package. When a module from an external package is required in a program, that package can be imported and its modules can be put to use. Package can contain a special file named __init__.py which distinguishes a package from a directory When you import a package, only the methods and the classes in the __init__.py file of that package are directly visible. package usage \u00b6 Lets create a package named calci which contains modules like basic.py and advanced.py The package directory looks something like this . \u251c\u2500\u2500 calci \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 advanced.py \u2502 \u2514\u2500\u2500 basic.py \u2514\u2500\u2500 main.py basic.py module contains functions like add , multiply , etc. advanced.py modules contains functions like celsius_to_fahrenheit , fahrenheit_to_celsius calci/advanced.py def celsius_to_fahrenheit ( celsius ): fahr = ( float ( celsius ) * 1.8 ) + 32 return fahr def fahrenheit_to_celsius ( fahrenheit ): celsius = ( 5 / 9 * fahrenheit - 32 ) return celsius calci/basic.py def add ( x , y ): return x + y def subtract ( x , y ): return x - y def multiply ( x , y ): return x * y main.py from calci.advanced import celsius_to_fahrenheit from calci.basic import add print ( add ( 10 , 20 )) # output: 30 print ( celsius_to_fahrenheit ( 10 )) # output: 50.0 when we run the module main.py it gives the ouptput. packages are very useful when we have reusable functionality. in-built python packages \u00b6 python has the following in-built packages logging json xml unittest etc.","title":"Python modules & packages"},{"location":"course/python/modules-and-packages/#python-modules-and-packages","text":"","title":"python modules and packages"},{"location":"course/python/modules-and-packages/#module-intro","text":"python module is a python file contains a set of functions, variables and classes modules are a way to organize the code based on the type of the functionality improves the project structure and maintainability improves code reusability","title":"module intro"},{"location":"course/python/modules-and-packages/#module-usage","text":"create a file named calculator.py with basic math functionalities. calculator.py pi = 3.14 def add ( a , b ): return a + b def subtract ( a , b ): return a - b def multiply ( a , b ): return a * b we can use the functions in the above module in another module. let's create a new module named main.py and use the module calculator main.py import calculator print ( calculator . add ( 10 , 20 )) # output: 30 print ( calculator . pi ) # output: 3.14 If we don't want to import complete module then we can import the required functions, variables, etc. using keywords from and import Let's see the code for that from calculator import add , pi print ( add ( 10 , 20 )) # output: 30 print ( pi ) # output: 3.14","title":"module usage"},{"location":"course/python/modules-and-packages/#in-built-python-modules","text":"python has the following modules sys os glob math io etc.","title":"in-built python modules"},{"location":"course/python/modules-and-packages/#package-intro","text":"A python package is a directory which collection of modules. Modules that are related to each other are mainly put in the same package. When a module from an external package is required in a program, that package can be imported and its modules can be put to use. Package can contain a special file named __init__.py which distinguishes a package from a directory When you import a package, only the methods and the classes in the __init__.py file of that package are directly visible.","title":"package intro"},{"location":"course/python/modules-and-packages/#package-usage","text":"Lets create a package named calci which contains modules like basic.py and advanced.py The package directory looks something like this . \u251c\u2500\u2500 calci \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 advanced.py \u2502 \u2514\u2500\u2500 basic.py \u2514\u2500\u2500 main.py basic.py module contains functions like add , multiply , etc. advanced.py modules contains functions like celsius_to_fahrenheit , fahrenheit_to_celsius calci/advanced.py def celsius_to_fahrenheit ( celsius ): fahr = ( float ( celsius ) * 1.8 ) + 32 return fahr def fahrenheit_to_celsius ( fahrenheit ): celsius = ( 5 / 9 * fahrenheit - 32 ) return celsius calci/basic.py def add ( x , y ): return x + y def subtract ( x , y ): return x - y def multiply ( x , y ): return x * y main.py from calci.advanced import celsius_to_fahrenheit from calci.basic import add print ( add ( 10 , 20 )) # output: 30 print ( celsius_to_fahrenheit ( 10 )) # output: 50.0 when we run the module main.py it gives the ouptput. packages are very useful when we have reusable functionality.","title":"package usage"},{"location":"course/python/modules-and-packages/#in-built-python-packages","text":"python has the following in-built packages logging json xml unittest etc.","title":"in-built python packages"},{"location":"course/python/numbers/","text":"Python has three types of numbers. int float complex Int \u00b6 An integer is the number zero, a positive natural number or a negative integer with a minus sign. num = 10 print ( num ) print ( type ( num )) Float \u00b6 Float is a positive or negative number, containing one or more decimals. num = 12.5 print ( num ) print ( type ( num )) Complex \u00b6 Complex numbers are written with a \"j\" as the imaginary part num = 12.5 + 2 j print ( num ) print ( type ( num )) converting number types \u00b6 we can convert from one type to another with the int() , float() , and complex() built-in functions. convert int to float num_int = 10 num_float = float ( num_int ) print ( num_float ) convert float to int num_float = 25.4 num_int = float ( num_float ) print ( num_int ) convert int to complex num_int = 25 num_comp = complex ( num_int ) print ( num_comp ) find sum of two numbers \u00b6 Let's write a program to find the sum of numbers num1 = 10 num2 = 20 print ( num1 + num2 )","title":"Python numbers"},{"location":"course/python/numbers/#int","text":"An integer is the number zero, a positive natural number or a negative integer with a minus sign. num = 10 print ( num ) print ( type ( num ))","title":"Int"},{"location":"course/python/numbers/#float","text":"Float is a positive or negative number, containing one or more decimals. num = 12.5 print ( num ) print ( type ( num ))","title":"Float"},{"location":"course/python/numbers/#complex","text":"Complex numbers are written with a \"j\" as the imaginary part num = 12.5 + 2 j print ( num ) print ( type ( num ))","title":"Complex"},{"location":"course/python/numbers/#converting-number-types","text":"we can convert from one type to another with the int() , float() , and complex() built-in functions. convert int to float num_int = 10 num_float = float ( num_int ) print ( num_float ) convert float to int num_float = 25.4 num_int = float ( num_float ) print ( num_int ) convert int to complex num_int = 25 num_comp = complex ( num_int ) print ( num_comp )","title":"converting number types"},{"location":"course/python/numbers/#find-sum-of-two-numbers","text":"Let's write a program to find the sum of numbers num1 = 10 num2 = 20 print ( num1 + num2 )","title":"find sum of two numbers"},{"location":"course/python/operators/","text":"An operator is a symbol or a character in programming which takes two operands to perform an action or a computation. For example, in the expression \" 4 + 5 \" , \" + \" is an operator It will perform sum of numbers \" 4 \" and \" 5 \" and returns result \" 9 \". Types of operators in python \u00b6 Arithmetic Operators Comparison Operators Assignment Operators Logical Operators Bitwise Operators Membership Operators Identity Operators Arithmetic Operators \u00b6 consider the values a = 10 and b = 21 Operator Name Example Output + Addition print(a + b) 31 - Subtraction print(a - b) -11 * Multiplication print(a * b) 210 / Division print(b / a) 2.1 % Modulus print(a % b) 10 ** Exponentiation print(2**5) 32 // Floor division print(b // a) 2 Comparison Operators \u00b6 consider the values a = 10 and b = 20 . comparison operators always returns a boolean value either True or False Operator Description Example Output > Greater than print(b > a) True < Less than print(b < a) False >= Greater than or equal print(b >= a) True <= Less than or equal print(b <= a) False Assignment Operators \u00b6 Consider the value of b = 20 Operator Description Example = Assigns the value a = 100 += Performs addition & assignment b += 23 equivalent to b = b + 23 -= Performs subtraction & assignment b -= 13 equivalent to b = b - 13 *= Performs multiplication & assignment b *= 3 equivalent to b = b * 3 /= Performs division & assignment b /= 13 equivalent to b = b / 13 %= Performs modulus operation & assign b %= 3 equivalent to b = b % 3 //= Performs floor div & assignment b //= 13 equivalent to b = b // 13 **= Performs exp calculation & assignment b **= 3 equivalent to b = b ** 3 Logical Operators \u00b6 Operator Description Example and Returns boolean value if given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 90 and a < 110 \u21d2 True a > 90 and a > 110 \u21d2 False or Returns boolean value At least one of the given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 190 and a < 110 \u21d2 True a > 190 and a > 110 \u21d2 True not It inverts the boolean value not True \u21d2 False not False \u21d2 True Bitwise Operators \u00b6 Operator Description & Operator copies a bit to the result if it exists in both operands | It copies a bit if it exists in either operand. ^ It copies the bit if it is set in one operand but not both. ~ It is unary and has the effect of 'flipping' bits. >> The left operands value is moved left by the number of bits specified by the right operand. << The left operands value is moved right by the number of bits specified by the right operand. Membership Operators \u00b6 Operator Description Example in Returns boolean value if it finds the var in given sequence returns true a = 10 a in [1, 2, 10, 20] \u21d2 True a in [1, 2, 110, 20] \u21d2 False not in Returns boolean value a = 10 a not in [1, 2, 10, 20] \u21d2 False a not in [1, 2, 110, 20] \u21d2 True Identity Operators \u00b6 Operator Description Example is Returns boolean value True if both variables points to the same memory location in the RAM a = 100; b = 100; c = 101; a is b \u21d2 True a is c \u21d2 False Is not Returns boolean value a = 100 b = 100 c = 101 a is not b \u21d2 False a is not c \u21d2 True Note: Try to remember all operators. we will use it very frequently.","title":"Python operators"},{"location":"course/python/operators/#types-of-operators-in-python","text":"Arithmetic Operators Comparison Operators Assignment Operators Logical Operators Bitwise Operators Membership Operators Identity Operators","title":"Types of operators in python"},{"location":"course/python/operators/#arithmetic-operators","text":"consider the values a = 10 and b = 21 Operator Name Example Output + Addition print(a + b) 31 - Subtraction print(a - b) -11 * Multiplication print(a * b) 210 / Division print(b / a) 2.1 % Modulus print(a % b) 10 ** Exponentiation print(2**5) 32 // Floor division print(b // a) 2","title":"Arithmetic Operators"},{"location":"course/python/operators/#comparison-operators","text":"consider the values a = 10 and b = 20 . comparison operators always returns a boolean value either True or False Operator Description Example Output > Greater than print(b > a) True < Less than print(b < a) False >= Greater than or equal print(b >= a) True <= Less than or equal print(b <= a) False","title":"Comparison Operators"},{"location":"course/python/operators/#assignment-operators","text":"Consider the value of b = 20 Operator Description Example = Assigns the value a = 100 += Performs addition & assignment b += 23 equivalent to b = b + 23 -= Performs subtraction & assignment b -= 13 equivalent to b = b - 13 *= Performs multiplication & assignment b *= 3 equivalent to b = b * 3 /= Performs division & assignment b /= 13 equivalent to b = b / 13 %= Performs modulus operation & assign b %= 3 equivalent to b = b % 3 //= Performs floor div & assignment b //= 13 equivalent to b = b // 13 **= Performs exp calculation & assignment b **= 3 equivalent to b = b ** 3","title":"Assignment Operators"},{"location":"course/python/operators/#logical-operators","text":"Operator Description Example and Returns boolean value if given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 90 and a < 110 \u21d2 True a > 90 and a > 110 \u21d2 False or Returns boolean value At least one of the given conditions are true \u21d2 True Otherwise \u21d2 False a = 100 a > 190 and a < 110 \u21d2 True a > 190 and a > 110 \u21d2 True not It inverts the boolean value not True \u21d2 False not False \u21d2 True","title":"Logical Operators"},{"location":"course/python/operators/#bitwise-operators","text":"Operator Description & Operator copies a bit to the result if it exists in both operands | It copies a bit if it exists in either operand. ^ It copies the bit if it is set in one operand but not both. ~ It is unary and has the effect of 'flipping' bits. >> The left operands value is moved left by the number of bits specified by the right operand. << The left operands value is moved right by the number of bits specified by the right operand.","title":"Bitwise Operators"},{"location":"course/python/operators/#membership-operators","text":"Operator Description Example in Returns boolean value if it finds the var in given sequence returns true a = 10 a in [1, 2, 10, 20] \u21d2 True a in [1, 2, 110, 20] \u21d2 False not in Returns boolean value a = 10 a not in [1, 2, 10, 20] \u21d2 False a not in [1, 2, 110, 20] \u21d2 True","title":"Membership Operators"},{"location":"course/python/operators/#identity-operators","text":"Operator Description Example is Returns boolean value True if both variables points to the same memory location in the RAM a = 100; b = 100; c = 101; a is b \u21d2 True a is c \u21d2 False Is not Returns boolean value a = 100 b = 100 c = 101 a is not b \u21d2 False a is not c \u21d2 True Note: Try to remember all operators. we will use it very frequently.","title":"Identity Operators"},{"location":"course/python/pip-packages/","text":"PyPI is a repository of software for the python programming language. PyPI helps you find and install software developed and shared by the Python community. pip \u00b6 pip is a tool to install the python community packages pip is the recommended installer. install pip \u00b6 Download the script, from https://bootstrap.pypa.io/get-pip.py run the command python get-pip.py to install pip install a package using pip \u00b6 let install most used python package pandas using pip run the command pip install pandas to install the package package pandas is ready to use import pandas as pd data = [[ 'Anji' , 'B' , 'India' ], [ 'Eva' , 'D' , 'Russia' ]] df = pd . DataFrame ( data , columns = [ 'first_name' , 'last_name' , 'country' ]) print ( df ) # output: # first_name last_name country # 0 Anji B India # 1 Eva D Russia pip - install packages from git \u00b6 use the command pip install git+<repo url> let's install the django package using pip and git pip install git + https : // github . com / django / django . git References \u00b6 https://pypi.org/ https://pip.pypa.io/en/stable/installation/","title":"Python pip packages"},{"location":"course/python/pip-packages/#pip","text":"pip is a tool to install the python community packages pip is the recommended installer.","title":"pip"},{"location":"course/python/pip-packages/#install-pip","text":"Download the script, from https://bootstrap.pypa.io/get-pip.py run the command python get-pip.py to install pip","title":"install pip"},{"location":"course/python/pip-packages/#install-a-package-using-pip","text":"let install most used python package pandas using pip run the command pip install pandas to install the package package pandas is ready to use import pandas as pd data = [[ 'Anji' , 'B' , 'India' ], [ 'Eva' , 'D' , 'Russia' ]] df = pd . DataFrame ( data , columns = [ 'first_name' , 'last_name' , 'country' ]) print ( df ) # output: # first_name last_name country # 0 Anji B India # 1 Eva D Russia","title":"install a package using pip"},{"location":"course/python/pip-packages/#pip-install-packages-from-git","text":"use the command pip install git+<repo url> let's install the django package using pip and git pip install git + https : // github . com / django / django . git","title":"pip - install packages from git"},{"location":"course/python/pip-packages/#references","text":"https://pypi.org/ https://pip.pypa.io/en/stable/installation/","title":"References"},{"location":"course/python/polymorphism/","text":"Python Polymorphism \u00b6 Polymorphism = \"Poly\" + \"morphism\" \"Poly\" means Many \"morphism\" means combined form Polymorphism simply means that we can call the same method name with different/same parameters, and depending on the parameters, it will do different things. It can also be defined as follows Polymorphism can be defined as different objects acts differently for same interface(i.e functions, methods, classes) Let's look at an example class Rectangle : def __init__ ( self , length , width ): self . length = length self . width = width def area ( self ): return self . length * self . width class Circle : def __init__ ( self , radius ): self . radius = radius def area ( self ): return 3.14 * ( self . radius ** 2 ) def print_area ( shape ): print ( f \"type: { shape . __class__ . __name__ } \" ) print ( f \"area: { shape . area () } \" ) rect = Rectangle ( 10 , 20 ) print_area ( rect ) # ouput: # type: Rectangle # area: 200 circle = Circle ( 10 ) print_area ( circle ) # ouput: # type: Circle # area: 314.0 In the above code, we have two objects which are different types but has same method name area() When we call area on method area() on each object it calculated differently and gave the output. we can say print_area is a polymorphic function . Note: we use method overloading & method overriding to achieve polymorphism in most of the cases.","title":"Python polymorphism"},{"location":"course/python/polymorphism/#python-polymorphism","text":"Polymorphism = \"Poly\" + \"morphism\" \"Poly\" means Many \"morphism\" means combined form Polymorphism simply means that we can call the same method name with different/same parameters, and depending on the parameters, it will do different things. It can also be defined as follows Polymorphism can be defined as different objects acts differently for same interface(i.e functions, methods, classes) Let's look at an example class Rectangle : def __init__ ( self , length , width ): self . length = length self . width = width def area ( self ): return self . length * self . width class Circle : def __init__ ( self , radius ): self . radius = radius def area ( self ): return 3.14 * ( self . radius ** 2 ) def print_area ( shape ): print ( f \"type: { shape . __class__ . __name__ } \" ) print ( f \"area: { shape . area () } \" ) rect = Rectangle ( 10 , 20 ) print_area ( rect ) # ouput: # type: Rectangle # area: 200 circle = Circle ( 10 ) print_area ( circle ) # ouput: # type: Circle # area: 314.0 In the above code, we have two objects which are different types but has same method name area() When we call area on method area() on each object it calculated differently and gave the output. we can say print_area is a polymorphic function . Note: we use method overloading & method overriding to achieve polymorphism in most of the cases.","title":"Python Polymorphism"},{"location":"course/python/python-method-overloading/","text":"Python Method Overloading \u00b6 method overloading in python can be defined as writing the method in such a way that method will provide different functionality for different datatype arguments with the same method name. Programming languages like Java and C++ implements the method overloading by defining the two methods with the same name but different parameters. In python we do not implement *method overloading *in that way because Java and C++ languages are statically typed hence we need to specify the data types before compilation. But python is a dynamically typed language hence we can implement the same behavior with a same method in python. How to overload a method in python? \u00b6 Let's do some code to implement the method overloading in python. class SayHello : def hello ( self , first_name = None , last_name = None ): if first_name and last_name : print ( \"Hello {0} {1} !\" . format ( first_name , last_name )) elif first_name : print ( \"Hello {0} !\" . format ( first_name )) else : print ( \"Hello !\" ) obj = SayHello () obj . hello ( \"Anjaneyulu\" , \"Batta\" ) # Output: Hello Anjaneyulu Batta! obj . hello ( \"Anji\" ) # Output: Hello Anji ! obj . hello () # Output: Hello ! In above code we have implemented method overloading for the method hello. After creating object we have called the method hello with two arguments first name \"Anjaneyulu\" and last name \"Batta\" and the method hello returned output Hello Anjaneyulu Batta !. In the next line we called the same method with a single argument name \"Anji\" now the method returned Hello Anji !. In the next line we have called the same method without the parameter now, the method returned the output Hello !. In above code we can see that method hello is behaving differently for different parameters that means we are overloading the behavior of the method for different arguments.","title":"Python Method Overloading"},{"location":"course/python/python-method-overloading/#python-method-overloading","text":"method overloading in python can be defined as writing the method in such a way that method will provide different functionality for different datatype arguments with the same method name. Programming languages like Java and C++ implements the method overloading by defining the two methods with the same name but different parameters. In python we do not implement *method overloading *in that way because Java and C++ languages are statically typed hence we need to specify the data types before compilation. But python is a dynamically typed language hence we can implement the same behavior with a same method in python.","title":"Python Method Overloading"},{"location":"course/python/python-method-overloading/#how-to-overload-a-method-in-python","text":"Let's do some code to implement the method overloading in python. class SayHello : def hello ( self , first_name = None , last_name = None ): if first_name and last_name : print ( \"Hello {0} {1} !\" . format ( first_name , last_name )) elif first_name : print ( \"Hello {0} !\" . format ( first_name )) else : print ( \"Hello !\" ) obj = SayHello () obj . hello ( \"Anjaneyulu\" , \"Batta\" ) # Output: Hello Anjaneyulu Batta! obj . hello ( \"Anji\" ) # Output: Hello Anji ! obj . hello () # Output: Hello ! In above code we have implemented method overloading for the method hello. After creating object we have called the method hello with two arguments first name \"Anjaneyulu\" and last name \"Batta\" and the method hello returned output Hello Anjaneyulu Batta !. In the next line we called the same method with a single argument name \"Anji\" now the method returned Hello Anji !. In the next line we have called the same method without the parameter now, the method returned the output Hello !. In above code we can see that method hello is behaving differently for different parameters that means we are overloading the behavior of the method for different arguments.","title":"How to overload a method in python?"},{"location":"course/python/random/","text":"generate random float between 0 and 1 - random() \u00b6 import random print ( random . random ()) # output: 0.607414853052997 generate random integer beween two numbers - randint(a, b) \u00b6 import random print ( random . randint ( 1 , 10 )) # output: 8 print ( random . randint ( 1 , 10 )) # output: 5 select a random element from a sample - choice([i1, i2, ...]) \u00b6 lets take sample of fruites [\"apple\", \"banana\", \"orange\", \"grapes\"] and select a fruit randomly import random print ( random . choice ([ \"apple\" , \"banana\" , \"orange\" , \"grapes\" ])) # output: orange select k number of random elements from a sample - sample([i1, i2 ,...], k=n) \u00b6 data sample [\"apple\", \"banana\", \"orange\", \"grapes\"] select 3 random elements from above data sample import random print ( random . sample ([ \"apple\" , \"banana\" , \"orange\" , \"grapes\" ], k = 3 )) # output: ['grapes', 'banana', 'orange'] shuffle the given data sample - shuffle(data) \u00b6 data sample [1,2,3,4,5] import random numbers = [ 1 , 2 , 3 , 4 , 5 ] random . shuffle ( numbers ) print ( numbers ) # output: [5, 1, 4, 2, 3] If we look at the output we can see that the sample numbers has been shuffled. generate random number between two numbers - uniform(n1, n2) \u00b6 let's write a simple code to generate random number between two given number inclusive. import random n1 = 10 n2 = 20 print ( random . uniform ( n1 , n2 )) # output: 19.69388160404919 print ( random . uniform ( n1 , n2 )) # output: 16.13326820546709 References: \u00b6 https://docs.python.org/3/library/random.html","title":"Python random"},{"location":"course/python/random/#generate-random-float-between-0-and-1-random","text":"import random print ( random . random ()) # output: 0.607414853052997","title":"generate random float between 0 and 1 - random()"},{"location":"course/python/random/#generate-random-integer-beween-two-numbers-randinta-b","text":"import random print ( random . randint ( 1 , 10 )) # output: 8 print ( random . randint ( 1 , 10 )) # output: 5","title":"generate random integer beween two numbers - randint(a, b)"},{"location":"course/python/random/#select-a-random-element-from-a-sample-choicei1-i2","text":"lets take sample of fruites [\"apple\", \"banana\", \"orange\", \"grapes\"] and select a fruit randomly import random print ( random . choice ([ \"apple\" , \"banana\" , \"orange\" , \"grapes\" ])) # output: orange","title":"select a random element from a sample - choice([i1, i2, ...])"},{"location":"course/python/random/#select-k-number-of-random-elements-from-a-sample-samplei1-i2-kn","text":"data sample [\"apple\", \"banana\", \"orange\", \"grapes\"] select 3 random elements from above data sample import random print ( random . sample ([ \"apple\" , \"banana\" , \"orange\" , \"grapes\" ], k = 3 )) # output: ['grapes', 'banana', 'orange']","title":"select k number of random elements from a sample - sample([i1, i2 ,...], k=n)"},{"location":"course/python/random/#shuffle-the-given-data-sample-shuffledata","text":"data sample [1,2,3,4,5] import random numbers = [ 1 , 2 , 3 , 4 , 5 ] random . shuffle ( numbers ) print ( numbers ) # output: [5, 1, 4, 2, 3] If we look at the output we can see that the sample numbers has been shuffled.","title":"shuffle the given data sample - shuffle(data)"},{"location":"course/python/random/#generate-random-number-between-two-numbers-uniformn1-n2","text":"let's write a simple code to generate random number between two given number inclusive. import random n1 = 10 n2 = 20 print ( random . uniform ( n1 , n2 )) # output: 19.69388160404919 print ( random . uniform ( n1 , n2 )) # output: 16.13326820546709","title":"generate random number between two numbers - uniform(n1, n2)"},{"location":"course/python/random/#references","text":"https://docs.python.org/3/library/random.html","title":"References:"},{"location":"course/python/reading-and-writing-files/","text":"Python reading and writing files \u00b6 Python has several functions for creating, reading, updating, and deleting files. file handling \u00b6 open built in function is used to work with files for reading/writing. four different modes to open a file \"r\" - Read Opens a file for reading, error if the file does not exist \"a\" - Append Opens a file for appending, creates the file if it does not exist \"w\" - Write Opens a file for writing, creates the file if it does not exist \"x\" - Create Creates the specified file, returns an error if the file exists \"t\" - Text Default value. Text mode \"b\" - Binary Binary mode (e.g. images) Note: we can use multiple modes at the same time like rb , rw , etc. read contents of an existing file \u00b6 let's say we have file named names.csv names.csv John Ram Kareem Buddha let's write the code to read the file. f = open ( \"names.csv\" , \"r\" ) print ( f . read ()) f . close () the above code also equivalent to below code with open ( \"names.csv\" , \"r\" ): print ( f . read ()) f . close () whenever you open a file it's good practice to close it. because, when we open a file it loads into the memory if we call close() method then it removes the reference to that memory. above program gives the following output. John Ram Kareem Buddha write contents to an existing file \u00b6 let's write some names to file named friends.csv friends = [ \"John\" , \"Dwyne\" , \"Kalki\" ] with open ( '/tmp/friends.csv' , 'w' ) as f : for name in friends : f . write ( name + \" \\n \" ) above program overrides the existing contents if file exists and writes the friend names to the file. append contents to an existing file \u00b6 let's append names to file named friends.csv friends = [ \"John\" , \"Dwyne\" , \"Kalki\" ] with open ( '/tmp/friends.csv' , 'a' ) as f : for name in friends : f . write ( name + \" \\n \" ) above program will add friends names to the file friends.csv It won't override existing contents of the file. reading & writing file with a encoding \u00b6 encoding can be \"utf-8\", \"latin-1\", etc. default it uses \"utf-8\" encoding let's look at the code sample with open ( '/tmp/data.txt' , \"rw\" , encoding = \"latin-1\" ) as f : # do something pass Note: you can only do operations based on the file open mode. reading binary files \u00b6 we can read binary files like images and videos, etc. let's write code to read an image img_file_path = '/tmp/abcd.png' with open ( '/tmp/data.txt' , \"rb\" ) as f : binary_data = f . read () # do something TextIOWrapper & BufferedReader \u00b6 If we open a file with mode r , w etc. other than binary b then the contents are loaded into class TextIOWrapper If we open a file with mode b then the contents are loaded into class BufferedReader Base the loaded class we can use the available methods & attributes related to the class. References: \u00b6 https://docs.python.org/3/library/functions.html#open https://docs.python.org/3/library/io.html#io.BufferedReader https://docs.python.org/3/library/io.html#io.TextIOWrapper","title":"Python reading & writing files"},{"location":"course/python/reading-and-writing-files/#python-reading-and-writing-files","text":"Python has several functions for creating, reading, updating, and deleting files.","title":"Python reading and writing files"},{"location":"course/python/reading-and-writing-files/#file-handling","text":"open built in function is used to work with files for reading/writing. four different modes to open a file \"r\" - Read Opens a file for reading, error if the file does not exist \"a\" - Append Opens a file for appending, creates the file if it does not exist \"w\" - Write Opens a file for writing, creates the file if it does not exist \"x\" - Create Creates the specified file, returns an error if the file exists \"t\" - Text Default value. Text mode \"b\" - Binary Binary mode (e.g. images) Note: we can use multiple modes at the same time like rb , rw , etc.","title":"file handling"},{"location":"course/python/reading-and-writing-files/#read-contents-of-an-existing-file","text":"let's say we have file named names.csv names.csv John Ram Kareem Buddha let's write the code to read the file. f = open ( \"names.csv\" , \"r\" ) print ( f . read ()) f . close () the above code also equivalent to below code with open ( \"names.csv\" , \"r\" ): print ( f . read ()) f . close () whenever you open a file it's good practice to close it. because, when we open a file it loads into the memory if we call close() method then it removes the reference to that memory. above program gives the following output. John Ram Kareem Buddha","title":"read contents of an existing file"},{"location":"course/python/reading-and-writing-files/#write-contents-to-an-existing-file","text":"let's write some names to file named friends.csv friends = [ \"John\" , \"Dwyne\" , \"Kalki\" ] with open ( '/tmp/friends.csv' , 'w' ) as f : for name in friends : f . write ( name + \" \\n \" ) above program overrides the existing contents if file exists and writes the friend names to the file.","title":"write contents to an existing file"},{"location":"course/python/reading-and-writing-files/#append-contents-to-an-existing-file","text":"let's append names to file named friends.csv friends = [ \"John\" , \"Dwyne\" , \"Kalki\" ] with open ( '/tmp/friends.csv' , 'a' ) as f : for name in friends : f . write ( name + \" \\n \" ) above program will add friends names to the file friends.csv It won't override existing contents of the file.","title":"append contents to an existing file"},{"location":"course/python/reading-and-writing-files/#reading-writing-file-with-a-encoding","text":"encoding can be \"utf-8\", \"latin-1\", etc. default it uses \"utf-8\" encoding let's look at the code sample with open ( '/tmp/data.txt' , \"rw\" , encoding = \"latin-1\" ) as f : # do something pass Note: you can only do operations based on the file open mode.","title":"reading &amp; writing file with a encoding"},{"location":"course/python/reading-and-writing-files/#reading-binary-files","text":"we can read binary files like images and videos, etc. let's write code to read an image img_file_path = '/tmp/abcd.png' with open ( '/tmp/data.txt' , \"rb\" ) as f : binary_data = f . read () # do something","title":"reading binary files"},{"location":"course/python/reading-and-writing-files/#textiowrapper-bufferedreader","text":"If we open a file with mode r , w etc. other than binary b then the contents are loaded into class TextIOWrapper If we open a file with mode b then the contents are loaded into class BufferedReader Base the loaded class we can use the available methods & attributes related to the class.","title":"TextIOWrapper &amp; BufferedReader"},{"location":"course/python/reading-and-writing-files/#references","text":"https://docs.python.org/3/library/functions.html#open https://docs.python.org/3/library/io.html#io.BufferedReader https://docs.python.org/3/library/io.html#io.TextIOWrapper","title":"References:"},{"location":"course/python/regex/","text":"what is regex? \u00b6 Regular Expressions or regex are a tool for matching patterns in text. Python has a built-in package called re, which can be used to work with Regular Expressions. find a pattern using python regex \u00b6 Lets look for a ZIP code in the given text. ZIP code characheristics It has length of 6 and all are numbers import re address1 = \"43 Diamond Harbour Road, Alipore, Kolkata, 700027\" address2 = \"781, Golden towers, Zip:500001, Hyderabad\" zip_code_pattern = r '.*(?P<zip_code>[0-9] {6} ).*' output = re . findall ( zip_code_pattern , address1 ) print ( output ) # output: ['700027'] output = re . findall ( zip_code_pattern , address2 ) print ( output ) # output: ['500001'] character sets \u00b6 Pattern Meaning \\w Match a single word character a-z, A-Z, 0-9, and underscore (_) \\d Match a single digit 0-9 \\s Match whitespace including \\t, \\n, and \\r and space character . Match any character except the newline \\W Match a character except for a word character \\D Match a character except for a digit \\S Match a single character except for a whitespace character anchors \u00b6 Pattern Meaning ^ Match at the beginning of a string $ Match at the end of a string \\b Match a position defined as a word boundary \\B Match a position that is not a word boundary quantifiers \u00b6 Quantifiers (Greedy) Non-greedy Quantifiers (Lazy) Meaning * *? Match its preceding element zero or more times. + +? Match its preceding element one or more times. ? ?? Match its preceding element zero or one time. {n} {n}? Match its preceding element exactly n times. {n , } {n,}? Match its preceding element at least n times. {n , m} {n , m}? Match its preceding element from n to m times sets & ranges \u00b6 Pattern Meaning [XYZ] Match any of three elements X, Y, and Z [X-Y] Match a range from X to Y ^[XYZ] Match any single element except X, Y, and Z ^[X-Y] Match any single element {n , } Match its preceding element at least n times. {n , m} Match its preceding element from n to m times capturing groups \u00b6 Pattern Meaning (X) Capture the X in the group (?P<name>X) Capture the X and assign it the name \\N Reference the capturing group #N \\g<N> Reference the capturing group #N (alternative syntax) alternation \u00b6 Pattern Meaning X | Y Match either X or Y look around \u00b6 Pattern Meaning X(?=Y) Match X but only if it is followed by Y X(?!Y) Match X but only if it is NOT followed by Y (?<=Y)X Match X if there is Y before it (?<!Y)X Match X if there is NO Y before it regex functions \u00b6 Function Description findall() Return a list of matches or None finditer() Return an iterator yielding all non-overlapping matches search() Return the first match fullmatch() Return a Match object if the whole string matches a pattern match() Return the match at the beginning of a string or None sub() Return a string with matched replaced with a replacement split() Split a string at the occurrences of matches regex flags \u00b6 Flag Alias Inline Flag Meaning re.ASCII re.A ?m The re.ASCII is relevant to the byte patterns only. It makes the \\w, \\W,\\b, \\B, \\d, \\D, and \\S perform ASCII-only matching instead of full Unicode matching. re.DEBUG N/A N/A The re.DEBUG shows the debug information of compiled pattern. re.IGNORECASE re.I ?i perform case-insensitive matching. It means that the [A-Z] will also match lowercase letters. re.LOCALE re.L ?L The re.LOCALE is relevant only to the byte pattern. It makes the \\w, \\W, \\b, \\B and case-sensitive matching dependent on the current locale. The re.LOCALE is not compatible with the re.ASCII flag. re.MUTILINE re.M ?m The re.MULTILINE makes the ^ matches at the beginning of a string and at the beginning of each line and $ matches at the end of a string and at the end of each line. re.DOTALL re.S ?s By default, the dot (.) matches any characters except a newline. The re.DOTALL makes the dot (.) matches all characters including a newline. re.VERBOSE re.X ?x The re.VERBOSE flag allows you to organize a pattern into logical sections visually and add comments. References: \u00b6 https://docs.python.org/3/library/re.html https://regex101.com/","title":"Python regex"},{"location":"course/python/regex/#what-is-regex","text":"Regular Expressions or regex are a tool for matching patterns in text. Python has a built-in package called re, which can be used to work with Regular Expressions.","title":"what is regex?"},{"location":"course/python/regex/#find-a-pattern-using-python-regex","text":"Lets look for a ZIP code in the given text. ZIP code characheristics It has length of 6 and all are numbers import re address1 = \"43 Diamond Harbour Road, Alipore, Kolkata, 700027\" address2 = \"781, Golden towers, Zip:500001, Hyderabad\" zip_code_pattern = r '.*(?P<zip_code>[0-9] {6} ).*' output = re . findall ( zip_code_pattern , address1 ) print ( output ) # output: ['700027'] output = re . findall ( zip_code_pattern , address2 ) print ( output ) # output: ['500001']","title":"find a pattern using python regex"},{"location":"course/python/regex/#character-sets","text":"Pattern Meaning \\w Match a single word character a-z, A-Z, 0-9, and underscore (_) \\d Match a single digit 0-9 \\s Match whitespace including \\t, \\n, and \\r and space character . Match any character except the newline \\W Match a character except for a word character \\D Match a character except for a digit \\S Match a single character except for a whitespace character","title":"character sets"},{"location":"course/python/regex/#anchors","text":"Pattern Meaning ^ Match at the beginning of a string $ Match at the end of a string \\b Match a position defined as a word boundary \\B Match a position that is not a word boundary","title":"anchors"},{"location":"course/python/regex/#quantifiers","text":"Quantifiers (Greedy) Non-greedy Quantifiers (Lazy) Meaning * *? Match its preceding element zero or more times. + +? Match its preceding element one or more times. ? ?? Match its preceding element zero or one time. {n} {n}? Match its preceding element exactly n times. {n , } {n,}? Match its preceding element at least n times. {n , m} {n , m}? Match its preceding element from n to m times","title":"quantifiers"},{"location":"course/python/regex/#sets-ranges","text":"Pattern Meaning [XYZ] Match any of three elements X, Y, and Z [X-Y] Match a range from X to Y ^[XYZ] Match any single element except X, Y, and Z ^[X-Y] Match any single element {n , } Match its preceding element at least n times. {n , m} Match its preceding element from n to m times","title":"sets &amp; ranges"},{"location":"course/python/regex/#capturing-groups","text":"Pattern Meaning (X) Capture the X in the group (?P<name>X) Capture the X and assign it the name \\N Reference the capturing group #N \\g<N> Reference the capturing group #N (alternative syntax)","title":"capturing groups"},{"location":"course/python/regex/#alternation","text":"Pattern Meaning X | Y Match either X or Y","title":"alternation"},{"location":"course/python/regex/#look-around","text":"Pattern Meaning X(?=Y) Match X but only if it is followed by Y X(?!Y) Match X but only if it is NOT followed by Y (?<=Y)X Match X if there is Y before it (?<!Y)X Match X if there is NO Y before it","title":"look around"},{"location":"course/python/regex/#regex-functions","text":"Function Description findall() Return a list of matches or None finditer() Return an iterator yielding all non-overlapping matches search() Return the first match fullmatch() Return a Match object if the whole string matches a pattern match() Return the match at the beginning of a string or None sub() Return a string with matched replaced with a replacement split() Split a string at the occurrences of matches","title":"regex functions"},{"location":"course/python/regex/#regex-flags","text":"Flag Alias Inline Flag Meaning re.ASCII re.A ?m The re.ASCII is relevant to the byte patterns only. It makes the \\w, \\W,\\b, \\B, \\d, \\D, and \\S perform ASCII-only matching instead of full Unicode matching. re.DEBUG N/A N/A The re.DEBUG shows the debug information of compiled pattern. re.IGNORECASE re.I ?i perform case-insensitive matching. It means that the [A-Z] will also match lowercase letters. re.LOCALE re.L ?L The re.LOCALE is relevant only to the byte pattern. It makes the \\w, \\W, \\b, \\B and case-sensitive matching dependent on the current locale. The re.LOCALE is not compatible with the re.ASCII flag. re.MUTILINE re.M ?m The re.MULTILINE makes the ^ matches at the beginning of a string and at the beginning of each line and $ matches at the end of a string and at the end of each line. re.DOTALL re.S ?s By default, the dot (.) matches any characters except a newline. The re.DOTALL makes the dot (.) matches all characters including a newline. re.VERBOSE re.X ?x The re.VERBOSE flag allows you to organize a pattern into logical sections visually and add comments.","title":"regex flags"},{"location":"course/python/regex/#references","text":"https://docs.python.org/3/library/re.html https://regex101.com/","title":"References:"},{"location":"course/python/scope/","text":"A variable is only available from inside the block of code where it is created. The block is called the scope of the variable. Local Scope \u00b6 variable can be accessed inside the block of the code if variable created inside function then it can be accessed inside the function only def square_of_num ( num ): npow = 2 return print ( square_of_num ( 10 )) # output: 100 variable npow can be accessed inside function only otherwise it will throw NameError variable npow is called as local variable Function Inside Function \u00b6 the local variable can be accessed from a function within the function. lets look at the below code def func (): x = 300 def inner (): return x return inner () output = func () print ( output ) # output: 300 * when the code is executed it returns the value of the variable x Global Scope \u00b6 a variable created in the main body of the python code is a global variable and belongs to the global scope. global variables are available from within any scope, global and local. x = 100 def func (): print ( x ) func () # output: 100 print ( x ) # output: 100 Naming Variables \u00b6 same variable name can be used in both local and global scopes. gobal scope varible can't be overridden by the local variable. name = \"Anji\" def change_name (): name = \"Avtar\" print ( name ) change_name () # output: \"Avtar\" print ( name ) # output: \"Anji\" Global Keyword \u00b6 global variable value can be udated inside the function by using the global keyword name = \"Anji\" def change_name (): global name name = \"Avtar\" print ( name ) change_name () # output: \"Avtar\" print ( name ) # output: \"Avtar\"","title":"Python scope"},{"location":"course/python/scope/#local-scope","text":"variable can be accessed inside the block of the code if variable created inside function then it can be accessed inside the function only def square_of_num ( num ): npow = 2 return print ( square_of_num ( 10 )) # output: 100 variable npow can be accessed inside function only otherwise it will throw NameError variable npow is called as local variable","title":"Local Scope"},{"location":"course/python/scope/#function-inside-function","text":"the local variable can be accessed from a function within the function. lets look at the below code def func (): x = 300 def inner (): return x return inner () output = func () print ( output ) # output: 300 * when the code is executed it returns the value of the variable x","title":"Function Inside Function"},{"location":"course/python/scope/#global-scope","text":"a variable created in the main body of the python code is a global variable and belongs to the global scope. global variables are available from within any scope, global and local. x = 100 def func (): print ( x ) func () # output: 100 print ( x ) # output: 100","title":"Global Scope"},{"location":"course/python/scope/#naming-variables","text":"same variable name can be used in both local and global scopes. gobal scope varible can't be overridden by the local variable. name = \"Anji\" def change_name (): name = \"Avtar\" print ( name ) change_name () # output: \"Avtar\" print ( name ) # output: \"Anji\"","title":"Naming Variables"},{"location":"course/python/scope/#global-keyword","text":"global variable value can be udated inside the function by using the global keyword name = \"Anji\" def change_name (): global name name = \"Avtar\" print ( name ) change_name () # output: \"Avtar\" print ( name ) # output: \"Avtar\"","title":"Global Keyword"},{"location":"course/python/sets/","text":"A set is an unordered collection of unique and unhashable objects. So, tuples, lists and dictionaries, etc. can be members of a set. set is mutable so, can add/remove elements to/from the set. set can't allow elements to be replaced create a set \u00b6 unique_numbers = { 1 , 2 , 3 , 4 } names = set ([ \"Anji\" , \"Smita\" ]) set - no duplicate elements \u00b6 duplicates = [ 1 , 2 , 3 , 4 , 5 , 5 , 4 , 3 , 2 , 6 ] unique = set ( duplicates ) print ( unique ) # Output: {1, 2, 3, 4, 5, 6} add element to set \u00b6 use method set.add() to add element to set. names = { \"John\" , \"Jenny\" , \"Lilly\" } names . add ( \"Anji\" ) print ( names ) # Output: {'Anji', 'Lilly', 'Jenny', 'John'} remove element from set \u00b6 use method set.remove() to remove element from set. it raises an error if element doesn't exist. names = { \"John\" , \"Jenny\" , \"Lilly\" } names . remove ( \"Jenny\" ) print ( names ) # Output: {'Lilly', 'John'} use method set.discard() to remove element from set unlike set.remove() it didn't throw an error. names = { \"John\" , \"Jenny\" , \"Lilly\" } names . discard ( \"Jenny\" ) names . discard ( \"Anji\" ) print ( names ) # Output: {'Lilly', 'John'} set - for loop \u00b6 fruits = { \"apple\" , \"banana\" , \"cherry\" } for fruit in fruits : print ( fruit ) # Output: # cherry # apple # banana check if element exist in set \u00b6 use in operator to check if element exist fruits = { \"apple\" , \"banana\" , \"cherry\" } print ( \"apple\" in fruits ) # Output: True check if element doesn't exist in set \u00b6 use not in operator to check if element does not exist fruits = { \"apple\" , \"banana\" , \"cherry\" } print ( \"apple\" not in fruits ) # Output: True update set with any iterable \u00b6 use method set.update() to update set with any iterable like list , tuple , set , etc. s1 = { 1 , 2 , 3 } s2 = { 4 , 5 , 6 } s1 . update ( s2 ) print ( s1 ) # Output: {1, 2, 3, 4, 5, 6} s1 . update ([ 7 , 8 , 9 ]) print ( s1 ) # Output: {1, 2, 3, 4, 5, 6, 7, 8, 9} remove random element from set \u00b6 use set.pop() to remove random element numbers = { 1 , 2 , 3 , 4 , 5 , 6 } numbers . pop () print ( numbers ) # Output: {2, 3, 4, 5, 6} find set difference \u00b6 use set.difference() method or - operator. mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } diff = mammals - fliers print ( diff ) # Output: {'Lion', 'Deer'} print ( mammals . difference ( fliers )) # Output: {'Lion', 'Deer'} find set symmetric difference \u00b6 it can be done in two ways can use ^ operator or method set1.symmetric_difference(set2) mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } diff = mammals ^ fliers print ( diff ) # Output: {'Deer', 'Eagle', 'Lion', 'Parrot'} print ( mammals . symmetric_difference ( fliers )) # Output: {'Deer', 'Eagle', 'Lion', 'Parrot'} find union of sets \u00b6 use | operator or method set1.union(iterable) iterable can be a list , tuple , set , etc. mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } union = mammals | fliers print ( union ) # Output: {'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'} print ( mammals . union ( fliers )) # Output: {'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'} find intersection of sets \u00b6 use & operator or method set1.intersection(iterable) iterable can be a list , tuple , set , etc. mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } common = mammals & fliers print ( common ) # Output: {'Bat'} print ( mammals . intersection ( fliers )) # Output: {'Bat'} check if sets are disjoint \u00b6 use method set.isdisjoint(iterable) iterable can be a list , tuple , set , etc mammals = { \"Lion\" , \"Deer\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } is_disjoint = mammals . isdisjoint ( fliers ) print ( is_disjoint ) # Output: True check if set is subset of other set \u00b6 use method set.issubset(iterable) iterable can be a list , tuple , set , etc. s1 = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } s2 = [ 1 , 2 ] print ( s2 . issubset ( s1 )) # Output: True check if set is superset of other set \u00b6 use method set.issuperset(iterable) s1 = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } s2 = ( 1 , 2 ) print ( s1 . issuperset ( s2 )) # Output: True using operators in and not in with sets \u00b6 s = { 1 , 2 , 3 , 4 } print ( \"a\" in s ) # Output: False print ( \"a\" not in s ) # Output: True set methods \u00b6 Method Description add() Adds an element to the set clear() Removes all the elements from the set copy() Returns a copy of the set difference() Returns a set containing the difference between two or more sets difference_update() Removes the items in this set that are also included in another, specified set discard() Remove the specified item intersection() Returns a set, that is the intersection of two other sets intersection_update() Removes the items in this set that are not present in other, specified set(s) isdisjoint() Returns whether two sets have a intersection or not issubset() Returns whether another set contains this set or not issuperset() Returns whether this set contains another set or not pop() Removes an element from the set remove() Removes the specified element symmetric_difference() Returns a set with the symmetric differences of two sets symmetric_difference_update() Inserts the symmetric differences from this set and another union() Return a set containing the union of sets update() Update the set with the union of this set and others Find more information about sets at python official docs References \u00b6 https://docs.python.org/3/tutorial/datastructures.html#sets https://docs.python.org/3/library/stdtypes.html#set","title":"Python sets"},{"location":"course/python/sets/#create-a-set","text":"unique_numbers = { 1 , 2 , 3 , 4 } names = set ([ \"Anji\" , \"Smita\" ])","title":"create a set"},{"location":"course/python/sets/#set-no-duplicate-elements","text":"duplicates = [ 1 , 2 , 3 , 4 , 5 , 5 , 4 , 3 , 2 , 6 ] unique = set ( duplicates ) print ( unique ) # Output: {1, 2, 3, 4, 5, 6}","title":"set - no duplicate elements"},{"location":"course/python/sets/#add-element-to-set","text":"use method set.add() to add element to set. names = { \"John\" , \"Jenny\" , \"Lilly\" } names . add ( \"Anji\" ) print ( names ) # Output: {'Anji', 'Lilly', 'Jenny', 'John'}","title":"add element to set"},{"location":"course/python/sets/#remove-element-from-set","text":"use method set.remove() to remove element from set. it raises an error if element doesn't exist. names = { \"John\" , \"Jenny\" , \"Lilly\" } names . remove ( \"Jenny\" ) print ( names ) # Output: {'Lilly', 'John'} use method set.discard() to remove element from set unlike set.remove() it didn't throw an error. names = { \"John\" , \"Jenny\" , \"Lilly\" } names . discard ( \"Jenny\" ) names . discard ( \"Anji\" ) print ( names ) # Output: {'Lilly', 'John'}","title":"remove element from set"},{"location":"course/python/sets/#set-for-loop","text":"fruits = { \"apple\" , \"banana\" , \"cherry\" } for fruit in fruits : print ( fruit ) # Output: # cherry # apple # banana","title":"set - for loop"},{"location":"course/python/sets/#check-if-element-exist-in-set","text":"use in operator to check if element exist fruits = { \"apple\" , \"banana\" , \"cherry\" } print ( \"apple\" in fruits ) # Output: True","title":"check if element exist in set"},{"location":"course/python/sets/#check-if-element-doesnt-exist-in-set","text":"use not in operator to check if element does not exist fruits = { \"apple\" , \"banana\" , \"cherry\" } print ( \"apple\" not in fruits ) # Output: True","title":"check if element doesn't exist in set"},{"location":"course/python/sets/#update-set-with-any-iterable","text":"use method set.update() to update set with any iterable like list , tuple , set , etc. s1 = { 1 , 2 , 3 } s2 = { 4 , 5 , 6 } s1 . update ( s2 ) print ( s1 ) # Output: {1, 2, 3, 4, 5, 6} s1 . update ([ 7 , 8 , 9 ]) print ( s1 ) # Output: {1, 2, 3, 4, 5, 6, 7, 8, 9}","title":"update set with any iterable"},{"location":"course/python/sets/#remove-random-element-from-set","text":"use set.pop() to remove random element numbers = { 1 , 2 , 3 , 4 , 5 , 6 } numbers . pop () print ( numbers ) # Output: {2, 3, 4, 5, 6}","title":"remove random element from set"},{"location":"course/python/sets/#find-set-difference","text":"use set.difference() method or - operator. mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } diff = mammals - fliers print ( diff ) # Output: {'Lion', 'Deer'} print ( mammals . difference ( fliers )) # Output: {'Lion', 'Deer'}","title":"find set difference"},{"location":"course/python/sets/#find-set-symmetric-difference","text":"it can be done in two ways can use ^ operator or method set1.symmetric_difference(set2) mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } diff = mammals ^ fliers print ( diff ) # Output: {'Deer', 'Eagle', 'Lion', 'Parrot'} print ( mammals . symmetric_difference ( fliers )) # Output: {'Deer', 'Eagle', 'Lion', 'Parrot'}","title":"find set symmetric difference"},{"location":"course/python/sets/#find-union-of-sets","text":"use | operator or method set1.union(iterable) iterable can be a list , tuple , set , etc. mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } union = mammals | fliers print ( union ) # Output: {'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'} print ( mammals . union ( fliers )) # Output: {'Lion', 'Deer', 'Bat', 'Eagle', 'Parrot'}","title":"find union of sets"},{"location":"course/python/sets/#find-intersection-of-sets","text":"use & operator or method set1.intersection(iterable) iterable can be a list , tuple , set , etc. mammals = { \"Lion\" , \"Deer\" , \"Bat\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } common = mammals & fliers print ( common ) # Output: {'Bat'} print ( mammals . intersection ( fliers )) # Output: {'Bat'}","title":"find intersection of sets"},{"location":"course/python/sets/#check-if-sets-are-disjoint","text":"use method set.isdisjoint(iterable) iterable can be a list , tuple , set , etc mammals = { \"Lion\" , \"Deer\" } fliers = { \"Parrot\" , \"Eagle\" , \"Bat\" } is_disjoint = mammals . isdisjoint ( fliers ) print ( is_disjoint ) # Output: True","title":"check if sets are disjoint"},{"location":"course/python/sets/#check-if-set-is-subset-of-other-set","text":"use method set.issubset(iterable) iterable can be a list , tuple , set , etc. s1 = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } s2 = [ 1 , 2 ] print ( s2 . issubset ( s1 )) # Output: True","title":"check if set is subset of other set"},{"location":"course/python/sets/#check-if-set-is-superset-of-other-set","text":"use method set.issuperset(iterable) s1 = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } s2 = ( 1 , 2 ) print ( s1 . issuperset ( s2 )) # Output: True","title":"check if set is superset of other set"},{"location":"course/python/sets/#using-operators-in-and-not-in-with-sets","text":"s = { 1 , 2 , 3 , 4 } print ( \"a\" in s ) # Output: False print ( \"a\" not in s ) # Output: True","title":"using operators in and not in with sets"},{"location":"course/python/sets/#set-methods","text":"Method Description add() Adds an element to the set clear() Removes all the elements from the set copy() Returns a copy of the set difference() Returns a set containing the difference between two or more sets difference_update() Removes the items in this set that are also included in another, specified set discard() Remove the specified item intersection() Returns a set, that is the intersection of two other sets intersection_update() Removes the items in this set that are not present in other, specified set(s) isdisjoint() Returns whether two sets have a intersection or not issubset() Returns whether another set contains this set or not issuperset() Returns whether this set contains another set or not pop() Removes an element from the set remove() Removes the specified element symmetric_difference() Returns a set with the symmetric differences of two sets symmetric_difference_update() Inserts the symmetric differences from this set and another union() Return a set containing the union of sets update() Update the set with the union of this set and others Find more information about sets at python official docs","title":"set methods"},{"location":"course/python/sets/#references","text":"https://docs.python.org/3/tutorial/datastructures.html#sets https://docs.python.org/3/library/stdtypes.html#set","title":"References"},{"location":"course/python/statistics/","text":"Python has a built-in module that you can use to calculate mathematical statistics of numeric data. Prerequisite \u00b6 We need to have basic understanding of statistics. https://www.statisticshowto.com/probability-and-statistics/statistics-definitions/ mean() \u00b6 Arithmetic mean (\"average\") of data. from statistics import mean print ( mean ([ 1 , 2 , 3 , 4 , 4 ])) # output: 2.8 print ( mean ([ - 1.0 , 2.5 , 3.25 , 5.75 ])) # output: 2.625 fmean() \u00b6 Convert data to floats and compute the arithmetic mean. This runs faster than the mean() function and it always returns a float. If the input dataset is empty, it raises a StatisticsError. from statistics import fmean print ( fmean ([ 3.5 , 4.0 , 5.25 ])) # output: 4.25 geometric_mean() \u00b6 Convert data to floats and compute the geometric mean. Raises a StatisticsError if the input dataset is empty, if it contains a zero, or if it contains a negative value. from statistics import geometric_mean print ( geometric_mean ([ 54 , 24 , 36 ])) # output: 36.000000000000014 harmonic_mean() \u00b6 Return the harmonic mean of data. It can be used for averaging ratios or rates from statistics import harmonic_mean print ( harmonic_mean ([ 40 , 60 ])) # output: 48.0 median() \u00b6 Return the median (middle value) of numeric data. from statistics import median print ( median ([ 1 , 3 , 5 ])) # output: 3 print ( median ([ 1 , 3 , 5 , 7 ])) # output: 4.0 median_low() \u00b6 Return the low median of numeric data. from statistics import median_low print ( median_low ([ 1 , 3 , 5 ])) # output: 3 print ( median_low ([ 1 , 3 , 5 , 7 ])) # output: 3 median_high() \u00b6 Return the high median of data. from statistics import median_high print ( median_high ([ 1 , 3 , 5 ])) # output: 3 print ( median_high ([ 1 , 3 , 5 , 7 ])) # output: 5 median_grouped() \u00b6 Return the 50 th percentile (median) of grouped continuous data. from statistics import median_grouped print ( median_grouped ([ 1 , 2 , 2 , 3 , 4 , 4 , 4 , 4 , 4 , 5 ])) # output: 3.7 print ( median_grouped ([ 52 , 52 , 53 , 54 ])) # output: 52.5 mode() \u00b6 Return the most common data point from discrete or nominal data. from statistics import mode print ( mode ([ 1 , 2 , 2 , 3 , 4 , 4 , 4 , 4 , 4 , 5 ])) # output: 4 print ( mode ([ 52 , 52 , 53 , 54 ])) # output: 52 multimode() \u00b6 from statistics import multimode print ( mode ( \"aabbbbbbbbcc\" )) # output: ['b'] print ( multimode ( 'aabbbbccddddeeffffgg' )) # output: ['b', 'd', 'f'] quantiles() \u00b6 Divide data into n continuous intervals with equal probability. from statistics import quantiles data = [ 105 , 129 , 87 , 86 , 111 , 111 , 89 , 81 , 108 , 92 , 110 , 100 , 75 , 105 , 103 , 109 , 76 , 119 , 99 , 91 , 103 , 129 , 106 , 101 , 84 , 111 , 74 , 87 , 86 , 103 , 103 , 106 , 86 , 111 , 75 , 87 , 102 , 121 , 111 , 88 , 89 , 101 , 106 , 95 , 103 , 107 , 101 , 81 , 109 , 104 ] print ([ round ( q , 1 ) for q in quantiles ( data , n = 10 )]) # output: [81.0, 86.2, 89.0, 99.4, 102.5, 103.6, 106.0, 109.8, 111.0] pstdev() \u00b6 Return the square root of the population variance. from statistics import pstdev print ( pstdev ([ 1.5 , 2.5 , 2.5 , 2.75 , 3.25 , 4.75 ])) # output: 0.986893273527251 pvariance() \u00b6 Return the population variance of data from statistics import pvariance data = [ 0.0 , 0.25 , 0.25 , 1.25 , 1.5 , 1.75 , 2.75 , 3.25 ] print ( pvariance ( data )) # output: 1.25 stdev() \u00b6 Return the square root of the sample variance. from statistics import stdev print ( stdev ([ 1.5 , 2.5 , 2.5 , 2.75 , 3.25 , 4.75 ])) # output: 1.0810874155219827 variance() \u00b6 Return the sample variance of data. from statistics import variance data = [ 2.75 , 1.75 , 1.25 , 0.25 , 0.5 , 1.25 , 3.5 ] print ( variance ( data )) # output: 1.3720238095238095 covariance() \u00b6 Return the sample covariance of two inputs x and y . Covariance is a measure of the joint variability of two inputs. from statistics import covariance x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] y = [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ] print ( covariance ( x , y )) # output: 0.75 correlation() \u00b6 Return the Pearson's correlation coefficient for two inputs. Pearson's correlation coefficient r takes values between -1 and +1. It measures the strength and direction of the linear relationship, where +1 means very strong, positive linear relationship, -1 very strong, negative linear relationship, and 0 no linear relationship. from statistics import correlation x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] y = [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] print ( correlation ( x , x )) # output: 1 print ( correlation ( x , y )) # output: -1 linear_regression() \u00b6 Return the slope and intercept of simple linear regression parameters estimated using ordinary least squares. Simple linear regression describes relationship between an independent variable x and a dependent variable y in terms of linear function: y = slope * x + intercept + noise where slope and intercept are the regression parameters that are estimated, and noise represents the variability of the data that was not explained by the linear regression (it is equal to the difference between predicted and actual values of the dependent variable). from statistics import NormalDist , linear_regression x = [ 1 , 2 , 3 , 4 , 5 ] noise = NormalDist () . samples ( 5 , seed = 42 ) y = [ 3 * x [ i ] + 2 + noise [ i ] for i in range ( 5 )] print ( linear_regression ( x , y )) # output: LinearRegression(slope=3.0907891417020465, intercept=1.756849704861633) References: \u00b6 https://docs.python.org/3/library/statistics.html","title":"Python statistics"},{"location":"course/python/statistics/#prerequisite","text":"We need to have basic understanding of statistics. https://www.statisticshowto.com/probability-and-statistics/statistics-definitions/","title":"Prerequisite"},{"location":"course/python/statistics/#mean","text":"Arithmetic mean (\"average\") of data. from statistics import mean print ( mean ([ 1 , 2 , 3 , 4 , 4 ])) # output: 2.8 print ( mean ([ - 1.0 , 2.5 , 3.25 , 5.75 ])) # output: 2.625","title":"mean()"},{"location":"course/python/statistics/#fmean","text":"Convert data to floats and compute the arithmetic mean. This runs faster than the mean() function and it always returns a float. If the input dataset is empty, it raises a StatisticsError. from statistics import fmean print ( fmean ([ 3.5 , 4.0 , 5.25 ])) # output: 4.25","title":"fmean()"},{"location":"course/python/statistics/#geometric_mean","text":"Convert data to floats and compute the geometric mean. Raises a StatisticsError if the input dataset is empty, if it contains a zero, or if it contains a negative value. from statistics import geometric_mean print ( geometric_mean ([ 54 , 24 , 36 ])) # output: 36.000000000000014","title":"geometric_mean()"},{"location":"course/python/statistics/#harmonic_mean","text":"Return the harmonic mean of data. It can be used for averaging ratios or rates from statistics import harmonic_mean print ( harmonic_mean ([ 40 , 60 ])) # output: 48.0","title":"harmonic_mean()"},{"location":"course/python/statistics/#median","text":"Return the median (middle value) of numeric data. from statistics import median print ( median ([ 1 , 3 , 5 ])) # output: 3 print ( median ([ 1 , 3 , 5 , 7 ])) # output: 4.0","title":"median()"},{"location":"course/python/statistics/#median_low","text":"Return the low median of numeric data. from statistics import median_low print ( median_low ([ 1 , 3 , 5 ])) # output: 3 print ( median_low ([ 1 , 3 , 5 , 7 ])) # output: 3","title":"median_low()"},{"location":"course/python/statistics/#median_high","text":"Return the high median of data. from statistics import median_high print ( median_high ([ 1 , 3 , 5 ])) # output: 3 print ( median_high ([ 1 , 3 , 5 , 7 ])) # output: 5","title":"median_high()"},{"location":"course/python/statistics/#median_grouped","text":"Return the 50 th percentile (median) of grouped continuous data. from statistics import median_grouped print ( median_grouped ([ 1 , 2 , 2 , 3 , 4 , 4 , 4 , 4 , 4 , 5 ])) # output: 3.7 print ( median_grouped ([ 52 , 52 , 53 , 54 ])) # output: 52.5","title":"median_grouped()"},{"location":"course/python/statistics/#mode","text":"Return the most common data point from discrete or nominal data. from statistics import mode print ( mode ([ 1 , 2 , 2 , 3 , 4 , 4 , 4 , 4 , 4 , 5 ])) # output: 4 print ( mode ([ 52 , 52 , 53 , 54 ])) # output: 52","title":"mode()"},{"location":"course/python/statistics/#multimode","text":"from statistics import multimode print ( mode ( \"aabbbbbbbbcc\" )) # output: ['b'] print ( multimode ( 'aabbbbccddddeeffffgg' )) # output: ['b', 'd', 'f']","title":"multimode()"},{"location":"course/python/statistics/#quantiles","text":"Divide data into n continuous intervals with equal probability. from statistics import quantiles data = [ 105 , 129 , 87 , 86 , 111 , 111 , 89 , 81 , 108 , 92 , 110 , 100 , 75 , 105 , 103 , 109 , 76 , 119 , 99 , 91 , 103 , 129 , 106 , 101 , 84 , 111 , 74 , 87 , 86 , 103 , 103 , 106 , 86 , 111 , 75 , 87 , 102 , 121 , 111 , 88 , 89 , 101 , 106 , 95 , 103 , 107 , 101 , 81 , 109 , 104 ] print ([ round ( q , 1 ) for q in quantiles ( data , n = 10 )]) # output: [81.0, 86.2, 89.0, 99.4, 102.5, 103.6, 106.0, 109.8, 111.0]","title":"quantiles()"},{"location":"course/python/statistics/#pstdev","text":"Return the square root of the population variance. from statistics import pstdev print ( pstdev ([ 1.5 , 2.5 , 2.5 , 2.75 , 3.25 , 4.75 ])) # output: 0.986893273527251","title":"pstdev()"},{"location":"course/python/statistics/#pvariance","text":"Return the population variance of data from statistics import pvariance data = [ 0.0 , 0.25 , 0.25 , 1.25 , 1.5 , 1.75 , 2.75 , 3.25 ] print ( pvariance ( data )) # output: 1.25","title":"pvariance()"},{"location":"course/python/statistics/#stdev","text":"Return the square root of the sample variance. from statistics import stdev print ( stdev ([ 1.5 , 2.5 , 2.5 , 2.75 , 3.25 , 4.75 ])) # output: 1.0810874155219827","title":"stdev()"},{"location":"course/python/statistics/#variance","text":"Return the sample variance of data. from statistics import variance data = [ 2.75 , 1.75 , 1.25 , 0.25 , 0.5 , 1.25 , 3.5 ] print ( variance ( data )) # output: 1.3720238095238095","title":"variance()"},{"location":"course/python/statistics/#covariance","text":"Return the sample covariance of two inputs x and y . Covariance is a measure of the joint variability of two inputs. from statistics import covariance x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] y = [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ] print ( covariance ( x , y )) # output: 0.75","title":"covariance()"},{"location":"course/python/statistics/#correlation","text":"Return the Pearson's correlation coefficient for two inputs. Pearson's correlation coefficient r takes values between -1 and +1. It measures the strength and direction of the linear relationship, where +1 means very strong, positive linear relationship, -1 very strong, negative linear relationship, and 0 no linear relationship. from statistics import correlation x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] y = [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] print ( correlation ( x , x )) # output: 1 print ( correlation ( x , y )) # output: -1","title":"correlation()"},{"location":"course/python/statistics/#linear_regression","text":"Return the slope and intercept of simple linear regression parameters estimated using ordinary least squares. Simple linear regression describes relationship between an independent variable x and a dependent variable y in terms of linear function: y = slope * x + intercept + noise where slope and intercept are the regression parameters that are estimated, and noise represents the variability of the data that was not explained by the linear regression (it is equal to the difference between predicted and actual values of the dependent variable). from statistics import NormalDist , linear_regression x = [ 1 , 2 , 3 , 4 , 5 ] noise = NormalDist () . samples ( 5 , seed = 42 ) y = [ 3 * x [ i ] + 2 + noise [ i ] for i in range ( 5 )] print ( linear_regression ( x , y )) # output: LinearRegression(slope=3.0907891417020465, intercept=1.756849704861633)","title":"linear_regression()"},{"location":"course/python/statistics/#references","text":"https://docs.python.org/3/library/statistics.html","title":"References:"},{"location":"course/python/strings/","text":"Strings are nothing but a set of characters. Strings in python are surrounded by either single quotation ( ' ) marks, or double quotation marks ( \" ). Strings are immutable(i.e we can't update a part of the string) first_name = 'Anjaneyulu' last_name = \"B\" multiline strings \u00b6 we can create multiline strings using triple quotes. description = ''' An apple is an edible fruit produced by an apple tree. Apple trees are cultivated worldwide and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. ''' print ( description ) using strings as arrays \u00b6 In python strings supports indexing. We can access string characters with index but can't be updated by the index number. name = \"Anji\" print ( name [ 0 ]) # Output: A iterate string with for loop \u00b6 we can iterate through strings for x in \"apple\" : print ( x ) find string length \u00b6 we can find string length with len function. a = \"Python is Awesome\" print ( len ( a )) # output: 17 using \" in \" operator with string \u00b6 we can use in keyword to check the substring. sentense = \"Apple is awesome fruit\" is_substring = \"awesome\" in sentense print ( is_substring ) # Output: True using \" not in \" operator with string \u00b6 we can use not in keyword to check if the given substring not found in the given string. sentense = \"Apple is awesome fruit\" print ( \"june\" not in sentense ) # Output: True slicing a string \u00b6 we can return a range of characters by using the slice syntax. We need to specify the start and end indexes. b = \"awesome!\" print ( b [ 2 : 5 ]) # output: eso print ( b [: 5 ]) # output: aweso print ( b [ 2 :]) # output: esome! print ( b [ - 5 : - 2 ]) # output: som if start index not specified then it will consider it as 0 if end index is not specified then it will consider it as length of the string negative index is can also used in string slicing convert string to upper case \u00b6 upper method to convert the string to upper case title = \"Python is a programming language\" print ( title . upper ()) # output: PYTHON IS A PROGRAMMING LANGUAGE convert string to lower case \u00b6 lower method to convert the string to upper case title = \"Python is a programming language\" print ( title . lower ()) # output: python is a programming language remove white space in the string \u00b6 strip to remove the white space from start and end of the string. name = \" John \" print ( name . strip ()) # Output: John replace part of the string \u00b6 replace to replace a substring with another string s = \"Jython is Awesome\" print ( s . replace ( \"J\" , \"P\" )) # Output: Python is Awesome split string based on a seperator \u00b6 split method is used to split the string it returns a list by splitting the string based on the seperator default seperator is space title = \"Google is a search engine\" print ( title . split ()) # Output: ['Google', 'is', 'a', 'search', 'engine'] concatenate strings \u00b6 combine two or more strings in to one first_name = \"Anji\" last_name = \"B\" full_name = first_name + last_name print ( full_name ) # Output: AnjiB format strings with place holders \u00b6 format method is used to format the string. game = \"cricket\" s = \"I love to play {} \" print ( s . format ( game )) # Output: I love to play cricket we can use positions for place holders string = \"I placed an order with {2} items for {0} rupees. Exach item costs Rs. {1} .\" print ( string . format ( 100 , \"50\" , \"three\" )) # Output: I placed an order with three items for 100 rupees. Exach item costs Rs.50. we can also use names as place holders string = \"I placed an order with {item_count} items for {total} rupees. Exach item costs Rs. {item_cost} .\" print ( string . format ( item_count = \"three\" , total = 100 , item_cost = \"50\" )) # Output: I placed an order with three items for 100 rupees. Exach item costs Rs.50. Escape characters in string \u00b6 we use \\ to escape characters in the string. s = \"Software engineering is a \\\" difficult \\\" job to do.\" print ( s ) # Output: Software engineering is a \"difficult\" job to do. Find some of the escape characters below Code Result \\' Single Quote \\\\ Backslash \\n New Line \\r Carriage Return \\t Tab \\b Backspace \\f Form Feed \\ooo Octal value \\xhh Hex value string methods \u00b6 Method Description capitalize() Converts the first character to upper case casefold() Converts string into lower case center() Returns a centered string count() Returns the number of times a specified value occurs in a string encode() Returns an encoded version of the string endswith() Returns true if the string ends with the specified value expandtabs() Sets the tab size of the string find() Searches the string for a specified value and returns the position of where it was found format() Formats specified values in a string format_map() Formats specified values in a string index() Searches the string for a specified value and returns the position of where it was found isalnum() Returns True if all characters in the string are alphanumeric isalpha() Returns True if all characters in the string are in the alphabet isdecimal() Returns True if all characters in the string are decimals isdigit() Returns True if all characters in the string are digits isidentifier() Returns True if the string is an identifier islower() Returns True if all characters in the string are lower case isnumeric() Returns True if all characters in the string are numeric isprintable() Returns True if all characters in the string are printable isspace() Returns True if all characters in the string are whitespaces istitle() Returns True if the string follows the rules of a title isupper() Returns True if all characters in the string are upper case join() Joins the elements of an iterable to the end of the string ljust() Returns a left justified version of the string lower() Converts a string into lower case lstrip() Returns a left trim version of the string maketrans() Returns a translation table to be used in translations partition() Returns a tuple where the string is parted into three parts replace() Returns a string where a specified value is replaced with a specified value rfind() Searches the string for a specified value and returns the last position of where it was found rindex() Searches the string for a specified value and returns the last position of where it was found rjust() Returns a right justified version of the string rpartition() Returns a tuple where the string is parted into three parts rsplit() Splits the string at the specified separator, and returns a list rstrip() Returns a right trim version of the string split() Splits the string at the specified separator, and returns a list splitlines() Splits the string at line breaks and returns a list startswith() Returns true if the string starts with the specified value strip() Returns a trimmed version of the string swapcase() Swaps cases, lower case becomes upper case and vice versa title() Converts the first character of each word to upper case translate() Returns a translated string upper() Converts a string into upper case zfill() Fills the string with a specified number of 0 values at the beginning References \u00b6 https://docs.python.org/3/library/stdtypes.html https://docs.python.org/3/reference/lexical_analysis.html","title":"Python strings"},{"location":"course/python/strings/#multiline-strings","text":"we can create multiline strings using triple quotes. description = ''' An apple is an edible fruit produced by an apple tree. Apple trees are cultivated worldwide and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. ''' print ( description )","title":"multiline strings"},{"location":"course/python/strings/#using-strings-as-arrays","text":"In python strings supports indexing. We can access string characters with index but can't be updated by the index number. name = \"Anji\" print ( name [ 0 ]) # Output: A","title":"using strings as arrays"},{"location":"course/python/strings/#iterate-string-with-for-loop","text":"we can iterate through strings for x in \"apple\" : print ( x )","title":"iterate string with for loop"},{"location":"course/python/strings/#find-string-length","text":"we can find string length with len function. a = \"Python is Awesome\" print ( len ( a )) # output: 17","title":"find string length"},{"location":"course/python/strings/#using-in-operator-with-string","text":"we can use in keyword to check the substring. sentense = \"Apple is awesome fruit\" is_substring = \"awesome\" in sentense print ( is_substring ) # Output: True","title":"using \"in\" operator with string"},{"location":"course/python/strings/#using-not-in-operator-with-string","text":"we can use not in keyword to check if the given substring not found in the given string. sentense = \"Apple is awesome fruit\" print ( \"june\" not in sentense ) # Output: True","title":"using \"not in\" operator with string"},{"location":"course/python/strings/#slicing-a-string","text":"we can return a range of characters by using the slice syntax. We need to specify the start and end indexes. b = \"awesome!\" print ( b [ 2 : 5 ]) # output: eso print ( b [: 5 ]) # output: aweso print ( b [ 2 :]) # output: esome! print ( b [ - 5 : - 2 ]) # output: som if start index not specified then it will consider it as 0 if end index is not specified then it will consider it as length of the string negative index is can also used in string slicing","title":"slicing a string"},{"location":"course/python/strings/#convert-string-to-upper-case","text":"upper method to convert the string to upper case title = \"Python is a programming language\" print ( title . upper ()) # output: PYTHON IS A PROGRAMMING LANGUAGE","title":"convert string to upper case"},{"location":"course/python/strings/#convert-string-to-lower-case","text":"lower method to convert the string to upper case title = \"Python is a programming language\" print ( title . lower ()) # output: python is a programming language","title":"convert string to lower case"},{"location":"course/python/strings/#remove-white-space-in-the-string","text":"strip to remove the white space from start and end of the string. name = \" John \" print ( name . strip ()) # Output: John","title":"remove white space in the string"},{"location":"course/python/strings/#replace-part-of-the-string","text":"replace to replace a substring with another string s = \"Jython is Awesome\" print ( s . replace ( \"J\" , \"P\" )) # Output: Python is Awesome","title":"replace part of the string"},{"location":"course/python/strings/#split-string-based-on-a-seperator","text":"split method is used to split the string it returns a list by splitting the string based on the seperator default seperator is space title = \"Google is a search engine\" print ( title . split ()) # Output: ['Google', 'is', 'a', 'search', 'engine']","title":"split string based on a seperator"},{"location":"course/python/strings/#concatenate-strings","text":"combine two or more strings in to one first_name = \"Anji\" last_name = \"B\" full_name = first_name + last_name print ( full_name ) # Output: AnjiB","title":"concatenate strings"},{"location":"course/python/strings/#format-strings-with-place-holders","text":"format method is used to format the string. game = \"cricket\" s = \"I love to play {} \" print ( s . format ( game )) # Output: I love to play cricket we can use positions for place holders string = \"I placed an order with {2} items for {0} rupees. Exach item costs Rs. {1} .\" print ( string . format ( 100 , \"50\" , \"three\" )) # Output: I placed an order with three items for 100 rupees. Exach item costs Rs.50. we can also use names as place holders string = \"I placed an order with {item_count} items for {total} rupees. Exach item costs Rs. {item_cost} .\" print ( string . format ( item_count = \"three\" , total = 100 , item_cost = \"50\" )) # Output: I placed an order with three items for 100 rupees. Exach item costs Rs.50.","title":"format strings with place holders"},{"location":"course/python/strings/#escape-characters-in-string","text":"we use \\ to escape characters in the string. s = \"Software engineering is a \\\" difficult \\\" job to do.\" print ( s ) # Output: Software engineering is a \"difficult\" job to do. Find some of the escape characters below Code Result \\' Single Quote \\\\ Backslash \\n New Line \\r Carriage Return \\t Tab \\b Backspace \\f Form Feed \\ooo Octal value \\xhh Hex value","title":"Escape characters in string"},{"location":"course/python/strings/#string-methods","text":"Method Description capitalize() Converts the first character to upper case casefold() Converts string into lower case center() Returns a centered string count() Returns the number of times a specified value occurs in a string encode() Returns an encoded version of the string endswith() Returns true if the string ends with the specified value expandtabs() Sets the tab size of the string find() Searches the string for a specified value and returns the position of where it was found format() Formats specified values in a string format_map() Formats specified values in a string index() Searches the string for a specified value and returns the position of where it was found isalnum() Returns True if all characters in the string are alphanumeric isalpha() Returns True if all characters in the string are in the alphabet isdecimal() Returns True if all characters in the string are decimals isdigit() Returns True if all characters in the string are digits isidentifier() Returns True if the string is an identifier islower() Returns True if all characters in the string are lower case isnumeric() Returns True if all characters in the string are numeric isprintable() Returns True if all characters in the string are printable isspace() Returns True if all characters in the string are whitespaces istitle() Returns True if the string follows the rules of a title isupper() Returns True if all characters in the string are upper case join() Joins the elements of an iterable to the end of the string ljust() Returns a left justified version of the string lower() Converts a string into lower case lstrip() Returns a left trim version of the string maketrans() Returns a translation table to be used in translations partition() Returns a tuple where the string is parted into three parts replace() Returns a string where a specified value is replaced with a specified value rfind() Searches the string for a specified value and returns the last position of where it was found rindex() Searches the string for a specified value and returns the last position of where it was found rjust() Returns a right justified version of the string rpartition() Returns a tuple where the string is parted into three parts rsplit() Splits the string at the specified separator, and returns a list rstrip() Returns a right trim version of the string split() Splits the string at the specified separator, and returns a list splitlines() Splits the string at line breaks and returns a list startswith() Returns true if the string starts with the specified value strip() Returns a trimmed version of the string swapcase() Swaps cases, lower case becomes upper case and vice versa title() Converts the first character of each word to upper case translate() Returns a translated string upper() Converts a string into upper case zfill() Fills the string with a specified number of 0 values at the beginning","title":"string methods"},{"location":"course/python/strings/#references","text":"https://docs.python.org/3/library/stdtypes.html https://docs.python.org/3/reference/lexical_analysis.html","title":"References"},{"location":"course/python/tuples/","text":"Tuple is a ordered sequential data structure in python. Tuple is immutable hence can't be modified once created. Tuple stores the data in a sequential manner. Tuple items can be accessed with an index. The index starts from 0 to length of tuple - 1 Tuple also supports negative indexing (i.e -1, -2, etc). create a tuple for fruits \u00b6 fruits = ( \"apple\" , \"apple\" , \"banana\" , \"cherry\" ) print ( fruits ) # Output: ('apple', 'apple', 'banana', 'cherry') tuples can store different data types \u00b6 elements = ( \"apple\" , 100 , 3.5 , { \"name\" : \"Anji\" }) print ( elements ) # Output: ('apple', 100, 3.5, {'name': 'Anji'}) find length of a tuple \u00b6 fruits = ( \"apple\" , \"banana\" , \"cherry\" ) print ( len ( fruits )) # Output: 3 create tuple with one item \u00b6 one_item = ( \"hello\" ,) print ( one_item ) # Output: ('hello',) iterate through tuple with for loop \u00b6 fruits = ( \"apple\" , \"banana\" , \"cherry\" ) for fruit in fruits : print ( fruit ) # Output: # apple # banana # cherry concatenate two tuples with \"+\" operator \u00b6 t1 = ( 1 , 2 , 3 ) t2 = ( 4 , 5 , 6 ) t3 = t1 + t2 print ( t3 ) # Output: (1, 2, 3, 4, 5, 6) slicing a tuple \u00b6 slice syntax: tuple[start : stop : step] default start is 0 default end is length of tuple - 1 t = ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) t1 = t [ 0 : 5 ] print ( t1 ) # Output: (1, 2, 3, 4, 5) t2 = t [ 5 :] print ( t2 ) # Output: (6, 7, 8, 9, 10) t3 = t [ 1 : 8 : 2 ] # Output: (2, 4, 6, 8) convert other iterable data type to tuple \u00b6 items = [ 1 , 2 , 3 , 4 ] print ( type ( items )) # Output: <class 'list'> t1 = tuple ( items ) print ( type ( t1 )) # Output: <class 'tuple'> data = { \"one\" : 1 , \"two\" : 2 } t2 = tuple ( data ) print ( t2 ) # Output: ('one', 'two') print ( type ( t2 )) # Output: <class 'tuple'> count an element in tuple \u00b6 t = ( 1 , 2 , 3 , 4 , 5 , 6 , 3 , 10 , 6 ) element = 3 print ( t . count ( element )) # Output: 2 get index of an element in tuple \u00b6 syntax: tuple.index(element, start_index, end_index) default start index 0 default end index length of tuple - 1 t = ( 1 , 2 , 3 , 4 , 5 , 6 , 3 , 10 , 6 ) element = 4 print ( t . index ( element )) # Output: 3 print ( t . index ( element , 2 )) # Output: 3 print ( t . index ( element , 2 , 9 )) # Output: 3 unpack a tuple \u00b6 t1 = ( 1 , 2 , 3 ) a , b , c = t1 print ( a , b , c ) # Output: 1 2 3 t2 = ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ) one , two , * other_numbers = t2 print ( one , two , other_numbers ) # Output: 1 2 [3, 4, 5, 6, 7, 8] References \u00b6 https://docs.python.org/3.1/tutorial/datastructures.html#tuples-and-sequences","title":"Python tuples"},{"location":"course/python/tuples/#create-a-tuple-for-fruits","text":"fruits = ( \"apple\" , \"apple\" , \"banana\" , \"cherry\" ) print ( fruits ) # Output: ('apple', 'apple', 'banana', 'cherry')","title":"create a tuple for fruits"},{"location":"course/python/tuples/#tuples-can-store-different-data-types","text":"elements = ( \"apple\" , 100 , 3.5 , { \"name\" : \"Anji\" }) print ( elements ) # Output: ('apple', 100, 3.5, {'name': 'Anji'})","title":"tuples can store different data types"},{"location":"course/python/tuples/#find-length-of-a-tuple","text":"fruits = ( \"apple\" , \"banana\" , \"cherry\" ) print ( len ( fruits )) # Output: 3","title":"find length of a tuple"},{"location":"course/python/tuples/#create-tuple-with-one-item","text":"one_item = ( \"hello\" ,) print ( one_item ) # Output: ('hello',)","title":"create tuple with one item"},{"location":"course/python/tuples/#iterate-through-tuple-with-for-loop","text":"fruits = ( \"apple\" , \"banana\" , \"cherry\" ) for fruit in fruits : print ( fruit ) # Output: # apple # banana # cherry","title":"iterate through tuple with for loop"},{"location":"course/python/tuples/#concatenate-two-tuples-with-operator","text":"t1 = ( 1 , 2 , 3 ) t2 = ( 4 , 5 , 6 ) t3 = t1 + t2 print ( t3 ) # Output: (1, 2, 3, 4, 5, 6)","title":"concatenate two tuples with \"+\" operator"},{"location":"course/python/tuples/#slicing-a-tuple","text":"slice syntax: tuple[start : stop : step] default start is 0 default end is length of tuple - 1 t = ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) t1 = t [ 0 : 5 ] print ( t1 ) # Output: (1, 2, 3, 4, 5) t2 = t [ 5 :] print ( t2 ) # Output: (6, 7, 8, 9, 10) t3 = t [ 1 : 8 : 2 ] # Output: (2, 4, 6, 8)","title":"slicing a tuple"},{"location":"course/python/tuples/#convert-other-iterable-data-type-to-tuple","text":"items = [ 1 , 2 , 3 , 4 ] print ( type ( items )) # Output: <class 'list'> t1 = tuple ( items ) print ( type ( t1 )) # Output: <class 'tuple'> data = { \"one\" : 1 , \"two\" : 2 } t2 = tuple ( data ) print ( t2 ) # Output: ('one', 'two') print ( type ( t2 )) # Output: <class 'tuple'>","title":"convert other iterable data type to tuple"},{"location":"course/python/tuples/#count-an-element-in-tuple","text":"t = ( 1 , 2 , 3 , 4 , 5 , 6 , 3 , 10 , 6 ) element = 3 print ( t . count ( element )) # Output: 2","title":"count an element in tuple"},{"location":"course/python/tuples/#get-index-of-an-element-in-tuple","text":"syntax: tuple.index(element, start_index, end_index) default start index 0 default end index length of tuple - 1 t = ( 1 , 2 , 3 , 4 , 5 , 6 , 3 , 10 , 6 ) element = 4 print ( t . index ( element )) # Output: 3 print ( t . index ( element , 2 )) # Output: 3 print ( t . index ( element , 2 , 9 )) # Output: 3","title":"get index of an element in tuple"},{"location":"course/python/tuples/#unpack-a-tuple","text":"t1 = ( 1 , 2 , 3 ) a , b , c = t1 print ( a , b , c ) # Output: 1 2 3 t2 = ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ) one , two , * other_numbers = t2 print ( one , two , other_numbers ) # Output: 1 2 [3, 4, 5, 6, 7, 8]","title":"unpack a tuple"},{"location":"course/python/tuples/#references","text":"https://docs.python.org/3.1/tutorial/datastructures.html#tuples-and-sequences","title":"References"},{"location":"course/python/variables-and-data-types/","text":"What is a variable ? \u00b6 Variable is a name which is used as a pointer to data that is stored on computer memory. In python, variables are called as names. message = \"Hello World\" print ( message ) # Output: Hello World my_var = \"Hi\" print ( my_var ) # Output: Hi print ( your_var ) # Output: # NameError: name 'your_var' is not defined In above python program we have stored the message \" Hello World \" in the variable message . Actually it is stored in computer memory and variable message is a pointer to the data \"Hello World\" . In above program when we print \" your_var \" we got an error. Because the the variable is not defined. Instead of naming the variable as \" message \" we can use anything like \" my_var \", \" your_var \", etc. But, it's not a good practice to give random names. We should follow some rule to name variables in python. Note: Use variable/names only if you use it more than once How to name a Variable? \u00b6 variable name should not contain a space variable name should starts with a letter or an underscore(_) special symbols ( ~ , ! , @ , # , $ , etc.) are not allowed in variable name. variable should be short and meaningful as per the data stored in variable. If we want to use multiple words in a variable we can use underscore( _ ) to separate the words. Example variables \" student_name \", \" account_number \", \" phone_num1 \", \" phone_num2 \", etc. Python is case sensitive language so, it treats the lowercase letters and upper case letters differently. For example variable \" Student \" is different from the variable \" student \". We should not use python reserved variables/names as varibles though we are allowed to use it. It is better practice to use lowercase letters instead of uppercase letters. What is a datatype in python ? \u00b6 Datatype is a classification of data which tells the computer that how the programer wants to use the data. For example the data \"hello\" is different from the data 255. Data \" hello \" is of type string and 255 is of type int in python. In python, we can classify the data types into two. Immutable data types Mutable data types Immutable data types \u00b6 Immutable data type is defined as once we declare the data of a datatype then it will not allow us to modify it. The following data types are immutable data types in python. bool - Boolean data type is_number = True is_valid = False int - Integer data type num1 = 100 num2 = 200 float - Float data type num1 = 100.0 num2 = 220.5 str - String data type first_name = \"Anji\" last_name = \"B\" tuple - Tuple data type numbers = ( 1 , 2 , 3 , 4 , 5 ) frozenset - Immutable set data type unique_numbers = frozenset ( 1 , 2 , 3 , 4 , 5 ) Mutable data types \u00b6 Mutable data typeis defined as it is a data type in which we can modify the data whenever we want. It's simply opposite to the immutable data type. The following data types are mutable data types in python. list - List data type or Array data type data = [ \"Apple\" , 123.55 , False ] set - Set data type numbers_set = { 1 , 2 , 3 , 4 , 5 } dict - Dictionary data type [i.e key value map] days = { \"Sun\" : 1 , \"Mon\" : 2 , \"Tues\" : 3 } In python we can also define our own data types as well. The above mentioned data types are some of the built-in data types provided by the python.","title":"Variables and data types"},{"location":"course/python/variables-and-data-types/#what-is-a-variable","text":"Variable is a name which is used as a pointer to data that is stored on computer memory. In python, variables are called as names. message = \"Hello World\" print ( message ) # Output: Hello World my_var = \"Hi\" print ( my_var ) # Output: Hi print ( your_var ) # Output: # NameError: name 'your_var' is not defined In above python program we have stored the message \" Hello World \" in the variable message . Actually it is stored in computer memory and variable message is a pointer to the data \"Hello World\" . In above program when we print \" your_var \" we got an error. Because the the variable is not defined. Instead of naming the variable as \" message \" we can use anything like \" my_var \", \" your_var \", etc. But, it's not a good practice to give random names. We should follow some rule to name variables in python. Note: Use variable/names only if you use it more than once","title":"What is a variable ?"},{"location":"course/python/variables-and-data-types/#how-to-name-a-variable","text":"variable name should not contain a space variable name should starts with a letter or an underscore(_) special symbols ( ~ , ! , @ , # , $ , etc.) are not allowed in variable name. variable should be short and meaningful as per the data stored in variable. If we want to use multiple words in a variable we can use underscore( _ ) to separate the words. Example variables \" student_name \", \" account_number \", \" phone_num1 \", \" phone_num2 \", etc. Python is case sensitive language so, it treats the lowercase letters and upper case letters differently. For example variable \" Student \" is different from the variable \" student \". We should not use python reserved variables/names as varibles though we are allowed to use it. It is better practice to use lowercase letters instead of uppercase letters.","title":"How to name a Variable?"},{"location":"course/python/variables-and-data-types/#what-is-a-datatype-in-python","text":"Datatype is a classification of data which tells the computer that how the programer wants to use the data. For example the data \"hello\" is different from the data 255. Data \" hello \" is of type string and 255 is of type int in python. In python, we can classify the data types into two. Immutable data types Mutable data types","title":"What is a datatype in python ?"},{"location":"course/python/variables-and-data-types/#immutable-data-types","text":"Immutable data type is defined as once we declare the data of a datatype then it will not allow us to modify it. The following data types are immutable data types in python. bool - Boolean data type is_number = True is_valid = False int - Integer data type num1 = 100 num2 = 200 float - Float data type num1 = 100.0 num2 = 220.5 str - String data type first_name = \"Anji\" last_name = \"B\" tuple - Tuple data type numbers = ( 1 , 2 , 3 , 4 , 5 ) frozenset - Immutable set data type unique_numbers = frozenset ( 1 , 2 , 3 , 4 , 5 )","title":"Immutable data types"},{"location":"course/python/variables-and-data-types/#mutable-data-types","text":"Mutable data typeis defined as it is a data type in which we can modify the data whenever we want. It's simply opposite to the immutable data type. The following data types are mutable data types in python. list - List data type or Array data type data = [ \"Apple\" , 123.55 , False ] set - Set data type numbers_set = { 1 , 2 , 3 , 4 , 5 } dict - Dictionary data type [i.e key value map] days = { \"Sun\" : 1 , \"Mon\" : 2 , \"Tues\" : 3 } In python we can also define our own data types as well. The above mentioned data types are some of the built-in data types provided by the python.","title":"Mutable data types"},{"location":"course/python/while-loop/","text":"while loop is used when we want to iterate execution of statements until a condition is met. it's a indefinite loop syntax of \"while\" loop \u00b6 while < condition > : < statement - 1 > < statement - 2 > square of numbers \u00b6 write a program to print first five numbers start = 1 while start < 5 : print ( start ) start = start + 1 # output: # 1 # 2 # 3 # 4 print left-justified right angle triangle \u00b6 start = 1 while start < 5 : print ( \"*\" * start ) start = start + 1 # output: # * # ** # *** # **** print inverted left-justified right triangle \u00b6 start = 5 while start > 0 : print ( \"*\" * start ) start = start - 1 # output: # ***** # **** # *** # ** # * loop runs forever \u00b6 while True : print ( \"Infinite Loop...\" ) using \"break\" keyword \u00b6 stop iteration of for loop when a condition is met write a program if print given numbers i.e [1,2,3,4,5]. stop program if number equal to 3. numbers = [ 1 , 2 , 3 , 4 , 5 ] index = 0 while True : number = numbers [ index ] if number == 3 : break print ( number ) index = index + 1 # output: # 1 # 2 using \"continue\" \u00b6 continue keyword used to skip the iteration. write a program to print given numbers but skip iteration if number equal to 10 numbers = [ 1 , 2 , 3 , 10 , 4 , 5 ] index = 0 while index < len ( numbers ): number = numbers [ index ] index = index + 1 if number == 10 : continue print ( number ) # output: # 1 # 2 # 3 # 4 # 5 References \u00b6 https://docs.python.org/3/tutorial/controlflow.html","title":"Python while loop"},{"location":"course/python/while-loop/#syntax-of-while-loop","text":"while < condition > : < statement - 1 > < statement - 2 >","title":"syntax of \"while\" loop"},{"location":"course/python/while-loop/#square-of-numbers","text":"write a program to print first five numbers start = 1 while start < 5 : print ( start ) start = start + 1 # output: # 1 # 2 # 3 # 4","title":"square of numbers"},{"location":"course/python/while-loop/#print-left-justified-right-angle-triangle","text":"start = 1 while start < 5 : print ( \"*\" * start ) start = start + 1 # output: # * # ** # *** # ****","title":"print left-justified right angle triangle"},{"location":"course/python/while-loop/#print-inverted-left-justified-right-triangle","text":"start = 5 while start > 0 : print ( \"*\" * start ) start = start - 1 # output: # ***** # **** # *** # ** # *","title":"print inverted left-justified right triangle"},{"location":"course/python/while-loop/#loop-runs-forever","text":"while True : print ( \"Infinite Loop...\" )","title":"loop runs forever"},{"location":"course/python/while-loop/#using-break-keyword","text":"stop iteration of for loop when a condition is met write a program if print given numbers i.e [1,2,3,4,5]. stop program if number equal to 3. numbers = [ 1 , 2 , 3 , 4 , 5 ] index = 0 while True : number = numbers [ index ] if number == 3 : break print ( number ) index = index + 1 # output: # 1 # 2","title":"using \"break\" keyword"},{"location":"course/python/while-loop/#using-continue","text":"continue keyword used to skip the iteration. write a program to print given numbers but skip iteration if number equal to 10 numbers = [ 1 , 2 , 3 , 10 , 4 , 5 ] index = 0 while index < len ( numbers ): number = numbers [ index ] index = index + 1 if number == 10 : continue print ( number ) # output: # 1 # 2 # 3 # 4 # 5","title":"using \"continue\""},{"location":"course/python/while-loop/#references","text":"https://docs.python.org/3/tutorial/controlflow.html","title":"References"},{"location":"dev-tools/","text":"Dev Tools \u00b6","title":"DevTools"},{"location":"dev-tools/#dev-tools","text":"","title":"Dev Tools"},{"location":"dev-tools/json-formatter/","text":"Input JSON: { \"firstName\": \"John\", \"lastName\": \"Smith\", \"isAlive\": true, \"age\": 25, \"company\": null, \"height_cm\": 167.64, \"address\": { \"streetAddress\": \"21 2 nd Street\", \"city\": \"New York\", \"state\": \"NY\", \"postalCode\": \"10021-3100\" }, \"phoneNumbers\": [ { \"type\": \"home\", \"number\": \"212 555-1234\" }, { \"type\": \"fax\", \"number\": \"646 555-4567\" } ] } Formatted JSON:","title":"JSON Formatter"}]}